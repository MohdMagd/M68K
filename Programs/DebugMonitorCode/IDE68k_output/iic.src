       section   code
**********************************************************************************************************
* CSTART.ASM  -  C startup-code
*
*          Initialises the system prior to running the users main() program
*
*          1) Sets up the user program stack pointer
*          2) Switches to User mode in the 68000
*          3) Enables All Interrupts 1-7 on 68000
*          4) Copies all initialised C program variables from Rom to Ram prior to running main()
*
**********************************************************************************************************
                align


**********************************************************************************************************
* The Following ORG Statement marks the address of the start of the this CStart Program
*
* The debug Monitor and Flash Load and Program routines assume your program lives here
**********************************************************************************************************
                org       $08000000
start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode

******************************************************************************************
* Set unitialised global variables to 0 at startup
******************************************************************************************
mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
                move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
                beq       go_main               if no data to copy go straight to program
Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
                subq.l    #1,d0
                bne       Zeroinit

*******************************************************************************************
* last minute initialisation before calling main
*******************************************************************************************

                move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
                clr.l     __allocp               used by malloc() in C
                move.l    #heap,__heap           pointer to free memory
go_main         jsr       _main
                bra       start

; C:\M68K\PROGRAMS\DEBUGMONITORCODE\IIC EEPROM PROGRAM FILES\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
; #include <stdio.h>
; #include <stdlib.h>
; /*********************************************************************************************
; **  RS232 port addresses
; *********************************************************************************************/
; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
; /*********************************************************************************************
; **  IIC registers
; *********************************************************************************************/
; #define PRERlo  (*(volatile unsigned char *)(0x00408000)) // Clock Prescale register lo-byte
; #define PRERhi  (*(volatile unsigned char *)(0x00408002)) // Clock Prescale register hi-byte
; #define CTR     (*(volatile unsigned char *)(0x00408004)) // Control Register
; #define TXR     (*(volatile unsigned char *)(0x00408006)) // Transmit Register
; #define RXR     (*(volatile unsigned char *)(0x00408006)) // Receive Register
; #define CR      (*(volatile unsigned char *)(0x00408008)) // Command Register
; #define SR      (*(volatile unsigned char *)(0x00408008)) // Status Register
; // Sequence Start & Stop Register Commands
; #define start           0x80    // Set STA bit              --> (1000 0000)
; #define stop            0x40    // Set STO bit              --> (0100 0000)
; // Write Command Register Commands
; #define startWrite      0x90    // set STA, WR bit          --> (1001 0000)
; #define Write           0x10    // set WR bit               --> (0001 0000)
; #define ReadIACK        0x21    // Set RD, IACK bits        --> (0010 0001)
; #define ReadNACKIACK    0x29    // Set RD, ACK, IACK bits   --> (0010 1001)
; #define stopWrite       0x50    // set STO, WR bit          --> (0101 0000)
; // Read Command Register Commands
; #define startRead       0xA8    // set STA, RD, ACK bit     --> (1010 1000)
; #define stopRead        0x41    // set STO, IACK bit        --> (0100 0001)
; /*********************************************************************************************
; **  Function protoTypes
; *********************************************************************************************/
; void SequentialBlockWrite(long address, long sizeOfBlock, char payloadByte);
; void UtilSequentialBlockWrite(long address, long endAddress, char payloadByte);
; void WritePageToChip(void);
; void WriteByteToChip(char c);
; void initiateWriteSequence(long address);
; void WaitForWriteCycle(void);
; void SequentialBlockRead(long address, long sizeOfBlock, char expectedByte);
; int utilSequentialBlockRead(long utilAddress, long utilEndAddress, char expectedByte);
; void ReadPageFromChip(void);
; char ReadByteFromChip(void);
; void initiateReadSequence(long address);
; void BlockDecode(char * writeControlByte, char * readControlByte, long address);
; void WaitForTXByte(void);
; void WaitForReceivedByte(void);
; int CheckForACK(void);
; void IIC_Init(void);
; void GenerateADCOutput(void);
; void DValueOfAInput(void);
; void delay(int seconds);
; int _getch( void )
; {
__getch:
       link      A6,#-4
; char c ;
; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
_getch_1:
       move.b    4194368,D0
       and.b     #1,D0
       cmp.b     #1,D0
       beq.s     _getch_3
       bra       _getch_1
_getch_3:
; ;
; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
       move.b    4194370,D0
       and.l     #255,D0
       and.l     #127,D0
       unlk      A6
       rts
; }
; int _putch( int c)
; {
__putch:
       link      A6,#0
; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
_putch_1:
       move.b    4194368,D0
       and.b     #2,D0
       cmp.b     #2,D0
       beq.s     _putch_3
       bra       _putch_1
_putch_3:
; ;
; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
       move.l    8(A6),D0
       and.l     #127,D0
       move.b    D0,4194370
; return c ;                                              // putchar() expects the character to be returned
       move.l    8(A6),D0
       unlk      A6
       rts
; }
; /*********************************************************************************************
; **  Write Sequential Block to EEPROM Chip
; *********************************************************************************************/
; void SequentialBlockWrite(long address, long sizeOfBlock, char payloadByte){
_SequentialBlockWrite:
       link      A6,#-4
       movem.l   D2/D3/D4/A2,-(A7)
       lea       _printf.L,A2
       move.l    8(A6),D4
; int i = 0;
       clr.l     -4(A6)
; long endAddress = (address + sizeOfBlock) - 1;
       move.l    D4,D0
       add.l     12(A6),D0
       subq.l    #1,D0
       move.l    D0,D2
; long overflowEndAddress = 0;
       clr.l     D3
; // Safety check
; if (sizeOfBlock > 0x1FFFF){
       move.l    12(A6),D0
       cmp.l     #131071,D0
       ble.s     SequentialBlockWrite_1
; printf("SequentialBlockWrite: Size of Input Data Block cannot exceed 128kBytes\r\n");
       pea       @m68kus~1_1.L
       jsr       (A2)
       addq.w    #4,A7
; return;
       bra       SequentialBlockWrite_3
SequentialBlockWrite_1:
; }
; if (address > 0x1FFFF){
       cmp.l     #131071,D4
       ble.s     SequentialBlockWrite_4
; printf("SequentialBlockWrite: Entered Address Out of Range\r\n");
       pea       @m68kus~1_2.L
       jsr       (A2)
       addq.w    #4,A7
; return;
       bra       SequentialBlockWrite_3
SequentialBlockWrite_4:
; }
; // Wrap-Around check
; if (endAddress > 0x1FFFF){
       cmp.l     #131071,D2
       ble.s     SequentialBlockWrite_6
; overflowEndAddress = endAddress - 0x20000;
       move.l    D2,D0
       sub.l     #131072,D0
       move.l    D0,D3
; endAddress = 0x1FFFF;
       move.l    #131071,D2
SequentialBlockWrite_6:
; }
; printf("Performing Sequential Block Write to EEPROM...\r\n");
       pea       @m68kus~1_3.L
       jsr       (A2)
       addq.w    #4,A7
; initiateWriteSequence(address);
       move.l    D4,-(A7)
       jsr       _initiateWriteSequence
       addq.w    #4,A7
; UtilSequentialBlockWrite(address, endAddress, payloadByte);
       move.b    19(A6),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    D2,-(A7)
       move.l    D4,-(A7)
       jsr       _UtilSequentialBlockWrite
       add.w     #12,A7
; if (overflowEndAddress){
       tst.l     D3
       beq.s     SequentialBlockWrite_8
; initiateWriteSequence(0x00000);
       clr.l     -(A7)
       jsr       _initiateWriteSequence
       addq.w    #4,A7
; UtilSequentialBlockWrite(0x00000, overflowEndAddress, payloadByte);
       move.b    19(A6),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    D3,-(A7)
       clr.l     -(A7)
       jsr       _UtilSequentialBlockWrite
       add.w     #12,A7
SequentialBlockWrite_8:
; }
; printf("Sequential Block Write Completed!\r\n\r\n");
       pea       @m68kus~1_4.L
       jsr       (A2)
       addq.w    #4,A7
; return;
SequentialBlockWrite_3:
       movem.l   (A7)+,D2/D3/D4/A2
       unlk      A6
       rts
; }
; /*********************************************************************************************
; **  Write Sequential Block to EEPROM Chip -- Utility
; *********************************************************************************************/
; void UtilSequentialBlockWrite(long address, long endAddress, char payloadByte){
_UtilSequentialBlockWrite:
       link      A6,#0
       move.l    D2,-(A7)
       move.l    8(A6),D2
; while (address <= endAddress){
UtilSequentialBlockWrite_1:
       cmp.l     12(A6),D2
       bgt       UtilSequentialBlockWrite_3
; if (address%128 != 0 || address == 0){
       move.l    D2,-(A7)
       pea       128
       jsr       LDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       tst.l     D0
       bne.s     UtilSequentialBlockWrite_6
       tst.l     D2
       bne.s     UtilSequentialBlockWrite_4
UtilSequentialBlockWrite_6:
; // Fill up a 128 byte block
; TXR = payloadByte;        
       move.b    19(A6),4227078
; CR = Write;
       move.b    #16,4227080
; WaitForTXByte();
       jsr       _WaitForTXByte
; if(!CheckForACK())
       jsr       _CheckForACK
       tst.l     D0
       bne.s     UtilSequentialBlockWrite_7
; printf("UtilSequentialBlockWrite: No ACK returned for byte at 0x%X\r\n", address);
       move.l    D2,-(A7)
       pea       @m68kus~1_5.L
       jsr       _printf
       addq.w    #8,A7
UtilSequentialBlockWrite_7:
       bra.s     UtilSequentialBlockWrite_5
UtilSequentialBlockWrite_4:
; } else {    
; // Need to write in next 128 Byte block
; CR = stop;
       move.b    #64,4227080
; WaitForWriteCycle();
       jsr       _WaitForWriteCycle
; initiateWriteSequence(address);
       move.l    D2,-(A7)
       jsr       _initiateWriteSequence
       addq.w    #4,A7
; // Write 1st Byte in new block
; TXR = payloadByte;        
       move.b    19(A6),4227078
; CR = Write;
       move.b    #16,4227080
; WaitForTXByte();
       jsr       _WaitForTXByte
UtilSequentialBlockWrite_5:
; }
; address ++;
       addq.l    #1,D2
       bra       UtilSequentialBlockWrite_1
UtilSequentialBlockWrite_3:
; }
; CR = stop;
       move.b    #64,4227080
; WaitForWriteCycle();
       jsr       _WaitForWriteCycle
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; /*********************************************************************************************
; **  Write Page to EEPROM Chip
; *********************************************************************************************/
; void WritePageToChip(void){
_WritePageToChip:
       move.l    D2,-(A7)
; int i = 0;
       clr.l     D2
; printf("Writing Page to EEPROM\r\n");
       pea       @m68kus~1_6.L
       jsr       _printf
       addq.w    #4,A7
; initiateWriteSequence(0x12000);
       pea       73728
       jsr       _initiateWriteSequence
       addq.w    #4,A7
; for(i=0; i<128; i++){
       clr.l     D2
WritePageToChip_1:
       cmp.l     #128,D2
       bge.s     WritePageToChip_3
; TXR = i;            // send 1 byte of data
       move.b    D2,4227078
; CR = Write;
       move.b    #16,4227080
; WaitForTXByte();
       jsr       _WaitForTXByte
; if(!CheckForACK())
       jsr       _CheckForACK
       tst.l     D0
       bne.s     WritePageToChip_4
; printf("No ACK returned for byte #%d\r\n", i);
       move.l    D2,-(A7)
       pea       @m68kus~1_7.L
       jsr       _printf
       addq.w    #8,A7
WritePageToChip_4:
       addq.l    #1,D2
       bra       WritePageToChip_1
WritePageToChip_3:
; }
; CR = stop;
       move.b    #64,4227080
; WaitForWriteCycle();
       jsr       _WaitForWriteCycle
       move.l    (A7)+,D2
       rts
; }
; /*********************************************************************************************
; **  Write Byte to EEPROM Chip
; *********************************************************************************************/
; void WriteByteToChip(char c){
_WriteByteToChip:
       link      A6,#0
; printf("Writing Byte to EEPROM\r\n");
       pea       @m68kus~1_8.L
       jsr       _printf
       addq.w    #4,A7
; initiateWriteSequence(0x1F000);
       pea       126976
       jsr       _initiateWriteSequence
       addq.w    #4,A7
; TXR = c;            // send 1 byte of data
       move.b    11(A6),4227078
; CR = Write;
       move.b    #16,4227080
; WaitForTXByte();
       jsr       _WaitForTXByte
; if(!CheckForACK())
       jsr       _CheckForACK
       tst.l     D0
       bne.s     WriteByteToChip_1
; printf("No ACK returned\r\n");
       pea       @m68kus~1_9.L
       jsr       _printf
       addq.w    #4,A7
WriteByteToChip_1:
; CR = stop;
       move.b    #64,4227080
; WaitForWriteCycle();
       jsr       _WaitForWriteCycle
       unlk      A6
       rts
; }
; /*********************************************************************************************
; **  Write Page to EEPROM Chip
; *********************************************************************************************/
; void initiateWriteSequence(long address){
_initiateWriteSequence:
       link      A6,#-4
       movem.l   D2/A2/A3/A4,-(A7)
       lea       _WaitForTXByte.L,A2
       lea       _printf.L,A3
       lea       _CheckForACK.L,A4
       move.l    8(A6),D2
; unsigned char writeControlByte = 0, unusedControlByte = 0;
       clr.b     -2(A6)
       clr.b     -1(A6)
; BlockDecode(&writeControlByte, &unusedControlByte, address);
       move.l    D2,-(A7)
       pea       -1(A6)
       pea       -2(A6)
       jsr       _BlockDecode
       add.w     #12,A7
; // Ensure TX is ready before sending control byte
; WaitForTXByte();
       jsr       (A2)
; TXR = writeControlByte;     // Write Control Byte (1010 0000)
       move.b    -2(A6),4227078
; CR = startWrite;            // Set STA bit, set WR bit
       move.b    #144,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     initiateWriteSequence_1
; printf("No ACK returned\r\n");
       pea       @m68kus~1_9.L
       jsr       (A3)
       addq.w    #4,A7
initiateWriteSequence_1:
; TXR = (address >> 8) & 0xFF;    // Address Byte 1
       move.l    D2,D0
       asr.l     #8,D0
       and.l     #255,D0
       move.b    D0,4227078
; CR = Write;                 // Set WR bit
       move.b    #16,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     initiateWriteSequence_3
; printf("No ACK returned\r\n");
       pea       @m68kus~1_9.L
       jsr       (A3)
       addq.w    #4,A7
initiateWriteSequence_3:
; TXR = address & 0xFF;       // Address Byte 2
       move.l    D2,D0
       and.l     #255,D0
       move.b    D0,4227078
; CR = Write;                 // Set WR bit
       move.b    #16,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     initiateWriteSequence_5
; printf("No ACK returned\r\n");
       pea       @m68kus~1_9.L
       jsr       (A3)
       addq.w    #4,A7
initiateWriteSequence_5:
; return;
       movem.l   (A7)+,D2/A2/A3/A4
       unlk      A6
       rts
; }
; /*********************************************************************************************
; ** Wait For EEPROM to complete internal Write Cycle
; *********************************************************************************************/
; void WaitForWriteCycle(void){
_WaitForWriteCycle:
; do
; {
WaitForWriteCycle_1:
; TXR = 0xA0; // Write Control Byte (1010 0000)
       move.b    #160,4227078
; CR = start;
       move.b    #128,4227080
; // printf("Waiting for Internal Write!\r\n");
; delay(1);
       pea       1
       jsr       _delay
       addq.w    #4,A7
       lea       _CheckForACK.L,A0
       move.l    A0,D0
       beq       WaitForWriteCycle_1
; } while (!CheckForACK);
; // printf("Internal Write Complete!\r\n");
; // delay(1);
; return;
       rts
; }
; /*********************************************************************************************
; **  Read Block from EEPROM flash
; *********************************************************************************************/
; void SequentialBlockRead(long address, long sizeOfBlock, char expectedByte){
_SequentialBlockRead:
       link      A6,#0
       movem.l   D2/D3/D4/A2,-(A7)
       lea       _printf.L,A2
       move.l    8(A6),D4
; long endAddress = (address + sizeOfBlock) - 1;
       move.l    D4,D0
       add.l     12(A6),D0
       subq.l    #1,D0
       move.l    D0,D2
; long overflowEndAddress = 0;
       clr.l     D3
; // Safety check
; if (sizeOfBlock > 0x1FFFF){
       move.l    12(A6),D0
       cmp.l     #131071,D0
       ble.s     SequentialBlockRead_1
; printf("SequentialBlockRead: Size of Input Data Block cannot exceed 128kBytes\r\n");
       pea       @m68kus~1_10.L
       jsr       (A2)
       addq.w    #4,A7
; return;
       bra       SequentialBlockRead_3
SequentialBlockRead_1:
; }
; if (address > 0x1FFFF){
       cmp.l     #131071,D4
       ble.s     SequentialBlockRead_4
; printf("SequentialBlockRead: Entered Address Out of Range\r\n");
       pea       @m68kus~1_11.L
       jsr       (A2)
       addq.w    #4,A7
; return;
       bra       SequentialBlockRead_3
SequentialBlockRead_4:
; }
; // Wrap-Around check
; if (endAddress > 0x1FFFF){
       cmp.l     #131071,D2
       ble.s     SequentialBlockRead_6
; overflowEndAddress = endAddress - 0x20000;
       move.l    D2,D0
       sub.l     #131072,D0
       move.l    D0,D3
; endAddress = 0x1FFFF;
       move.l    #131071,D2
SequentialBlockRead_6:
; }
; printf("Starting Sequential Block Read...\r\n");
       pea       @m68kus~1_12.L
       jsr       (A2)
       addq.w    #4,A7
; initiateReadSequence(address);
       move.l    D4,-(A7)
       jsr       _initiateReadSequence
       addq.w    #4,A7
; if(!utilSequentialBlockRead(address, endAddress, expectedByte)){
       move.b    19(A6),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    D2,-(A7)
       move.l    D4,-(A7)
       jsr       _utilSequentialBlockRead
       add.w     #12,A7
       tst.l     D0
       bne.s     SequentialBlockRead_8
; printf("Sequential Block Read Failed!\r\n");
       pea       @m68kus~1_13.L
       jsr       (A2)
       addq.w    #4,A7
; return;
       bra       SequentialBlockRead_3
SequentialBlockRead_8:
; }
; if (overflowEndAddress){
       tst.l     D3
       beq       SequentialBlockRead_12
; initiateReadSequence(0x00000);
       clr.l     -(A7)
       jsr       _initiateReadSequence
       addq.w    #4,A7
; if(!utilSequentialBlockRead(0x00000, overflowEndAddress, expectedByte)){
       move.b    19(A6),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    D3,-(A7)
       clr.l     -(A7)
       jsr       _utilSequentialBlockRead
       add.w     #12,A7
       tst.l     D0
       bne.s     SequentialBlockRead_12
; printf("Sequential Block Read Failed!\r\n");
       pea       @m68kus~1_13.L
       jsr       (A2)
       addq.w    #4,A7
; return;
       bra.s     SequentialBlockRead_3
SequentialBlockRead_12:
; }
; }
; printf("Sequential Block Read successful!\r\n");
       pea       @m68kus~1_14.L
       jsr       (A2)
       addq.w    #4,A7
SequentialBlockRead_3:
       movem.l   (A7)+,D2/D3/D4/A2
       unlk      A6
       rts
; }
; int utilSequentialBlockRead(long utilAddress, long utilEndAddress, char expectedByte){
_utilSequentialBlockRead:
       link      A6,#-4
       movem.l   D2/D3,-(A7)
       move.l    8(A6),D2
       move.l    12(A6),D3
; char receivedByte;
; while (utilAddress <= utilEndAddress){
utilSequentialBlockRead_1:
       cmp.l     D3,D2
       bgt       utilSequentialBlockRead_3
; if (utilAddress == utilEndAddress || utilAddress == 0x0FFFF)
       cmp.l     D3,D2
       beq.s     utilSequentialBlockRead_6
       cmp.l     #65535,D2
       bne.s     utilSequentialBlockRead_4
utilSequentialBlockRead_6:
; CR = ReadNACKIACK;
       move.b    #41,4227080
       bra.s     utilSequentialBlockRead_5
utilSequentialBlockRead_4:
; else CR = ReadIACK;
       move.b    #33,4227080
utilSequentialBlockRead_5:
; WaitForReceivedByte();
       jsr       _WaitForReceivedByte
; receivedByte = RXR;
       move.b    4227078,-1(A6)
; if ((utilAddress != utilEndAddress && utilAddress != 0xFFFF) && !CheckForACK())
       cmp.l     D3,D2
       beq.s     utilSequentialBlockRead_7
       cmp.l     #65535,D2
       beq.s     utilSequentialBlockRead_7
       jsr       _CheckForACK
       tst.l     D0
       bne.s     utilSequentialBlockRead_7
; printf("No ACK returned for read at address: 0x%X\r\n", utilAddress);
       move.l    D2,-(A7)
       pea       @m68kus~1_15.L
       jsr       _printf
       addq.w    #8,A7
utilSequentialBlockRead_7:
; if (receivedByte != expectedByte){
       move.b    -1(A6),D0
       cmp.b     19(A6),D0
       beq.s     utilSequentialBlockRead_9
; printf("Sequential Read Error at address: 0x%X\r\n", utilAddress);
       move.l    D2,-(A7)
       pea       @m68kus~1_16.L
       jsr       _printf
       addq.w    #8,A7
; CR = stop;
       move.b    #64,4227080
; return 0;
       clr.l     D0
       bra.s     utilSequentialBlockRead_11
utilSequentialBlockRead_9:
; }
; if (utilAddress == 0x0FFFF){ // Stop and Start Read from 2nd bank
       cmp.l     #65535,D2
       bne.s     utilSequentialBlockRead_12
; CR = stop;
       move.b    #64,4227080
; initiateReadSequence(utilAddress+1);
       move.l    D2,D1
       addq.l    #1,D1
       move.l    D1,-(A7)
       jsr       _initiateReadSequence
       addq.w    #4,A7
utilSequentialBlockRead_12:
; }
; utilAddress ++;
       addq.l    #1,D2
       bra       utilSequentialBlockRead_1
utilSequentialBlockRead_3:
; }
; CR = stop;
       move.b    #64,4227080
; return 1;
       moveq     #1,D0
utilSequentialBlockRead_11:
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
; }
; /*********************************************************************************************
; **  Read Page from EEPROM flash
; *********************************************************************************************/
; void ReadPageFromChip(void){
_ReadPageFromChip:
       link      A6,#-4
       movem.l   D2/A2,-(A7)
       lea       _printf.L,A2
; int i = 0;
       clr.l     D2
; char receivedByte;
; printf("Reading Page from EEPROM \r\n");
       pea       @m68kus~1_17.L
       jsr       (A2)
       addq.w    #4,A7
; initiateReadSequence(0x12000);
       pea       73728
       jsr       _initiateReadSequence
       addq.w    #4,A7
; for (i=0; i<128; i++){
       clr.l     D2
ReadPageFromChip_1:
       cmp.l     #128,D2
       bge       ReadPageFromChip_3
; if (i != 127)
       cmp.l     #127,D2
       beq.s     ReadPageFromChip_4
; CR = ReadIACK;
       move.b    #33,4227080
       bra.s     ReadPageFromChip_5
ReadPageFromChip_4:
; else  CR = ReadNACKIACK;
       move.b    #41,4227080
ReadPageFromChip_5:
; WaitForReceivedByte();
       jsr       _WaitForReceivedByte
; receivedByte = RXR;
       move.b    4227078,-1(A6)
; if (i != 127 && !CheckForACK())
       cmp.l     #127,D2
       beq.s     ReadPageFromChip_6
       jsr       _CheckForACK
       tst.l     D0
       bne.s     ReadPageFromChip_6
; printf("No ACK returned for byte #%d\r\n", i);
       move.l    D2,-(A7)
       pea       @m68kus~1_7.L
       jsr       (A2)
       addq.w    #8,A7
ReadPageFromChip_6:
; if (receivedByte != i){
       move.b    -1(A6),D0
       ext.w     D0
       ext.l     D0
       cmp.l     D2,D0
       beq.s     ReadPageFromChip_8
; printf("Page Read Failed at Byte #%d\r\n", i);
       move.l    D2,-(A7)
       pea       @m68kus~1_18.L
       jsr       (A2)
       addq.w    #8,A7
; CR = stop;
       move.b    #64,4227080
; return;
       bra.s     ReadPageFromChip_10
ReadPageFromChip_8:
       addq.l    #1,D2
       bra       ReadPageFromChip_1
ReadPageFromChip_3:
; }
; }
; CR = stop;
       move.b    #64,4227080
; printf("Page Read Successful\r\n");
       pea       @m68kus~1_19.L
       jsr       (A2)
       addq.w    #4,A7
ReadPageFromChip_10:
       movem.l   (A7)+,D2/A2
       unlk      A6
       rts
; }
; /*********************************************************************************************
; **  Read Byte from EEPROM flash
; *********************************************************************************************/
; char ReadByteFromChip(void){
_ReadByteFromChip:
       link      A6,#-4
; char receivedByte;
; printf("Reading Byte from EEPROM \r\n");
       pea       @m68kus~1_20.L
       jsr       _printf
       addq.w    #4,A7
; initiateReadSequence(0x1F000);
       pea       126976
       jsr       _initiateReadSequence
       addq.w    #4,A7
; CR = ReadNACKIACK;
       move.b    #41,4227080
; WaitForReceivedByte();
       jsr       _WaitForReceivedByte
; receivedByte = RXR;
       move.b    4227078,-1(A6)
; CR = stop;
       move.b    #64,4227080
; return receivedByte;
       move.b    -1(A6),D0
       unlk      A6
       rts
; }
; /*********************************************************************************************
; **  Initiate Read Command to EEPROM
; *********************************************************************************************/
; void initiateReadSequence(long address){
_initiateReadSequence:
       link      A6,#-4
       movem.l   D2/A2/A3/A4,-(A7)
       lea       _WaitForTXByte.L,A2
       lea       _printf.L,A3
       lea       _CheckForACK.L,A4
       move.l    8(A6),D2
; unsigned char writeControlByte = 0, readControlByte = 0;
       clr.b     -2(A6)
       clr.b     -1(A6)
; // Decode Address to determine bank
; BlockDecode(&writeControlByte, &readControlByte, address);
       move.l    D2,-(A7)
       pea       -1(A6)
       pea       -2(A6)
       jsr       _BlockDecode
       add.w     #12,A7
; // Ensure TX is ready before transmission
; WaitForTXByte();
       jsr       (A2)
; TXR = writeControlByte;         // Write Control Byte
       move.b    -2(A6),4227078
; CR = startWrite;                // set STA bit
       move.b    #144,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     initiateReadSequence_1
; printf("No ACK returned\r\n");
       pea       @m68kus~1_9.L
       jsr       (A3)
       addq.w    #4,A7
initiateReadSequence_1:
; TXR = (address >> 8) & 0xFF;    // Address Byte 1
       move.l    D2,D0
       asr.l     #8,D0
       and.l     #255,D0
       move.b    D0,4227078
; CR = Write;                     // set WR bit
       move.b    #16,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     initiateReadSequence_3
; printf("No ACK returned\r\n");
       pea       @m68kus~1_9.L
       jsr       (A3)
       addq.w    #4,A7
initiateReadSequence_3:
; TXR = address & 0xFF;           // Address Byte 2
       move.l    D2,D0
       and.l     #255,D0
       move.b    D0,4227078
; CR = Write;                     // set WR bit
       move.b    #16,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     initiateReadSequence_5
; printf("No ACK returned\r\n");
       pea       @m68kus~1_9.L
       jsr       (A3)
       addq.w    #4,A7
initiateReadSequence_5:
; TXR = readControlByte;          // Read Control Byte
       move.b    -1(A6),4227078
; CR = startWrite;                // Set STA bit, WR bit
       move.b    #144,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     initiateReadSequence_7
; printf("No ACK returned\r\n");
       pea       @m68kus~1_9.L
       jsr       (A3)
       addq.w    #4,A7
initiateReadSequence_7:
       movem.l   (A7)+,D2/A2/A3/A4
       unlk      A6
       rts
; }
; /*********************************************************************************************
; **  Decode Bank from address
; *********************************************************************************************/
; void BlockDecode(char * writeControlByte, char * readControlByte, long address){
_BlockDecode:
       link      A6,#-4
; char bank;
; // Block Decoder
; if (address < 0x10000){
       move.l    16(A6),D0
       cmp.l     #65536,D0
       bge.s     BlockDecode_1
; *writeControlByte = 0xA0;
       move.l    8(A6),A0
       move.b    #160,(A0)
; *readControlByte = 0xA1;
       move.l    12(A6),A0
       move.b    #161,(A0)
       bra.s     BlockDecode_2
BlockDecode_1:
; }
; else {
; *writeControlByte = 0xA8;
       move.l    8(A6),A0
       move.b    #168,(A0)
; *readControlByte = 0xA9;
       move.l    12(A6),A0
       move.b    #169,(A0)
BlockDecode_2:
       unlk      A6
       rts
; }
; }
; /*********************************************************************************************
; ** Probe SR register to check if TIP bit is clear
; *********************************************************************************************/
; void WaitForTXByte(void){
_WaitForTXByte:
; while ((SR & 0x02) >> 1 == 1);
WaitForTXByte_1:
       move.b    4227080,D0
       and.b     #2,D0
       lsr.b     #1,D0
       cmp.b     #1,D0
       bne.s     WaitForTXByte_3
       bra       WaitForTXByte_1
WaitForTXByte_3:
       rts
; }
; /*********************************************************************************************
; ** Probe RX register to check if it has received data from slave
; *********************************************************************************************/
; void WaitForReceivedByte(void){
_WaitForReceivedByte:
; while ((SR & 0x01) == 0);
WaitForReceivedByte_1:
       move.b    4227080,D0
       and.b     #1,D0
       bne.s     WaitForReceivedByte_3
       bra       WaitForReceivedByte_1
WaitForReceivedByte_3:
       rts
; }
; /*********************************************************************************************
; ** Probe Status Register to check if slave has ACKed
; Returns 0 of not ACKed and 1 if ACKed
; *********************************************************************************************/
; int CheckForACK(void){
_CheckForACK:
; if ((SR & 0x80)>> 7 == 1)
       move.b    4227080,D0
       and.w     #255,D0
       and.w     #128,D0
       asr.w     #7,D0
       cmp.w     #1,D0
       bne.s     CheckForACK_1
; return 0;
       clr.l     D0
       bra.s     CheckForACK_3
CheckForACK_1:
; else return 1;
       moveq     #1,D0
CheckForACK_3:
       rts
; }
; /*********************************************************************************************
; ** Initialize IIC Communication
; *********************************************************************************************/
; void IIC_Init(void){
_IIC_Init:
; // Set Clock Frequency to 100kHz as per page 7 of in IIC controller Document
; CTR = 0x00; // Clear EN bit to set clock value first
       clr.b     4227076
; PRERlo = 0x31;
       move.b    #49,4227072
; PRERhi = 0x00;
       clr.b     4227074
; // Enable EN bit (core is disable) & Disable IEN bit (interrupts disable)
; CTR = 0x80;
       move.b    #128,4227076
       rts
; }
; /*********************************************************************************************
; ** Generate ADC Output
; *********************************************************************************************/
; void GenerateADCOutput(void){
_GenerateADCOutput:
       movem.l   D2/A2/A3/A4,-(A7)
       lea       _WaitForTXByte.L,A2
       lea       _printf.L,A3
       lea       _CheckForACK.L,A4
; char i=0;
       clr.b     D2
; printf("Writing continuous data to ADC\r\n");
       pea       @m68kus~1_21.L
       jsr       (A3)
       addq.w    #4,A7
; // Ensure TX is ready before sending control byte
; WaitForTXByte();
       jsr       (A2)
; TXR = 0x9E;         //AddresByte
       move.b    #158,4227078
; CR = startWrite;    // Set STA bit, set WR bit
       move.b    #144,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     GenerateADCOutput_1
; printf("no ACK returned");
       pea       @m68kus~1_22.L
       jsr       (A3)
       addq.w    #4,A7
GenerateADCOutput_1:
; TXR = 0x60;         // ControlByte
       move.b    #96,4227078
; CR = Write;         // Set WR bit
       move.b    #16,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     GenerateADCOutput_3
; printf("no ACK returned");
       pea       @m68kus~1_22.L
       jsr       (A3)
       addq.w    #4,A7
GenerateADCOutput_3:
; while(1)
GenerateADCOutput_5:
; {
; if(i==0)
       tst.b     D2
       bne.s     GenerateADCOutput_8
; {            
; TXR = i;         // Send 0V
       move.b    D2,4227078
; CR = Write;         // Set WR bit
       move.b    #16,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     GenerateADCOutput_10
; printf("no ACK returned");
       pea       @m68kus~1_22.L
       jsr       (A3)
       addq.w    #4,A7
GenerateADCOutput_10:
; i=255;          //set i high 
       move.b    #255,D2
       bra.s     GenerateADCOutput_9
GenerateADCOutput_8:
; }
; else
; {
; TXR = i;         // Send 5V
       move.b    D2,4227078
; CR = Write;         // Set WR bit
       move.b    #16,4227080
; WaitForTXByte();
       jsr       (A2)
; if(!CheckForACK())
       jsr       (A4)
       tst.l     D0
       bne.s     GenerateADCOutput_12
; printf("no ACK returned");
       pea       @m68kus~1_22.L
       jsr       (A3)
       addq.w    #4,A7
GenerateADCOutput_12:
; i=0;            //set i low
       clr.b     D2
GenerateADCOutput_9:
       bra       GenerateADCOutput_5
; }
; }
; }
; /*********************************************************************************************
; ** Digital Value of input channel
; *********************************************************************************************/
; void DValueOfAInput(void){
_DValueOfAInput:
       link      A6,#-4
       move.l    A2,-(A7)
       lea       _printf.L,A2
; int DecimalRx;
; printf("Generating digital value for analong input on pin AIN0 \r\n");
       pea       @m68kus~1_23.L
       jsr       (A2)
       addq.w    #4,A7
; // Ensure TX is ready before sending control byte
; WaitForTXByte();
       jsr       _WaitForTXByte
; TXR = 0x9F;         //AddresByte
       move.b    #159,4227078
; CR = startWrite;    // Set STA bit, set WR bit
       move.b    #144,4227080
; WaitForTXByte();
       jsr       _WaitForTXByte
; if(!CheckForACK())
       jsr       _CheckForACK
       tst.l     D0
       bne.s     DValueOfAInput_1
; printf("no ACK returned");
       pea       @m68kus~1_22.L
       jsr       (A2)
       addq.w    #4,A7
DValueOfAInput_1:
; // ControlByte
; CR = ReadIACK;
       move.b    #33,4227080
; WaitForReceivedByte();
       jsr       _WaitForReceivedByte
; DecimalRx = (int) RXR;
       move.b    4227078,D0
       and.l     #255,D0
       move.l    D0,-4(A6)
; if(DecimalRx<100)
       move.l    -4(A6),D0
       cmp.l     #100,D0
       bge.s     DValueOfAInput_3
; printf("The digital value on pin Ain0 is: 0 V \r\n");
       pea       @m68kus~1_24.L
       jsr       (A2)
       addq.w    #4,A7
       bra.s     DValueOfAInput_4
DValueOfAInput_3:
; else    
; printf("The digital value on pin Ain0 is: %d V \r\n",(RXR/46));
       move.b    4227078,D1
       and.l     #65535,D1
       divu.w    #46,D1
       and.l     #255,D1
       move.l    D1,-(A7)
       pea       @m68kus~1_25.L
       jsr       (A2)
       addq.w    #8,A7
DValueOfAInput_4:
; CR = stop;
       move.b    #64,4227080
       move.l    (A7)+,A2
       unlk      A6
       rts
; }
; void delay(int seconds)
; {   // this function needs to be finetuned for the specific microprocessor
_delay:
       link      A6,#-12
       movem.l   D2/D3/D4,-(A7)
; int i, j, k;
; int wait_loop0 = 100;
       move.l    #100,-8(A6)
; int wait_loop1 = 3;
       move.l    #3,-4(A6)
; for(i = 0; i < seconds; i++)
       clr.l     D4
delay_1:
       cmp.l     8(A6),D4
       bge       delay_3
; {
; for(j = 0; j < wait_loop0; j++)
       clr.l     D3
delay_4:
       cmp.l     -8(A6),D3
       bge       delay_6
; {
; for(k = 0; k < wait_loop1; k++)
       clr.l     D2
delay_7:
       cmp.l     -4(A6),D2
       bge.s     delay_9
; {   // waste function, volatile makes sure it is not being optimized out by compiler
; int volatile t = 120 * j * i + k;
       move.l    D3,-(A7)
       pea       120
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D0,-(A7)
       move.l    D4,-(A7)
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       add.l     D2,D0
       move.l    D0,-12(A6)
; t = t + 5;
       addq.l    #5,-12(A6)
       addq.l    #1,D2
       bra       delay_7
delay_9:
       addq.l    #1,D3
       bra       delay_4
delay_6:
       addq.l    #1,D4
       bra       delay_1
delay_3:
       movem.l   (A7)+,D2/D3/D4
       unlk      A6
       rts
; }
; }
; }
; }
; void main(void)
; {
_main:
       link      A6,#-4
       movem.l   D2/A2,-(A7)
       lea       _printf.L,A2
; char sendByte = 0x72;
       moveq     #114,D2
; char recievedByte;
; scanflush();     // flush any text that may have been typed ahead
       jsr       _scanflush
; printf("\r\nHello IIC Lab\r\n\r\n");
       pea       @m68kus~1_26.L
       jsr       (A2)
       addq.w    #4,A7
; IIC_Init();
       jsr       _IIC_Init
; SequentialBlockWrite(0x1FFF0, 0x1FFFF, sendByte);
       ext.w     D2
       ext.l     D2
       move.l    D2,-(A7)
       pea       131071
       pea       131056
       jsr       _SequentialBlockWrite
       add.w     #12,A7
; SequentialBlockRead(0x1FFF0, 0x1FFFF, sendByte);
       ext.w     D2
       ext.l     D2
       move.l    D2,-(A7)
       pea       131071
       pea       131056
       jsr       _SequentialBlockRead
       add.w     #12,A7
; printf("\r\n");
       pea       @m68kus~1_27.L
       jsr       (A2)
       addq.w    #4,A7
; WritePageToChip();
       jsr       _WritePageToChip
; ReadPageFromChip();
       jsr       _ReadPageFromChip
; printf("\r\n");
       pea       @m68kus~1_27.L
       jsr       (A2)
       addq.w    #4,A7
; WriteByteToChip(sendByte);
       ext.w     D2
       ext.l     D2
       move.l    D2,-(A7)
       jsr       _WriteByteToChip
       addq.w    #4,A7
; recievedByte = ReadByteFromChip();
       jsr       _ReadByteFromChip
       move.b    D0,-1(A6)
; printf("Sent Byte: 0x%X & Recieved Byte: 0x%X\r\n\r\n", sendByte, recievedByte);
       move.b    -1(A6),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       ext.w     D2
       ext.l     D2
       move.l    D2,-(A7)
       pea       @m68kus~1_28.L
       jsr       (A2)
       add.w     #12,A7
; // GenerateADCOutput();
; // DValueOfAInput();
; while(1);
main_1:
       bra       main_1
; // programs should NOT exit as there is nothing to Exit TO !!!!!!
; // There is no OS - just press the reset button to end program and call debug
; }
ULDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   ldiv_3
LDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   ldiv_1
       neg.l   D0
       tst.l   D1
       bpl.s   ldiv_2
       neg.l   D1
       bsr.s   dodiv
       neg.l   D1
       bra.s   ldiv_4
ldiv_1:
       tst.l   D1
       bpl.s   ldiv_3
       neg.l   D1
       bsr.s   dodiv
       neg.l   D0
       bra.s   ldiv_4
ldiv_2:
       bsr.s   dodiv
       neg.l   D0
       neg.l   D1
       bra.s   ldiv_4
ldiv_3:
       bsr.s   dodiv
ldiv_4:
       move.l  D0,8(A6)
       move.l  D1,12(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
dodiv:
       cmpi.l  #$FFFF,D1
       bhi.s   dodiv_2
       cmpi.l  #$FFFF,D0
       bhi.s   dodiv_1
       divu    D1,D0
       move.l  D0,D1
       clr.w   D1
       swap    D1
       andi.l  #$FFFF,D0
       rts
dodiv_1:
       movem.w D0/D2,-(A7)
       clr.w   D0
       swap    D0
       divu    D1,D0
       move.w  D0,D2
       move.w  (A7)+,D0
       divu    D1,D0
       swap    D0
       clr.l   D1
       move.w  D0,D1
       move.w  D2,D0
       swap    D0
       move.w  (A7)+,D2
       rts
dodiv_2:
       movem.l D2/D3/D4,-(A7)
       move.l  D1,D2
       clr.w   D2
       swap    D2
       addq.l  #1,D2
       move.l  D0,D3
       move.l  D1,D4
       move.l  D2,D1
       bsr.s   dodiv_1
       move.l  D4,D1
       divu    D2,D1
       divu    D1,D0
       andi.l  #$FFFF,D0
dodiv_3:
       move.l  D4,D1
       move.l  D4,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       add.l   D2,D1
       sub.l   D3,D1
       bhi.s   dodiv_4
       neg.l   D1
       cmp.l   D1,D4
       bhi.s   dodiv_5
       addq.l  #1,D0
       bra.s   dodiv_3
dodiv_4:
       subq.l  #1,D0
       bra.s   dodiv_3
dodiv_5:
       movem.l (A7)+,D2/D3/D4
       rts
ULMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   lmul_3
LMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   lmul_1
       neg.l   D0
       tst.l   D1
       bpl.s   lmul_2
       neg.l   D1
       bra.s   lmul_3
lmul_1:
       tst.l   D1
       bpl.s   lmul_3
       neg.l   D1
lmul_2:
       bsr.s   domul
       neg.l   D1
       negx.l  D0
       bra.s   lmul_4
lmul_3:
       bsr.s   domul
lmul_4:
       move.l  D1,8(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
domul:
       cmpi.l  #$FFFF,D1
       bhi.s   domul_1
       cmpi.l  #$FFFF,D0
       bhi.s   domul_2
       mulu    D0,D1
       rts
domul_1:
       cmpi.l  #$FFFF,D0
       bhi.s   domul_4
       bra.s   domul_3
domul_2
       exg     D0,D1
domul_3:
       move.l  D2,-(A7)
       move.l  D1,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       move.l  (A7)+,D2
       rts
domul_4:
       movem.l D2/D3,-(A7)
       move.l  D1,D2
       move.l  D1,D3
       mulu    D0,D1
       swap    D2
       mulu    D0,D2
       swap    D0
       mulu    D0,D3
       add.l   D3,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       movem.l (A7)+,D2/D3
       rts
@doscan_read:
       link      A6,#-4
       move.l    A2,-(A7)
       lea       @doscan_lpbuf.L,A2
       tst.l     8(A6)
       beq       @doscan_read_1
       move.l    8(A6),A0
       addq.l    #4,8(A6)
       move.l    (A0),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,-4(A6)
       clr.b     D1
       and.l     #255,D1
       cmp.l     D1,D0
       beq.s     @doscan_read_3
       move.l    -4(A6),D0
       bra.s     @doscan_read_4
@doscan_read_3:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
@doscan_read_4:
       bra       @doscan_read_5
@doscan_read_1:
       move.l    (A2),A0
       move.b    (A0),D0
       bne.s     @doscan_read_6
       pea       @doscan_buf.L
       jsr       _gets
       addq.w    #4,A7
       move.l    D0,(A2)
       pea       @doscan_1.L
       pea       @doscan_buf.L
       jsr       _strcat
       addq.w    #8,A7
@doscan_read_6:
       move.l    (A2),A0
       addq.l    #1,(A2)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
@doscan_read_5:
       move.l    (A7)+,A2
       unlk      A6
       rts
@doscan_putback:
       link      A6,#0
       movem.l   D2/D3,-(A7)
       move.l    12(A6),D2
       move.l    8(A6),D3
       beq.s     @doscan_putback_1
       cmp.l     #-1,D2
       beq.s     @doscan_putback_3
       subq.l    #4,D3
       move.l    D3,A0
       move.l    (A0),A0
       move.b    D2,(A0)
       bra.s     @doscan_putback_4
@doscan_putback_3:
       move.l    D3,A0
       subq.l    #1,(A0)
@doscan_putback_4:
       bra.s     @doscan_putback_6
@doscan_putback_1:
       lea       @doscan_buf.L,A0
       move.l    A0,D0
       cmp.l     @doscan_lpbuf.L,D0
       bne.s     @doscan_putback_5
       clr.b     @doscan_buf.L
       move.l    D2,-(A7)
       jsr       _ungetch
       addq.w    #4,A7
       bra.s     @doscan_putback_6
@doscan_putback_5:
       subq.l    #1,@doscan_lpbuf.L
       move.l    @doscan_lpbuf.L,A0
       move.b    D2,(A0)
@doscan_putback_6:
       move.l    D2,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
@doscan_space:
       link      A6,#0
       move.l    D2,-(A7)
@doscan_space_1:
       move.l    8(A6),-(A7)
       jsr       @doscan_read
       addq.w    #4,A7
       move.l    D0,D2
       move.l    12(A6),A0
       addq.l    #1,(A0)
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #16,D0
       bne       @doscan_space_1
       move.l    D2,D0
       move.l    (A7)+,D2
       unlk      A6
       rts
@doscan_select:
       link      A6,#0
       movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
       move.l    12(A6),D3
       move.l    24(A6),D6
       move.l    20(A6),D7
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #94,D0
       bne.s     @doscan_select_1
       move.w    #1,A2
       addq.l    #1,D3
       bra.s     @doscan_select_2
@doscan_select_1:
       move.w    #0,A2
@doscan_select_2:
       move.l    16(A6),D0
       subq.l    #1,16(A6)
       tst.l     D0
       beq       @doscan_select_5
       move.l    8(A6),-(A7)
       jsr       @doscan_read
       addq.w    #4,A7
       move.l    D0,D4
       cmp.l     #-1,D4
       bne.s     @doscan_select_6
       bra       @doscan_select_5
@doscan_select_6:
       move.l    28(A6),A0
       addq.l    #1,(A0)
       clr.l     D5
       clr.l     D2
@doscan_select_8:
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #93,D0
       beq       @doscan_select_10
       tst.l     D2
       beq.s     @doscan_select_11
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #93,D0
       bne.s     @doscan_select_11
       bra       @doscan_select_10
@doscan_select_11:
       tst.l     D2
       beq       @doscan_select_15
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #45,D0
       bne       @doscan_select_15
       move.l    D3,A0
       move.l    D2,D0
       subq.l    #1,D0
       move.l    D3,A1
       move.l    D2,D1
       addq.l    #1,D1
       move.l    D0,-(A7)
       move.b    0(A0,D0.L),D0
       cmp.b     0(A1,D1.L),D0
       bge       @doscan_select_15
       move.l    (A7)+,D0
       move.l    D3,A0
       move.l    D2,D0
       subq.l    #1,D0
       move.b    0(A0,D0.L),D0
       ext.w     D0
       ext.l     D0
       cmp.l     D0,D4
       blt.s     @doscan_select_17
       move.l    D3,A0
       move.l    D2,D0
       addq.l    #1,D0
       move.b    0(A0,D0.L),D0
       ext.w     D0
       ext.l     D0
       cmp.l     D0,D4
       bgt.s     @doscan_select_17
       bra.s     @doscan_select_10
@doscan_select_17:
       addq.l    #1,D2
       bra.s     @doscan_select_19
@doscan_select_15:
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       ext.w     D0
       ext.l     D0
       cmp.l     D0,D4
       bne.s     @doscan_select_19
       bra.s     @doscan_select_10
@doscan_select_19:
       addq.l    #1,D2
       bra       @doscan_select_8
@doscan_select_10:
       tst.l     D2
       beq.s     @doscan_select_23
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #93,D0
       beq.s     @doscan_select_21
@doscan_select_23:
       moveq     #1,D5
@doscan_select_21:
       move.l    A2,D0
       beq.s     @doscan_select_24
       tst.l     D5
       bne.s     @doscan_select_26
       tst.l     D7
       bne.s     @doscan_select_28
       move.l    D6,A0
       addq.l    #1,D6
       move.b    D4,(A0)
@doscan_select_28:
       bra.s     @doscan_select_4
@doscan_select_26:
       bra.s     @doscan_select_5
@doscan_select_24:
       tst.l     D5
       beq.s     @doscan_select_30
       tst.l     D7
       bne.s     @doscan_select_32
       move.l    D6,A0
       addq.l    #1,D6
       move.b    D4,(A0)
@doscan_select_32:
       bra.s     @doscan_select_4
@doscan_select_30:
       bra.s     @doscan_select_5
@doscan_select_4:
       bra       @doscan_select_2
@doscan_select_5:
       cmp.l     #-1,D4
       beq.s     @doscan_select_34
       move.l    D4,-(A7)
       move.l    8(A6),-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       move.l    28(A6),A0
       subq.l    #1,(A0)
@doscan_select_34:
       tst.l     D7
       bne.s     @doscan_select_36
       move.l    D6,A0
       clr.b     (A0)
@doscan_select_36:
       addq.l    #1,D3
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #93,D0
       beq.s     @doscan_select_40
       bra       @doscan_select_36
@doscan_select_40:
       addq.l    #1,D3
       move.l    D3,D0
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
       unlk      A6
       rts
_scanflush:
       lea       @doscan_buf.L,A0
       move.l    A0,@doscan_lpbuf.L
       clr.b     @doscan_buf.L
       pea       -1
       jsr       _ungetch
       addq.w    #4,A7
       rts
_doscan:
       link      A6,#-120
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       @doscan_read.L,A3
       tst.l     8(A6)
       beq.s     doscan_1
       lea       8(A6),A0
       bra.s     doscan_2
doscan_1:
       clr.b     D0
       ext.w     D0
       ext.l     D0
       move.l    D0,A0
doscan_2:
       move.l    A0,D5
       clr.l     -28(A6)
       clr.l     D4
doscan_3:
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       clr.b     D1
       and.l     #255,D1
       cmp.l     D1,D0
       beq       doscan_5
       clr.l     D6
       move.w    #0,A4
       cmp.l     #32,D3
       beq.s     doscan_8
       cmp.l     #9,D3
       beq.s     doscan_8
       cmp.l     #10,D3
       bne       doscan_6
doscan_8:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       cmp.l     #-1,D2
       bne.s     doscan_11
       tst.l     D4
       beq.s     doscan_13
       move.l    D4,D0
       bra.s     doscan_14
doscan_13:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_14:
       bra       doscan_15
doscan_11:
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #16,D0
       bne       doscan_8
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       bra       doscan_141
doscan_6:
       cmp.l     #37,D3
       bne       doscan_129
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       clr.l     -20(A6)
       clr.l     D6
       clr.l     -24(A6)
       move.w    #32767,A2
       cmp.l     #42,D3
       bne.s     doscan_18
       moveq     #1,D6
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
doscan_18:
       move.l    D3,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq       doscan_24
       move.l    D3,D0
       sub.l     #48,D0
       move.l    D0,A2
doscan_22:
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq.s     doscan_24
       move.l    A2,-(A7)
       pea       10
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D3,D1
       sub.l     #48,D1
       add.l     D1,D0
       move.l    D0,A2
       bra       doscan_22
doscan_24:
       cmp.l     #108,D3
       beq.s     doscan_27
       cmp.l     #76,D3
       bne.s     doscan_25
doscan_27:
       move.l    #1,-24(A6)
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       bra.s     doscan_28
doscan_25:
       cmp.l     #104,D3
       bne.s     doscan_28
       move.l    #1,-20(A6)
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
doscan_28:
       cmp.l     #91,D3
       bne       doscan_30
       tst.l     D6
       bne.s     doscan_32
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_32:
       pea       -28(A6)
       move.l    D7,-(A7)
       move.l    D6,-(A7)
       move.l    A2,-(A7)
       move.l    12(A6),-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_select
       add.w     #24,A7
       move.l    D0,12(A6)
       tst.l     D6
       bne.s     doscan_34
       addq.l    #1,D4
doscan_34:
       bra       doscan_141
doscan_30:
       cmp.l     #110,D3
       bne.s     doscan_36
       tst.l     D6
       bne.s     doscan_38
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
       move.l    D7,A0
       move.l    -28(A6),(A0)
       addq.l    #1,D4
doscan_38:
       bra       doscan_141
doscan_36:
       cmp.l     #115,D3
       bne       doscan_40
       pea       -28(A6)
       move.l    D5,-(A7)
       jsr       @doscan_space
       addq.w    #8,A7
       move.l    D0,D2
       tst.l     D6
       bne.s     doscan_42
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_42:
       addq.l    #1,-28(A6)
doscan_44:
       move.l    A2,D0
       subq.w    #1,A2
       tst.l     D0
       beq       doscan_46
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #16,D0
       bne.s     doscan_47
       moveq     #1,D0
       bra.s     doscan_48
doscan_47:
       clr.l     D0
doscan_48:
       and.l     #255,D0
       beq.s     doscan_46
       cmp.l     #-1,D2
       beq.s     doscan_46
       move.w    #1,A4
       tst.l     D6
       bne.s     doscan_49
       move.l    D7,A0
       addq.l    #1,D7
       move.b    D2,(A0)
doscan_49:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       bra       doscan_44
doscan_46:
       tst.l     D6
       bne.s     doscan_53
       move.l    D7,A0
       clr.b     (A0)
       move.l    A4,D0
       beq.s     doscan_53
       addq.l    #1,D4
doscan_53:
       cmp.l     #-1,D2
       beq.s     doscan_57
       tst.l     D6
       bne.s     doscan_55
       move.l    A4,D0
       bne.s     doscan_55
doscan_57:
       tst.l     D4
       beq.s     doscan_58
       move.l    D4,D0
       bra.s     doscan_61
doscan_58:
       cmp.l     #-1,D2
       bne.s     doscan_60
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
       bra.s     doscan_61
doscan_60:
       move.l    D4,D0
doscan_61:
       bra       doscan_15
doscan_55:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       bra       doscan_141
doscan_40:
       cmp.l     #99,D3
       bne       doscan_62
       tst.l     D6
       bne.s     doscan_64
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_64:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       move.l    A2,D0
       cmp.l     #32767,D0
       bne.s     doscan_66
       move.w    #1,A2
doscan_66:
       cmp.l     #-1,D2
       bne.s     doscan_68
       tst.l     D6
       bne.s     doscan_68
       subq.l    #1,D4
doscan_68:
       move.l    A2,D0
       subq.w    #1,A2
       tst.l     D0
       beq.s     doscan_72
       cmp.l     #-1,D2
       beq.s     doscan_72
       tst.l     D6
       bne.s     doscan_73
       move.l    D7,A0
       addq.l    #1,D7
       move.b    D2,(A0)
doscan_73:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       bra       doscan_68
doscan_72:
       cmp.l     #-1,D2
       bne.s     doscan_75
       tst.l     D4
       beq.s     doscan_77
       move.l    D4,D0
       bra.s     doscan_78
doscan_77:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_78:
       bra       doscan_15
doscan_75:
       tst.l     D6
       bne.s     doscan_79
       addq.l    #1,D4
doscan_79:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       bra       doscan_141
doscan_62:
       cmp.l     #105,D3
       bne       doscan_84
       pea       -28(A6)
       move.l    D5,-(A7)
       jsr       @doscan_space
       addq.w    #8,A7
       move.l    D0,D2
       cmp.l     #48,D2
       bne       doscan_83
       move.w    #1,A4
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       move.l    D2,-(A7)
       jsr       _tolower
       addq.w    #4,A7
       cmp.l     #120,D0
       bne.s     doscan_85
       moveq     #120,D3
       bra.s     doscan_86
doscan_85:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       moveq     #111,D3
doscan_86:
       addq.l    #1,-28(A6)
       bra.s     doscan_84
doscan_83:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       moveq     #100,D3
doscan_84:
       cmp.l     #100,D3
       beq.s     doscan_89
       cmp.l     #117,D3
       beq.s     doscan_89
       cmp.l     #120,D3
       beq.s     doscan_89
       cmp.l     #111,D3
       bne       doscan_87
doscan_89:
       pea       -28(A6)
       move.l    D5,-(A7)
       jsr       @doscan_space
       addq.w    #8,A7
       move.l    D0,D2
       move.l    #10,-4(A6)
       cmp.l     #120,D3
       bne.s     doscan_90
       move.l    #16,-4(A6)
doscan_90:
       cmp.l     #111,D3
       bne.s     doscan_92
       move.l    #8,-4(A6)
doscan_92:
       tst.l     D6
       bne.s     doscan_94
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_94:
       clr.l     -32(A6)
       addq.l    #1,-28(A6)
       cmp.l     #117,D3
       beq.s     doscan_96
       cmp.l     #45,D2
       bne.s     doscan_96
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       move.l    #1,-32(A6)
       move.w    #1,A4
doscan_96:
       move.w    #0,A5
       cmp.l     #-1,D2
       bne.s     doscan_98
       tst.l     D4
       beq.s     doscan_100
       move.l    D4,D0
       bra.s     doscan_101
doscan_100:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_101:
       bra       doscan_15
doscan_98:
       move.l    A2,D0
       subq.w    #1,A2
       tst.l     D0
       beq       doscan_104
       cmp.l     #120,D3
       bne.s     doscan_106
       move.l    D2,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       cmp.l     #65,D0
       blt.s     doscan_106
       move.l    D2,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       cmp.l     #70,D0
       ble.s     doscan_105
doscan_106:
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       and.l     #255,D0
       beq       doscan_104
doscan_105:
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       bne.s     doscan_107
       move.l    D2,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       sub.l     #65,D0
       add.l     #10,D0
       add.l     #48,D0
       move.l    D0,D2
doscan_107:
       move.l    A5,-(A7)
       move.l    -4(A6),-(A7)
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       add.l     D2,D0
       sub.l     #48,D0
       move.l    D0,A5
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       move.w    #1,A4
       bra       doscan_98
doscan_104:
       cmp.l     #-1,D2
       beq.s     doscan_109
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       subq.l    #1,-28(A6)
       move.l    A4,D0
       bne.s     doscan_111
       move.l    D4,D0
       bra       doscan_15
doscan_111:
       bra.s     doscan_113
doscan_109:
       move.l    A4,D0
       bne.s     doscan_113
       tst.l     D4
       beq.s     doscan_115
       move.l    D4,D0
       bra.s     doscan_116
doscan_115:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_116:
       bra       doscan_15
doscan_113:
       tst.l     -32(A6)
       beq.s     doscan_117
       move.l    A5,D0
       neg.l     D0
       move.l    D0,A5
doscan_117:
       tst.l     D6
       bne.s     doscan_119
       tst.l     -24(A6)
       beq.s     doscan_121
       move.l    D7,A0
       move.l    A5,(A0)
       bra.s     doscan_124
doscan_121:
       tst.l     -20(A6)
       beq.s     doscan_123
       move.l    D7,A0
       move.w    A5,(A0)
       bra.s     doscan_124
doscan_123:
       move.l    D7,A0
       move.l    A5,(A0)
doscan_124:
       addq.l    #1,D4
doscan_119:
       cmp.l     #-1,D2
       bne.s     doscan_125
       tst.l     D4
       beq.s     doscan_127
       move.l    D4,D0
       bra.s     doscan_128
doscan_127:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_128:
       bra       doscan_15
doscan_125:
       bra       doscan_141
doscan_87:
       cmp.l     #37,D3
       bne       doscan_129
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       cmp.l     #-1,D2
       bne.s     doscan_131
       tst.l     D4
       beq.s     doscan_133
       move.l    D4,D0
       bra.s     doscan_134
doscan_133:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_134:
       bra       doscan_15
doscan_131:
       addq.l    #1,-28(A6)
       cmp.l     D3,D2
       beq.s     doscan_135
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       subq.l    #1,-28(A6)
       move.l    D4,D0
       bra       doscan_15
doscan_135:
       bra       doscan_141
doscan_129:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       cmp.l     #-1,D2
       bne.s     doscan_137
       tst.l     D4
       beq.s     doscan_139
       move.l    D4,D0
       bra.s     doscan_140
doscan_139:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_140:
       bra.s     doscan_15
doscan_137:
       cmp.l     D3,D2
       beq.s     doscan_141
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       subq.l    #1,-28(A6)
       move.l    D4,D0
       bra.s     doscan_15
doscan_141:
       bra       doscan_3
doscan_5:
       move.l    D4,D0
doscan_15:
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
_printf:
       link      A6,#-4
       move.l    D2,-(A7)
       lea       8(A6),A0
       addq.w    #4,A0
       move.l    A0,D2
       move.l    D2,-(A7)
       move.l    8(A6),-(A7)
       clr.l     -(A7)
       jsr       _doprint
       add.w     #12,A7
       move.l    D0,-4(A6)
       clr.l     D2
       move.l    -4(A6),D0
       move.l    (A7)+,D2
       unlk      A6
       rts
_gets:
       link      A6,#0
       movem.l   D2/D3/D4/A2,-(A7)
       lea       _putch.L,A2
       move.l    8(A6),D4
       move.l    D4,D2
gets_1:
       jsr       _getch
       move.l    D0,D3
       cmp.l     #10,D0
       beq       gets_3
       cmp.l     #8,D3
       beq.s     gets_4
       move.l    D2,A0
       addq.l    #1,D2
       move.b    D3,(A0)
       ext.w     D3
       ext.l     D3
       move.l    D3,-(A7)
       jsr       (A2)
       addq.w    #4,A7
       bra.s     gets_6
gets_4:
       cmp.l     D4,D2
       bls.s     gets_6
       pea       8
       jsr       (A2)
       addq.w    #4,A7
       pea       32
       jsr       (A2)
       addq.w    #4,A7
       pea       8
       jsr       (A2)
       addq.w    #4,A7
       subq.l    #1,D2
gets_6:
       bra       gets_1
gets_3:
       pea       10
       jsr       (A2)
       addq.w    #4,A7
       move.l    D2,A0
       clr.b     (A0)
       move.l    D4,D0
       movem.l   (A7)+,D2/D3/D4/A2
       unlk      A6
       rts
_tolower:
       move.l    4(A7),D0
       cmp.l     #'A',D0
       blt.s     tolower_1
       cmp.l     #'Z',D0
       bgt.s     tolower_1
       add.l     #$20,D0
tolower_1:
       rts
_strcat:
       move.l    (4,A7),A0
       move.l    (8,A7),A1
       move.l    A0,D0
strcat_1:
       tst.b     (A0)+
       bne.s     strcat_1
       subq.l    #1,A0
strcat_2:
       move.b    (A1)+,(A0)+
       bne.s     strcat_2
       rts
_toupper:
       move.l    4(A7),D0
       cmp.l     #'a',D0
       blt.s     toupper_1
       cmp.l     #'z',D0
       bgt.s     toupper_1
       sub.l     #$20,D0
toupper_1:
       rts
_ungetch:
       link      A6,#0
       move.l    8(A6),__ungetbuf.L
       move.l    8(A6),D0
       unlk      A6
       rts
@doprint_copy:
       link      A6,#0
       move.l    8(A6),A0
       tst.l     (A0)
       beq.s     @doprint_copy_1
       move.l    12(A6),D0
       move.l    8(A6),A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    D0,(A1)
       bra.s     @doprint_copy_2
@doprint_copy_1:
       move.l    12(A6),-(A7)
       jsr       _putch
       addq.w    #4,A7
@doprint_copy_2:
       unlk      A6
       rts
@doprint_getval:
       link      A6,#0
       movem.l   D2/D3,-(A7)
       move.l    8(A6),D3
       clr.l     D2
       move.l    D3,A0
       move.l    (A0),A0
       move.b    (A0),D0
       cmp.b     #42,D0
       bne.s     @doprint_getval_1
       move.l    12(A6),A0
       move.l    (A0),A1
       addq.l    #4,(A0)
       move.l    (A1),D2
       move.l    D3,A0
       addq.l    #1,(A0)
       bra       @doprint_getval_5
@doprint_getval_1:
       moveq     #1,D0
       move.l    D3,A0
       move.l    (A0),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq.s     @doprint_getval_5
       move.l    D2,-(A7)
       pea       10
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D3,A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    (A1),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       sub.l     #48,D0
       move.l    D0,D2
       bra       @doprint_getval_1
@doprint_getval_5:
       move.l    D2,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
_doprint:
       link      A6,#-52
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       8(A6),A2
       lea       @doprint_copy.L,A3
       lea       _ultoa.L,A4
       clr.l     D6
doprint_1:
       move.l    12(A6),A0
       tst.b     (A0)
       beq       doprint_3
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #37,D0
       beq.s     doprint_4
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_2
doprint_4:
       addq.l    #1,12(A6)
       clr.b     -45(A6)
       clr.b     -46(A6)
       clr.b     -48(A6)
       clr.b     -49(A6)
       clr.b     -50(A6)
       clr.b     -51(A6)
       clr.l     -4(A6)
       moveq     #-1,D5
       lea       -36(A6),A0
       move.l    A0,D3
       move.l    A0,D2
doprint_6:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #43,D0
       beq.s     doprint_12
       bgt.s     doprint_15
       cmp.l     #35,D0
       beq       doprint_14
       bgt       doprint_9
       cmp.l     #32,D0
       beq.s     doprint_13
       bra.s     doprint_9
doprint_15:
       cmp.l     #45,D0
       beq.s     doprint_11
       bra.s     doprint_9
doprint_11:
       move.b    #1,-51(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_12:
       move.b    #1,-50(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_13:
       move.b    #1,-49(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_14:
       move.b    #1,-48(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_9:
       bra.s     doprint_8
doprint_7:
       bra       doprint_6
doprint_8:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #48,D0
       bne.s     doprint_16
       addq.l    #1,12(A6)
       move.b    #1,-46(A6)
doprint_16:
       pea       16(A6)
       pea       12(A6)
       jsr       @doprint_getval
       addq.w    #8,A7
       move.l    D0,A5
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #46,D0
       bne.s     doprint_18
       addq.l    #1,12(A6)
       pea       16(A6)
       pea       12(A6)
       jsr       @doprint_getval
       addq.w    #8,A7
       move.l    D0,D5
doprint_18:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #108,D0
       bne.s     doprint_20
       addq.l    #1,12(A6)
       move.b    #1,-45(A6)
doprint_20:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq       doprint_27
       bgt.s     doprint_33
       cmp.l     #100,D0
       beq       doprint_24
       bgt.s     doprint_34
       cmp.l     #99,D0
       beq       doprint_30
       bgt       doprint_22
       cmp.l     #88,D0
       beq       doprint_28
       bra       doprint_22
doprint_34:
       cmp.l     #105,D0
       beq.s     doprint_24
       bra       doprint_22
doprint_33:
       cmp.l     #117,D0
       beq       doprint_26
       bgt.s     doprint_35
       cmp.l     #115,D0
       beq       doprint_31
       bra       doprint_22
doprint_35:
       cmp.l     #120,D0
       beq       doprint_28
       bra       doprint_22
doprint_24:
       tst.b     -45(A6)
       beq.s     doprint_36
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       _ltoa
       add.w     #12,A7
       bra.s     doprint_37
doprint_36:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       _ltoa
       add.w     #12,A7
doprint_37:
       bra       doprint_23
doprint_26:
       tst.b     -45(A6)
       beq.s     doprint_38
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_39
doprint_38:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_39:
       bra       doprint_23
doprint_27:
       tst.b     -45(A6)
       beq.s     doprint_40
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_41
doprint_40:
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_41:
       bra       doprint_23
doprint_28:
       tst.b     -45(A6)
       beq.s     doprint_42
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_43
doprint_42:
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_43:
       bra       doprint_23
doprint_30:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D0
       move.l    D2,A0
       addq.l    #1,D2
       move.b    D0,(A0)
       move.l    D2,A0
       clr.b     (A0)
       move.l    A5,D0
       beq.s     doprint_44
       move.l    A5,D0
       bra.s     doprint_45
doprint_44:
       moveq     #1,D0
       ext.w     D0
       ext.l     D0
doprint_45:
       move.l    D0,D5
       bra       doprint_23
doprint_31:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D3
       cmp.l     #-1,D5
       bne.s     doprint_46
       move.l    D3,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D5
doprint_46:
       bra.s     doprint_23
doprint_22:
       move.l    12(A6),A0
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       move.l    D2,A0
       clr.b     (A0)
doprint_23:
       move.l    D3,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.b    D0,D4
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #115,D0
       bne.s     doprint_48
       cmp.l     #0,D5
       blt.s     doprint_48
       ext.w     D4
       ext.l     D4
       cmp.l     D5,D4
       ble.s     doprint_50
       move.l    D5,D0
       bra.s     doprint_51
doprint_50:
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
doprint_51:
       move.b    D0,D4
doprint_48:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #88,D0
       bne       doprint_56
       lea       -36(A6),A0
       move.l    A0,D2
doprint_54:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     doprint_56
       move.l    D2,A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       move.l    D2,A0
       move.b    D0,(A0)
       addq.l    #1,D2
       bra       doprint_54
doprint_56:
       moveq     #0,D7
       lea       -44(A6),A0
       move.l    A0,D2
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #100,D0
       beq.s     doprint_59
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #105,D0
       bne       doprint_65
doprint_59:
       move.b    -50(A6),D0
       ext.w     D0
       ext.l     D0
       tst.l     D0
       bne.s     doprint_62
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne       doprint_60
doprint_62:
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne.s     doprint_63
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     doprint_64
doprint_63:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #43,(A0)
doprint_64:
       addq.l    #1,D7
       bra       doprint_65
doprint_60:
       tst.b     -49(A6)
       beq.s     doprint_65
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne.s     doprint_67
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     doprint_68
doprint_67:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #32,(A0)
doprint_68:
       addq.l    #1,D7
doprint_65:
       tst.b     -48(A6)
       beq       doprint_77
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq.s     doprint_73
       bgt.s     doprint_76
       cmp.l     #88,D0
       beq.s     doprint_73
       bra       doprint_77
doprint_76:
       cmp.l     #120,D0
       beq.s     doprint_73
       bra       doprint_77
doprint_73:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #48,(A0)
       addq.l    #1,D7
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #120,D0
       beq.s     doprint_79
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #88,D0
       bne.s     doprint_77
doprint_79:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #120,(A0)
       addq.l    #1,D7
doprint_77:
       move.l    D2,A0
       clr.b     (A0)
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #105,D0
       beq       doprint_82
       bgt.s     doprint_93
       cmp.l     #99,D0
       beq       doprint_96
       bgt.s     doprint_94
       cmp.l     #88,D0
       beq       doprint_82
       bgt       doprint_80
       cmp.l     #69,D0
       beq       doprint_82
       bra       doprint_80
doprint_94:
       cmp.l     #101,D0
       beq       doprint_82
       bgt       doprint_80
       cmp.l     #100,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_93:
       cmp.l     #117,D0
       beq.s     doprint_82
       bgt.s     doprint_95
       cmp.l     #115,D0
       beq       doprint_96
       bgt       doprint_80
       cmp.l     #111,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_95:
       cmp.l     #120,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_82:
       tst.b     -46(A6)
       beq.s     doprint_96
       tst.b     -51(A6)
       bne.s     doprint_96
       move.l    A5,D0
       sub.l     D7,D0
       ext.w     D4
       ext.l     D4
       sub.l     D4,D0
       move.l    D0,-4(A6)
doprint_96:
       move.l    -4(A6),D0
       cmp.l     #0,D0
       bge.s     doprint_98
       clr.l     -4(A6)
doprint_98:
       tst.b     -51(A6)
       bne       doprint_104
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
doprint_102:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     doprint_104
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_102
doprint_104:
       lea       -44(A6),A0
       move.l    A0,D2
doprint_105:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     doprint_107
       move.l    D2,A0
       addq.l    #1,D2
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_105
doprint_107:
       move.l    -4(A6),D0
       move.b    D0,-47(A6)
doprint_108:
       move.b    -47(A6),D0
       subq.b    #1,-47(A6)
       tst.b     D0
       beq.s     doprint_110
       pea       48
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_108
doprint_110:
       move.l    D3,A0
       tst.b     (A0)
       beq       doprint_113
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #115,D0
       beq.s     doprint_116
       bgt.s     doprint_119
       cmp.l     #99,D0
       beq.s     doprint_116
       bra.s     doprint_119
doprint_116:
       move.l    D5,D0
       subq.l    #1,D5
       cmp.l     #0,D0
       bgt.s     doprint_119
       bra.s     doprint_115
doprint_119:
       move.l    D3,A0
       addq.l    #1,D3
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra.s     doprint_112
doprint_115:
       bra.s     doprint_113
doprint_112:
       bra       doprint_110
doprint_113:
       tst.b     -51(A6)
       beq       doprint_125
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
doprint_123:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     doprint_125
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       subq.l    #1,D6
       bra       doprint_123
doprint_125:
       bra.s     doprint_81
doprint_80:
       move.l    12(A6),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
doprint_81:
       addq.l    #1,12(A6)
doprint_2:
       bra       doprint_1
doprint_3:
       tst.l     (A2)
       beq.s     doprint_126
       clr.b     D1
       and.l     #255,D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
doprint_126:
       move.l    D6,D0
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
_putch:
       link      A6,#0
       move.l    D2,-(A7)
       move.l    8(A6),D2
       cmp.l     #10,D2
       bne.s     putch_1
       pea       13
       jsr       __putch
       addq.w    #4,A7
putch_1:
       move.l    D2,-(A7)
       jsr       __putch
       addq.w    #4,A7
       move.l    D2,D0
       move.l    (A7)+,D2
       unlk      A6
       rts
_getch:
       move.l    D2,-(A7)
       move.l    __ungetbuf.L,D2
       move.l    __ungetbuf.L,D0
       cmp.l     #-1,D0
       beq.s     getch_1
       move.l    #-1,__ungetbuf.L
       bra.s     getch_3
getch_1:
       jsr       __getch
       move.l    D0,D2
       cmp.l     #13,D0
       bne.s     getch_3
       moveq     #10,D2
getch_3:
       move.l    D2,D0
       move.l    (A7)+,D2
       rts
@itoa_convert:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    16(A6),D3
       move.l    12(A6),D5
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D4
       cmp.l     D3,D5
       blo.s     @itoa_convert_1
       move.l    D3,-(A7)
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       jsr       ULDIV
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    D1,-(A7)
       move.l    D2,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
@itoa_convert_1:
       cmp.l     #9,D4
       bgt.s     @itoa_convert_3
       move.l    D4,D0
       moveq     #48,D1
       and.l     #255,D1
       add.l     D1,D0
       bra.s     @itoa_convert_4
@itoa_convert_3:
       move.l    D4,D0
       moveq     #97,D1
       and.l     #255,D1
       add.l     D1,D0
       sub.l     #10,D0
@itoa_convert_4:
       move.l    D2,A0
       move.b    D0,(A0)
       move.l    D2,D0
       addq.l    #1,D0
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ltoa:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    12(A6),D3
       move.l    16(A6),D5
       move.l    D3,D4
       cmp.l     #2,D5
       blt.s     ltoa_3
       cmp.l     #36,D5
       ble.s     ltoa_1
ltoa_3:
       move.l    D3,D0
       bra       ltoa_4
ltoa_1:
       cmp.l     #10,D5
       bne       ltoa_5
       cmp.l     #0,D2
       bge.s     ltoa_5
       move.l    D2,D0
       neg.l     D0
       move.l    D0,D2
       cmp.l     #0,D2
       bge.s     ltoa_7
       pea       @itoa_1.L
       move.l    D3,-(A7)
       jsr       _strcpy
       addq.w    #8,A7
       move.l    D3,D0
       bra.s     ltoa_4
ltoa_7:
       move.l    D4,A0
       addq.l    #1,D4
       move.b    #45,(A0)
ltoa_5:
       move.l    D5,-(A7)
       move.l    D2,-(A7)
       move.l    D4,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D4
       move.l    D4,A0
       clr.b     (A0)
       move.l    D3,D0
ltoa_4:
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ultoa:
       link      A6,#0
       movem.l   D2/D3/D4,-(A7)
       move.l    16(A6),D3
       move.l    12(A6),D4
       move.l    D4,D2
       cmp.l     #2,D3
       blt.s     ultoa_3
       cmp.l     #36,D3
       ble.s     ultoa_1
ultoa_3:
       move.l    D4,D0
       bra.s     ultoa_4
ultoa_1:
       move.l    D3,-(A7)
       move.l    8(A6),-(A7)
       move.l    D2,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
       move.l    D2,A0
       clr.b     (A0)
       move.l    D4,D0
ultoa_4:
       movem.l   (A7)+,D2/D3/D4
       unlk      A6
       rts
_itoa:
       link      A6,#0
       move.l    16(A6),-(A7)
       move.l    12(A6),-(A7)
       move.l    8(A6),-(A7)
       jsr       _ltoa
       add.w     #12,A7
       unlk      A6
       rts
_strlen:
       move.l    (4,A7),A0
       move.l    A0,A1
strlen_1:
       tst.b     (A1)+
       bne       strlen_1
       move.l    A1,D0
       sub.l     A0,D0
       subq.l    #1,D0
       rts
_strcpy:
       move.l    (4,A7),A0
       move.l    (8,A7),A1
       move.l    A0,D0
strcpy_1:
       move.b    (A1)+,(A0)+
       bne.s     strcpy_1
       rts
       section   const
                align


@m68kus~1_1:
       dc.b      83,101,113,117,101,110,116,105,97,108,66,108
       dc.b      111,99,107,87,114,105,116,101,58,32,83,105,122
       dc.b      101,32,111,102,32,73,110,112,117,116,32,68,97
       dc.b      116,97,32,66,108,111,99,107,32,99,97,110,110
       dc.b      111,116,32,101,120,99,101,101,100,32,49,50,56
       dc.b      107,66,121,116,101,115,13,10,0
@m68kus~1_2:
       dc.b      83,101,113,117,101,110,116,105,97,108,66,108
       dc.b      111,99,107,87,114,105,116,101,58,32,69,110,116
       dc.b      101,114,101,100,32,65,100,100,114,101,115,115
       dc.b      32,79,117,116,32,111,102,32,82,97,110,103,101
       dc.b      13,10,0
@m68kus~1_3:
       dc.b      80,101,114,102,111,114,109,105,110,103,32,83
       dc.b      101,113,117,101,110,116,105,97,108,32,66,108
       dc.b      111,99,107,32,87,114,105,116,101,32,116,111
       dc.b      32,69,69,80,82,79,77,46,46,46,13,10,0
@m68kus~1_4:
       dc.b      83,101,113,117,101,110,116,105,97,108,32,66
       dc.b      108,111,99,107,32,87,114,105,116,101,32,67,111
       dc.b      109,112,108,101,116,101,100,33,13,10,13,10,0
@m68kus~1_5:
       dc.b      85,116,105,108,83,101,113,117,101,110,116,105
       dc.b      97,108,66,108,111,99,107,87,114,105,116,101
       dc.b      58,32,78,111,32,65,67,75,32,114,101,116,117
       dc.b      114,110,101,100,32,102,111,114,32,98,121,116
       dc.b      101,32,97,116,32,48,120,37,88,13,10,0
@m68kus~1_6:
       dc.b      87,114,105,116,105,110,103,32,80,97,103,101
       dc.b      32,116,111,32,69,69,80,82,79,77,13,10,0
@m68kus~1_7:
       dc.b      78,111,32,65,67,75,32,114,101,116,117,114,110
       dc.b      101,100,32,102,111,114,32,98,121,116,101,32
       dc.b      35,37,100,13,10,0
@m68kus~1_8:
       dc.b      87,114,105,116,105,110,103,32,66,121,116,101
       dc.b      32,116,111,32,69,69,80,82,79,77,13,10,0
@m68kus~1_9:
       dc.b      78,111,32,65,67,75,32,114,101,116,117,114,110
       dc.b      101,100,13,10,0
@m68kus~1_10:
       dc.b      83,101,113,117,101,110,116,105,97,108,66,108
       dc.b      111,99,107,82,101,97,100,58,32,83,105,122,101
       dc.b      32,111,102,32,73,110,112,117,116,32,68,97,116
       dc.b      97,32,66,108,111,99,107,32,99,97,110,110,111
       dc.b      116,32,101,120,99,101,101,100,32,49,50,56,107
       dc.b      66,121,116,101,115,13,10,0
@m68kus~1_11:
       dc.b      83,101,113,117,101,110,116,105,97,108,66,108
       dc.b      111,99,107,82,101,97,100,58,32,69,110,116,101
       dc.b      114,101,100,32,65,100,100,114,101,115,115,32
       dc.b      79,117,116,32,111,102,32,82,97,110,103,101,13
       dc.b      10,0
@m68kus~1_12:
       dc.b      83,116,97,114,116,105,110,103,32,83,101,113
       dc.b      117,101,110,116,105,97,108,32,66,108,111,99
       dc.b      107,32,82,101,97,100,46,46,46,13,10,0
@m68kus~1_13:
       dc.b      83,101,113,117,101,110,116,105,97,108,32,66
       dc.b      108,111,99,107,32,82,101,97,100,32,70,97,105
       dc.b      108,101,100,33,13,10,0
@m68kus~1_14:
       dc.b      83,101,113,117,101,110,116,105,97,108,32,66
       dc.b      108,111,99,107,32,82,101,97,100,32,115,117,99
       dc.b      99,101,115,115,102,117,108,33,13,10,0
@m68kus~1_15:
       dc.b      78,111,32,65,67,75,32,114,101,116,117,114,110
       dc.b      101,100,32,102,111,114,32,114,101,97,100,32
       dc.b      97,116,32,97,100,100,114,101,115,115,58,32,48
       dc.b      120,37,88,13,10,0
@m68kus~1_16:
       dc.b      83,101,113,117,101,110,116,105,97,108,32,82
       dc.b      101,97,100,32,69,114,114,111,114,32,97,116,32
       dc.b      97,100,100,114,101,115,115,58,32,48,120,37,88
       dc.b      13,10,0
@m68kus~1_17:
       dc.b      82,101,97,100,105,110,103,32,80,97,103,101,32
       dc.b      102,114,111,109,32,69,69,80,82,79,77,32,13,10
       dc.b      0
@m68kus~1_18:
       dc.b      80,97,103,101,32,82,101,97,100,32,70,97,105
       dc.b      108,101,100,32,97,116,32,66,121,116,101,32,35
       dc.b      37,100,13,10,0
@m68kus~1_19:
       dc.b      80,97,103,101,32,82,101,97,100,32,83,117,99
       dc.b      99,101,115,115,102,117,108,13,10,0
@m68kus~1_20:
       dc.b      82,101,97,100,105,110,103,32,66,121,116,101
       dc.b      32,102,114,111,109,32,69,69,80,82,79,77,32,13
       dc.b      10,0
@m68kus~1_21:
       dc.b      87,114,105,116,105,110,103,32,99,111,110,116
       dc.b      105,110,117,111,117,115,32,100,97,116,97,32
       dc.b      116,111,32,65,68,67,13,10,0
@m68kus~1_22:
       dc.b      110,111,32,65,67,75,32,114,101,116,117,114,110
       dc.b      101,100,0
@m68kus~1_23:
       dc.b      71,101,110,101,114,97,116,105,110,103,32,100
       dc.b      105,103,105,116,97,108,32,118,97,108,117,101
       dc.b      32,102,111,114,32,97,110,97,108,111,110,103
       dc.b      32,105,110,112,117,116,32,111,110,32,112,105
       dc.b      110,32,65,73,78,48,32,13,10,0
@m68kus~1_24:
       dc.b      84,104,101,32,100,105,103,105,116,97,108,32
       dc.b      118,97,108,117,101,32,111,110,32,112,105,110
       dc.b      32,65,105,110,48,32,105,115,58,32,48,32,86,32
       dc.b      13,10,0
@m68kus~1_25:
       dc.b      84,104,101,32,100,105,103,105,116,97,108,32
       dc.b      118,97,108,117,101,32,111,110,32,112,105,110
       dc.b      32,65,105,110,48,32,105,115,58,32,37,100,32
       dc.b      86,32,13,10,0
@m68kus~1_26:
       dc.b      13,10,72,101,108,108,111,32,73,73,67,32,76,97
       dc.b      98,13,10,13,10,0
@m68kus~1_27:
       dc.b      13,10,0
@m68kus~1_28:
       dc.b      83,101,110,116,32,66,121,116,101,58,32,48,120
       dc.b      37,88,32,38,32,82,101,99,105,101,118,101,100
       dc.b      32,66,121,116,101,58,32,48,120,37,88,13,10,13
       dc.b      10,0
@doscan_1:
       dc.b      10,0
__ctype:
       dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
       dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
       dc.b      64,64,64,208,160,160,160,160,160,160,160,160
       dc.b      160,160,160,160,160,160,160,140,140,140,140
       dc.b      140,140,140,140,140,140,160,160,160,160,160
       dc.b      160,160,138,138,138,138,138,138,130,130,130
       dc.b      130,130,130,130,130,130,130,130,130,130,130
       dc.b      130,130,130,130,130,130,160,160,160,160,160
       dc.b      160,137,137,137,137,137,137,129,129,129,129
       dc.b      129,129,129,129,129,129,129,129,129,129,129
       dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
@itoa_1:
       dc.b      45,50,49,52,55,52,56,51,54,52,56,0
       section   data
                align

*********************************************************************************************************************************************************
* Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
********************************************************************************************************************************************************

DataStart       equ       *
__ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
__allocp:       ds.l      1                    start of free memory block list
__heap:         ds.l      1                    begin of free memory


@doscan_lpbuf:
       dc.l      @doscan_buf
       section   bss
                align

DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
*********************************************************************************************************
BssStart       equ       *

@doscan_buf:
       ds.b      80
       section   heap
               align

BssEnd         equ       *
BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for Heap
*********************************************************************************************************

heap           equ       *
               align
