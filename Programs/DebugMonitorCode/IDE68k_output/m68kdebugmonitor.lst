680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 28 Jan 2019      Time: 13:33:56          Source: C:\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS 2\PROGRAMS\DEBUGMONITORCODE\IDE68K_OUTPUT\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05AA 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2974      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  226E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS 2\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; // for disassembly of program
                     495   ; char    Instruction[100] ;
                     496   ; char    TempString[100] ;
                     497   ; /************************************************************************************
                     498   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     499   ; ************************************************************************************/
                     500   ; void Wait1ms(void)
                     501   ; {
                     502   _Wait1ms:
00000932  2F02       503          move.l    D2,-(A7)
                     504   ; long int  i ;
                     505   ; for(i = 0; i < 1000; i ++)
00000934  4282       506          clr.l     D2
                     507   Wait1ms_1:
00000936  0C82 0000  508          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       509          bge.s     Wait1ms_3
0000093E  5282       510          addq.l    #1,D2
00000940  60F4       511          bra       Wait1ms_1
                     512   Wait1ms_3:
00000942  241F       513          move.l    (A7)+,D2
00000944  4E75       514          rts
                     515   ; ;
                     516   ; }
                     517   ; /************************************************************************************
                     518   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     519   ; **************************************************************************************/
                     520   ; void Wait3ms(void)
                     521   ; {
                     522   _Wait3ms:
00000946  2F02       523          move.l    D2,-(A7)
                     524   ; int i ;
                     525   ; for(i = 0; i < 3; i++)
00000948  4282       526          clr.l     D2
                     527   Wait3ms_1:
0000094A  0C82 0000  528          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       529          bge.s     Wait3ms_3
                     530   ; Wait1ms() ;
00000952  4EB8 0932  531          jsr       _Wait1ms
00000956  5282       532          addq.l    #1,D2
00000958  60F0       533          bra       Wait3ms_1
                     534   Wait3ms_3:
0000095A  241F       535          move.l    (A7)+,D2
0000095C  4E75       536          rts
                     537   ; }
                     538   ; /*********************************************************************************************
                     539   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     540   ; *********************************************************************************************/
                     541   ; void Init_LCD(void)
                     542   ; {
                     543   _Init_LCD:
                     544   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  545          move.b    #12,4194336
00000962  0040 0020 
                     546   ; Wait3ms() ;
00000966  4EB8 0946  547          jsr       _Wait3ms
                     548   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  549          move.b    #56,4194336
0000096E  0040 0020 
                     550   ; Wait3ms() ;
00000972  4EB8 0946  551          jsr       _Wait3ms
00000976  4E75       552          rts
                     553   ; }
                     554   ; /******************************************************************************
                     555   ; *subroutine to output a single character held in d1 to the LCD display
                     556   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     557   ; *current cursor position
                     558   ; *******************************************************************************/
                     559   ; void Outchar(int c)
                     560   ; {
                     561   _Outchar:
00000978  4E56 0000  562          link      A6,#0
                     563   ; LCDdata = (char)(c);
0000097C  202E 0008  564          move.l    8(A6),D0
00000980  13C0 0040  565          move.b    D0,4194338
00000984  0022      
                     566   ; Wait1ms() ;
00000986  4EB8 0932  567          jsr       _Wait1ms
0000098A  4E5E       568          unlk      A6
0000098C  4E75       569          rts
                     570   ; }
                     571   ; /**********************************************************************************
                     572   ; *subroutine to output a message at the current cursor position of the LCD display
                     573   ; ************************************************************************************/
                     574   ; void OutMess(char *theMessage)
                     575   ; {
                     576   _OutMess:
0000098E  4E56 FFFC  577          link      A6,#-4
                     578   ; char c ;
                     579   ; while((c = *theMessage++) != (char)(0))
                     580   OutMess_1:
00000992  206E 0008  581          move.l    8(A6),A0
00000996  52AE 0008  582          addq.l    #1,8(A6)
0000099A  1D50 FFFF  583          move.b    (A0),-1(A6)
0000099E  1010       584          move.b    (A0),D0
000009A0  6712       585          beq.s     OutMess_3
                     586   ; Outchar(c) ;
000009A2  122E FFFF  587          move.b    -1(A6),D1
000009A6  4881       588          ext.w     D1
000009A8  48C1       589          ext.l     D1
000009AA  2F01       590          move.l    D1,-(A7)
000009AC  4EB8 0978  591          jsr       _Outchar
000009B0  584F       592          addq.w    #4,A7
000009B2  60DE       593          bra       OutMess_1
                     594   OutMess_3:
000009B4  4E5E       595          unlk      A6
000009B6  4E75       596          rts
                     597   ; }
                     598   ; /******************************************************************************
                     599   ; *subroutine to clear the line by issuing 24 space characters
                     600   ; *******************************************************************************/
                     601   ; void Clearln(void)
                     602   ; {
                     603   _Clearln:
000009B8  2F02       604          move.l    D2,-(A7)
                     605   ; unsigned char i ;
                     606   ; for(i = 0; i < 24; i ++)
000009BA  4202       607          clr.b     D2
                     608   Clearln_1:
000009BC  0C02 0018  609          cmp.b     #24,D2
000009C0  640E       610          bhs.s     Clearln_3
                     611   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  612          pea       32
000009C6  4EB8 0978  613          jsr       _Outchar
000009CA  584F       614          addq.w    #4,A7
000009CC  5202       615          addq.b    #1,D2
000009CE  60EC       616          bra       Clearln_1
                     617   Clearln_3:
000009D0  241F       618          move.l    (A7)+,D2
000009D2  4E75       619          rts
                     620   ; }
                     621   ; /******************************************************************************
                     622   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     623   ; *******************************************************************************/
                     624   ; void Oline0(char *theMessage)
                     625   ; {
                     626   _Oline0:
000009D4  4E56 0000  627          link      A6,#0
                     628   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  629          move.b    #128,4194336
000009DC  0040 0020 
                     630   ; Wait3ms();
000009E0  4EB8 0946  631          jsr       _Wait3ms
                     632   ; Clearln() ;
000009E4  4EB8 09B8  633          jsr       _Clearln
                     634   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  635          move.b    #128,4194336
000009EC  0040 0020 
                     636   ; Wait3ms() ;
000009F0  4EB8 0946  637          jsr       _Wait3ms
                     638   ; OutMess(theMessage) ;
000009F4  2F2E 0008  639          move.l    8(A6),-(A7)
000009F8  4EB8 098E  640          jsr       _OutMess
000009FC  584F       641          addq.w    #4,A7
000009FE  4E5E       642          unlk      A6
00000A00  4E75       643          rts
                     644   ; }
                     645   ; /******************************************************************************
                     646   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     647   ; *******************************************************************************/
                     648   ; void Oline1(char *theMessage)
                     649   ; {
                     650   _Oline1:
00000A02  4E56 0000  651          link      A6,#0
                     652   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  653          move.b    #192,4194336
00000A0A  0040 0020 
                     654   ; Wait3ms();
00000A0E  4EB8 0946  655          jsr       _Wait3ms
                     656   ; Clearln() ;
00000A12  4EB8 09B8  657          jsr       _Clearln
                     658   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  659          move.b    #192,4194336
00000A1A  0040 0020 
                     660   ; Wait3ms() ;
00000A1E  4EB8 0946  661          jsr       _Wait3ms
                     662   ; OutMess(theMessage) ;
00000A22  2F2E 0008  663          move.l    8(A6),-(A7)
00000A26  4EB8 098E  664          jsr       _OutMess
00000A2A  584F       665          addq.w    #4,A7
00000A2C  4E5E       666          unlk      A6
00000A2E  4E75       667          rts
                     668   ; }
                     669   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     670   ; {
                     671   _InstallExceptionHandler:
00000A30  4E56 FFFC  672          link      A6,#-4
                     673   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  674          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     675   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  676          move.l    -4(A6),A0
00000A40  202E 000C  677          move.l    12(A6),D0
00000A44  E588       678          lsl.l     #2,D0
00000A46  21AE 0008  679          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       680          unlk      A6
00000A4E  4E75       681          rts
                     682   ; }
                     683   ; void TestLEDS(void)
                     684   ; {
                     685   _TestLEDS:
00000A50  48E7 3000  686          movem.l   D2/D3,-(A7)
                     687   ; int delay ;
                     688   ; unsigned char count = 0 ;
00000A54  4202       689          clr.b     D2
                     690   ; while(1)    {
                     691   TestLEDS_1:
                     692   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       693          move.b    D2,D0
00000A58  E908       694          lsl.b     #4,D0
00000A5A  1202       695          move.b    D2,D1
00000A5C  C23C 000F  696          and.b     #15,D1
00000A60  D001       697          add.b     D1,D0
00000A62  13C0 0040  698          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  699          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  700          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  701          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  702          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  703          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  704          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  705          move.b    D0,4194304
00000A90  0000      
                     706   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       707          clr.l     D3
                     708   TestLEDS_4:
00000A94  0C83 0003  709          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       710          bge.s     TestLEDS_6
00000A9C  5283       711          addq.l    #1,D3
00000A9E  60F4       712          bra       TestLEDS_4
                     713   TestLEDS_6:
                     714   ; ;
                     715   ; count ++;
00000AA0  5202       716          addq.b    #1,D2
00000AA2  60B2       717          bra       TestLEDS_1
                     718   ; }
                     719   ; }
                     720   ; void SwitchTest(void)
                     721   ; {
                     722   _SwitchTest:
00000AA4  48E7 3020  723          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  724          lea       _printf.L,A2
00000AAC  55EA      
                     725   ; int i, switches = 0 ;
00000AAE  4283       726          clr.l     D3
                     727   ; printf("\r\n") ;
00000AB0  4879 0000  728          pea       @m68kde~1_1.L
00000AB4  5EFC      
00000AB6  4E92       729          jsr       (A2)
00000AB8  584F       730          addq.w    #4,A7
                     731   ; while(1)    {
                     732   SwitchTest_1:
                     733   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  734          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  735          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       736          lsl.l     #8,D0
00000AC8  1239 0040  737          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  738          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       739          or.l      D1,D0
00000AD6  2600       740          move.l    D0,D3
                     741   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  742          pea       @m68kde~1_2.L
00000ADC  5F00      
00000ADE  4E92       743          jsr       (A2)
00000AE0  584F       744          addq.w    #4,A7
                     745   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  746          move.l    #128,D2
00000AE6  0080      
                     747   SwitchTest_4:
00000AE8  0C82 0000  748          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       749          ble.s     SwitchTest_6
                     750   ; if((switches & i) == 0)
00000AF0  2003       751          move.l    D3,D0
00000AF2  C082       752          and.l     D2,D0
00000AF4  660C       753          bne.s     SwitchTest_7
                     754   ; printf("0") ;
00000AF6  4879 0000  755          pea       @m68kde~1_3.L
00000AFA  5F16      
00000AFC  4E92       756          jsr       (A2)
00000AFE  584F       757          addq.w    #4,A7
00000B00  600A       758          bra.s     SwitchTest_8
                     759   SwitchTest_7:
                     760   ; else
                     761   ; printf("1") ;
00000B02  4879 0000  762          pea       @m68kde~1_4.L
00000B06  5F18      
00000B08  4E92       763          jsr       (A2)
00000B0A  584F       764          addq.w    #4,A7
                     765   SwitchTest_8:
00000B0C  E282       766          asr.l     #1,D2
00000B0E  60D8       767          bra       SwitchTest_4
                     768   SwitchTest_6:
00000B10  60A8       769          bra       SwitchTest_1
                     770   ; }
                     771   ; }
                     772   ; }
                     773   ; /*********************************************************************************************
                     774   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     775   ; *********************************************************************************************/
                     776   ; void Init_RS232(void)
                     777   ; {
                     778   _Init_RS232:
                     779   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  780          move.b    #21,4194368
00000B16  0040 0040 
                     781   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  782          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       783          rts
                     784   ; }
                     785   ; int kbhit(void)
                     786   ; {
                     787   _kbhit:
                     788   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  789          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  790          and.b     #1,D0
00000B2E  0C00 0001  791          cmp.b     #1,D0
00000B32  6604       792          bne.s     kbhit_1
                     793   ; return 1 ;
00000B34  7001       794          moveq     #1,D0
00000B36  6002       795          bra.s     kbhit_3
                     796   kbhit_1:
                     797   ; else
                     798   ; return 0 ;
00000B38  4280       799          clr.l     D0
                     800   kbhit_3:
00000B3A  4E75       801          rts
                     802   ; }
                     803   ; /*********************************************************************************************************
                     804   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     805   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     806   ; **  to allow the board to communicate with HyperTerminal Program
                     807   ; **
                     808   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     809   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     810   ; **  call _putch() also
                     811   ; *********************************************************************************************************/
                     812   ; int _putch( int c)
                     813   ; {
                     814   __putch:
00000B3C  4E56 0000  815          link      A6,#0
                     816   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     817   _putch_1:
00000B40  1039 0040  818          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  819          and.b     #2,D0
00000B4A  0C00 0002  820          cmp.b     #2,D0
00000B4E  6702       821          beq.s     _putch_3
00000B50  60EE       822          bra       _putch_1
                     823   _putch_3:
                     824   ; ;
                     825   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  826          move.l    8(A6),D0
00000B56  C03C 007F  827          and.b     #127,D0
00000B5A  13C0 0040  828          move.b    D0,4194370
00000B5E  0042      
                     829   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  830          move.l    8(A6),D0
00000B64  4E5E       831          unlk      A6
00000B66  4E75       832          rts
                     833   ; }
                     834   ; /*********************************************************************************************************
                     835   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     836   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     837   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     838   ; **
                     839   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     840   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     841   ; **  call _getch() also
                     842   ; *********************************************************************************************************/
                     843   ; int _getch( void )
                     844   ; {
                     845   __getch:
00000B68  2F02       846          move.l    D2,-(A7)
                     847   ; int c ;
                     848   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     849   _getch_1:
00000B6A  1039 0040  850          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  851          and.b     #1,D0
00000B74  0C00 0001  852          cmp.b     #1,D0
00000B78  6702       853          beq.s     _getch_3
00000B7A  60EE       854          bra       _getch_1
                     855   _getch_3:
                     856   ; ;
                     857   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  858          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  859          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  860          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       861          move.l    D0,D2
                     862   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     863   ; if(Echo)
00000B90  4AB9 0803  864          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       865          beq.s     _getch_4
                     866   ; _putch(c);
00000B98  2F02       867          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  868          jsr       __putch
00000B9E  584F       869          addq.w    #4,A7
                     870   _getch_4:
                     871   ; return c ;
00000BA0  2002       872          move.l    D2,D0
00000BA2  241F       873          move.l    (A7)+,D2
00000BA4  4E75       874          rts
                     875   ; }
                     876   ; // flush the input stream for any unread characters
                     877   ; void FlushKeyboard(void)
                     878   ; {
                     879   _FlushKeyboard:
00000BA6  4E56 FFFC  880          link      A6,#-4
                     881   ; char c ;
                     882   ; while(1)    {
                     883   FlushKeyboard_1:
                     884   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  885          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  886          and.b     #1,D0
00000BB4  0C00 0001  887          cmp.b     #1,D0
00000BB8  6610       888          bne.s     FlushKeyboard_4
                     889   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  890          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  891          and.b     #127,D0
00000BC4  1D40 FFFF  892          move.b    D0,-1(A6)
00000BC8  6002       893          bra.s     FlushKeyboard_5
                     894   FlushKeyboard_4:
                     895   ; else
                     896   ; return ;
00000BCA  6002       897          bra.s     FlushKeyboard_6
                     898   FlushKeyboard_5:
00000BCC  60DC       899          bra       FlushKeyboard_1
                     900   FlushKeyboard_6:
00000BCE  4E5E       901          unlk      A6
00000BD0  4E75       902          rts
                     903   ; }
                     904   ; }
                     905   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     906   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     907   ; char xtod(int c)
                     908   ; {
                     909   _xtod:
00000BD2  4E56 0000  910          link      A6,#0
00000BD6  2F02       911          move.l    D2,-(A7)
00000BD8  242E 0008  912          move.l    8(A6),D2
                     913   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  914          cmp.b     #57,D2
00000BE0  6E08       915          bgt.s     xtod_1
                     916   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       917          move.b    D2,D0
00000BE4  0400 0030  918          sub.b     #48,D0
00000BE8  6014       919          bra.s     xtod_3
                     920   xtod_1:
                     921   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  922          cmp.b     #70,D2
00000BEE  6F08       923          ble.s     xtod_4
                     924   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       925          move.b    D2,D0
00000BF2  0400 0057  926          sub.b     #87,D0
00000BF6  6006       927          bra.s     xtod_3
                     928   xtod_4:
                     929   ; else
                     930   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       931          move.b    D2,D0
00000BFA  0400 0037  932          sub.b     #55,D0
                     933   xtod_3:
00000BFE  241F       934          move.l    (A7)+,D2
00000C00  4E5E       935          unlk      A6
00000C02  4E75       936          rts
                     937   ; }
                     938   ; int Get2HexDigits(char *CheckSumPtr)
                     939   ; {
                     940   _Get2HexDigits:
00000C04  4E56 0000  941          link      A6,#0
00000C08  2F02       942          move.l    D2,-(A7)
                     943   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       944          move.l    D0,-(A7)
00000C0C  4EB8 0B68  945          jsr       __getch
00000C10  2200       946          move.l    D0,D1
00000C12  201F       947          move.l    (A7)+,D0
00000C14  2F01       948          move.l    D1,-(A7)
00000C16  4EB8 0BD2  949          jsr       _xtod
00000C1A  584F       950          addq.w    #4,A7
00000C1C  C0BC 0000  951          and.l     #255,D0
00000C20  00FF      
00000C22  E980       952          asl.l     #4,D0
00000C24  2F00       953          move.l    D0,-(A7)
00000C26  2F01       954          move.l    D1,-(A7)
00000C28  4EB8 0B68  955          jsr       __getch
00000C2C  221F       956          move.l    (A7)+,D1
00000C2E  2F00       957          move.l    D0,-(A7)
00000C30  4EB8 0BD2  958          jsr       _xtod
00000C34  584F       959          addq.w    #4,A7
00000C36  2200       960          move.l    D0,D1
00000C38  201F       961          move.l    (A7)+,D0
00000C3A  C2BC 0000  962          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       963          or.l      D1,D0
00000C42  2400       964          move.l    D0,D2
                     965   ; if(CheckSumPtr)
00000C44  4AAE 0008  966          tst.l     8(A6)
00000C48  6706       967          beq.s     Get2HexDigits_1
                     968   ; *CheckSumPtr += i ;
00000C4A  206E 0008  969          move.l    8(A6),A0
00000C4E  D510       970          add.b     D2,(A0)
                     971   Get2HexDigits_1:
                     972   ; return i ;
00000C50  2002       973          move.l    D2,D0
00000C52  241F       974          move.l    (A7)+,D2
00000C54  4E5E       975          unlk      A6
00000C56  4E75       976          rts
                     977   ; }
                     978   ; int Get4HexDigits(char *CheckSumPtr)
                     979   ; {
                     980   _Get4HexDigits:
00000C58  4E56 0000  981          link      A6,#0
                     982   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  983          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  984          jsr       _Get2HexDigits
00000C64  584F       985          addq.w    #4,A7
00000C66  E180       986          asl.l     #8,D0
00000C68  2F00       987          move.l    D0,-(A7)
00000C6A  2F2E 0008  988          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  989          jsr       _Get2HexDigits
00000C72  584F       990          addq.w    #4,A7
00000C74  2200       991          move.l    D0,D1
00000C76  201F       992          move.l    (A7)+,D0
00000C78  8081       993          or.l      D1,D0
00000C7A  4E5E       994          unlk      A6
00000C7C  4E75       995          rts
                     996   ; }
                     997   ; int Get6HexDigits(char *CheckSumPtr)
                     998   ; {
                     999   _Get6HexDigits:
00000C7E  4E56 0000 1000          link      A6,#0
                    1001   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1002          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1003          jsr       _Get4HexDigits
00000C8A  584F      1004          addq.w    #4,A7
00000C8C  E180      1005          asl.l     #8,D0
00000C8E  2F00      1006          move.l    D0,-(A7)
00000C90  2F2E 0008 1007          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1008          jsr       _Get2HexDigits
00000C98  584F      1009          addq.w    #4,A7
00000C9A  2200      1010          move.l    D0,D1
00000C9C  201F      1011          move.l    (A7)+,D0
00000C9E  8081      1012          or.l      D1,D0
00000CA0  4E5E      1013          unlk      A6
00000CA2  4E75      1014          rts
                    1015   ; }
                    1016   ; int Get8HexDigits(char *CheckSumPtr)
                    1017   ; {
                    1018   _Get8HexDigits:
00000CA4  4E56 0000 1019          link      A6,#0
                    1020   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1021          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1022          jsr       _Get4HexDigits
00000CB0  584F      1023          addq.w    #4,A7
00000CB2  E180      1024          asl.l     #8,D0
00000CB4  E180      1025          asl.l     #8,D0
00000CB6  2F00      1026          move.l    D0,-(A7)
00000CB8  2F2E 0008 1027          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1028          jsr       _Get4HexDigits
00000CC0  584F      1029          addq.w    #4,A7
00000CC2  2200      1030          move.l    D0,D1
00000CC4  201F      1031          move.l    (A7)+,D0
00000CC6  8081      1032          or.l      D1,D0
00000CC8  4E5E      1033          unlk      A6
00000CCA  4E75      1034          rts
                    1035   ; }
                    1036   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1037   _strcatInstruction:
00000CCC  4E56 0000 1038          link      A6,#0
00000CD0  2F2E 0008 1039          move.l    8(A6),-(A7)
00000CD4  4879 0803 1040          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1041          jsr       _strcat
00000CDE  55B8      
00000CE0  504F      1042          addq.w    #8,A7
00000CE2  4E5E      1043          unlk      A6
00000CE4  4E75      1044          rts
                    1045   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1046   _strcpyInstruction:
00000CE6  4E56 0000 1047          link      A6,#0
00000CEA  2F2E 0008 1048          move.l    8(A6),-(A7)
00000CEE  4879 0803 1049          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1050          jsr       _strcpy
00000CF8  5418      
00000CFA  504F      1051          addq.w    #8,A7
00000CFC  4E5E      1052          unlk      A6
00000CFE  4E75      1053          rts
                    1054   ; void DisassembleProgram(void )
                    1055   ; {
                    1056   _DisassembleProgram:
00000D00  4E56 FFF8 1057          link      A6,#-8
00000D04  48E7 3038 1058          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0803 1059          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1060          lea       _printf.L,A3
00000D12  55EA      
00000D14  49F9 0803 1061          lea       _Instruction.L,A4
00000D18  04E2      
                    1062   ; char c ;
                    1063   ; int i, j ;
                    1064   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1065   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1066          pea       @m68kde~1_5.L
00000D1E  5F1A      
00000D20  4E93      1067          jsr       (A3)
00000D22  584F      1068          addq.w    #4,A7
                    1069   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1070          clr.l     -(A7)
00000D26  4EB8 0CA4 1071          jsr       _Get8HexDigits
00000D2A  584F      1072          addq.w    #4,A7
00000D2C  2400      1073          move.l    D0,D2
                    1074   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1075          pea       @m68kde~1_6.L
00000D32  5F32      
00000D34  4E93      1076          jsr       (A3)
00000D36  584F      1077          addq.w    #4,A7
                    1078   ; while(1)    {
                    1079   DisassembleProgram_1:
                    1080   ; for(i = 0; i < 20; i ++)
00000D38  4283      1081          clr.l     D3
                    1082   DisassembleProgram_4:
00000D3A  0C83 0000 1083          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1084          bge       DisassembleProgram_6
                    1085   ; {
                    1086   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1087          move.l    #1,(A2)
00000D48  0001      
                    1088   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1089          move.l    D2,-(A7)
00000D4C  4EB9 0000 1090          jsr       _DisassembleInstruction
00000D50  3576      
00000D52  584F      1091          addq.w    #4,A7
                    1092   ; if(InstructionSize == 1)
00000D54  2012      1093          move.l    (A2),D0
00000D56  0C80 0000 1094          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1095          bne.s     DisassembleProgram_7
                    1096   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1097          move.l    A4,-(A7)
00000D60  2042      1098          move.l    D2,A0
00000D62  3210      1099          move.w    (A0),D1
00000D64  C2BC 0000 1100          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1101          move.l    D1,-(A7)
00000D6C  2F02      1102          move.l    D2,-(A7)
00000D6E  4879 0000 1103          pea       @m68kde~1_7.L
00000D72  5F56      
00000D74  4E93      1104          jsr       (A3)
00000D76  DEFC 0010 1105          add.w     #16,A7
00000D7A  6000 0138 1106          bra       DisassembleProgram_15
                    1107   DisassembleProgram_7:
                    1108   ; else if(InstructionSize == 2)
00000D7E  2012      1109          move.l    (A2),D0
00000D80  0C80 0000 1110          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1111          bne.s     DisassembleProgram_9
                    1112   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1113          move.l    A4,-(A7)
00000D8A  2042      1114          move.l    D2,A0
00000D8C  3228 0002 1115          move.w    2(A0),D1
00000D90  C2BC 0000 1116          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1117          move.l    D1,-(A7)
00000D98  2042      1118          move.l    D2,A0
00000D9A  3210      1119          move.w    (A0),D1
00000D9C  C2BC 0000 1120          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1121          move.l    D1,-(A7)
00000DA4  2F02      1122          move.l    D2,-(A7)
00000DA6  4879 0000 1123          pea       @m68kde~1_8.L
00000DAA  5F7E      
00000DAC  4E93      1124          jsr       (A3)
00000DAE  DEFC 0014 1125          add.w     #20,A7
00000DB2  6000 0100 1126          bra       DisassembleProgram_15
                    1127   DisassembleProgram_9:
                    1128   ; else if(InstructionSize == 3)
00000DB6  2012      1129          move.l    (A2),D0
00000DB8  0C80 0000 1130          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1131          bne       DisassembleProgram_11
                    1132   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1133          move.l    A4,-(A7)
00000DC4  2042      1134          move.l    D2,A0
00000DC6  3228 0004 1135          move.w    4(A0),D1
00000DCA  C2BC 0000 1136          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1137          move.l    D1,-(A7)
00000DD2  2042      1138          move.l    D2,A0
00000DD4  3228 0002 1139          move.w    2(A0),D1
00000DD8  C2BC 0000 1140          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1141          move.l    D1,-(A7)
00000DE0  2042      1142          move.l    D2,A0
00000DE2  3210      1143          move.w    (A0),D1
00000DE4  C2BC 0000 1144          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1145          move.l    D1,-(A7)
00000DEC  2F02      1146          move.l    D2,-(A7)
00000DEE  4879 0000 1147          pea       @m68kde~1_9.L
00000DF2  5FA6      
00000DF4  4E93      1148          jsr       (A3)
00000DF6  DEFC 0018 1149          add.w     #24,A7
00000DFA  6000 00B8 1150          bra       DisassembleProgram_15
                    1151   DisassembleProgram_11:
                    1152   ; else if(InstructionSize == 4)
00000DFE  2012      1153          move.l    (A2),D0
00000E00  0C80 0000 1154          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1155          bne       DisassembleProgram_13
                    1156   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1157          move.l    A4,-(A7)
00000E0C  2042      1158          move.l    D2,A0
00000E0E  3228 0006 1159          move.w    6(A0),D1
00000E12  C2BC 0000 1160          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1161          move.l    D1,-(A7)
00000E1A  2042      1162          move.l    D2,A0
00000E1C  3228 0004 1163          move.w    4(A0),D1
00000E20  C2BC 0000 1164          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1165          move.l    D1,-(A7)
00000E28  2042      1166          move.l    D2,A0
00000E2A  3228 0002 1167          move.w    2(A0),D1
00000E2E  C2BC 0000 1168          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1169          move.l    D1,-(A7)
00000E36  2042      1170          move.l    D2,A0
00000E38  3210      1171          move.w    (A0),D1
00000E3A  C2BC 0000 1172          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1173          move.l    D1,-(A7)
00000E42  2F02      1174          move.l    D2,-(A7)
00000E44  4879 0000 1175          pea       @m68kde~1_10.L
00000E48  5FCE      
00000E4A  4E93      1176          jsr       (A3)
00000E4C  DEFC 001C 1177          add.w     #28,A7
00000E50  6000 0062 1178          bra       DisassembleProgram_15
                    1179   DisassembleProgram_13:
                    1180   ; else if(InstructionSize == 5)
00000E54  2012      1181          move.l    (A2),D0
00000E56  0C80 0000 1182          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1183          bne       DisassembleProgram_15
                    1184   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1185          move.l    A4,-(A7)
00000E62  2042      1186          move.l    D2,A0
00000E64  3228 0008 1187          move.w    8(A0),D1
00000E68  C2BC 0000 1188          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1189          move.l    D1,-(A7)
00000E70  2042      1190          move.l    D2,A0
00000E72  3228 0006 1191          move.w    6(A0),D1
00000E76  C2BC 0000 1192          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1193          move.l    D1,-(A7)
00000E7E  2042      1194          move.l    D2,A0
00000E80  3228 0004 1195          move.w    4(A0),D1
00000E84  C2BC 0000 1196          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1197          move.l    D1,-(A7)
00000E8C  2042      1198          move.l    D2,A0
00000E8E  3228 0002 1199          move.w    2(A0),D1
00000E92  C2BC 0000 1200          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1201          move.l    D1,-(A7)
00000E9A  2042      1202          move.l    D2,A0
00000E9C  3210      1203          move.w    (A0),D1
00000E9E  C2BC 0000 1204          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1205          move.l    D1,-(A7)
00000EA6  2F02      1206          move.l    D2,-(A7)
00000EA8  4879 0000 1207          pea       @m68kde~1_11.L
00000EAC  5FF6      
00000EAE  4E93      1208          jsr       (A3)
00000EB0  DEFC 0020 1209          add.w     #32,A7
                    1210   DisassembleProgram_15:
                    1211   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1212          move.l    (A2),D0
00000EB6  E388      1213          lsl.l     #1,D0
00000EB8  D480      1214          add.l     D0,D2
00000EBA  5283      1215          addq.l    #1,D3
00000EBC  6000 FE7C 1216          bra       DisassembleProgram_4
                    1217   DisassembleProgram_6:
                    1218   ; }
                    1219   ; c = _getch() ;
00000EC0  4EB8 0B68 1220          jsr       __getch
00000EC4  1D40 FFFB 1221          move.b    D0,-5(A6)
                    1222   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1223          move.b    -5(A6),D0
00000ECC  0C00 001B 1224          cmp.b     #27,D0
00000ED0  6602      1225          bne.s     DisassembleProgram_17
                    1226   ; return ;
00000ED2  6004      1227          bra.s     DisassembleProgram_19
                    1228   DisassembleProgram_17:
00000ED4  6000 FE62 1229          bra       DisassembleProgram_1
                    1230   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1231          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1232          unlk      A6
00000EDE  4E75      1233          rts
                    1234   ; }
                    1235   ; }
                    1236   ; void DumpMemory(void)   // simple dump memory fn
                    1237   ; {
                    1238   _DumpMemory:
00000EE0  48E7 3C30 1239          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1240          lea       _printf.L,A2
00000EE8  55EA      
00000EEA  47F9 0000 1241          lea       _putch.L,A3
00000EEE  5506      
                    1242   ; int i, j ;
                    1243   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1244   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1245          pea       @m68kde~1_12.L
00000EF4  601E      
00000EF6  4E92      1246          jsr       (A2)
00000EF8  584F      1247          addq.w    #4,A7
                    1248   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1249          pea       @m68kde~1_5.L
00000EFE  5F1A      
00000F00  4E92      1250          jsr       (A2)
00000F02  584F      1251          addq.w    #4,A7
                    1252   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1253          clr.l     -(A7)
00000F06  4EB8 0CA4 1254          jsr       _Get8HexDigits
00000F0A  584F      1255          addq.w    #4,A7
00000F0C  2600      1256          move.l    D0,D3
                    1257   ; while(1)    {
                    1258   DumpMemory_1:
                    1259   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1260          clr.l     D5
                    1261   DumpMemory_4:
00000F10  0C85 0000 1262          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1263          bge       DumpMemory_6
                    1264   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1265          move.l    D3,-(A7)
00000F1C  4879 0000 1266          pea       @m68kde~1_13.L
00000F20  6058      
00000F22  4E92      1267          jsr       (A2)
00000F24  504F      1268          addq.w    #8,A7
                    1269   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1270          clr.l     D2
                    1271   DumpMemory_7:
00000F28  0C82 0000 1272          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1273          bge.s     DumpMemory_9
                    1274   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1275          move.l    D3,A0
00000F32  1230 2800 1276          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1277          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1278          move.l    D1,-(A7)
00000F3E  4879 0000 1279          pea       @m68kde~1_14.L
00000F42  6060      
00000F44  4E92      1280          jsr       (A2)
00000F46  504F      1281          addq.w    #8,A7
                    1282   ; putchar(' ') ;
00000F48  4878 0020 1283          pea       32
00000F4C  4E93      1284          jsr       (A3)
00000F4E  584F      1285          addq.w    #4,A7
00000F50  5282      1286          addq.l    #1,D2
00000F52  60D4      1287          bra       DumpMemory_7
                    1288   DumpMemory_9:
                    1289   ; }
                    1290   ; // now display the data as ASCII at the end
                    1291   ; printf("  ") ;
00000F54  4879 0000 1292          pea       @m68kde~1_15.L
00000F58  6066      
00000F5A  4E92      1293          jsr       (A2)
00000F5C  584F      1294          addq.w    #4,A7
                    1295   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1296          clr.l     D2
                    1297   DumpMemory_10:
00000F60  0C82 0000 1298          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1299          bge       DumpMemory_12
                    1300   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1301          move.l    D3,A0
00000F6C  1030 2800 1302          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1303          and.b     #127,D0
00000F74  1800      1304          move.b    D0,D4
                    1305   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1306          cmp.b     #127,D4
00000F7A  6206      1307          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1308          cmp.b     #32,D4
00000F80  640A      1309          bhs.s     DumpMemory_13
                    1310   DumpMemory_15:
                    1311   ; putchar('.') ;
00000F82  4878 002E 1312          pea       46
00000F86  4E93      1313          jsr       (A3)
00000F88  584F      1314          addq.w    #4,A7
00000F8A  6012      1315          bra.s     DumpMemory_14
                    1316   DumpMemory_13:
                    1317   ; else
                    1318   ; putchar(RamPtr[j]) ;
00000F8C  2043      1319          move.l    D3,A0
00000F8E  1230 2800 1320          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1321          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1322          move.l    D1,-(A7)
00000F9A  4E93      1323          jsr       (A3)
00000F9C  584F      1324          addq.w    #4,A7
                    1325   DumpMemory_14:
00000F9E  5282      1326          addq.l    #1,D2
00000FA0  60BE      1327          bra       DumpMemory_10
                    1328   DumpMemory_12:
                    1329   ; }
                    1330   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1331          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1332          addq.l    #1,D5
00000FAA  6000 FF64 1333          bra       DumpMemory_4
                    1334   DumpMemory_6:
                    1335   ; }
                    1336   ; printf("\r\n") ;
00000FAE  4879 0000 1337          pea       @m68kde~1_1.L
00000FB2  5EFC      
00000FB4  4E92      1338          jsr       (A2)
00000FB6  584F      1339          addq.w    #4,A7
                    1340   ; c = _getch() ;
00000FB8  4EB8 0B68 1341          jsr       __getch
00000FBC  1800      1342          move.b    D0,D4
                    1343   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1344          cmp.b     #27,D4
00000FC2  6602      1345          bne.s     DumpMemory_16
                    1346   ; break ;
00000FC4  6004      1347          bra.s     DumpMemory_3
                    1348   DumpMemory_16:
00000FC6  6000 FF46 1349          bra       DumpMemory_1
                    1350   DumpMemory_3:
00000FCA  4CDF 0C3C 1351          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1352          rts
                    1353   ; }
                    1354   ; }
                    1355   ; void FillMemory()
                    1356   ; {
                    1357   _FillMemory:
00000FD0  48E7 3820 1358          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1359          lea       _printf.L,A2
00000FD8  55EA      
                    1360   ; char *StartRamPtr, *EndRamPtr ;
                    1361   ; unsigned char FillData ;
                    1362   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1363          pea       @m68kde~1_16.L
00000FDE  606A      
00000FE0  4E92      1364          jsr       (A2)
00000FE2  584F      1365          addq.w    #4,A7
                    1366   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1367          pea       @m68kde~1_5.L
00000FE8  5F1A      
00000FEA  4E92      1368          jsr       (A2)
00000FEC  584F      1369          addq.w    #4,A7
                    1370   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1371          clr.l     -(A7)
00000FF0  4EB8 0CA4 1372          jsr       _Get8HexDigits
00000FF4  584F      1373          addq.w    #4,A7
00000FF6  2400      1374          move.l    D0,D2
                    1375   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1376          pea       @m68kde~1_17.L
00000FFC  607E      
00000FFE  4E92      1377          jsr       (A2)
00001000  584F      1378          addq.w    #4,A7
                    1379   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1380          clr.l     -(A7)
00001004  4EB8 0CA4 1381          jsr       _Get8HexDigits
00001008  584F      1382          addq.w    #4,A7
0000100A  2800      1383          move.l    D0,D4
                    1384   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1385          pea       @m68kde~1_18.L
00001010  6094      
00001012  4E92      1386          jsr       (A2)
00001014  584F      1387          addq.w    #4,A7
                    1388   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1389          clr.l     -(A7)
00001018  4EB8 0C04 1390          jsr       _Get2HexDigits
0000101C  584F      1391          addq.w    #4,A7
0000101E  1600      1392          move.b    D0,D3
                    1393   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1394          and.l     #255,D3
00001024  00FF      
00001026  2F03      1395          move.l    D3,-(A7)
00001028  2F04      1396          move.l    D4,-(A7)
0000102A  2F02      1397          move.l    D2,-(A7)
0000102C  4879 0000 1398          pea       @m68kde~1_19.L
00001030  60A8      
00001032  4E92      1399          jsr       (A2)
00001034  DEFC 0010 1400          add.w     #16,A7
                    1401   ; while(StartRamPtr < EndRamPtr)
                    1402   FillMemory_1:
00001038  B484      1403          cmp.l     D4,D2
0000103A  6408      1404          bhs.s     FillMemory_3
                    1405   ; *StartRamPtr++ = FillData ;
0000103C  2042      1406          move.l    D2,A0
0000103E  5282      1407          addq.l    #1,D2
00001040  1083      1408          move.b    D3,(A0)
00001042  60F4      1409          bra       FillMemory_1
                    1410   FillMemory_3:
00001044  4CDF 041C 1411          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1412          rts
                    1413   ; }
                    1414   ; void Load_SRecordFile()
                    1415   ; {
                    1416   _Load_SRecordFile:
0000104A  4E56 FFDC 1417          link      A6,#-36
0000104E  48E7 3F3C 1418          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1419          lea       -6(A6),A2
00001056  47F8 0C04 1420          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1421          lea       _printf.L,A4
0000105E  55EA      
                    1422   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1423          clr.l     -18(A6)
00001064  3A7C 0000 1424          move.w    #0,A5
                    1425   ; int result, ByteCount ;
                    1426   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1427   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1428   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1429          moveq     #0,D7
                    1430   ; AddressFail = 0 ;
0000106A  42AE FFEA 1431          clr.l     -22(A6)
                    1432   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0803 1433          clr.l     _Echo.L
00001072  00E0      
                    1434   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1435          pea       @m68kde~1_20.L
00001078  60D8      
0000107A  4E94      1436          jsr       (A4)
0000107C  584F      1437          addq.w    #4,A7
                    1438   ; while(1)    {
                    1439   Load_SRecordFile_1:
                    1440   ; CheckSum = 0 ;
0000107E  4212      1441          clr.b     (A2)
                    1442   ; do {
                    1443   Load_SRecordFile_4:
                    1444   ; c = toupper(_getch()) ;
00001080  2F00      1445          move.l    D0,-(A7)
00001082  4EB8 0B68 1446          jsr       __getch
00001086  2200      1447          move.l    D0,D1
00001088  201F      1448          move.l    (A7)+,D0
0000108A  2F01      1449          move.l    D1,-(A7)
0000108C  4EB9 0000 1450          jsr       _toupper
00001090  55CE      
00001092  584F      1451          addq.w    #4,A7
00001094  1C00      1452          move.b    D0,D6
                    1453   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1454          cmp.b     #27,D6
0000109A  6604      1455          bne.s     Load_SRecordFile_6
                    1456   ; return;
0000109C  6000 0132 1457          bra       Load_SRecordFile_8
                    1458   Load_SRecordFile_6:
000010A0  0C06 0053 1459          cmp.b     #83,D6
000010A4  66DA      1460          bne       Load_SRecordFile_4
                    1461   ; }while(c != (char)('S'));   // wait for S start of header
                    1462   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1463          jsr       __getch
000010AA  1600      1464          move.b    D0,D3
                    1465   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1466          cmp.b     #48,D3
000010B0  6706      1467          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1468          cmp.b     #53,D3
000010B6  6604      1469          bne.s     Load_SRecordFile_9
                    1470   Load_SRecordFile_11:
                    1471   ; continue ;
000010B8  6000 00D2 1472          bra       Load_SRecordFile_23
                    1473   Load_SRecordFile_9:
                    1474   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1475          cmp.b     #55,D3
000010C0  6D04      1476          blt.s     Load_SRecordFile_12
                    1477   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1478          bra       Load_SRecordFile_3
                    1479   Load_SRecordFile_12:
                    1480   ; // get the bytecount
                    1481   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1482          move.l    A2,-(A7)
000010C8  4E93      1483          jsr       (A3)
000010CA  584F      1484          addq.w    #4,A7
000010CC  2D40 FFF6 1485          move.l    D0,-10(A6)
                    1486   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1487   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1488          cmp.b     #49,D3
000010D4  660E      1489          bne.s     Load_SRecordFile_14
                    1490   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1491          moveq     #2,D5
                    1492   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1493          move.l    A2,-(A7)
000010DA  4EB8 0C58 1494          jsr       _Get4HexDigits
000010DE  584F      1495          addq.w    #4,A7
000010E0  2800      1496          move.l    D0,D4
000010E2  6020      1497          bra.s     Load_SRecordFile_17
                    1498   Load_SRecordFile_14:
                    1499   ; }
                    1500   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1501          cmp.b     #50,D3
000010E8  660E      1502          bne.s     Load_SRecordFile_16
                    1503   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1504          moveq     #3,D5
                    1505   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1506          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1507          jsr       _Get6HexDigits
000010F2  584F      1508          addq.w    #4,A7
000010F4  2800      1509          move.l    D0,D4
000010F6  600C      1510          bra.s     Load_SRecordFile_17
                    1511   Load_SRecordFile_16:
                    1512   ; }
                    1513   ; else    {
                    1514   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1515          moveq     #4,D5
                    1516   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1517          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1518          jsr       _Get8HexDigits
00001100  584F      1519          addq.w    #4,A7
00001102  2800      1520          move.l    D0,D4
                    1521   Load_SRecordFile_17:
                    1522   ; }
                    1523   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1524          move.l    D4,-4(A6)
                    1525   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1526          move.l    -10(A6),D0
0000110C  9085      1527          sub.l     D5,D0
0000110E  5380      1528          subq.l    #1,D0
00001110  2D40 FFE2 1529          move.l    D0,-30(A6)
                    1530   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1531          clr.l     D2
                    1532   Load_SRecordFile_18:
00001116  B4AE FFE2 1533          cmp.l     -30(A6),D2
0000111A  6C1E      1534          bge.s     Load_SRecordFile_20
                    1535   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1536          move.l    A2,-(A7)
0000111E  4E93      1537          jsr       (A3)
00001120  584F      1538          addq.w    #4,A7
00001122  2D40 FFDE 1539          move.l    D0,-34(A6)
                    1540   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1541          move.l    -34(A6),D0
0000112A  206E FFFC 1542          move.l    -4(A6),A0
0000112E  52AE FFFC 1543          addq.l    #1,-4(A6)
00001132  1080      1544          move.b    D0,(A0)
                    1545   ; ByteTotal++;
00001134  524D      1546          addq.w    #1,A5
00001136  5282      1547          addq.l    #1,D2
00001138  60DC      1548          bra       Load_SRecordFile_18
                    1549   Load_SRecordFile_20:
                    1550   ; }
                    1551   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1552   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1553          clr.l     -(A7)
0000113C  4E93      1554          jsr       (A3)
0000113E  584F      1555          addq.w    #4,A7
00001140  1D40 FFFB 1556          move.b    D0,-5(A6)
                    1557   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1558          move.b    (A2),D0
00001146  4600      1559          not.b     D0
00001148  4880      1560          ext.w     D0
0000114A  C07C 00FF 1561          and.w     #255,D0
0000114E  122E FFFB 1562          move.b    -5(A6),D1
00001152  4881      1563          ext.w     D1
00001154  C27C 00FF 1564          and.w     #255,D1
00001158  B041      1565          cmp.w     D1,D0
0000115A  6708      1566          beq.s     Load_SRecordFile_21
                    1567   ; LoadFailed = 1 ;
0000115C  7E01      1568          moveq     #1,D7
                    1569   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1570          move.l    D4,-26(A6)
                    1571   ; break;
00001162  602C      1572          bra.s     Load_SRecordFile_3
                    1573   Load_SRecordFile_21:
                    1574   ; }
                    1575   ; SRecordCount++ ;
00001164  52AE FFEE 1576          addq.l    #1,-18(A6)
                    1577   ; // display feedback on progress
                    1578   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1579          move.l    -18(A6),-(A7)
0000116C  4878 0019 1580          pea       25
00001170  4EB9 0000 1581          jsr       LDIV
00001174  543A      
00001176  202F 0004 1582          move.l    4(A7),D0
0000117A  504F      1583          addq.w    #8,A7
0000117C  4A80      1584          tst.l     D0
0000117E  660C      1585          bne.s     Load_SRecordFile_23
                    1586   ; putchar('.') ;
00001180  4878 002E 1587          pea       46
00001184  4EB9 0000 1588          jsr       _putch
00001188  5506      
0000118A  584F      1589          addq.w    #4,A7
                    1590   Load_SRecordFile_23:
0000118C  6000 FEF0 1591          bra       Load_SRecordFile_1
                    1592   Load_SRecordFile_3:
                    1593   ; }
                    1594   ; if(LoadFailed == 1) {
00001190  0C87 0000 1595          cmp.l     #1,D7
00001194  0001      
00001196  6610      1596          bne.s     Load_SRecordFile_25
                    1597   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1598          move.l    -26(A6),-(A7)
0000119C  4879 0000 1599          pea       @m68kde~1_21.L
000011A0  6108      
000011A2  4E94      1600          jsr       (A4)
000011A4  504F      1601          addq.w    #8,A7
000011A6  600C      1602          bra.s     Load_SRecordFile_26
                    1603   Load_SRecordFile_25:
                    1604   ; }
                    1605   ; else
                    1606   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1607          move.l    A5,-(A7)
000011AA  4879 0000 1608          pea       @m68kde~1_22.L
000011AE  612E      
000011B0  4E94      1609          jsr       (A4)
000011B2  504F      1610          addq.w    #8,A7
                    1611   Load_SRecordFile_26:
                    1612   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1613   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1614          clr.l     D2
                    1615   Load_SRecordFile_27:
000011B6  0C82 0006 1616          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1617          bge.s     Load_SRecordFile_29
000011BE  5282      1618          addq.l    #1,D2
000011C0  60F4      1619          bra       Load_SRecordFile_27
                    1620   Load_SRecordFile_29:
                    1621   ; ;
                    1622   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1623          jsr       _FlushKeyboard
                    1624   ; Echo = 1;
000011C6  23FC 0000 1625          move.l    #1,_Echo.L
000011CA  0001 0803 
000011CE  00E0      
                    1626   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1627          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1628          unlk      A6
000011D6  4E75      1629          rts
                    1630   ; }
                    1631   ; void MemoryChange(void)
                    1632   ; {
                    1633   _MemoryChange:
000011D8  48E7 3820 1634          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1635          lea       _printf.L,A2
000011E0  55EA      
                    1636   ; unsigned char *RamPtr,c ; // pointer to memory
                    1637   ; int Data ;
                    1638   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1639          pea       @m68kde~1_23.L
000011E6  6150      
000011E8  4E92      1640          jsr       (A2)
000011EA  584F      1641          addq.w    #4,A7
                    1642   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1643          pea       @m68kde~1_24.L
000011F0  616C      
000011F2  4E92      1644          jsr       (A2)
000011F4  584F      1645          addq.w    #4,A7
                    1646   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1647          pea       @m68kde~1_25.L
000011FA  61B2      
000011FC  4E92      1648          jsr       (A2)
000011FE  584F      1649          addq.w    #4,A7
                    1650   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1651          clr.l     -(A7)
00001202  4EB8 0CA4 1652          jsr       _Get8HexDigits
00001206  584F      1653          addq.w    #4,A7
00001208  2600      1654          move.l    D0,D3
                    1655   ; while(1)    {
                    1656   MemoryChange_1:
                    1657   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1658          move.l    D3,A0
0000120C  1210      1659          move.b    (A0),D1
0000120E  C2BC 0000 1660          and.l     #255,D1
00001212  00FF      
00001214  2F01      1661          move.l    D1,-(A7)
00001216  2F03      1662          move.l    D3,-(A7)
00001218  4879 0000 1663          pea       @m68kde~1_26.L
0000121C  61C4      
0000121E  4E92      1664          jsr       (A2)
00001220  DEFC 000C 1665          add.w     #12,A7
                    1666   ; c = tolower(_getch()) ;
00001224  2F00      1667          move.l    D0,-(A7)
00001226  4EB8 0B68 1668          jsr       __getch
0000122A  2200      1669          move.l    D0,D1
0000122C  201F      1670          move.l    (A7)+,D0
0000122E  2F01      1671          move.l    D1,-(A7)
00001230  4EB9 0000 1672          jsr       _tolower
00001234  556A      
00001236  584F      1673          addq.w    #4,A7
00001238  1400      1674          move.b    D0,D2
                    1675   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1676          cmp.b     #27,D2
0000123E  6604      1677          bne.s     MemoryChange_4
                    1678   ; return ;                                // abort on escape
00001240  6000 0090 1679          bra       MemoryChange_6
                    1680   MemoryChange_4:
                    1681   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1682          cmp.b     #48,D2
00001248  6506      1683          blo.s     MemoryChange_10
0000124A  0C02 0039 1684          cmp.b     #57,D2
0000124E  6310      1685          bls.s     MemoryChange_9
                    1686   MemoryChange_10:
00001250  0C02 0061 1687          cmp.b     #97,D2
00001254  6500 006E 1688          blo       MemoryChange_7
00001258  0C02 0066 1689          cmp.b     #102,D2
0000125C  6200 0066 1690          bhi       MemoryChange_7
                    1691   MemoryChange_9:
                    1692   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1693          and.l     #255,D2
00001264  00FF      
00001266  2F02      1694          move.l    D2,-(A7)
00001268  4EB8 0BD2 1695          jsr       _xtod
0000126C  584F      1696          addq.w    #4,A7
0000126E  C0BC 0000 1697          and.l     #255,D0
00001272  00FF      
00001274  E980      1698          asl.l     #4,D0
00001276  2F00      1699          move.l    D0,-(A7)
00001278  2F01      1700          move.l    D1,-(A7)
0000127A  4EB8 0B68 1701          jsr       __getch
0000127E  221F      1702          move.l    (A7)+,D1
00001280  2F00      1703          move.l    D0,-(A7)
00001282  4EB8 0BD2 1704          jsr       _xtod
00001286  584F      1705          addq.w    #4,A7
00001288  2200      1706          move.l    D0,D1
0000128A  201F      1707          move.l    (A7)+,D0
0000128C  C2BC 0000 1708          and.l     #255,D1
00001290  00FF      
00001292  8081      1709          or.l      D1,D0
00001294  2800      1710          move.l    D0,D4
                    1711   ; *RamPtr = (char)(Data) ;
00001296  2043      1712          move.l    D3,A0
00001298  1084      1713          move.b    D4,(A0)
                    1714   ; if(*RamPtr != Data) {
0000129A  2043      1715          move.l    D3,A0
0000129C  1010      1716          move.b    (A0),D0
0000129E  C0BC 0000 1717          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1718          cmp.l     D4,D0
000012A6  671A      1719          beq.s     MemoryChange_11
                    1720   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1721          move.l    D3,A0
000012AA  1210      1722          move.b    (A0),D1
000012AC  C2BC 0000 1723          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1724          move.l    D1,-(A7)
000012B4  2F04      1725          move.l    D4,-(A7)
000012B6  4879 0000 1726          pea       @m68kde~1_27.L
000012BA  61D6      
000012BC  4E92      1727          jsr       (A2)
000012BE  DEFC 000C 1728          add.w     #12,A7
                    1729   MemoryChange_11:
000012C2  6008      1730          bra.s     MemoryChange_13
                    1731   MemoryChange_7:
                    1732   ; }
                    1733   ; }
                    1734   ; else if(c == (char)('-'))
000012C4  0C02 002D 1735          cmp.b     #45,D2
000012C8  6602      1736          bne.s     MemoryChange_13
                    1737   ; RamPtr -= 2 ; ;
000012CA  5583      1738          subq.l    #2,D3
                    1739   MemoryChange_13:
                    1740   ; RamPtr ++ ;
000012CC  5283      1741          addq.l    #1,D3
000012CE  6000 FF3A 1742          bra       MemoryChange_1
                    1743   MemoryChange_6:
000012D2  4CDF 041C 1744          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1745          rts
                    1746   ; }
                    1747   ; }
                    1748   ; /*******************************************************************
                    1749   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1750   ; ********************************************************************/
                    1751   ; void ProgramFlashChip(void)
                    1752   ; {
                    1753   _ProgramFlashChip:
000012D8  4E75      1754          rts
                    1755   ; //
                    1756   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1757   ; // TODO : then verify by reading it back and comparing to memory
                    1758   ; //
                    1759   ; }
                    1760   ; /*************************************************************************
                    1761   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1762   ; **************************************************************************/
                    1763   ; void LoadFromFlashChip(void)
                    1764   ; {
                    1765   _LoadFromFlashChip:
                    1766   ; printf("\r\nLoading Program From SPI Flash....") ;
000012DA  4879 0000 1767          pea       @m68kde~1_28.L
000012DE  620A      
000012E0  4EB9 0000 1768          jsr       _printf
000012E4  55EA      
000012E6  584F      1769          addq.w    #4,A7
000012E8  4E75      1770          rts
                    1771   ; //
                    1772   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1773   ; //
                    1774   ; }
                    1775   ; // get rid of excess spaces
                    1776   ; void FormatInstructionForTrace(void)
                    1777   ; {
                    1778   _FormatInstructionForTrace:
000012EA  4E56 FF9C 1779          link      A6,#-100
000012EE  48E7 3C20 1780          movem.l   D2/D3/D4/D5/A2,-(A7)
000012F2  45EE FF9C 1781          lea       -100(A6),A2
                    1782   ; unsigned short int i ;
                    1783   ; char c, temp[100], *iptr, *tempptr ;
                    1784   ; for(i=0; i < 100; i++)
000012F6  4244      1785          clr.w     D4
                    1786   FormatInstructionForTrace_1:
000012F8  0C44 0064 1787          cmp.w     #100,D4
000012FC  640E      1788          bhs.s     FormatInstructionForTrace_3
                    1789   ; temp[i] = 0 ;
000012FE  C8BC 0000 1790          and.l     #65535,D4
00001302  FFFF      
00001304  4232 4800 1791          clr.b     0(A2,D4.L)
00001308  5244      1792          addq.w    #1,D4
0000130A  60EC      1793          bra       FormatInstructionForTrace_1
                    1794   FormatInstructionForTrace_3:
                    1795   ; iptr = Instruction ;
0000130C  41F9 0803 1796          lea       _Instruction.L,A0
00001310  04E2      
00001312  2408      1797          move.l    A0,D2
                    1798   ; tempptr = temp ;
00001314  2A0A      1799          move.l    A2,D5
                    1800   ; do{
                    1801   FormatInstructionForTrace_4:
                    1802   ; c = *iptr++ ;
00001316  2042      1803          move.l    D2,A0
00001318  5282      1804          addq.l    #1,D2
0000131A  1610      1805          move.b    (A0),D3
                    1806   ; *tempptr++ = c ;  // copy chars over
0000131C  2045      1807          move.l    D5,A0
0000131E  5285      1808          addq.l    #1,D5
00001320  1083      1809          move.b    D3,(A0)
                    1810   ; if(c == ' ')  {   // if copied space
00001322  0C03 0020 1811          cmp.b     #32,D3
00001326  6622      1812          bne.s     FormatInstructionForTrace_6
                    1813   ; while(*iptr == ' ') {
                    1814   FormatInstructionForTrace_8:
00001328  2042      1815          move.l    D2,A0
0000132A  1010      1816          move.b    (A0),D0
0000132C  0C00 0020 1817          cmp.b     #32,D0
00001330  660C      1818          bne.s     FormatInstructionForTrace_10
                    1819   ; if(*iptr == 0)  // if end of string then done
00001332  2042      1820          move.l    D2,A0
00001334  1010      1821          move.b    (A0),D0
00001336  6602      1822          bne.s     FormatInstructionForTrace_11
                    1823   ; break ;
00001338  6004      1824          bra.s     FormatInstructionForTrace_10
                    1825   FormatInstructionForTrace_11:
                    1826   ; iptr++ ; // skip over remaining spaces
0000133A  5282      1827          addq.l    #1,D2
0000133C  60EA      1828          bra       FormatInstructionForTrace_8
                    1829   FormatInstructionForTrace_10:
                    1830   ; }
                    1831   ; strcat(tempptr,iptr) ;
0000133E  2F02      1832          move.l    D2,-(A7)
00001340  2F05      1833          move.l    D5,-(A7)
00001342  4EB9 0000 1834          jsr       _strcat
00001346  55B8      
00001348  504F      1835          addq.w    #8,A7
                    1836   FormatInstructionForTrace_6:
0000134A  4A03      1837          tst.b     D3
0000134C  66C8      1838          bne       FormatInstructionForTrace_4
                    1839   ; }
                    1840   ; }while(c != 0) ;
                    1841   ; strcpyInstruction(temp) ;
0000134E  2F0A      1842          move.l    A2,-(A7)
00001350  4EB8 0CE6 1843          jsr       _strcpyInstruction
00001354  584F      1844          addq.w    #4,A7
00001356  4CDF 043C 1845          movem.l   (A7)+,D2/D3/D4/D5/A2
0000135A  4E5E      1846          unlk      A6
0000135C  4E75      1847          rts
                    1848   ; }
                    1849   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1850   ; // IMPORTANT
                    1851   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1852   ; // has to be done with an interrupt (IRQ Level 6)
                    1853   ; //
                    1854   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1855   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1856   ; //
                    1857   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1858   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1859   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1860   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1861   ; // program area
                    1862   ; //
                    1863   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1864   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1865   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1866   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1867   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1868   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1869   ; void DumpRegisters()
                    1870   ; {
                    1871   _DumpRegisters:
0000135E  48E7 3F3C 1872          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001362  45F9 0000 1873          lea       _putch.L,A2
00001366  5506      
00001368  47F9 0000 1874          lea       _printf.L,A3
0000136C  55EA      
0000136E  49F9 0803 1875          lea       _SR.L,A4
00001372  012C      
00001374  4BF9 0803 1876          lea       _WatchPointString.L,A5
00001378  01C2      
                    1877   ; short i, x, j, k ;
                    1878   ; unsigned char c, *BytePointer;
                    1879   ; // buld up strings for displaying watchpoints
                    1880   ; for(x = 0; x < (short)(8); x++)
0000137A  4242      1881          clr.w     D2
                    1882   DumpRegisters_1:
0000137C  0C42 0008 1883          cmp.w     #8,D2
00001380  6C00 01C6 1884          bge       DumpRegisters_3
                    1885   ; {
                    1886   ; if(WatchPointSetOrCleared[x] == 1)
00001384  48C2      1887          ext.l     D2
00001386  2002      1888          move.l    D2,D0
00001388  E588      1889          lsl.l     #2,D0
0000138A  41F9 0803 1890          lea       _WatchPointSetOrCleared.L,A0
0000138E  01A2      
00001390  2030 0800 1891          move.l    0(A0,D0.L),D0
00001394  0C80 0000 1892          cmp.l     #1,D0
00001398  0001      
0000139A  6600 0186 1893          bne       DumpRegisters_4
                    1894   ; {
                    1895   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000139E  48C2      1896          ext.l     D2
000013A0  2202      1897          move.l    D2,D1
000013A2  E589      1898          lsl.l     #2,D1
000013A4  41F9 0803 1899          lea       _WatchPointAddress.L,A0
000013A8  0182      
000013AA  2F30 1800 1900          move.l    0(A0,D1.L),-(A7)
000013AE  4879 0000 1901          pea       @m68kde~1_29.L
000013B2  6230      
000013B4  220D      1902          move.l    A5,D1
000013B6  48C2      1903          ext.l     D2
000013B8  2F00      1904          move.l    D0,-(A7)
000013BA  2002      1905          move.l    D2,D0
000013BC  C1FC 0064 1906          muls      #100,D0
000013C0  D280      1907          add.l     D0,D1
000013C2  201F      1908          move.l    (A7)+,D0
000013C4  2F01      1909          move.l    D1,-(A7)
000013C6  4EB9 0000 1910          jsr       _sprintf
000013CA  5586      
000013CC  DEFC 000C 1911          add.w     #12,A7
                    1912   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013D0  48C2      1913          ext.l     D2
000013D2  2002      1914          move.l    D2,D0
000013D4  E588      1915          lsl.l     #2,D0
000013D6  41F9 0803 1916          lea       _WatchPointAddress.L,A0
000013DA  0182      
000013DC  2A30 0800 1917          move.l    0(A0,D0.L),D5
                    1918   ; for(j = 0; j < (short)(16); j+=2)
000013E0  4243      1919          clr.w     D3
                    1920   DumpRegisters_6:
000013E2  0C43 0010 1921          cmp.w     #16,D3
000013E6  6C00 0082 1922          bge       DumpRegisters_8
                    1923   ; {
                    1924   ; for(k = 0; k < (short)(2); k++)
000013EA  4246      1925          clr.w     D6
                    1926   DumpRegisters_9:
000013EC  0C46 0002 1927          cmp.w     #2,D6
000013F0  6C00 0052 1928          bge       DumpRegisters_11
                    1929   ; {
                    1930   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000013F4  2045      1931          move.l    D5,A0
000013F6  48C3      1932          ext.l     D3
000013F8  2203      1933          move.l    D3,D1
000013FA  48C6      1934          ext.l     D6
000013FC  D286      1935          add.l     D6,D1
000013FE  1230 1800 1936          move.b    0(A0,D1.L),D1
00001402  C2BC 0000 1937          and.l     #255,D1
00001406  00FF      
00001408  2F01      1938          move.l    D1,-(A7)
0000140A  4879 0000 1939          pea       @m68kde~1_14.L
0000140E  6060      
00001410  4879 0803 1940          pea       _TempString.L
00001414  0546      
00001416  4EB9 0000 1941          jsr       _sprintf
0000141A  5586      
0000141C  DEFC 000C 1942          add.w     #12,A7
                    1943   ; strcat(WatchPointString[x], TempString) ;
00001420  4879 0803 1944          pea       _TempString.L
00001424  0546      
00001426  220D      1945          move.l    A5,D1
00001428  48C2      1946          ext.l     D2
0000142A  2F00      1947          move.l    D0,-(A7)
0000142C  2002      1948          move.l    D2,D0
0000142E  C1FC 0064 1949          muls      #100,D0
00001432  D280      1950          add.l     D0,D1
00001434  201F      1951          move.l    (A7)+,D0
00001436  2F01      1952          move.l    D1,-(A7)
00001438  4EB9 0000 1953          jsr       _strcat
0000143C  55B8      
0000143E  504F      1954          addq.w    #8,A7
00001440  5246      1955          addq.w    #1,D6
00001442  60A8      1956          bra       DumpRegisters_9
                    1957   DumpRegisters_11:
                    1958   ; }
                    1959   ; strcat(WatchPointString[x]," ") ;
00001444  4879 0000 1960          pea       @m68kde~1_30.L
00001448  6238      
0000144A  220D      1961          move.l    A5,D1
0000144C  48C2      1962          ext.l     D2
0000144E  2F00      1963          move.l    D0,-(A7)
00001450  2002      1964          move.l    D2,D0
00001452  C1FC 0064 1965          muls      #100,D0
00001456  D280      1966          add.l     D0,D1
00001458  201F      1967          move.l    (A7)+,D0
0000145A  2F01      1968          move.l    D1,-(A7)
0000145C  4EB9 0000 1969          jsr       _strcat
00001460  55B8      
00001462  504F      1970          addq.w    #8,A7
00001464  5443      1971          addq.w    #2,D3
00001466  6000 FF7A 1972          bra       DumpRegisters_6
                    1973   DumpRegisters_8:
                    1974   ; }
                    1975   ; strcat(WatchPointString[x], "  ") ;
0000146A  4879 0000 1976          pea       @m68kde~1_15.L
0000146E  6066      
00001470  220D      1977          move.l    A5,D1
00001472  48C2      1978          ext.l     D2
00001474  2F00      1979          move.l    D0,-(A7)
00001476  2002      1980          move.l    D2,D0
00001478  C1FC 0064 1981          muls      #100,D0
0000147C  D280      1982          add.l     D0,D1
0000147E  201F      1983          move.l    (A7)+,D0
00001480  2F01      1984          move.l    D1,-(A7)
00001482  4EB9 0000 1985          jsr       _strcat
00001486  55B8      
00001488  504F      1986          addq.w    #8,A7
                    1987   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000148A  48C2      1988          ext.l     D2
0000148C  2002      1989          move.l    D2,D0
0000148E  E588      1990          lsl.l     #2,D0
00001490  41F9 0803 1991          lea       _WatchPointAddress.L,A0
00001494  0182      
00001496  2A30 0800 1992          move.l    0(A0,D0.L),D5
                    1993   ; for(j = 0; j < (short)(16); j++)
0000149A  4243      1994          clr.w     D3
                    1995   DumpRegisters_12:
0000149C  0C43 0010 1996          cmp.w     #16,D3
000014A0  6C00 007E 1997          bge       DumpRegisters_14
                    1998   ; {
                    1999   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014A4  2045      2000          move.l    D5,A0
000014A6  48C3      2001          ext.l     D3
000014A8  1030 3800 2002          move.b    0(A0,D3.L),D0
000014AC  C03C 007F 2003          and.b     #127,D0
000014B0  1E00      2004          move.b    D0,D7
                    2005   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014B2  0C07 007F 2006          cmp.b     #127,D7
000014B6  6206      2007          bhi.s     DumpRegisters_17
000014B8  0C07 0020 2008          cmp.b     #32,D7
000014BC  6416      2009          bhs.s     DumpRegisters_15
                    2010   DumpRegisters_17:
                    2011   ; sprintf(TempString, ".") ;
000014BE  4879 0000 2012          pea       @m68kde~1_31.L
000014C2  623A      
000014C4  4879 0803 2013          pea       _TempString.L
000014C8  0546      
000014CA  4EB9 0000 2014          jsr       _sprintf
000014CE  5586      
000014D0  504F      2015          addq.w    #8,A7
000014D2  6026      2016          bra.s     DumpRegisters_16
                    2017   DumpRegisters_15:
                    2018   ; else
                    2019   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014D4  2045      2020          move.l    D5,A0
000014D6  48C3      2021          ext.l     D3
000014D8  1230 3800 2022          move.b    0(A0,D3.L),D1
000014DC  C2BC 0000 2023          and.l     #255,D1
000014E0  00FF      
000014E2  2F01      2024          move.l    D1,-(A7)
000014E4  4879 0000 2025          pea       @m68kde~1_32.L
000014E8  623C      
000014EA  4879 0803 2026          pea       _TempString.L
000014EE  0546      
000014F0  4EB9 0000 2027          jsr       _sprintf
000014F4  5586      
000014F6  DEFC 000C 2028          add.w     #12,A7
                    2029   DumpRegisters_16:
                    2030   ; strcat(WatchPointString[x], TempString) ;
000014FA  4879 0803 2031          pea       _TempString.L
000014FE  0546      
00001500  220D      2032          move.l    A5,D1
00001502  48C2      2033          ext.l     D2
00001504  2F00      2034          move.l    D0,-(A7)
00001506  2002      2035          move.l    D2,D0
00001508  C1FC 0064 2036          muls      #100,D0
0000150C  D280      2037          add.l     D0,D1
0000150E  201F      2038          move.l    (A7)+,D0
00001510  2F01      2039          move.l    D1,-(A7)
00001512  4EB9 0000 2040          jsr       _strcat
00001516  55B8      
00001518  504F      2041          addq.w    #8,A7
0000151A  5243      2042          addq.w    #1,D3
0000151C  6000 FF7E 2043          bra       DumpRegisters_12
                    2044   DumpRegisters_14:
00001520  6020      2045          bra.s     DumpRegisters_5
                    2046   DumpRegisters_4:
                    2047   ; }
                    2048   ; }
                    2049   ; else
                    2050   ; strcpy(WatchPointString[x], "") ;
00001522  4879 0000 2051          pea       @m68kde~1_33.L
00001526  6240      
00001528  220D      2052          move.l    A5,D1
0000152A  48C2      2053          ext.l     D2
0000152C  2F00      2054          move.l    D0,-(A7)
0000152E  2002      2055          move.l    D2,D0
00001530  C1FC 0064 2056          muls      #100,D0
00001534  D280      2057          add.l     D0,D1
00001536  201F      2058          move.l    (A7)+,D0
00001538  2F01      2059          move.l    D1,-(A7)
0000153A  4EB9 0000 2060          jsr       _strcpy
0000153E  5418      
00001540  504F      2061          addq.w    #8,A7
                    2062   DumpRegisters_5:
00001542  5242      2063          addq.w    #1,D2
00001544  6000 FE36 2064          bra       DumpRegisters_1
                    2065   DumpRegisters_3:
                    2066   ; }
                    2067   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001548  2F39 0803 2068          move.l    _a0.L,-(A7)
0000154C  0104      
0000154E  2F39 0803 2069          move.l    _d0.L,-(A7)
00001552  00E4      
00001554  4879 0000 2070          pea       @m68kde~1_34.L
00001558  6242      
0000155A  4E93      2071          jsr       (A3)
0000155C  DEFC 000C 2072          add.w     #12,A7
                    2073   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001560  2F39 0803 2074          move.l    _a1.L,-(A7)
00001564  0108      
00001566  2F39 0803 2075          move.l    _d1.L,-(A7)
0000156A  00E8      
0000156C  4879 0000 2076          pea       @m68kde~1_35.L
00001570  625E      
00001572  4E93      2077          jsr       (A3)
00001574  DEFC 000C 2078          add.w     #12,A7
                    2079   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001578  2F39 0803 2080          move.l    _a2.L,-(A7)
0000157C  010C      
0000157E  2F39 0803 2081          move.l    _d2.L,-(A7)
00001582  00EC      
00001584  4879 0000 2082          pea       @m68kde~1_36.L
00001588  6278      
0000158A  4E93      2083          jsr       (A3)
0000158C  DEFC 000C 2084          add.w     #12,A7
                    2085   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001590  2F39 0803 2086          move.l    _a3.L,-(A7)
00001594  0110      
00001596  2F39 0803 2087          move.l    _d3.L,-(A7)
0000159A  00F0      
0000159C  4879 0000 2088          pea       @m68kde~1_37.L
000015A0  6292      
000015A2  4E93      2089          jsr       (A3)
000015A4  DEFC 000C 2090          add.w     #12,A7
                    2091   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015A8  2F39 0803 2092          move.l    _a4.L,-(A7)
000015AC  0114      
000015AE  2F39 0803 2093          move.l    _d4.L,-(A7)
000015B2  00F4      
000015B4  4879 0000 2094          pea       @m68kde~1_38.L
000015B8  62AC      
000015BA  4E93      2095          jsr       (A3)
000015BC  DEFC 000C 2096          add.w     #12,A7
                    2097   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015C0  2F39 0803 2098          move.l    _a5.L,-(A7)
000015C4  0118      
000015C6  2F39 0803 2099          move.l    _d5.L,-(A7)
000015CA  00F8      
000015CC  4879 0000 2100          pea       @m68kde~1_39.L
000015D0  62C6      
000015D2  4E93      2101          jsr       (A3)
000015D4  DEFC 000C 2102          add.w     #12,A7
                    2103   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000015D8  2F39 0803 2104          move.l    _a6.L,-(A7)
000015DC  011C      
000015DE  2F39 0803 2105          move.l    _d6.L,-(A7)
000015E2  00FC      
000015E4  4879 0000 2106          pea       @m68kde~1_40.L
000015E8  62E0      
000015EA  4E93      2107          jsr       (A3)
000015EC  DEFC 000C 2108          add.w     #12,A7
                    2109   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000015F0  3214      2110          move.w    (A4),D1
000015F2  C27C 2000 2111          and.w     #8192,D1
000015F6  0C41 2000 2112          cmp.w     #8192,D1
000015FA  6608      2113          bne.s     DumpRegisters_18
000015FC  2239 0803 2114          move.l    _SSP.L,D1
00001600  0124      
00001602  6006      2115          bra.s     DumpRegisters_19
                    2116   DumpRegisters_18:
00001604  2239 0803 2117          move.l    _USP.L,D1
00001608  0128      
                    2118   DumpRegisters_19:
0000160A  2F01      2119          move.l    D1,-(A7)
0000160C  2F39 0803 2120          move.l    _d7.L,-(A7)
00001610  0100      
00001612  4879 0000 2121          pea       @m68kde~1_41.L
00001616  62FA      
00001618  4E93      2122          jsr       (A3)
0000161A  DEFC 000C 2123          add.w     #12,A7
                    2124   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000161E  2F39 0803 2125          move.l    _USP.L,-(A7)
00001622  0128      
00001624  4879 0000 2126          pea       @m68kde~1_42.L
00001628  6314      
0000162A  4E93      2127          jsr       (A3)
0000162C  504F      2128          addq.w    #8,A7
                    2129   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000162E  2F39 0803 2130          move.l    _SSP.L,-(A7)
00001632  0124      
00001634  4879 0000 2131          pea       @m68kde~1_43.L
00001638  6332      
0000163A  4E93      2132          jsr       (A3)
0000163C  504F      2133          addq.w    #8,A7
                    2134   ; printf("\r\n SR = $%04X   ",SR) ;
0000163E  3214      2135          move.w    (A4),D1
00001640  C2BC 0000 2136          and.l     #65535,D1
00001644  FFFF      
00001646  2F01      2137          move.l    D1,-(A7)
00001648  4879 0000 2138          pea       @m68kde~1_44.L
0000164C  6354      
0000164E  4E93      2139          jsr       (A3)
00001650  504F      2140          addq.w    #8,A7
                    2141   ; // display the status word in characters etc.
                    2142   ; printf("   [") ;
00001652  4879 0000 2143          pea       @m68kde~1_45.L
00001656  6366      
00001658  4E93      2144          jsr       (A3)
0000165A  584F      2145          addq.w    #4,A7
                    2146   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
0000165C  3014      2147          move.w    (A4),D0
0000165E  C07C 8000 2148          and.w     #32768,D0
00001662  0C40 8000 2149          cmp.w     #32768,D0
00001666  660A      2150          bne.s     DumpRegisters_20
00001668  4878 0054 2151          pea       84
0000166C  4E92      2152          jsr       (A2)
0000166E  584F      2153          addq.w    #4,A7
00001670  6008      2154          bra.s     DumpRegisters_21
                    2155   DumpRegisters_20:
00001672  4878 002D 2156          pea       45
00001676  4E92      2157          jsr       (A2)
00001678  584F      2158          addq.w    #4,A7
                    2159   DumpRegisters_21:
                    2160   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000167A  3014      2161          move.w    (A4),D0
0000167C  C07C 2000 2162          and.w     #8192,D0
00001680  0C40 2000 2163          cmp.w     #8192,D0
00001684  660A      2164          bne.s     DumpRegisters_22
00001686  4878 0053 2165          pea       83
0000168A  4E92      2166          jsr       (A2)
0000168C  584F      2167          addq.w    #4,A7
0000168E  6008      2168          bra.s     DumpRegisters_23
                    2169   DumpRegisters_22:
00001690  4878 0055 2170          pea       85
00001694  4E92      2171          jsr       (A2)
00001696  584F      2172          addq.w    #4,A7
                    2173   DumpRegisters_23:
                    2174   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001698  3014      2175          move.w    (A4),D0
0000169A  C07C 0400 2176          and.w     #1024,D0
0000169E  0C40 0400 2177          cmp.w     #1024,D0
000016A2  660A      2178          bne.s     DumpRegisters_24
000016A4  4878 0031 2179          pea       49
000016A8  4E92      2180          jsr       (A2)
000016AA  584F      2181          addq.w    #4,A7
000016AC  6008      2182          bra.s     DumpRegisters_25
                    2183   DumpRegisters_24:
000016AE  4878 0030 2184          pea       48
000016B2  4E92      2185          jsr       (A2)
000016B4  584F      2186          addq.w    #4,A7
                    2187   DumpRegisters_25:
                    2188   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016B6  3014      2189          move.w    (A4),D0
000016B8  C07C 0200 2190          and.w     #512,D0
000016BC  0C40 0200 2191          cmp.w     #512,D0
000016C0  660A      2192          bne.s     DumpRegisters_26
000016C2  4878 0031 2193          pea       49
000016C6  4E92      2194          jsr       (A2)
000016C8  584F      2195          addq.w    #4,A7
000016CA  6008      2196          bra.s     DumpRegisters_27
                    2197   DumpRegisters_26:
000016CC  4878 0030 2198          pea       48
000016D0  4E92      2199          jsr       (A2)
000016D2  584F      2200          addq.w    #4,A7
                    2201   DumpRegisters_27:
                    2202   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016D4  3014      2203          move.w    (A4),D0
000016D6  C07C 0100 2204          and.w     #256,D0
000016DA  0C40 0100 2205          cmp.w     #256,D0
000016DE  660A      2206          bne.s     DumpRegisters_28
000016E0  4878 0031 2207          pea       49
000016E4  4E92      2208          jsr       (A2)
000016E6  584F      2209          addq.w    #4,A7
000016E8  6008      2210          bra.s     DumpRegisters_29
                    2211   DumpRegisters_28:
000016EA  4878 0030 2212          pea       48
000016EE  4E92      2213          jsr       (A2)
000016F0  584F      2214          addq.w    #4,A7
                    2215   DumpRegisters_29:
                    2216   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000016F2  3014      2217          move.w    (A4),D0
000016F4  C07C 0010 2218          and.w     #16,D0
000016F8  0C40 0010 2219          cmp.w     #16,D0
000016FC  660A      2220          bne.s     DumpRegisters_30
000016FE  4878 0058 2221          pea       88
00001702  4E92      2222          jsr       (A2)
00001704  584F      2223          addq.w    #4,A7
00001706  6008      2224          bra.s     DumpRegisters_31
                    2225   DumpRegisters_30:
00001708  4878 002D 2226          pea       45
0000170C  4E92      2227          jsr       (A2)
0000170E  584F      2228          addq.w    #4,A7
                    2229   DumpRegisters_31:
                    2230   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001710  3014      2231          move.w    (A4),D0
00001712  C07C 0008 2232          and.w     #8,D0
00001716  0C40 0008 2233          cmp.w     #8,D0
0000171A  660A      2234          bne.s     DumpRegisters_32
0000171C  4878 004E 2235          pea       78
00001720  4E92      2236          jsr       (A2)
00001722  584F      2237          addq.w    #4,A7
00001724  6008      2238          bra.s     DumpRegisters_33
                    2239   DumpRegisters_32:
00001726  4878 002D 2240          pea       45
0000172A  4E92      2241          jsr       (A2)
0000172C  584F      2242          addq.w    #4,A7
                    2243   DumpRegisters_33:
                    2244   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000172E  3014      2245          move.w    (A4),D0
00001730  C07C 0004 2246          and.w     #4,D0
00001734  0C40 0004 2247          cmp.w     #4,D0
00001738  660A      2248          bne.s     DumpRegisters_34
0000173A  4878 005A 2249          pea       90
0000173E  4E92      2250          jsr       (A2)
00001740  584F      2251          addq.w    #4,A7
00001742  6008      2252          bra.s     DumpRegisters_35
                    2253   DumpRegisters_34:
00001744  4878 002D 2254          pea       45
00001748  4E92      2255          jsr       (A2)
0000174A  584F      2256          addq.w    #4,A7
                    2257   DumpRegisters_35:
                    2258   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
0000174C  3014      2259          move.w    (A4),D0
0000174E  C07C 0002 2260          and.w     #2,D0
00001752  0C40 0002 2261          cmp.w     #2,D0
00001756  660A      2262          bne.s     DumpRegisters_36
00001758  4878 0056 2263          pea       86
0000175C  4E92      2264          jsr       (A2)
0000175E  584F      2265          addq.w    #4,A7
00001760  6008      2266          bra.s     DumpRegisters_37
                    2267   DumpRegisters_36:
00001762  4878 002D 2268          pea       45
00001766  4E92      2269          jsr       (A2)
00001768  584F      2270          addq.w    #4,A7
                    2271   DumpRegisters_37:
                    2272   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000176A  3014      2273          move.w    (A4),D0
0000176C  C07C 0001 2274          and.w     #1,D0
00001770  0C40 0001 2275          cmp.w     #1,D0
00001774  660A      2276          bne.s     DumpRegisters_38
00001776  4878 0043 2277          pea       67
0000177A  4E92      2278          jsr       (A2)
0000177C  584F      2279          addq.w    #4,A7
0000177E  6008      2280          bra.s     DumpRegisters_39
                    2281   DumpRegisters_38:
00001780  4878 002D 2282          pea       45
00001784  4E92      2283          jsr       (A2)
00001786  584F      2284          addq.w    #4,A7
                    2285   DumpRegisters_39:
                    2286   ; putchar(']') ;
00001788  4878 005D 2287          pea       93
0000178C  4E92      2288          jsr       (A2)
0000178E  584F      2289          addq.w    #4,A7
                    2290   ; printf("\r\n PC = $%08X  ", PC) ;
00001790  2F39 0803 2291          move.l    _PC.L,-(A7)
00001794  0120      
00001796  4879 0000 2292          pea       @m68kde~1_46.L
0000179A  636C      
0000179C  4E93      2293          jsr       (A3)
0000179E  504F      2294          addq.w    #8,A7
                    2295   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000017A0  2039 0803 2296          move.l    _PC.L,D0
000017A4  0120      
000017A6  2040      2297          move.l    D0,A0
000017A8  3010      2298          move.w    (A0),D0
000017AA  0C40 4E4E 2299          cmp.w     #20046,D0
000017AE  6724      2300          beq.s     DumpRegisters_40
                    2301   ; DisassembleInstruction(PC) ;
000017B0  2F39 0803 2302          move.l    _PC.L,-(A7)
000017B4  0120      
000017B6  4EB9 0000 2303          jsr       _DisassembleInstruction
000017BA  3576      
000017BC  584F      2304          addq.w    #4,A7
                    2305   ; FormatInstructionForTrace() ;
000017BE  4EB8 12EA 2306          jsr       _FormatInstructionForTrace
                    2307   ; printf("%s", Instruction) ;
000017C2  4879 0803 2308          pea       _Instruction.L
000017C6  04E2      
000017C8  4879 0000 2309          pea       @m68kde~1_47.L
000017CC  637C      
000017CE  4E93      2310          jsr       (A3)
000017D0  504F      2311          addq.w    #8,A7
000017D2  600A      2312          bra.s     DumpRegisters_41
                    2313   DumpRegisters_40:
                    2314   ; }
                    2315   ; else
                    2316   ; printf("[BREAKPOINT]") ;
000017D4  4879 0000 2317          pea       @m68kde~1_48.L
000017D8  6380      
000017DA  4E93      2318          jsr       (A3)
000017DC  584F      2319          addq.w    #4,A7
                    2320   DumpRegisters_41:
                    2321   ; printf("\r\n") ;
000017DE  4879 0000 2322          pea       @m68kde~1_1.L
000017E2  5EFC      
000017E4  4E93      2323          jsr       (A3)
000017E6  584F      2324          addq.w    #4,A7
                    2325   ; for(i=0; i < 8; i++)    {
000017E8  4244      2326          clr.w     D4
                    2327   DumpRegisters_42:
000017EA  0C44 0008 2328          cmp.w     #8,D4
000017EE  6C00 0040 2329          bge       DumpRegisters_44
                    2330   ; if(WatchPointSetOrCleared[i] == 1)
000017F2  48C4      2331          ext.l     D4
000017F4  2004      2332          move.l    D4,D0
000017F6  E588      2333          lsl.l     #2,D0
000017F8  41F9 0803 2334          lea       _WatchPointSetOrCleared.L,A0
000017FC  01A2      
000017FE  2030 0800 2335          move.l    0(A0,D0.L),D0
00001802  0C80 0000 2336          cmp.l     #1,D0
00001806  0001      
00001808  6622      2337          bne.s     DumpRegisters_45
                    2338   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000180A  220D      2339          move.l    A5,D1
0000180C  48C4      2340          ext.l     D4
0000180E  2F00      2341          move.l    D0,-(A7)
00001810  2004      2342          move.l    D4,D0
00001812  C1FC 0064 2343          muls      #100,D0
00001816  D280      2344          add.l     D0,D1
00001818  201F      2345          move.l    (A7)+,D0
0000181A  2F01      2346          move.l    D1,-(A7)
0000181C  48C4      2347          ext.l     D4
0000181E  2F04      2348          move.l    D4,-(A7)
00001820  4879 0000 2349          pea       @m68kde~1_49.L
00001824  638E      
00001826  4E93      2350          jsr       (A3)
00001828  DEFC 000C 2351          add.w     #12,A7
                    2352   DumpRegisters_45:
0000182C  5244      2353          addq.w    #1,D4
0000182E  60BA      2354          bra       DumpRegisters_42
                    2355   DumpRegisters_44:
00001830  4CDF 3CFC 2356          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001834  4E75      2357          rts
                    2358   ; }
                    2359   ; }
                    2360   ; // Trace Exception Handler
                    2361   ; void DumpRegistersandPause(void)
                    2362   ; {
                    2363   _DumpRegistersandPause:
00001836  2F0A      2364          move.l    A2,-(A7)
00001838  45F9 0000 2365          lea       _printf.L,A2
0000183C  55EA      
                    2366   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000183E  4879 0000 2367          pea       @m68kde~1_50.L
00001842  639A      
00001844  4E92      2368          jsr       (A2)
00001846  584F      2369          addq.w    #4,A7
                    2370   ; printf("\r\nBreak Points :[Disabled]") ;
00001848  4879 0000 2371          pea       @m68kde~1_51.L
0000184C  63BA      
0000184E  4E92      2372          jsr       (A2)
00001850  584F      2373          addq.w    #4,A7
                    2374   ; DumpRegisters() ;
00001852  4EB8 135E 2375          jsr       _DumpRegisters
                    2376   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001856  4879 0000 2377          pea       @m68kde~1_52.L
0000185A  63D6      
0000185C  4E92      2378          jsr       (A2)
0000185E  584F      2379          addq.w    #4,A7
                    2380   ; printf("\r\nPress <ESC> to Resume Program") ;
00001860  4879 0000 2381          pea       @m68kde~1_53.L
00001864  6402      
00001866  4E92      2382          jsr       (A2)
00001868  584F      2383          addq.w    #4,A7
                    2384   ; menu() ;
0000186A  4EB9 0000 2385          jsr       _menu
0000186E  24A0      
00001870  245F      2386          move.l    (A7)+,A2
00001872  4E75      2387          rts
                    2388   ; }
                    2389   ; void ChangeRegisters(void)
                    2390   ; {
                    2391   _ChangeRegisters:
00001874  4E56 FFFC 2392          link      A6,#-4
00001878  48E7 303C 2393          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000187C  45F9 0000 2394          lea       _printf.L,A2
00001880  55EA      
00001882  47EE FFFC 2395          lea       -4(A6),A3
00001886  49F8 0CA4 2396          lea       _Get8HexDigits.L,A4
0000188A  4BF8 0B68 2397          lea       __getch.L,A5
                    2398   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2399   ; int reg_val ;
                    2400   ; char c, reg[3] ;
                    2401   ; reg[0] = tolower(_getch()) ;
0000188E  2F00      2402          move.l    D0,-(A7)
00001890  4E95      2403          jsr       (A5)
00001892  2200      2404          move.l    D0,D1
00001894  201F      2405          move.l    (A7)+,D0
00001896  2F01      2406          move.l    D1,-(A7)
00001898  4EB9 0000 2407          jsr       _tolower
0000189C  556A      
0000189E  584F      2408          addq.w    #4,A7
000018A0  1680      2409          move.b    D0,(A3)
                    2410   ; reg[1] = c = tolower(_getch()) ;
000018A2  2F00      2411          move.l    D0,-(A7)
000018A4  4E95      2412          jsr       (A5)
000018A6  2200      2413          move.l    D0,D1
000018A8  201F      2414          move.l    (A7)+,D0
000018AA  2F01      2415          move.l    D1,-(A7)
000018AC  4EB9 0000 2416          jsr       _tolower
000018B0  556A      
000018B2  584F      2417          addq.w    #4,A7
000018B4  1400      2418          move.b    D0,D2
000018B6  1740 0001 2419          move.b    D0,1(A3)
                    2420   ; if(reg[0] == (char)('d'))  {    // change data register
000018BA  1013      2421          move.b    (A3),D0
000018BC  0C00 0064 2422          cmp.b     #100,D0
000018C0  6600 00AE 2423          bne       ChangeRegisters_1
                    2424   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018C4  102B 0001 2425          move.b    1(A3),D0
000018C8  0C00 0037 2426          cmp.b     #55,D0
000018CC  6E0A      2427          bgt.s     ChangeRegisters_5
000018CE  102B 0001 2428          move.b    1(A3),D0
000018D2  0C00 0030 2429          cmp.b     #48,D0
000018D6  6C0E      2430          bge.s     ChangeRegisters_3
                    2431   ChangeRegisters_5:
                    2432   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018D8  4879 0000 2433          pea       @m68kde~1_54.L
000018DC  6422      
000018DE  4E92      2434          jsr       (A2)
000018E0  584F      2435          addq.w    #4,A7
                    2436   ; return ;
000018E2  6000 0244 2437          bra       ChangeRegisters_6
                    2438   ChangeRegisters_3:
                    2439   ; }
                    2440   ; else {
                    2441   ; printf("\r\nD%c = ", c) ;
000018E6  4882      2442          ext.w     D2
000018E8  48C2      2443          ext.l     D2
000018EA  2F02      2444          move.l    D2,-(A7)
000018EC  4879 0000 2445          pea       @m68kde~1_55.L
000018F0  644E      
000018F2  4E92      2446          jsr       (A2)
000018F4  504F      2447          addq.w    #8,A7
                    2448   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F6  42A7      2449          clr.l     -(A7)
000018F8  4E94      2450          jsr       (A4)
000018FA  584F      2451          addq.w    #4,A7
000018FC  2600      2452          move.l    D0,D3
                    2453   ; }
                    2454   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2455   ; if(c == (char)('0'))
000018FE  0C02 0030 2456          cmp.b     #48,D2
00001902  660A      2457          bne.s     ChangeRegisters_7
                    2458   ; d0 = reg_val ;
00001904  23C3 0803 2459          move.l    D3,_d0.L
00001908  00E4      
0000190A  6000 0060 2460          bra       ChangeRegisters_20
                    2461   ChangeRegisters_7:
                    2462   ; else if(c == (char)('1'))
0000190E  0C02 0031 2463          cmp.b     #49,D2
00001912  660A      2464          bne.s     ChangeRegisters_9
                    2465   ; d1 = reg_val ;
00001914  23C3 0803 2466          move.l    D3,_d1.L
00001918  00E8      
0000191A  6000 0050 2467          bra       ChangeRegisters_20
                    2468   ChangeRegisters_9:
                    2469   ; else if(c == (char)('2'))
0000191E  0C02 0032 2470          cmp.b     #50,D2
00001922  660A      2471          bne.s     ChangeRegisters_11
                    2472   ; d2 = reg_val ;
00001924  23C3 0803 2473          move.l    D3,_d2.L
00001928  00EC      
0000192A  6000 0040 2474          bra       ChangeRegisters_20
                    2475   ChangeRegisters_11:
                    2476   ; else if(c == (char)('3'))
0000192E  0C02 0033 2477          cmp.b     #51,D2
00001932  6608      2478          bne.s     ChangeRegisters_13
                    2479   ; d3 = reg_val ;
00001934  23C3 0803 2480          move.l    D3,_d3.L
00001938  00F0      
0000193A  6030      2481          bra.s     ChangeRegisters_20
                    2482   ChangeRegisters_13:
                    2483   ; else if(c == (char)('4'))
0000193C  0C02 0034 2484          cmp.b     #52,D2
00001940  6608      2485          bne.s     ChangeRegisters_15
                    2486   ; d4 = reg_val ;
00001942  23C3 0803 2487          move.l    D3,_d4.L
00001946  00F4      
00001948  6022      2488          bra.s     ChangeRegisters_20
                    2489   ChangeRegisters_15:
                    2490   ; else if(c == (char)('5'))
0000194A  0C02 0035 2491          cmp.b     #53,D2
0000194E  6608      2492          bne.s     ChangeRegisters_17
                    2493   ; d5 = reg_val ;
00001950  23C3 0803 2494          move.l    D3,_d5.L
00001954  00F8      
00001956  6014      2495          bra.s     ChangeRegisters_20
                    2496   ChangeRegisters_17:
                    2497   ; else if(c == (char)('6'))
00001958  0C02 0036 2498          cmp.b     #54,D2
0000195C  6608      2499          bne.s     ChangeRegisters_19
                    2500   ; d6 = reg_val ;
0000195E  23C3 0803 2501          move.l    D3,_d6.L
00001962  00FC      
00001964  6006      2502          bra.s     ChangeRegisters_20
                    2503   ChangeRegisters_19:
                    2504   ; else
                    2505   ; d7 = reg_val ;
00001966  23C3 0803 2506          move.l    D3,_d7.L
0000196A  0100      
                    2507   ChangeRegisters_20:
0000196C  6000 01B6 2508          bra       ChangeRegisters_51
                    2509   ChangeRegisters_1:
                    2510   ; }
                    2511   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001970  1013      2512          move.b    (A3),D0
00001972  0C00 0061 2513          cmp.b     #97,D0
00001976  6600 00A6 2514          bne       ChangeRegisters_21
                    2515   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000197A  0C02 0037 2516          cmp.b     #55,D2
0000197E  6E06      2517          bgt.s     ChangeRegisters_25
00001980  0C02 0030 2518          cmp.b     #48,D2
00001984  6C0E      2519          bge.s     ChangeRegisters_23
                    2520   ChangeRegisters_25:
                    2521   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001986  4879 0000 2522          pea       @m68kde~1_56.L
0000198A  6458      
0000198C  4E92      2523          jsr       (A2)
0000198E  584F      2524          addq.w    #4,A7
                    2525   ; return ;
00001990  6000 0196 2526          bra       ChangeRegisters_6
                    2527   ChangeRegisters_23:
                    2528   ; }
                    2529   ; else {
                    2530   ; printf("\r\nA%c = ", c) ;
00001994  4882      2531          ext.w     D2
00001996  48C2      2532          ext.l     D2
00001998  2F02      2533          move.l    D2,-(A7)
0000199A  4879 0000 2534          pea       @m68kde~1_57.L
0000199E  6486      
000019A0  4E92      2535          jsr       (A2)
000019A2  504F      2536          addq.w    #8,A7
                    2537   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A4  42A7      2538          clr.l     -(A7)
000019A6  4E94      2539          jsr       (A4)
000019A8  584F      2540          addq.w    #4,A7
000019AA  2600      2541          move.l    D0,D3
                    2542   ; }
                    2543   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2544   ; if(c == (char)('0'))
000019AC  0C02 0030 2545          cmp.b     #48,D2
000019B0  660A      2546          bne.s     ChangeRegisters_26
                    2547   ; a0 = reg_val ;
000019B2  23C3 0803 2548          move.l    D3,_a0.L
000019B6  0104      
000019B8  6000 0060 2549          bra       ChangeRegisters_39
                    2550   ChangeRegisters_26:
                    2551   ; else if(c == (char)('1'))
000019BC  0C02 0031 2552          cmp.b     #49,D2
000019C0  660A      2553          bne.s     ChangeRegisters_28
                    2554   ; a1 = reg_val ;
000019C2  23C3 0803 2555          move.l    D3,_a1.L
000019C6  0108      
000019C8  6000 0050 2556          bra       ChangeRegisters_39
                    2557   ChangeRegisters_28:
                    2558   ; else if(c == (char)('2'))
000019CC  0C02 0032 2559          cmp.b     #50,D2
000019D0  660A      2560          bne.s     ChangeRegisters_30
                    2561   ; a2 = reg_val ;
000019D2  23C3 0803 2562          move.l    D3,_a2.L
000019D6  010C      
000019D8  6000 0040 2563          bra       ChangeRegisters_39
                    2564   ChangeRegisters_30:
                    2565   ; else if(c == (char)('3'))
000019DC  0C02 0033 2566          cmp.b     #51,D2
000019E0  6608      2567          bne.s     ChangeRegisters_32
                    2568   ; a3 = reg_val ;
000019E2  23C3 0803 2569          move.l    D3,_a3.L
000019E6  0110      
000019E8  6030      2570          bra.s     ChangeRegisters_39
                    2571   ChangeRegisters_32:
                    2572   ; else if(c == (char)('4'))
000019EA  0C02 0034 2573          cmp.b     #52,D2
000019EE  6608      2574          bne.s     ChangeRegisters_34
                    2575   ; a4 = reg_val ;
000019F0  23C3 0803 2576          move.l    D3,_a4.L
000019F4  0114      
000019F6  6022      2577          bra.s     ChangeRegisters_39
                    2578   ChangeRegisters_34:
                    2579   ; else if(c == (char)('5'))
000019F8  0C02 0035 2580          cmp.b     #53,D2
000019FC  6608      2581          bne.s     ChangeRegisters_36
                    2582   ; a5 = reg_val ;
000019FE  23C3 0803 2583          move.l    D3,_a5.L
00001A02  0118      
00001A04  6014      2584          bra.s     ChangeRegisters_39
                    2585   ChangeRegisters_36:
                    2586   ; else if(c == (char)('6'))
00001A06  0C02 0036 2587          cmp.b     #54,D2
00001A0A  6608      2588          bne.s     ChangeRegisters_38
                    2589   ; a6 = reg_val ;
00001A0C  23C3 0803 2590          move.l    D3,_a6.L
00001A10  011C      
00001A12  6006      2591          bra.s     ChangeRegisters_39
                    2592   ChangeRegisters_38:
                    2593   ; else
                    2594   ; USP = reg_val ;
00001A14  23C3 0803 2595          move.l    D3,_USP.L
00001A18  0128      
                    2596   ChangeRegisters_39:
00001A1A  6000 0108 2597          bra       ChangeRegisters_51
                    2598   ChangeRegisters_21:
                    2599   ; }
                    2600   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A1E  1013      2601          move.b    (A3),D0
00001A20  0C00 0075 2602          cmp.b     #117,D0
00001A24  6600 004E 2603          bne       ChangeRegisters_40
00001A28  0C02 0073 2604          cmp.b     #115,D2
00001A2C  6600 0046 2605          bne       ChangeRegisters_40
                    2606   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A30  2F00      2607          move.l    D0,-(A7)
00001A32  4E95      2608          jsr       (A5)
00001A34  2200      2609          move.l    D0,D1
00001A36  201F      2610          move.l    (A7)+,D0
00001A38  2F01      2611          move.l    D1,-(A7)
00001A3A  4EB9 0000 2612          jsr       _tolower
00001A3E  556A      
00001A40  584F      2613          addq.w    #4,A7
00001A42  0C80 0000 2614          cmp.l     #112,D0
00001A46  0070      
00001A48  6618      2615          bne.s     ChangeRegisters_42
                    2616   ; printf("\r\nUser SP = ") ;
00001A4A  4879 0000 2617          pea       @m68kde~1_58.L
00001A4E  6490      
00001A50  4E92      2618          jsr       (A2)
00001A52  584F      2619          addq.w    #4,A7
                    2620   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A54  42A7      2621          clr.l     -(A7)
00001A56  4E94      2622          jsr       (A4)
00001A58  584F      2623          addq.w    #4,A7
00001A5A  23C0 0803 2624          move.l    D0,_USP.L
00001A5E  0128      
00001A60  600E      2625          bra.s     ChangeRegisters_43
                    2626   ChangeRegisters_42:
                    2627   ; }
                    2628   ; else {
                    2629   ; printf("\r\nIllegal Register....") ;
00001A62  4879 0000 2630          pea       @m68kde~1_59.L
00001A66  649E      
00001A68  4E92      2631          jsr       (A2)
00001A6A  584F      2632          addq.w    #4,A7
                    2633   ; return ;
00001A6C  6000 00BA 2634          bra       ChangeRegisters_6
                    2635   ChangeRegisters_43:
00001A70  6000 00B2 2636          bra       ChangeRegisters_51
                    2637   ChangeRegisters_40:
                    2638   ; }
                    2639   ; }
                    2640   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A74  1013      2641          move.b    (A3),D0
00001A76  0C00 0073 2642          cmp.b     #115,D0
00001A7A  6600 004E 2643          bne       ChangeRegisters_44
00001A7E  0C02 0073 2644          cmp.b     #115,D2
00001A82  6600 0046 2645          bne       ChangeRegisters_44
                    2646   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A86  2F00      2647          move.l    D0,-(A7)
00001A88  4E95      2648          jsr       (A5)
00001A8A  2200      2649          move.l    D0,D1
00001A8C  201F      2650          move.l    (A7)+,D0
00001A8E  2F01      2651          move.l    D1,-(A7)
00001A90  4EB9 0000 2652          jsr       _tolower
00001A94  556A      
00001A96  584F      2653          addq.w    #4,A7
00001A98  0C80 0000 2654          cmp.l     #112,D0
00001A9C  0070      
00001A9E  6618      2655          bne.s     ChangeRegisters_46
                    2656   ; printf("\r\nSystem SP = ") ;
00001AA0  4879 0000 2657          pea       @m68kde~1_60.L
00001AA4  64B6      
00001AA6  4E92      2658          jsr       (A2)
00001AA8  584F      2659          addq.w    #4,A7
                    2660   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AAA  42A7      2661          clr.l     -(A7)
00001AAC  4E94      2662          jsr       (A4)
00001AAE  584F      2663          addq.w    #4,A7
00001AB0  23C0 0803 2664          move.l    D0,_SSP.L
00001AB4  0124      
00001AB6  600E      2665          bra.s     ChangeRegisters_47
                    2666   ChangeRegisters_46:
                    2667   ; }
                    2668   ; else {
                    2669   ; printf("\r\nIllegal Register....") ;
00001AB8  4879 0000 2670          pea       @m68kde~1_59.L
00001ABC  649E      
00001ABE  4E92      2671          jsr       (A2)
00001AC0  584F      2672          addq.w    #4,A7
                    2673   ; return ;
00001AC2  6000 0064 2674          bra       ChangeRegisters_6
                    2675   ChangeRegisters_47:
00001AC6  6000 005C 2676          bra       ChangeRegisters_51
                    2677   ChangeRegisters_44:
                    2678   ; }
                    2679   ; }
                    2680   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001ACA  1013      2681          move.b    (A3),D0
00001ACC  0C00 0070 2682          cmp.b     #112,D0
00001AD0  6620      2683          bne.s     ChangeRegisters_48
00001AD2  0C02 0063 2684          cmp.b     #99,D2
00001AD6  661A      2685          bne.s     ChangeRegisters_48
                    2686   ; printf("\r\nPC = ") ;
00001AD8  4879 0000 2687          pea       @m68kde~1_61.L
00001ADC  64C6      
00001ADE  4E92      2688          jsr       (A2)
00001AE0  584F      2689          addq.w    #4,A7
                    2690   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE2  42A7      2691          clr.l     -(A7)
00001AE4  4E94      2692          jsr       (A4)
00001AE6  584F      2693          addq.w    #4,A7
00001AE8  23C0 0803 2694          move.l    D0,_PC.L
00001AEC  0120      
00001AEE  6000 0034 2695          bra       ChangeRegisters_51
                    2696   ChangeRegisters_48:
                    2697   ; }
                    2698   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001AF2  1013      2699          move.b    (A3),D0
00001AF4  0C00 0073 2700          cmp.b     #115,D0
00001AF8  6620      2701          bne.s     ChangeRegisters_50
00001AFA  0C02 0072 2702          cmp.b     #114,D2
00001AFE  661A      2703          bne.s     ChangeRegisters_50
                    2704   ; printf("\r\nSR = ") ;
00001B00  4879 0000 2705          pea       @m68kde~1_62.L
00001B04  64CE      
00001B06  4E92      2706          jsr       (A2)
00001B08  584F      2707          addq.w    #4,A7
                    2708   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B0A  42A7      2709          clr.l     -(A7)
00001B0C  4EB8 0C58 2710          jsr       _Get4HexDigits
00001B10  584F      2711          addq.w    #4,A7
00001B12  33C0 0803 2712          move.w    D0,_SR.L
00001B16  012C      
00001B18  600A      2713          bra.s     ChangeRegisters_51
                    2714   ChangeRegisters_50:
                    2715   ; }
                    2716   ; else
                    2717   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B1A  4879 0000 2718          pea       @m68kde~1_63.L
00001B1E  64D6      
00001B20  4E92      2719          jsr       (A2)
00001B22  584F      2720          addq.w    #4,A7
                    2721   ChangeRegisters_51:
                    2722   ; DumpRegisters() ;
00001B24  4EB8 135E 2723          jsr       _DumpRegisters
                    2724   ChangeRegisters_6:
00001B28  4CDF 3C0C 2725          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B2C  4E5E      2726          unlk      A6
00001B2E  4E75      2727          rts
                    2728   ; }
                    2729   ; void BreakPointDisplay(void)
                    2730   ; {
                    2731   _BreakPointDisplay:
00001B30  48E7 3030 2732          movem.l   D2/D3/A2/A3,-(A7)
00001B34  45F9 0000 2733          lea       _printf.L,A2
00001B38  55EA      
00001B3A  47F9 0803 2734          lea       _BreakPointAddress.L,A3
00001B3E  012E      
                    2735   ; int i, BreakPointsSet = 0 ;
00001B40  4283      2736          clr.l     D3
                    2737   ; // any break points  set
                    2738   ; for(i = 0; i < 8; i++)  {
00001B42  4282      2739          clr.l     D2
                    2740   BreakPointDisplay_1:
00001B44  0C82 0000 2741          cmp.l     #8,D2
00001B48  0008      
00001B4A  6C1C      2742          bge.s     BreakPointDisplay_3
                    2743   ; if(BreakPointSetOrCleared[i] == 1)
00001B4C  2002      2744          move.l    D2,D0
00001B4E  E588      2745          lsl.l     #2,D0
00001B50  41F9 0803 2746          lea       _BreakPointSetOrCleared.L,A0
00001B54  015E      
00001B56  2030 0800 2747          move.l    0(A0,D0.L),D0
00001B5A  0C80 0000 2748          cmp.l     #1,D0
00001B5E  0001      
00001B60  6602      2749          bne.s     BreakPointDisplay_4
                    2750   ; BreakPointsSet = 1;
00001B62  7601      2751          moveq     #1,D3
                    2752   BreakPointDisplay_4:
00001B64  5282      2753          addq.l    #1,D2
00001B66  60DC      2754          bra       BreakPointDisplay_1
                    2755   BreakPointDisplay_3:
                    2756   ; }
                    2757   ; if(BreakPointsSet == 1) {
00001B68  0C83 0000 2758          cmp.l     #1,D3
00001B6C  0001      
00001B6E  6616      2759          bne.s     BreakPointDisplay_6
                    2760   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B70  4879 0000 2761          pea       @m68kde~1_64.L
00001B74  6512      
00001B76  4E92      2762          jsr       (A2)
00001B78  584F      2763          addq.w    #4,A7
                    2764   ; printf("\r\n---     ---------    -----------") ;
00001B7A  4879 0000 2765          pea       @m68kde~1_65.L
00001B7E  6538      
00001B80  4E92      2766          jsr       (A2)
00001B82  584F      2767          addq.w    #4,A7
00001B84  600A      2768          bra.s     BreakPointDisplay_7
                    2769   BreakPointDisplay_6:
                    2770   ; }
                    2771   ; else
                    2772   ; printf("\r\nNo BreakPoints Set") ;
00001B86  4879 0000 2773          pea       @m68kde~1_66.L
00001B8A  655C      
00001B8C  4E92      2774          jsr       (A2)
00001B8E  584F      2775          addq.w    #4,A7
                    2776   BreakPointDisplay_7:
                    2777   ; for(i = 0; i < 8; i++)  {
00001B90  4282      2778          clr.l     D2
                    2779   BreakPointDisplay_8:
00001B92  0C82 0000 2780          cmp.l     #8,D2
00001B96  0008      
00001B98  6C00 0080 2781          bge       BreakPointDisplay_10
                    2782   ; // put opcode back to disassemble it, then put break point back
                    2783   ; if(BreakPointSetOrCleared[i] == 1)  {
00001B9C  2002      2784          move.l    D2,D0
00001B9E  E588      2785          lsl.l     #2,D0
00001BA0  41F9 0803 2786          lea       _BreakPointSetOrCleared.L,A0
00001BA4  015E      
00001BA6  2030 0800 2787          move.l    0(A0,D0.L),D0
00001BAA  0C80 0000 2788          cmp.l     #1,D0
00001BAE  0001      
00001BB0  6600 0062 2789          bne       BreakPointDisplay_11
                    2790   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BB4  2002      2791          move.l    D2,D0
00001BB6  E388      2792          lsl.l     #1,D0
00001BB8  41F9 0803 2793          lea       _BreakPointInstruction.L,A0
00001BBC  014E      
00001BBE  2202      2794          move.l    D2,D1
00001BC0  E589      2795          lsl.l     #2,D1
00001BC2  2233 1800 2796          move.l    0(A3,D1.L),D1
00001BC6  2241      2797          move.l    D1,A1
00001BC8  32B0 0800 2798          move.w    0(A0,D0.L),(A1)
                    2799   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001BCC  2202      2800          move.l    D2,D1
00001BCE  E589      2801          lsl.l     #2,D1
00001BD0  2F33 1800 2802          move.l    0(A3,D1.L),-(A7)
00001BD4  4EB9 0000 2803          jsr       _DisassembleInstruction
00001BD8  3576      
00001BDA  584F      2804          addq.w    #4,A7
                    2805   ; FormatInstructionForTrace() ;
00001BDC  4EB8 12EA 2806          jsr       _FormatInstructionForTrace
                    2807   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BE0  2002      2808          move.l    D2,D0
00001BE2  E588      2809          lsl.l     #2,D0
00001BE4  2033 0800 2810          move.l    0(A3,D0.L),D0
00001BE8  2040      2811          move.l    D0,A0
00001BEA  30BC 4E4E 2812          move.w    #20046,(A0)
                    2813   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BEE  2202      2814          move.l    D2,D1
00001BF0  E589      2815          lsl.l     #2,D1
00001BF2  2F33 1800 2816          move.l    0(A3,D1.L),-(A7)
00001BF6  2F02      2817          move.l    D2,-(A7)
00001BF8  4879 0000 2818          pea       @m68kde~1_67.L
00001BFC  6572      
00001BFE  4E92      2819          jsr       (A2)
00001C00  DEFC 000C 2820          add.w     #12,A7
                    2821   ; printf("    %s", Instruction);
00001C04  4879 0803 2822          pea       _Instruction.L
00001C08  04E2      
00001C0A  4879 0000 2823          pea       @m68kde~1_68.L
00001C0E  6582      
00001C10  4E92      2824          jsr       (A2)
00001C12  504F      2825          addq.w    #8,A7
                    2826   BreakPointDisplay_11:
00001C14  5282      2827          addq.l    #1,D2
00001C16  6000 FF7A 2828          bra       BreakPointDisplay_8
                    2829   BreakPointDisplay_10:
                    2830   ; }
                    2831   ; }
                    2832   ; printf("\r\n") ;
00001C1A  4879 0000 2833          pea       @m68kde~1_1.L
00001C1E  5EFC      
00001C20  4E92      2834          jsr       (A2)
00001C22  584F      2835          addq.w    #4,A7
00001C24  4CDF 0C0C 2836          movem.l   (A7)+,D2/D3/A2/A3
00001C28  4E75      2837          rts
                    2838   ; }
                    2839   ; void WatchPointDisplay(void)
                    2840   ; {
                    2841   _WatchPointDisplay:
00001C2A  48E7 3020 2842          movem.l   D2/D3/A2,-(A7)
00001C2E  45F9 0000 2843          lea       _printf.L,A2
00001C32  55EA      
                    2844   ; int i ;
                    2845   ; int WatchPointsSet = 0 ;
00001C34  4283      2846          clr.l     D3
                    2847   ; // any watchpoints set
                    2848   ; for(i = 0; i < 8; i++)  {
00001C36  4282      2849          clr.l     D2
                    2850   WatchPointDisplay_1:
00001C38  0C82 0000 2851          cmp.l     #8,D2
00001C3C  0008      
00001C3E  6C1C      2852          bge.s     WatchPointDisplay_3
                    2853   ; if(WatchPointSetOrCleared[i] == 1)
00001C40  2002      2854          move.l    D2,D0
00001C42  E588      2855          lsl.l     #2,D0
00001C44  41F9 0803 2856          lea       _WatchPointSetOrCleared.L,A0
00001C48  01A2      
00001C4A  2030 0800 2857          move.l    0(A0,D0.L),D0
00001C4E  0C80 0000 2858          cmp.l     #1,D0
00001C52  0001      
00001C54  6602      2859          bne.s     WatchPointDisplay_4
                    2860   ; WatchPointsSet = 1;
00001C56  7601      2861          moveq     #1,D3
                    2862   WatchPointDisplay_4:
00001C58  5282      2863          addq.l    #1,D2
00001C5A  60DC      2864          bra       WatchPointDisplay_1
                    2865   WatchPointDisplay_3:
                    2866   ; }
                    2867   ; if(WatchPointsSet == 1) {
00001C5C  0C83 0000 2868          cmp.l     #1,D3
00001C60  0001      
00001C62  6616      2869          bne.s     WatchPointDisplay_6
                    2870   ; printf("\r\nNum     Address") ;
00001C64  4879 0000 2871          pea       @m68kde~1_69.L
00001C68  658A      
00001C6A  4E92      2872          jsr       (A2)
00001C6C  584F      2873          addq.w    #4,A7
                    2874   ; printf("\r\n---     ---------") ;
00001C6E  4879 0000 2875          pea       @m68kde~1_70.L
00001C72  659C      
00001C74  4E92      2876          jsr       (A2)
00001C76  584F      2877          addq.w    #4,A7
00001C78  600A      2878          bra.s     WatchPointDisplay_7
                    2879   WatchPointDisplay_6:
                    2880   ; }
                    2881   ; else
                    2882   ; printf("\r\nNo WatchPoints Set") ;
00001C7A  4879 0000 2883          pea       @m68kde~1_71.L
00001C7E  65B0      
00001C80  4E92      2884          jsr       (A2)
00001C82  584F      2885          addq.w    #4,A7
                    2886   WatchPointDisplay_7:
                    2887   ; for(i = 0; i < 8; i++)  {
00001C84  4282      2888          clr.l     D2
                    2889   WatchPointDisplay_8:
00001C86  0C82 0000 2890          cmp.l     #8,D2
00001C8A  0008      
00001C8C  6C00 0038 2891          bge       WatchPointDisplay_10
                    2892   ; if(WatchPointSetOrCleared[i] == 1)
00001C90  2002      2893          move.l    D2,D0
00001C92  E588      2894          lsl.l     #2,D0
00001C94  41F9 0803 2895          lea       _WatchPointSetOrCleared.L,A0
00001C98  01A2      
00001C9A  2030 0800 2896          move.l    0(A0,D0.L),D0
00001C9E  0C80 0000 2897          cmp.l     #1,D0
00001CA2  0001      
00001CA4  661C      2898          bne.s     WatchPointDisplay_11
                    2899   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CA6  2202      2900          move.l    D2,D1
00001CA8  E589      2901          lsl.l     #2,D1
00001CAA  41F9 0803 2902          lea       _WatchPointAddress.L,A0
00001CAE  0182      
00001CB0  2F30 1800 2903          move.l    0(A0,D1.L),-(A7)
00001CB4  2F02      2904          move.l    D2,-(A7)
00001CB6  4879 0000 2905          pea       @m68kde~1_67.L
00001CBA  6572      
00001CBC  4E92      2906          jsr       (A2)
00001CBE  DEFC 000C 2907          add.w     #12,A7
                    2908   WatchPointDisplay_11:
00001CC2  5282      2909          addq.l    #1,D2
00001CC4  60C0      2910          bra       WatchPointDisplay_8
                    2911   WatchPointDisplay_10:
                    2912   ; }
                    2913   ; printf("\r\n") ;
00001CC6  4879 0000 2914          pea       @m68kde~1_1.L
00001CCA  5EFC      
00001CCC  4E92      2915          jsr       (A2)
00001CCE  584F      2916          addq.w    #4,A7
00001CD0  4CDF 040C 2917          movem.l   (A7)+,D2/D3/A2
00001CD4  4E75      2918          rts
                    2919   ; }
                    2920   ; void BreakPointClear(void)
                    2921   ; {
                    2922   _BreakPointClear:
00001CD6  4E56 FFFC 2923          link      A6,#-4
00001CDA  48E7 2020 2924          movem.l   D2/A2,-(A7)
00001CDE  45F9 0000 2925          lea       _printf.L,A2
00001CE2  55EA      
                    2926   ; unsigned int i ;
                    2927   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2928   ; BreakPointDisplay() ;
00001CE4  4EB8 1B30 2929          jsr       _BreakPointDisplay
                    2930   ; printf("\r\nEnter Break Point Number: ") ;
00001CE8  4879 0000 2931          pea       @m68kde~1_72.L
00001CEC  65C6      
00001CEE  4E92      2932          jsr       (A2)
00001CF0  584F      2933          addq.w    #4,A7
                    2934   ; i = xtod(_getch()) ;           // get break pointer number
00001CF2  2F00      2935          move.l    D0,-(A7)
00001CF4  4EB8 0B68 2936          jsr       __getch
00001CF8  2200      2937          move.l    D0,D1
00001CFA  201F      2938          move.l    (A7)+,D0
00001CFC  2F01      2939          move.l    D1,-(A7)
00001CFE  4EB8 0BD2 2940          jsr       _xtod
00001D02  584F      2941          addq.w    #4,A7
00001D04  C0BC 0000 2942          and.l     #255,D0
00001D08  00FF      
00001D0A  2400      2943          move.l    D0,D2
                    2944   ; if((i < 0) || (i > 7))   {
00001D0C  0C82 0000 2945          cmp.l     #0,D2
00001D10  0000      
00001D12  6508      2946          blo.s     BreakPointClear_3
00001D14  0C82 0000 2947          cmp.l     #7,D2
00001D18  0007      
00001D1A  630E      2948          bls.s     BreakPointClear_1
                    2949   BreakPointClear_3:
                    2950   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D1C  4879 0000 2951          pea       @m68kde~1_73.L
00001D20  65E4      
00001D22  4E92      2952          jsr       (A2)
00001D24  584F      2953          addq.w    #4,A7
                    2954   ; return ;
00001D26  6000 0080 2955          bra       BreakPointClear_4
                    2956   BreakPointClear_1:
                    2957   ; }
                    2958   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D2A  2002      2959          move.l    D2,D0
00001D2C  E588      2960          lsl.l     #2,D0
00001D2E  41F9 0803 2961          lea       _BreakPointSetOrCleared.L,A0
00001D32  015E      
00001D34  2030 0800 2962          move.l    0(A0,D0.L),D0
00001D38  0C80 0000 2963          cmp.l     #1,D0
00001D3C  0001      
00001D3E  6600 005A 2964          bne       BreakPointClear_5
                    2965   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D42  2002      2966          move.l    D2,D0
00001D44  E588      2967          lsl.l     #2,D0
00001D46  41F9 0803 2968          lea       _BreakPointAddress.L,A0
00001D4A  012E      
00001D4C  2D70 0800 2969          move.l    0(A0,D0.L),-4(A6)
00001D50  FFFC      
                    2970   ; BreakPointAddress[i] = 0 ;
00001D52  2002      2971          move.l    D2,D0
00001D54  E588      2972          lsl.l     #2,D0
00001D56  41F9 0803 2973          lea       _BreakPointAddress.L,A0
00001D5A  012E      
00001D5C  42B0 0800 2974          clr.l     0(A0,D0.L)
                    2975   ; BreakPointSetOrCleared[i] = 0 ;
00001D60  2002      2976          move.l    D2,D0
00001D62  E588      2977          lsl.l     #2,D0
00001D64  41F9 0803 2978          lea       _BreakPointSetOrCleared.L,A0
00001D68  015E      
00001D6A  42B0 0800 2979          clr.l     0(A0,D0.L)
                    2980   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D6E  2002      2981          move.l    D2,D0
00001D70  E388      2982          lsl.l     #1,D0
00001D72  41F9 0803 2983          lea       _BreakPointInstruction.L,A0
00001D76  014E      
00001D78  226E FFFC 2984          move.l    -4(A6),A1
00001D7C  32B0 0800 2985          move.w    0(A0,D0.L),(A1)
                    2986   ; BreakPointInstruction[i] = 0 ;
00001D80  2002      2987          move.l    D2,D0
00001D82  E388      2988          lsl.l     #1,D0
00001D84  41F9 0803 2989          lea       _BreakPointInstruction.L,A0
00001D88  014E      
00001D8A  4270 0800 2990          clr.w     0(A0,D0.L)
                    2991   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D8E  4879 0000 2992          pea       @m68kde~1_74.L
00001D92  6600      
00001D94  4E92      2993          jsr       (A2)
00001D96  584F      2994          addq.w    #4,A7
00001D98  600A      2995          bra.s     BreakPointClear_6
                    2996   BreakPointClear_5:
                    2997   ; }
                    2998   ; else
                    2999   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D9A  4879 0000 3000          pea       @m68kde~1_75.L
00001D9E  661E      
00001DA0  4E92      3001          jsr       (A2)
00001DA2  584F      3002          addq.w    #4,A7
                    3003   BreakPointClear_6:
                    3004   ; BreakPointDisplay() ;
00001DA4  4EB8 1B30 3005          jsr       _BreakPointDisplay
                    3006   ; return ;
                    3007   BreakPointClear_4:
00001DA8  4CDF 0404 3008          movem.l   (A7)+,D2/A2
00001DAC  4E5E      3009          unlk      A6
00001DAE  4E75      3010          rts
                    3011   ; }
                    3012   ; void WatchPointClear(void)
                    3013   ; {
                    3014   _WatchPointClear:
00001DB0  48E7 2020 3015          movem.l   D2/A2,-(A7)
00001DB4  45F9 0000 3016          lea       _printf.L,A2
00001DB8  55EA      
                    3017   ; unsigned int i ;
                    3018   ; WatchPointDisplay() ;
00001DBA  4EB8 1C2A 3019          jsr       _WatchPointDisplay
                    3020   ; printf("\r\nEnter Watch Point Number: ") ;
00001DBE  4879 0000 3021          pea       @m68kde~1_76.L
00001DC2  663C      
00001DC4  4E92      3022          jsr       (A2)
00001DC6  584F      3023          addq.w    #4,A7
                    3024   ; i = xtod(_getch()) ;           // get watch pointer number
00001DC8  2F00      3025          move.l    D0,-(A7)
00001DCA  4EB8 0B68 3026          jsr       __getch
00001DCE  2200      3027          move.l    D0,D1
00001DD0  201F      3028          move.l    (A7)+,D0
00001DD2  2F01      3029          move.l    D1,-(A7)
00001DD4  4EB8 0BD2 3030          jsr       _xtod
00001DD8  584F      3031          addq.w    #4,A7
00001DDA  C0BC 0000 3032          and.l     #255,D0
00001DDE  00FF      
00001DE0  2400      3033          move.l    D0,D2
                    3034   ; if((i < 0) || (i > 7))   {
00001DE2  0C82 0000 3035          cmp.l     #0,D2
00001DE6  0000      
00001DE8  6508      3036          blo.s     WatchPointClear_3
00001DEA  0C82 0000 3037          cmp.l     #7,D2
00001DEE  0007      
00001DF0  630E      3038          bls.s     WatchPointClear_1
                    3039   WatchPointClear_3:
                    3040   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DF2  4879 0000 3041          pea       @m68kde~1_73.L
00001DF6  65E4      
00001DF8  4E92      3042          jsr       (A2)
00001DFA  584F      3043          addq.w    #4,A7
                    3044   ; return ;
00001DFC  6000 004E 3045          bra       WatchPointClear_4
                    3046   WatchPointClear_1:
                    3047   ; }
                    3048   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E00  2002      3049          move.l    D2,D0
00001E02  E588      3050          lsl.l     #2,D0
00001E04  41F9 0803 3051          lea       _WatchPointSetOrCleared.L,A0
00001E08  01A2      
00001E0A  2030 0800 3052          move.l    0(A0,D0.L),D0
00001E0E  0C80 0000 3053          cmp.l     #1,D0
00001E12  0001      
00001E14  6628      3054          bne.s     WatchPointClear_5
                    3055   ; WatchPointAddress[i] = 0 ;
00001E16  2002      3056          move.l    D2,D0
00001E18  E588      3057          lsl.l     #2,D0
00001E1A  41F9 0803 3058          lea       _WatchPointAddress.L,A0
00001E1E  0182      
00001E20  42B0 0800 3059          clr.l     0(A0,D0.L)
                    3060   ; WatchPointSetOrCleared[i] = 0 ;
00001E24  2002      3061          move.l    D2,D0
00001E26  E588      3062          lsl.l     #2,D0
00001E28  41F9 0803 3063          lea       _WatchPointSetOrCleared.L,A0
00001E2C  01A2      
00001E2E  42B0 0800 3064          clr.l     0(A0,D0.L)
                    3065   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E32  4879 0000 3066          pea       @m68kde~1_77.L
00001E36  665A      
00001E38  4E92      3067          jsr       (A2)
00001E3A  584F      3068          addq.w    #4,A7
00001E3C  600A      3069          bra.s     WatchPointClear_6
                    3070   WatchPointClear_5:
                    3071   ; }
                    3072   ; else
                    3073   ; printf("\r\nWatch Point Was not Set.....") ;
00001E3E  4879 0000 3074          pea       @m68kde~1_78.L
00001E42  6678      
00001E44  4E92      3075          jsr       (A2)
00001E46  584F      3076          addq.w    #4,A7
                    3077   WatchPointClear_6:
                    3078   ; WatchPointDisplay() ;
00001E48  4EB8 1C2A 3079          jsr       _WatchPointDisplay
                    3080   ; return ;
                    3081   WatchPointClear_4:
00001E4C  4CDF 0404 3082          movem.l   (A7)+,D2/A2
00001E50  4E75      3083          rts
                    3084   ; }
                    3085   ; void DisableBreakPoints(void)
                    3086   ; {
                    3087   _DisableBreakPoints:
00001E52  4E56 FFFC 3088          link      A6,#-4
00001E56  2F02      3089          move.l    D2,-(A7)
                    3090   ; int i ;
                    3091   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3092   ; for(i = 0; i < 8; i++)  {
00001E58  4282      3093          clr.l     D2
                    3094   DisableBreakPoints_1:
00001E5A  0C82 0000 3095          cmp.l     #8,D2
00001E5E  0008      
00001E60  6C00 003E 3096          bge       DisableBreakPoints_3
                    3097   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E64  2002      3098          move.l    D2,D0
00001E66  E588      3099          lsl.l     #2,D0
00001E68  41F9 0803 3100          lea       _BreakPointSetOrCleared.L,A0
00001E6C  015E      
00001E6E  2030 0800 3101          move.l    0(A0,D0.L),D0
00001E72  0C80 0000 3102          cmp.l     #1,D0
00001E76  0001      
00001E78  6622      3103          bne.s     DisableBreakPoints_4
                    3104   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E7A  2002      3105          move.l    D2,D0
00001E7C  E588      3106          lsl.l     #2,D0
00001E7E  41F9 0803 3107          lea       _BreakPointAddress.L,A0
00001E82  012E      
00001E84  2D70 0800 3108          move.l    0(A0,D0.L),-4(A6)
00001E88  FFFC      
                    3109   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E8A  2002      3110          move.l    D2,D0
00001E8C  E388      3111          lsl.l     #1,D0
00001E8E  41F9 0803 3112          lea       _BreakPointInstruction.L,A0
00001E92  014E      
00001E94  226E FFFC 3113          move.l    -4(A6),A1
00001E98  32B0 0800 3114          move.w    0(A0,D0.L),(A1)
                    3115   DisableBreakPoints_4:
00001E9C  5282      3116          addq.l    #1,D2
00001E9E  60BA      3117          bra       DisableBreakPoints_1
                    3118   DisableBreakPoints_3:
00001EA0  241F      3119          move.l    (A7)+,D2
00001EA2  4E5E      3120          unlk      A6
00001EA4  4E75      3121          rts
                    3122   ; }
                    3123   ; }
                    3124   ; }
                    3125   ; void EnableBreakPoints(void)
                    3126   ; {
                    3127   _EnableBreakPoints:
00001EA6  4E56 FFFC 3128          link      A6,#-4
00001EAA  2F02      3129          move.l    D2,-(A7)
                    3130   ; int i ;
                    3131   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3132   ; for(i = 0; i < 8; i++)  {
00001EAC  4282      3133          clr.l     D2
                    3134   EnableBreakPoints_1:
00001EAE  0C82 0000 3135          cmp.l     #8,D2
00001EB2  0008      
00001EB4  6C32      3136          bge.s     EnableBreakPoints_3
                    3137   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EB6  2002      3138          move.l    D2,D0
00001EB8  E588      3139          lsl.l     #2,D0
00001EBA  41F9 0803 3140          lea       _BreakPointSetOrCleared.L,A0
00001EBE  015E      
00001EC0  2030 0800 3141          move.l    0(A0,D0.L),D0
00001EC4  0C80 0000 3142          cmp.l     #1,D0
00001EC8  0001      
00001ECA  6618      3143          bne.s     EnableBreakPoints_4
                    3144   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ECC  2002      3145          move.l    D2,D0
00001ECE  E588      3146          lsl.l     #2,D0
00001ED0  41F9 0803 3147          lea       _BreakPointAddress.L,A0
00001ED4  012E      
00001ED6  2D70 0800 3148          move.l    0(A0,D0.L),-4(A6)
00001EDA  FFFC      
                    3149   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EDC  206E FFFC 3150          move.l    -4(A6),A0
00001EE0  30BC 4E4E 3151          move.w    #20046,(A0)
                    3152   EnableBreakPoints_4:
00001EE4  5282      3153          addq.l    #1,D2
00001EE6  60C6      3154          bra       EnableBreakPoints_1
                    3155   EnableBreakPoints_3:
00001EE8  241F      3156          move.l    (A7)+,D2
00001EEA  4E5E      3157          unlk      A6
00001EEC  4E75      3158          rts
                    3159   ; }
                    3160   ; }
                    3161   ; }
                    3162   ; void KillAllBreakPoints(void)
                    3163   ; {
                    3164   _KillAllBreakPoints:
00001EEE  4E56 FFFC 3165          link      A6,#-4
00001EF2  2F02      3166          move.l    D2,-(A7)
                    3167   ; int i ;
                    3168   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3169   ; for(i = 0; i < 8; i++)  {
00001EF4  4282      3170          clr.l     D2
                    3171   KillAllBreakPoints_1:
00001EF6  0C82 0000 3172          cmp.l     #8,D2
00001EFA  0008      
00001EFC  6C00 0052 3173          bge       KillAllBreakPoints_3
                    3174   ; // clear BP
                    3175   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F00  2002      3176          move.l    D2,D0
00001F02  E588      3177          lsl.l     #2,D0
00001F04  41F9 0803 3178          lea       _BreakPointAddress.L,A0
00001F08  012E      
00001F0A  2D70 0800 3179          move.l    0(A0,D0.L),-4(A6)
00001F0E  FFFC      
                    3180   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F10  2002      3181          move.l    D2,D0
00001F12  E388      3182          lsl.l     #1,D0
00001F14  41F9 0803 3183          lea       _BreakPointInstruction.L,A0
00001F18  014E      
00001F1A  226E FFFC 3184          move.l    -4(A6),A1
00001F1E  32B0 0800 3185          move.w    0(A0,D0.L),(A1)
                    3186   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F22  2002      3187          move.l    D2,D0
00001F24  E588      3188          lsl.l     #2,D0
00001F26  41F9 0803 3189          lea       _BreakPointAddress.L,A0
00001F2A  012E      
00001F2C  42B0 0800 3190          clr.l     0(A0,D0.L)
                    3191   ; BreakPointInstruction[i] = 0 ;
00001F30  2002      3192          move.l    D2,D0
00001F32  E388      3193          lsl.l     #1,D0
00001F34  41F9 0803 3194          lea       _BreakPointInstruction.L,A0
00001F38  014E      
00001F3A  4270 0800 3195          clr.w     0(A0,D0.L)
                    3196   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F3E  2002      3197          move.l    D2,D0
00001F40  E588      3198          lsl.l     #2,D0
00001F42  41F9 0803 3199          lea       _BreakPointSetOrCleared.L,A0
00001F46  015E      
00001F48  42B0 0800 3200          clr.l     0(A0,D0.L)
00001F4C  5282      3201          addq.l    #1,D2
00001F4E  60A6      3202          bra       KillAllBreakPoints_1
                    3203   KillAllBreakPoints_3:
00001F50  241F      3204          move.l    (A7)+,D2
00001F52  4E5E      3205          unlk      A6
00001F54  4E75      3206          rts
                    3207   ; }
                    3208   ; //BreakPointDisplay() ;       // display the break points
                    3209   ; }
                    3210   ; void KillAllWatchPoints(void)
                    3211   ; {
                    3212   _KillAllWatchPoints:
00001F56  2F02      3213          move.l    D2,-(A7)
                    3214   ; int i ;
                    3215   ; for(i = 0; i < 8; i++)  {
00001F58  4282      3216          clr.l     D2
                    3217   KillAllWatchPoints_1:
00001F5A  0C82 0000 3218          cmp.l     #8,D2
00001F5E  0008      
00001F60  6C20      3219          bge.s     KillAllWatchPoints_3
                    3220   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F62  2002      3221          move.l    D2,D0
00001F64  E588      3222          lsl.l     #2,D0
00001F66  41F9 0803 3223          lea       _WatchPointAddress.L,A0
00001F6A  0182      
00001F6C  42B0 0800 3224          clr.l     0(A0,D0.L)
                    3225   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F70  2002      3226          move.l    D2,D0
00001F72  E588      3227          lsl.l     #2,D0
00001F74  41F9 0803 3228          lea       _WatchPointSetOrCleared.L,A0
00001F78  01A2      
00001F7A  42B0 0800 3229          clr.l     0(A0,D0.L)
00001F7E  5282      3230          addq.l    #1,D2
00001F80  60D8      3231          bra       KillAllWatchPoints_1
                    3232   KillAllWatchPoints_3:
00001F82  241F      3233          move.l    (A7)+,D2
00001F84  4E75      3234          rts
                    3235   ; }
                    3236   ; //WatchPointDisplay() ;       // display the break points
                    3237   ; }
                    3238   ; void SetBreakPoint(void)
                    3239   ; {
                    3240   _SetBreakPoint:
00001F86  4E56 FFFC 3241          link      A6,#-4
00001F8A  48E7 3830 3242          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F8E  45F9 0000 3243          lea       _printf.L,A2
00001F92  55EA      
00001F94  47F9 0803 3244          lea       _BreakPointSetOrCleared.L,A3
00001F98  015E      
                    3245   ; int i ;
                    3246   ; int BPNumber;
                    3247   ; int BPAddress;
                    3248   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3249   ; // see if any free break points
                    3250   ; for(i = 0; i < 8; i ++) {
00001F9A  4282      3251          clr.l     D2
                    3252   SetBreakPoint_1:
00001F9C  0C82 0000 3253          cmp.l     #8,D2
00001FA0  0008      
00001FA2  6C10      3254          bge.s     SetBreakPoint_3
                    3255   ; if( BreakPointSetOrCleared[i] == 0)
00001FA4  2002      3256          move.l    D2,D0
00001FA6  E588      3257          lsl.l     #2,D0
00001FA8  2033 0800 3258          move.l    0(A3,D0.L),D0
00001FAC  6602      3259          bne.s     SetBreakPoint_4
                    3260   ; break ;         // if spare BP found allow user to set it
00001FAE  6004      3261          bra.s     SetBreakPoint_3
                    3262   SetBreakPoint_4:
00001FB0  5282      3263          addq.l    #1,D2
00001FB2  60E8      3264          bra       SetBreakPoint_1
                    3265   SetBreakPoint_3:
                    3266   ; }
                    3267   ; if(i == 8) {
00001FB4  0C82 0000 3268          cmp.l     #8,D2
00001FB8  0008      
00001FBA  660E      3269          bne.s     SetBreakPoint_6
                    3270   ; printf("\r\nNo FREE Break Points.....") ;
00001FBC  4879 0000 3271          pea       @m68kde~1_79.L
00001FC0  6698      
00001FC2  4E92      3272          jsr       (A2)
00001FC4  584F      3273          addq.w    #4,A7
                    3274   ; return ;
00001FC6  6000 00EC 3275          bra       SetBreakPoint_15
                    3276   SetBreakPoint_6:
                    3277   ; }
                    3278   ; printf("\r\nBreak Point Address: ") ;
00001FCA  4879 0000 3279          pea       @m68kde~1_80.L
00001FCE  66B4      
00001FD0  4E92      3280          jsr       (A2)
00001FD2  584F      3281          addq.w    #4,A7
                    3282   ; BPAddress = Get8HexDigits(0) ;
00001FD4  42A7      3283          clr.l     -(A7)
00001FD6  4EB8 0CA4 3284          jsr       _Get8HexDigits
00001FDA  584F      3285          addq.w    #4,A7
00001FDC  2600      3286          move.l    D0,D3
                    3287   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FDE  2803      3288          move.l    D3,D4
                    3289   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FE0  2003      3290          move.l    D3,D0
00001FE2  C0BC 0000 3291          and.l     #1,D0
00001FE6  0001      
00001FE8  0C80 0000 3292          cmp.l     #1,D0
00001FEC  0001      
00001FEE  660E      3293          bne.s     SetBreakPoint_9
                    3294   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FF0  4879 0000 3295          pea       @m68kde~1_81.L
00001FF4  66CC      
00001FF6  4E92      3296          jsr       (A2)
00001FF8  584F      3297          addq.w    #4,A7
                    3298   ; return ;
00001FFA  6000 00B8 3299          bra       SetBreakPoint_15
                    3300   SetBreakPoint_9:
                    3301   ; }
                    3302   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FFE  0C83 0000 3303          cmp.l     #32768,D3
00002002  8000      
00002004  640E      3304          bhs.s     SetBreakPoint_11
                    3305   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002006  4879 0000 3306          pea       @m68kde~1_82.L
0000200A  6702      
0000200C  4E92      3307          jsr       (A2)
0000200E  584F      3308          addq.w    #4,A7
                    3309   ; return ;
00002010  6000 00A2 3310          bra       SetBreakPoint_15
                    3311   SetBreakPoint_11:
                    3312   ; }
                    3313   ; // search for first free bp or existing same BP
                    3314   ; for(i = 0; i < 8; i++)  {
00002014  4282      3315          clr.l     D2
                    3316   SetBreakPoint_13:
00002016  0C82 0000 3317          cmp.l     #8,D2
0000201A  0008      
0000201C  6C00 0096 3318          bge       SetBreakPoint_15
                    3319   ; if(BreakPointAddress[i] == BPAddress)   {
00002020  2002      3320          move.l    D2,D0
00002022  E588      3321          lsl.l     #2,D0
00002024  41F9 0803 3322          lea       _BreakPointAddress.L,A0
00002028  012E      
0000202A  B6B0 0800 3323          cmp.l     0(A0,D0.L),D3
0000202E  6610      3324          bne.s     SetBreakPoint_16
                    3325   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002030  2F03      3326          move.l    D3,-(A7)
00002032  4879 0000 3327          pea       @m68kde~1_83.L
00002036  674A      
00002038  4E92      3328          jsr       (A2)
0000203A  504F      3329          addq.w    #8,A7
                    3330   ; return ;
0000203C  6000 0076 3331          bra       SetBreakPoint_15
                    3332   SetBreakPoint_16:
                    3333   ; }
                    3334   ; if(BreakPointSetOrCleared[i] == 0) {
00002040  2002      3335          move.l    D2,D0
00002042  E588      3336          lsl.l     #2,D0
00002044  2033 0800 3337          move.l    0(A3,D0.L),D0
00002048  6600 0064 3338          bne       SetBreakPoint_18
                    3339   ; // set BP here
                    3340   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000204C  2002      3341          move.l    D2,D0
0000204E  E588      3342          lsl.l     #2,D0
00002050  27BC 0000 3343          move.l    #1,0(A3,D0.L)
00002054  0001 0800 
                    3344   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002058  2044      3345          move.l    D4,A0
0000205A  2002      3346          move.l    D2,D0
0000205C  E388      3347          lsl.l     #1,D0
0000205E  43F9 0803 3348          lea       _BreakPointInstruction.L,A1
00002062  014E      
00002064  3390 0800 3349          move.w    (A0),0(A1,D0.L)
                    3350   ; DisassembleInstruction(ProgramBreakPointAddress) ;
00002068  2F04      3351          move.l    D4,-(A7)
0000206A  4EB9 0000 3352          jsr       _DisassembleInstruction
0000206E  3576      
00002070  584F      3353          addq.w    #4,A7
                    3354   ; FormatInstructionForTrace() ;
00002072  4EB8 12EA 3355          jsr       _FormatInstructionForTrace
                    3356   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
00002076  4879 0803 3357          pea       _Instruction.L
0000207A  04E2      
0000207C  2F04      3358          move.l    D4,-(A7)
0000207E  4879 0000 3359          pea       @m68kde~1_84.L
00002082  6782      
00002084  4E92      3360          jsr       (A2)
00002086  DEFC 000C 3361          add.w     #12,A7
                    3362   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000208A  2044      3363          move.l    D4,A0
0000208C  30BC 4E4E 3364          move.w    #20046,(A0)
                    3365   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002090  2002      3366          move.l    D2,D0
00002092  E588      3367          lsl.l     #2,D0
00002094  41F9 0803 3368          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2183 0800 3369          move.l    D3,0(A0,D0.L)
                    3370   ; printf("\r\n") ;
0000209E  4879 0000 3371          pea       @m68kde~1_1.L
000020A2  5EFC      
000020A4  4E92      3372          jsr       (A2)
000020A6  584F      3373          addq.w    #4,A7
                    3374   ; BreakPointDisplay() ;       // display the break points
000020A8  4EB8 1B30 3375          jsr       _BreakPointDisplay
                    3376   ; return ;
000020AC  6006      3377          bra.s     SetBreakPoint_15
                    3378   SetBreakPoint_18:
000020AE  5282      3379          addq.l    #1,D2
000020B0  6000 FF64 3380          bra       SetBreakPoint_13
                    3381   SetBreakPoint_15:
000020B4  4CDF 0C1C 3382          movem.l   (A7)+,D2/D3/D4/A2/A3
000020B8  4E5E      3383          unlk      A6
000020BA  4E75      3384          rts
                    3385   ; }
                    3386   ; }
                    3387   ; }
                    3388   ; void SetWatchPoint(void)
                    3389   ; {
                    3390   _SetWatchPoint:
000020BC  4E56 FFF8 3391          link      A6,#-8
000020C0  48E7 3030 3392          movem.l   D2/D3/A2/A3,-(A7)
000020C4  45F9 0000 3393          lea       _printf.L,A2
000020C8  55EA      
000020CA  47F9 0803 3394          lea       _WatchPointSetOrCleared.L,A3
000020CE  01A2      
                    3395   ; int i ;
                    3396   ; int WPNumber;
                    3397   ; int WPAddress;
                    3398   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3399   ; // see if any free break points
                    3400   ; for(i = 0; i < 8; i ++) {
000020D0  4282      3401          clr.l     D2
                    3402   SetWatchPoint_1:
000020D2  0C82 0000 3403          cmp.l     #8,D2
000020D6  0008      
000020D8  6C10      3404          bge.s     SetWatchPoint_3
                    3405   ; if( WatchPointSetOrCleared[i] == 0)
000020DA  2002      3406          move.l    D2,D0
000020DC  E588      3407          lsl.l     #2,D0
000020DE  2033 0800 3408          move.l    0(A3,D0.L),D0
000020E2  6602      3409          bne.s     SetWatchPoint_4
                    3410   ; break ;         // if spare WP found allow user to set it
000020E4  6004      3411          bra.s     SetWatchPoint_3
                    3412   SetWatchPoint_4:
000020E6  5282      3413          addq.l    #1,D2
000020E8  60E8      3414          bra       SetWatchPoint_1
                    3415   SetWatchPoint_3:
                    3416   ; }
                    3417   ; if(i == 8) {
000020EA  0C82 0000 3418          cmp.l     #8,D2
000020EE  0008      
000020F0  660E      3419          bne.s     SetWatchPoint_6
                    3420   ; printf("\r\nNo FREE Watch Points.....") ;
000020F2  4879 0000 3421          pea       @m68kde~1_85.L
000020F6  67BA      
000020F8  4E92      3422          jsr       (A2)
000020FA  584F      3423          addq.w    #4,A7
                    3424   ; return ;
000020FC  6000 008C 3425          bra       SetWatchPoint_11
                    3426   SetWatchPoint_6:
                    3427   ; }
                    3428   ; printf("\r\nWatch Point Address: ") ;
00002100  4879 0000 3429          pea       @m68kde~1_86.L
00002104  67D6      
00002106  4E92      3430          jsr       (A2)
00002108  584F      3431          addq.w    #4,A7
                    3432   ; WPAddress = Get8HexDigits(0) ;
0000210A  42A7      3433          clr.l     -(A7)
0000210C  4EB8 0CA4 3434          jsr       _Get8HexDigits
00002110  584F      3435          addq.w    #4,A7
00002112  2600      3436          move.l    D0,D3
                    3437   ; // search for first free wp or existing same wp
                    3438   ; for(i = 0; i < 8; i++)  {
00002114  4282      3439          clr.l     D2
                    3440   SetWatchPoint_9:
00002116  0C82 0000 3441          cmp.l     #8,D2
0000211A  0008      
0000211C  6C00 006C 3442          bge       SetWatchPoint_11
                    3443   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002120  2002      3444          move.l    D2,D0
00002122  E588      3445          lsl.l     #2,D0
00002124  41F9 0803 3446          lea       _WatchPointAddress.L,A0
00002128  0182      
0000212A  B6B0 0800 3447          cmp.l     0(A0,D0.L),D3
0000212E  6614      3448          bne.s     SetWatchPoint_12
00002130  4A83      3449          tst.l     D3
00002132  6710      3450          beq.s     SetWatchPoint_12
                    3451   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002134  2F03      3452          move.l    D3,-(A7)
00002136  4879 0000 3453          pea       @m68kde~1_87.L
0000213A  67EE      
0000213C  4E92      3454          jsr       (A2)
0000213E  504F      3455          addq.w    #8,A7
                    3456   ; return ;
00002140  6000 0048 3457          bra       SetWatchPoint_11
                    3458   SetWatchPoint_12:
                    3459   ; }
                    3460   ; if(WatchPointSetOrCleared[i] == 0) {
00002144  2002      3461          move.l    D2,D0
00002146  E588      3462          lsl.l     #2,D0
00002148  2033 0800 3463          move.l    0(A3,D0.L),D0
0000214C  6600 0038 3464          bne       SetWatchPoint_14
                    3465   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002150  2002      3466          move.l    D2,D0
00002152  E588      3467          lsl.l     #2,D0
00002154  27BC 0000 3468          move.l    #1,0(A3,D0.L)
00002158  0001 0800 
                    3469   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000215C  2F03      3470          move.l    D3,-(A7)
0000215E  4879 0000 3471          pea       @m68kde~1_88.L
00002162  6824      
00002164  4E92      3472          jsr       (A2)
00002166  504F      3473          addq.w    #8,A7
                    3474   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002168  2002      3475          move.l    D2,D0
0000216A  E588      3476          lsl.l     #2,D0
0000216C  41F9 0803 3477          lea       _WatchPointAddress.L,A0
00002170  0182      
00002172  2183 0800 3478          move.l    D3,0(A0,D0.L)
                    3479   ; printf("\r\n") ;
00002176  4879 0000 3480          pea       @m68kde~1_1.L
0000217A  5EFC      
0000217C  4E92      3481          jsr       (A2)
0000217E  584F      3482          addq.w    #4,A7
                    3483   ; WatchPointDisplay() ;       // display the break points
00002180  4EB8 1C2A 3484          jsr       _WatchPointDisplay
                    3485   ; return ;
00002184  6004      3486          bra.s     SetWatchPoint_11
                    3487   SetWatchPoint_14:
00002186  5282      3488          addq.l    #1,D2
00002188  608C      3489          bra       SetWatchPoint_9
                    3490   SetWatchPoint_11:
0000218A  4CDF 0C0C 3491          movem.l   (A7)+,D2/D3/A2/A3
0000218E  4E5E      3492          unlk      A6
00002190  4E75      3493          rts
                    3494   ; }
                    3495   ; }
                    3496   ; }
                    3497   ; void HandleBreakPoint(void)
                    3498   ; {
                    3499   _HandleBreakPoint:
00002192  4E56 FFFC 3500          link      A6,#-4
00002196  48E7 0038 3501          movem.l   A2/A3/A4,-(A7)
0000219A  45F9 0803 3502          lea       _i.L,A2
0000219E  00C4      
000021A0  47F9 0000 3503          lea       _printf.L,A3
000021A4  55EA      
000021A6  49F9 0803 3504          lea       _PC.L,A4
000021AA  0120      
                    3505   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3506   ; // now we have to put the break point back to run the instruction
                    3507   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3508   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021AC  5594      3509          subq.l    #2,(A4)
                    3510   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021AE  4879 0000 3511          pea       @m68kde~1_89.L
000021B2  684A      
000021B4  4E93      3512          jsr       (A3)
000021B6  584F      3513          addq.w    #4,A7
                    3514   ; printf("\r\nSingle Step : [ON]") ;
000021B8  4879 0000 3515          pea       @m68kde~1_90.L
000021BC  685E      
000021BE  4E93      3516          jsr       (A3)
000021C0  584F      3517          addq.w    #4,A7
                    3518   ; printf("\r\nBreakPoints : [Enabled]") ;
000021C2  4879 0000 3519          pea       @m68kde~1_91.L
000021C6  6874      
000021C8  4E93      3520          jsr       (A3)
000021CA  584F      3521          addq.w    #4,A7
                    3522   ; // now clear the break point (put original instruction back)
                    3523   ; ProgramBreakPointAddress = PC ;
000021CC  2D54 FFFC 3524          move.l    (A4),-4(A6)
                    3525   ; for(i = 0; i < 8; i ++) {
000021D0  4292      3526          clr.l     (A2)
                    3527   HandleBreakPoint_1:
000021D2  2012      3528          move.l    (A2),D0
000021D4  0C80 0000 3529          cmp.l     #8,D0
000021D8  0008      
000021DA  6400 0056 3530          bhs       HandleBreakPoint_3
                    3531   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021DE  2012      3532          move.l    (A2),D0
000021E0  E588      3533          lsl.l     #2,D0
000021E2  41F9 0803 3534          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  2230 0800 3535          move.l    0(A0,D0.L),D1
000021EC  B294      3536          cmp.l     (A4),D1
000021EE  6600 003E 3537          bne       HandleBreakPoint_4
                    3538   ; BreakPointAddress[i] = 0 ;
000021F2  2012      3539          move.l    (A2),D0
000021F4  E588      3540          lsl.l     #2,D0
000021F6  41F9 0803 3541          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  42B0 0800 3542          clr.l     0(A0,D0.L)
                    3543   ; BreakPointSetOrCleared[i] = 0 ;
00002200  2012      3544          move.l    (A2),D0
00002202  E588      3545          lsl.l     #2,D0
00002204  41F9 0803 3546          lea       _BreakPointSetOrCleared.L,A0
00002208  015E      
0000220A  42B0 0800 3547          clr.l     0(A0,D0.L)
                    3548   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000220E  2012      3549          move.l    (A2),D0
00002210  E388      3550          lsl.l     #1,D0
00002212  41F9 0803 3551          lea       _BreakPointInstruction.L,A0
00002216  014E      
00002218  226E FFFC 3552          move.l    -4(A6),A1
0000221C  32B0 0800 3553          move.w    0(A0,D0.L),(A1)
                    3554   ; BreakPointInstruction[i] = 0 ;
00002220  2012      3555          move.l    (A2),D0
00002222  E388      3556          lsl.l     #1,D0
00002224  41F9 0803 3557          lea       _BreakPointInstruction.L,A0
00002228  014E      
0000222A  4270 0800 3558          clr.w     0(A0,D0.L)
                    3559   HandleBreakPoint_4:
0000222E  5292      3560          addq.l    #1,(A2)
00002230  60A0      3561          bra       HandleBreakPoint_1
                    3562   HandleBreakPoint_3:
                    3563   ; }
                    3564   ; }
                    3565   ; DumpRegisters() ;
00002232  4EB8 135E 3566          jsr       _DumpRegisters
                    3567   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002236  4879 0000 3568          pea       @m68kde~1_52.L
0000223A  63D6      
0000223C  4E93      3569          jsr       (A3)
0000223E  584F      3570          addq.w    #4,A7
                    3571   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002240  4879 0000 3572          pea       @m68kde~1_92.L
00002244  688E      
00002246  4E93      3573          jsr       (A3)
00002248  584F      3574          addq.w    #4,A7
                    3575   ; menu() ;
0000224A  4EB9 0000 3576          jsr       _menu
0000224E  24A0      
00002250  4CDF 1C00 3577          movem.l   (A7)+,A2/A3/A4
00002254  4E5E      3578          unlk      A6
00002256  4E75      3579          rts
                    3580   ; }
                    3581   ; void UnknownCommand()
                    3582   ; {
                    3583   _UnknownCommand:
                    3584   ; printf("\r\nUnknown Command.....\r\n") ;
00002258  4879 0000 3585          pea       @m68kde~1_93.L
0000225C  68B6      
0000225E  4EB9 0000 3586          jsr       _printf
00002262  55EA      
00002264  584F      3587          addq.w    #4,A7
                    3588   ; Help() ;
00002266  4EB9 0000 3589          jsr       _Help
0000226A  23BC      
0000226C  4E75      3590          rts
                    3591   ; }
                    3592   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3593   ; void CallDebugMonitor(void)
                    3594   ; {
                    3595   _CallDebugMonitor:
                    3596   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000226E  4879 0000 3597          pea       @m68kde~1_94.L
00002272  68D0      
00002274  4EB9 0000 3598          jsr       _printf
00002278  55EA      
0000227A  584F      3599          addq.w    #4,A7
                    3600   ; menu();
0000227C  4EB9 0000 3601          jsr       _menu
00002280  24A0      
00002282  4E75      3602          rts
                    3603   ; }
                    3604   ; void Breakpoint(void)
                    3605   ; {
                    3606   _Breakpoint:
00002284  2F02      3607          move.l    D2,-(A7)
                    3608   ; char c;
                    3609   ; c = toupper(_getch());
00002286  2F00      3610          move.l    D0,-(A7)
00002288  4EB8 0B68 3611          jsr       __getch
0000228C  2200      3612          move.l    D0,D1
0000228E  201F      3613          move.l    (A7)+,D0
00002290  2F01      3614          move.l    D1,-(A7)
00002292  4EB9 0000 3615          jsr       _toupper
00002296  55CE      
00002298  584F      3616          addq.w    #4,A7
0000229A  1400      3617          move.b    D0,D2
                    3618   ; if( c == (char)('D'))                                      // BreakPoint Display
0000229C  0C02 0044 3619          cmp.b     #68,D2
000022A0  6608      3620          bne.s     Breakpoint_1
                    3621   ; BreakPointDisplay() ;
000022A2  4EB8 1B30 3622          jsr       _BreakPointDisplay
000022A6  6000 0054 3623          bra       Breakpoint_10
                    3624   Breakpoint_1:
                    3625   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022AA  0C02 004B 3626          cmp.b     #75,D2
000022AE  6630      3627          bne.s     Breakpoint_3
                    3628   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022B0  4879 0000 3629          pea       @m68kde~1_95.L
000022B4  68F0      
000022B6  4EB9 0000 3630          jsr       _printf
000022BA  55EA      
000022BC  584F      3631          addq.w    #4,A7
                    3632   ; c = toupper(_getch());
000022BE  2F00      3633          move.l    D0,-(A7)
000022C0  4EB8 0B68 3634          jsr       __getch
000022C4  2200      3635          move.l    D0,D1
000022C6  201F      3636          move.l    (A7)+,D0
000022C8  2F01      3637          move.l    D1,-(A7)
000022CA  4EB9 0000 3638          jsr       _toupper
000022CE  55CE      
000022D0  584F      3639          addq.w    #4,A7
000022D2  1400      3640          move.b    D0,D2
                    3641   ; if(c == (char)('Y'))
000022D4  0C02 0059 3642          cmp.b     #89,D2
000022D8  6604      3643          bne.s     Breakpoint_5
                    3644   ; KillAllBreakPoints() ;
000022DA  4EB8 1EEE 3645          jsr       _KillAllBreakPoints
                    3646   Breakpoint_5:
000022DE  601C      3647          bra.s     Breakpoint_10
                    3648   Breakpoint_3:
                    3649   ; }
                    3650   ; else if(c == (char)('S')) {
000022E0  0C02 0053 3651          cmp.b     #83,D2
000022E4  6606      3652          bne.s     Breakpoint_7
                    3653   ; SetBreakPoint() ;
000022E6  4EB8 1F86 3654          jsr       _SetBreakPoint
000022EA  6010      3655          bra.s     Breakpoint_10
                    3656   Breakpoint_7:
                    3657   ; }
                    3658   ; else if(c == (char)('C')) {
000022EC  0C02 0043 3659          cmp.b     #67,D2
000022F0  6606      3660          bne.s     Breakpoint_9
                    3661   ; BreakPointClear() ;
000022F2  4EB8 1CD6 3662          jsr       _BreakPointClear
000022F6  6004      3663          bra.s     Breakpoint_10
                    3664   Breakpoint_9:
                    3665   ; }
                    3666   ; else
                    3667   ; UnknownCommand() ;
000022F8  4EB8 2258 3668          jsr       _UnknownCommand
                    3669   Breakpoint_10:
000022FC  241F      3670          move.l    (A7)+,D2
000022FE  4E75      3671          rts
                    3672   ; }
                    3673   ; void Watchpoint(void)
                    3674   ; {
                    3675   _Watchpoint:
00002300  2F02      3676          move.l    D2,-(A7)
                    3677   ; char c;
                    3678   ; c = toupper(_getch());
00002302  2F00      3679          move.l    D0,-(A7)
00002304  4EB8 0B68 3680          jsr       __getch
00002308  2200      3681          move.l    D0,D1
0000230A  201F      3682          move.l    (A7)+,D0
0000230C  2F01      3683          move.l    D1,-(A7)
0000230E  4EB9 0000 3684          jsr       _toupper
00002312  55CE      
00002314  584F      3685          addq.w    #4,A7
00002316  1400      3686          move.b    D0,D2
                    3687   ; if( c == (char)('D'))                                      // WatchPoint Display
00002318  0C02 0044 3688          cmp.b     #68,D2
0000231C  6608      3689          bne.s     Watchpoint_1
                    3690   ; WatchPointDisplay() ;
0000231E  4EB8 1C2A 3691          jsr       _WatchPointDisplay
00002322  6000 0054 3692          bra       Watchpoint_10
                    3693   Watchpoint_1:
                    3694   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002326  0C02 004B 3695          cmp.b     #75,D2
0000232A  6630      3696          bne.s     Watchpoint_3
                    3697   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000232C  4879 0000 3698          pea       @m68kde~1_96.L
00002330  6912      
00002332  4EB9 0000 3699          jsr       _printf
00002336  55EA      
00002338  584F      3700          addq.w    #4,A7
                    3701   ; c = toupper(_getch());
0000233A  2F00      3702          move.l    D0,-(A7)
0000233C  4EB8 0B68 3703          jsr       __getch
00002340  2200      3704          move.l    D0,D1
00002342  201F      3705          move.l    (A7)+,D0
00002344  2F01      3706          move.l    D1,-(A7)
00002346  4EB9 0000 3707          jsr       _toupper
0000234A  55CE      
0000234C  584F      3708          addq.w    #4,A7
0000234E  1400      3709          move.b    D0,D2
                    3710   ; if(c == (char)('Y'))
00002350  0C02 0059 3711          cmp.b     #89,D2
00002354  6604      3712          bne.s     Watchpoint_5
                    3713   ; KillAllWatchPoints() ;
00002356  4EB8 1F56 3714          jsr       _KillAllWatchPoints
                    3715   Watchpoint_5:
0000235A  601C      3716          bra.s     Watchpoint_10
                    3717   Watchpoint_3:
                    3718   ; }
                    3719   ; else if(c == (char)('S')) {
0000235C  0C02 0053 3720          cmp.b     #83,D2
00002360  6606      3721          bne.s     Watchpoint_7
                    3722   ; SetWatchPoint() ;
00002362  4EB8 20BC 3723          jsr       _SetWatchPoint
00002366  6010      3724          bra.s     Watchpoint_10
                    3725   Watchpoint_7:
                    3726   ; }
                    3727   ; else if(c == (char)('C')) {
00002368  0C02 0043 3728          cmp.b     #67,D2
0000236C  6606      3729          bne.s     Watchpoint_9
                    3730   ; WatchPointClear() ;
0000236E  4EB8 1DB0 3731          jsr       _WatchPointClear
00002372  6004      3732          bra.s     Watchpoint_10
                    3733   Watchpoint_9:
                    3734   ; }
                    3735   ; else
                    3736   ; UnknownCommand() ;
00002374  4EB8 2258 3737          jsr       _UnknownCommand
                    3738   Watchpoint_10:
00002378  241F      3739          move.l    (A7)+,D2
0000237A  4E75      3740          rts
                    3741   ; }
                    3742   ; void DMenu(void)
                    3743   ; {
                    3744   _DMenu:
0000237C  2F02      3745          move.l    D2,-(A7)
                    3746   ; char c;
                    3747   ; c = toupper(_getch());
0000237E  2F00      3748          move.l    D0,-(A7)
00002380  4EB8 0B68 3749          jsr       __getch
00002384  2200      3750          move.l    D0,D1
00002386  201F      3751          move.l    (A7)+,D0
00002388  2F01      3752          move.l    D1,-(A7)
0000238A  4EB9 0000 3753          jsr       _toupper
0000238E  55CE      
00002390  584F      3754          addq.w    #4,A7
00002392  1400      3755          move.b    D0,D2
                    3756   ; if( c == (char)('U'))                                     // Dump Memory
00002394  0C02 0055 3757          cmp.b     #85,D2
00002398  6606      3758          bne.s     DMenu_1
                    3759   ; DumpMemory() ;
0000239A  4EB8 0EE0 3760          jsr       _DumpMemory
0000239E  6018      3761          bra.s     DMenu_4
                    3762   DMenu_1:
                    3763   ; else if(c == (char)('I'))   {
000023A0  0C02 0049 3764          cmp.b     #73,D2
000023A4  660E      3765          bne.s     DMenu_3
                    3766   ; DisableBreakPoints() ;
000023A6  4EB8 1E52 3767          jsr       _DisableBreakPoints
                    3768   ; DisassembleProgram() ;
000023AA  4EB8 0D00 3769          jsr       _DisassembleProgram
                    3770   ; EnableBreakPoints() ;
000023AE  4EB8 1EA6 3771          jsr       _EnableBreakPoints
000023B2  6004      3772          bra.s     DMenu_4
                    3773   DMenu_3:
                    3774   ; }
                    3775   ; else
                    3776   ; UnknownCommand() ;
000023B4  4EB8 2258 3777          jsr       _UnknownCommand
                    3778   DMenu_4:
000023B8  241F      3779          move.l    (A7)+,D2
000023BA  4E75      3780          rts
                    3781   ; }
                    3782   ; void Help(void)
                    3783   ; {
                    3784   _Help:
000023BC  48E7 2020 3785          movem.l   D2/A2,-(A7)
000023C0  45F9 0000 3786          lea       _printf.L,A2
000023C4  55EA      
                    3787   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023C6  41F9 0000 3788          lea       @m68kde~1_97.L,A0
000023CA  6934      
000023CC  2408      3789          move.l    A0,D2
                    3790   ; printf(banner) ;
000023CE  2F02      3791          move.l    D2,-(A7)
000023D0  4E92      3792          jsr       (A2)
000023D2  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\n  Debugger Command Summary") ;
000023D4  4879 0000 3795          pea       @m68kde~1_98.L
000023D8  6978      
000023DA  4E92      3796          jsr       (A2)
000023DC  584F      3797          addq.w    #4,A7
                    3798   ; printf(banner) ;
000023DE  2F02      3799          move.l    D2,-(A7)
000023E0  4E92      3800          jsr       (A2)
000023E2  584F      3801          addq.w    #4,A7
                    3802   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023E4  4879 0000 3803          pea       @m68kde~1_99.L
000023E8  6996      
000023EA  4E92      3804          jsr       (A2)
000023EC  584F      3805          addq.w    #4,A7
                    3806   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023EE  4879 0000 3807          pea       @m68kde~1_100.L
000023F2  69DA      
000023F4  4E92      3808          jsr       (A2)
000023F6  584F      3809          addq.w    #4,A7
                    3810   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023F8  4879 0000 3811          pea       @m68kde~1_101.L
000023FC  6A12      
000023FE  4E92      3812          jsr       (A2)
00002400  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\n  DI           - Disassemble Program");
00002402  4879 0000 3815          pea       @m68kde~1_102.L
00002406  6A4C      
00002408  4E92      3816          jsr       (A2)
0000240A  584F      3817          addq.w    #4,A7
                    3818   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
0000240C  4879 0000 3819          pea       @m68kde~1_103.L
00002410  6A74      
00002412  4E92      3820          jsr       (A2)
00002414  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\n  E            - Enter String into Memory") ;
00002416  4879 0000 3823          pea       @m68kde~1_104.L
0000241A  6AA6      
0000241C  4E92      3824          jsr       (A2)
0000241E  584F      3825          addq.w    #4,A7
                    3826   ; printf("\r\n  F            - Fill Memory with Data") ;
00002420  4879 0000 3827          pea       @m68kde~1_105.L
00002424  6AD2      
00002426  4E92      3828          jsr       (A2)
00002428  584F      3829          addq.w    #4,A7
                    3830   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000242A  2F39 0803 3831          move.l    _PC.L,-(A7)
0000242E  0120      
00002430  4879 0000 3832          pea       @m68kde~1_106.L
00002434  6AFC      
00002436  4E92      3833          jsr       (A2)
00002438  504F      3834          addq.w    #8,A7
                    3835   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000243A  4879 0000 3836          pea       @m68kde~1_107.L
0000243E  6B36      
00002440  4E92      3837          jsr       (A2)
00002442  584F      3838          addq.w    #4,A7
                    3839   ; printf("\r\n  M            - Memory Examine and Change");
00002444  4879 0000 3840          pea       @m68kde~1_108.L
00002448  6B6E      
0000244A  4E92      3841          jsr       (A2)
0000244C  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000244E  4879 0000 3844          pea       @m68kde~1_109.L
00002452  6B9C      
00002454  4E92      3845          jsr       (A2)
00002456  584F      3846          addq.w    #4,A7
                    3847   ; printf("\r\n  R            - Display 68000 Registers") ;
00002458  4879 0000 3848          pea       @m68kde~1_110.L
0000245C  6BD6      
0000245E  4E92      3849          jsr       (A2)
00002460  584F      3850          addq.w    #4,A7
                    3851   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002462  4879 0000 3852          pea       @m68kde~1_111.L
00002466  6C02      
00002468  4E92      3853          jsr       (A2)
0000246A  584F      3854          addq.w    #4,A7
                    3855   ; printf("\r\n  TM           - Test Memory") ;
0000246C  4879 0000 3856          pea       @m68kde~1_112.L
00002470  6C34      
00002472  4E92      3857          jsr       (A2)
00002474  584F      3858          addq.w    #4,A7
                    3859   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002476  4879 0000 3860          pea       @m68kde~1_113.L
0000247A  6C54      
0000247C  4E92      3861          jsr       (A2)
0000247E  584F      3862          addq.w    #4,A7
                    3863   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002480  4879 0000 3864          pea       @m68kde~1_114.L
00002484  6C7C      
00002486  4E92      3865          jsr       (A2)
00002488  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000248A  4879 0000 3868          pea       @m68kde~1_115.L
0000248E  6CB2      
00002490  4E92      3869          jsr       (A2)
00002492  584F      3870          addq.w    #4,A7
                    3871   ; printf(banner) ;
00002494  2F02      3872          move.l    D2,-(A7)
00002496  4E92      3873          jsr       (A2)
00002498  584F      3874          addq.w    #4,A7
0000249A  4CDF 0404 3875          movem.l   (A7)+,D2/A2
0000249E  4E75      3876          rts
                    3877   ; }
                    3878   ; void menu(void)
                    3879   ; {
                    3880   _menu:
000024A0  48E7 303C 3881          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024A4  45F9 0000 3882          lea       _printf.L,A2
000024A8  55EA      
000024AA  47F9 0803 3883          lea       _Trace.L,A3
000024AE  00D8      
000024B0  49F9 0803 3884          lea       _x.L,A4
000024B4  00C8      
000024B6  4BF9 0803 3885          lea       _SR.L,A5
000024BA  012C      
                    3886   ; char c,c1 ;
                    3887   ; while(1)    {
                    3888   menu_1:
                    3889   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024BC  4EB8 0BA6 3890          jsr       _FlushKeyboard
                    3891   ; printf("\r\n#") ;
000024C0  4879 0000 3892          pea       @m68kde~1_116.L
000024C4  6CEA      
000024C6  4E92      3893          jsr       (A2)
000024C8  584F      3894          addq.w    #4,A7
                    3895   ; c = toupper(_getch());
000024CA  2F00      3896          move.l    D0,-(A7)
000024CC  4EB8 0B68 3897          jsr       __getch
000024D0  2200      3898          move.l    D0,D1
000024D2  201F      3899          move.l    (A7)+,D0
000024D4  2F01      3900          move.l    D1,-(A7)
000024D6  4EB9 0000 3901          jsr       _toupper
000024DA  55CE      
000024DC  584F      3902          addq.w    #4,A7
000024DE  1400      3903          move.b    D0,D2
                    3904   ; if( c == (char)('L'))                  // load s record file
000024E0  0C02 004C 3905          cmp.b     #76,D2
000024E4  6608      3906          bne.s     menu_4
                    3907   ; Load_SRecordFile() ;
000024E6  4EB8 104A 3908          jsr       _Load_SRecordFile
000024EA  6000 021E 3909          bra       menu_46
                    3910   menu_4:
                    3911   ; else if( c == (char)('D'))             // dump memory
000024EE  0C02 0044 3912          cmp.b     #68,D2
000024F2  6608      3913          bne.s     menu_6
                    3914   ; DMenu() ;
000024F4  4EB8 237C 3915          jsr       _DMenu
000024F8  6000 0210 3916          bra       menu_46
                    3917   menu_6:
                    3918   ; else if( c == (char)('E'))             // Enter String into memory
000024FC  0C02 0045 3919          cmp.b     #69,D2
00002500  660A      3920          bne.s     menu_8
                    3921   ; EnterString() ;
00002502  4EB9 0000 3922          jsr       _EnterString
00002506  2852      
00002508  6000 0200 3923          bra       menu_46
                    3924   menu_8:
                    3925   ; else if( c == (char)('F'))             // fill memory
0000250C  0C02 0046 3926          cmp.b     #70,D2
00002510  6608      3927          bne.s     menu_10
                    3928   ; FillMemory() ;
00002512  4EB8 0FD0 3929          jsr       _FillMemory
00002516  6000 01F2 3930          bra       menu_46
                    3931   menu_10:
                    3932   ; else if( c == (char)('G'))  {           // go user program
0000251A  0C02 0047 3933          cmp.b     #71,D2
0000251E  6626      3934          bne.s     menu_12
                    3935   ; printf("\r\nProgram Running.....") ;
00002520  4879 0000 3936          pea       @m68kde~1_117.L
00002524  6CEE      
00002526  4E92      3937          jsr       (A2)
00002528  584F      3938          addq.w    #4,A7
                    3939   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000252A  4879 0000 3940          pea       @m68kde~1_118.L
0000252E  6D06      
00002530  4E92      3941          jsr       (A2)
00002532  584F      3942          addq.w    #4,A7
                    3943   ; GoFlag = 1 ;
00002534  23FC 0000 3944          move.l    #1,_GoFlag.L
00002538  0001 0803 
0000253C  00DC      
                    3945   ; go() ;
0000253E  4EB8 08B8 3946          jsr       _go
00002542  6000 01C6 3947          bra       menu_46
                    3948   menu_12:
                    3949   ; }
                    3950   ; else if( c == (char)('M'))           // memory examine and modify
00002546  0C02 004D 3951          cmp.b     #77,D2
0000254A  6608      3952          bne.s     menu_14
                    3953   ; MemoryChange() ;
0000254C  4EB8 11D8 3954          jsr       _MemoryChange
00002550  6000 01B8 3955          bra       menu_46
                    3956   menu_14:
                    3957   ; else if( c == (char)('P'))            // Program Flash Chip
00002554  0C02 0050 3958          cmp.b     #80,D2
00002558  6608      3959          bne.s     menu_16
                    3960   ; ProgramFlashChip() ;
0000255A  4EB8 12D8 3961          jsr       _ProgramFlashChip
0000255E  6000 01AA 3962          bra       menu_46
                    3963   menu_16:
                    3964   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002562  0C02 0043 3965          cmp.b     #67,D2
00002566  6608      3966          bne.s     menu_18
                    3967   ; LoadFromFlashChip();
00002568  4EB8 12DA 3968          jsr       _LoadFromFlashChip
0000256C  6000 019C 3969          bra       menu_46
                    3970   menu_18:
                    3971   ; else if( c == (char)('R'))             // dump registers
00002570  0C02 0052 3972          cmp.b     #82,D2
00002574  6608      3973          bne.s     menu_20
                    3974   ; DumpRegisters() ;
00002576  4EB8 135E 3975          jsr       _DumpRegisters
0000257A  6000 018E 3976          bra       menu_46
                    3977   menu_20:
                    3978   ; else if( c == (char)('.'))           // change registers
0000257E  0C02 002E 3979          cmp.b     #46,D2
00002582  6608      3980          bne.s     menu_22
                    3981   ; ChangeRegisters() ;
00002584  4EB8 1874 3982          jsr       _ChangeRegisters
00002588  6000 0180 3983          bra       menu_46
                    3984   menu_22:
                    3985   ; else if( c == (char)('B'))              // breakpoint command
0000258C  0C02 0042 3986          cmp.b     #66,D2
00002590  6608      3987          bne.s     menu_24
                    3988   ; Breakpoint() ;
00002592  4EB8 2284 3989          jsr       _Breakpoint
00002596  6000 0172 3990          bra       menu_46
                    3991   menu_24:
                    3992   ; else if( c == (char)('T'))  {          // Test command
0000259A  0C02 0054 3993          cmp.b     #84,D2
0000259E  6600 0046 3994          bne       menu_26
                    3995   ; c1 = toupper(_getch()) ;
000025A2  2F00      3996          move.l    D0,-(A7)
000025A4  4EB8 0B68 3997          jsr       __getch
000025A8  2200      3998          move.l    D0,D1
000025AA  201F      3999          move.l    (A7)+,D0
000025AC  2F01      4000          move.l    D1,-(A7)
000025AE  4EB9 0000 4001          jsr       _toupper
000025B2  55CE      
000025B4  584F      4002          addq.w    #4,A7
000025B6  1600      4003          move.b    D0,D3
                    4004   ; if(c1 == (char)('M'))                    // memory test
000025B8  0C03 004D 4005          cmp.b     #77,D3
000025BC  6608      4006          bne.s     menu_28
                    4007   ; MemoryTest() ;
000025BE  4EB9 0000 4008          jsr       _MemoryTest
000025C2  28A2      
000025C4  601C      4009          bra.s     menu_33
                    4010   menu_28:
                    4011   ; else if( c1 == (char)('S'))              // Switch Test command
000025C6  0C03 0053 4012          cmp.b     #83,D3
000025CA  6606      4013          bne.s     menu_30
                    4014   ; SwitchTest() ;
000025CC  4EB8 0AA4 4015          jsr       _SwitchTest
000025D0  6010      4016          bra.s     menu_33
                    4017   menu_30:
                    4018   ; else if( c1 == (char)('D'))              // display Test command
000025D2  0C03 0044 4019          cmp.b     #68,D3
000025D6  6606      4020          bne.s     menu_32
                    4021   ; TestLEDS() ;
000025D8  4EB8 0A50 4022          jsr       _TestLEDS
000025DC  6004      4023          bra.s     menu_33
                    4024   menu_32:
                    4025   ; else
                    4026   ; UnknownCommand() ;
000025DE  4EB8 2258 4027          jsr       _UnknownCommand
                    4028   menu_33:
000025E2  6000 0126 4029          bra       menu_46
                    4030   menu_26:
                    4031   ; }
                    4032   ; else if( c == (char)(' ')) {             // Next instruction command
000025E6  0C02 0020 4033          cmp.b     #32,D2
000025EA  6636      4034          bne.s     menu_34
                    4035   ; DisableBreakPoints() ;
000025EC  4EB8 1E52 4036          jsr       _DisableBreakPoints
                    4037   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025F0  2013      4038          move.l    (A3),D0
000025F2  0C80 0000 4039          cmp.l     #1,D0
000025F6  0001      
000025F8  661A      4040          bne.s     menu_36
000025FA  2039 0803 4041          move.l    _GoFlag.L,D0
000025FE  00DC      
00002600  0C80 0000 4042          cmp.l     #1,D0
00002604  0001      
00002606  660C      4043          bne.s     menu_36
                    4044   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002608  13FC 0001 4045          move.b    #1,4194314
0000260C  0040 000A 
                    4046   ; return ;
00002610  6000 00FC 4047          bra       menu_38
                    4048   menu_36:
                    4049   ; }
                    4050   ; else
                    4051   ; printf("\r\nError: Press 'G' first to start program") ;
00002614  4879 0000 4052          pea       @m68kde~1_119.L
00002618  6D34      
0000261A  4E92      4053          jsr       (A2)
0000261C  584F      4054          addq.w    #4,A7
0000261E  6000 00EA 4055          bra       menu_46
                    4056   menu_34:
                    4057   ; }
                    4058   ; else if( c == (char)('S')) {             // single step
00002622  0C02 0053 4059          cmp.b     #83,D2
00002626  6600 008C 4060          bne       menu_39
                    4061   ; if(Trace == 0) {
0000262A  2013      4062          move.l    (A3),D0
0000262C  6600 0050 4063          bne       menu_41
                    4064   ; DisableBreakPoints() ;
00002630  4EB8 1E52 4065          jsr       _DisableBreakPoints
                    4066   ; printf("\r\nSingle Step  :[ON]") ;
00002634  4879 0000 4067          pea       @m68kde~1_120.L
00002638  6D5E      
0000263A  4E92      4068          jsr       (A2)
0000263C  584F      4069          addq.w    #4,A7
                    4070   ; printf("\r\nBreak Points :[Disabled]") ;
0000263E  4879 0000 4071          pea       @m68kde~1_51.L
00002642  63BA      
00002644  4E92      4072          jsr       (A2)
00002646  584F      4073          addq.w    #4,A7
                    4074   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002648  0055 8000 4075          or.w      #32768,(A5)
                    4076   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000264C  2F39 0803 4077          move.l    _PC.L,-(A7)
00002650  0120      
00002652  4879 0000 4078          pea       @m68kde~1_121.L
00002656  6D74      
00002658  4E92      4079          jsr       (A2)
0000265A  504F      4080          addq.w    #8,A7
                    4081   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000265C  4879 0000 4082          pea       @m68kde~1_122.L
00002660  6DA8      
00002662  4E92      4083          jsr       (A2)
00002664  584F      4084          addq.w    #4,A7
                    4085   ; DumpRegisters() ;
00002666  4EB8 135E 4086          jsr       _DumpRegisters
                    4087   ; Trace = 1;
0000266A  26BC 0000 4088          move.l    #1,(A3)
0000266E  0001      
                    4089   ; TraceException = 1;
00002670  13FC 0001 4090          move.b    #1,4194314
00002674  0040 000A 
                    4091   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002678  28B8 0074 4092          move.l    116,(A4)
0000267C  6032      4093          bra.s     menu_42
                    4094   menu_41:
                    4095   ; }
                    4096   ; else {
                    4097   ; Trace = 0 ;
0000267E  4293      4098          clr.l     (A3)
                    4099   ; TraceException = 0 ;
00002680  4239 0040 4100          clr.b     4194314
00002684  000A      
                    4101   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002686  28B8 0074 4102          move.l    116,(A4)
                    4103   ; EnableBreakPoints() ;
0000268A  4EB8 1EA6 4104          jsr       _EnableBreakPoints
                    4105   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000268E  0255 7FFF 4106          and.w     #32767,(A5)
                    4107   ; printf("\r\nSingle Step : [OFF]") ;
00002692  4879 0000 4108          pea       @m68kde~1_123.L
00002696  6DCC      
00002698  4E92      4109          jsr       (A2)
0000269A  584F      4110          addq.w    #4,A7
                    4111   ; printf("\r\nBreak Points :[Enabled]") ;
0000269C  4879 0000 4112          pea       @m68kde~1_124.L
000026A0  6DE2      
000026A2  4E92      4113          jsr       (A2)
000026A4  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000026A6  4879 0000 4116          pea       @m68kde~1_125.L
000026AA  6DFC      
000026AC  4E92      4117          jsr       (A2)
000026AE  584F      4118          addq.w    #4,A7
                    4119   menu_42:
000026B0  6000 0058 4120          bra       menu_46
                    4121   menu_39:
                    4122   ; }
                    4123   ; }
                    4124   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000026B4  0C02 001B 4125          cmp.b     #27,D2
000026B8  6600 0040 4126          bne       menu_43
                    4127   ; Trace = 0;
000026BC  4293      4128          clr.l     (A3)
                    4129   ; TraceException = 0;
000026BE  4239 0040 4130          clr.b     4194314
000026C2  000A      
                    4131   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026C4  28B8 0074 4132          move.l    116,(A4)
                    4133   ; EnableBreakPoints() ;
000026C8  4EB8 1EA6 4134          jsr       _EnableBreakPoints
                    4135   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026CC  0255 7FFF 4136          and.w     #32767,(A5)
                    4137   ; printf("\r\nSingle Step  :[OFF]") ;
000026D0  4879 0000 4138          pea       @m68kde~1_126.L
000026D4  6E26      
000026D6  4E92      4139          jsr       (A2)
000026D8  584F      4140          addq.w    #4,A7
                    4141   ; printf("\r\nBreak Points :[Enabled]");
000026DA  4879 0000 4142          pea       @m68kde~1_124.L
000026DE  6DE2      
000026E0  4E92      4143          jsr       (A2)
000026E2  584F      4144          addq.w    #4,A7
                    4145   ; printf("\r\nProgram Running.....") ;
000026E4  4879 0000 4146          pea       @m68kde~1_117.L
000026E8  6CEE      
000026EA  4E92      4147          jsr       (A2)
000026EC  584F      4148          addq.w    #4,A7
                    4149   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026EE  4879 0000 4150          pea       @m68kde~1_118.L
000026F2  6D06      
000026F4  4E92      4151          jsr       (A2)
000026F6  584F      4152          addq.w    #4,A7
                    4153   ; return ;
000026F8  6014      4154          bra.s     menu_38
                    4155   menu_43:
                    4156   ; }
                    4157   ; else if( c == (char)('W'))              // Watchpoint command
000026FA  0C02 0057 4158          cmp.b     #87,D2
000026FE  6606      4159          bne.s     menu_45
                    4160   ; Watchpoint() ;
00002700  4EB8 2300 4161          jsr       _Watchpoint
00002704  6004      4162          bra.s     menu_46
                    4163   menu_45:
                    4164   ; else
                    4165   ; UnknownCommand() ;
00002706  4EB8 2258 4166          jsr       _UnknownCommand
                    4167   menu_46:
0000270A  6000 FDB0 4168          bra       menu_1
                    4169   menu_38:
0000270E  4CDF 3C0C 4170          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002712  4E75      4171          rts
                    4172   ; }
                    4173   ; }
                    4174   ; void PrintErrorMessageandAbort(char *string) {
                    4175   _PrintErrorMessageandAbort:
00002714  4E56 0000 4176          link      A6,#0
                    4177   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002718  4879 0000 4178          pea       @m68kde~1_127.L
0000271C  6E3C      
0000271E  4EB9 0000 4179          jsr       _printf
00002722  55EA      
00002724  584F      4180          addq.w    #4,A7
                    4181   ; printf("%s\r\n", string) ;
00002726  2F2E 0008 4182          move.l    8(A6),-(A7)
0000272A  4879 0000 4183          pea       @m68kde~1_128.L
0000272E  6E58      
00002730  4EB9 0000 4184          jsr       _printf
00002734  55EA      
00002736  504F      4185          addq.w    #8,A7
                    4186   ; menu() ;
00002738  4EB8 24A0 4187          jsr       _menu
0000273C  4E5E      4188          unlk      A6
0000273E  4E75      4189          rts
                    4190   ; }
                    4191   ; void IRQMessage(int level) {
                    4192   _IRQMessage:
00002740  4E56 0000 4193          link      A6,#0
                    4194   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002744  4879 0000 4195          pea       @m68kde~1_129.L
00002748  6E5E      
0000274A  4EB9 0000 4196          jsr       _printf
0000274E  55EA      
00002750  584F      4197          addq.w    #4,A7
                    4198   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002752  2F2E 0008 4199          move.l    8(A6),-(A7)
00002756  4879 0000 4200          pea       @m68kde~1_130.L
0000275A  6E76      
0000275C  4EB9 0000 4201          jsr       _printf
00002760  55EA      
00002762  504F      4202          addq.w    #8,A7
                    4203   ; menu() ;
00002764  4EB8 24A0 4204          jsr       _menu
00002768  4E5E      4205          unlk      A6
0000276A  4E75      4206          rts
                    4207   ; }
                    4208   ; void UnhandledIRQ1(void) {
                    4209   _UnhandledIRQ1:
                    4210   ; IRQMessage(1);
0000276C  4878 0001 4211          pea       1
00002770  4EB8 2740 4212          jsr       _IRQMessage
00002774  584F      4213          addq.w    #4,A7
00002776  4E75      4214          rts
                    4215   ; }
                    4216   ; void UnhandledIRQ2(void) {
                    4217   _UnhandledIRQ2:
                    4218   ; IRQMessage(2);
00002778  4878 0002 4219          pea       2
0000277C  4EB8 2740 4220          jsr       _IRQMessage
00002780  584F      4221          addq.w    #4,A7
00002782  4E75      4222          rts
                    4223   ; }
                    4224   ; void UnhandledIRQ3(void){
                    4225   _UnhandledIRQ3:
                    4226   ; IRQMessage(3);
00002784  4878 0003 4227          pea       3
00002788  4EB8 2740 4228          jsr       _IRQMessage
0000278C  584F      4229          addq.w    #4,A7
0000278E  4E75      4230          rts
                    4231   ; }
                    4232   ; void UnhandledIRQ4(void) {
                    4233   _UnhandledIRQ4:
                    4234   ; IRQMessage(4);
00002790  4878 0004 4235          pea       4
00002794  4EB8 2740 4236          jsr       _IRQMessage
00002798  584F      4237          addq.w    #4,A7
0000279A  4E75      4238          rts
                    4239   ; }
                    4240   ; void UnhandledIRQ5(void) {
                    4241   _UnhandledIRQ5:
                    4242   ; IRQMessage(5);
0000279C  4878 0005 4243          pea       5
000027A0  4EB8 2740 4244          jsr       _IRQMessage
000027A4  584F      4245          addq.w    #4,A7
000027A6  4E75      4246          rts
                    4247   ; }
                    4248   ; void UnhandledIRQ6(void) {
                    4249   _UnhandledIRQ6:
                    4250   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000027A8  4879 0000 4251          pea       @m68kde~1_131.L
000027AC  6E9A      
000027AE  4EB8 2714 4252          jsr       _PrintErrorMessageandAbort
000027B2  584F      4253          addq.w    #4,A7
                    4254   ; menu() ;
000027B4  4EB8 24A0 4255          jsr       _menu
000027B8  4E75      4256          rts
                    4257   ; }
                    4258   ; void UnhandledIRQ7(void) {
                    4259   _UnhandledIRQ7:
                    4260   ; IRQMessage(7);
000027BA  4878 0007 4261          pea       7
000027BE  4EB8 2740 4262          jsr       _IRQMessage
000027C2  584F      4263          addq.w    #4,A7
000027C4  4E75      4264          rts
                    4265   ; }
                    4266   ; void UnhandledTrap(void) {
                    4267   _UnhandledTrap:
                    4268   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027C6  4879 0000 4269          pea       @m68kde~1_132.L
000027CA  6EDA      
000027CC  4EB8 2714 4270          jsr       _PrintErrorMessageandAbort
000027D0  584F      4271          addq.w    #4,A7
000027D2  4E75      4272          rts
                    4273   ; }
                    4274   ; void BusError() {
                    4275   _BusError:
                    4276   ; PrintErrorMessageandAbort("BUS Error!") ;
000027D4  4879 0000 4277          pea       @m68kde~1_133.L
000027D8  6EF0      
000027DA  4EB8 2714 4278          jsr       _PrintErrorMessageandAbort
000027DE  584F      4279          addq.w    #4,A7
000027E0  4E75      4280          rts
                    4281   ; }
                    4282   ; void AddressError() {
                    4283   _AddressError:
                    4284   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027E2  4879 0000 4285          pea       @m68kde~1_134.L
000027E6  6EFC      
000027E8  4EB8 2714 4286          jsr       _PrintErrorMessageandAbort
000027EC  584F      4287          addq.w    #4,A7
000027EE  4E75      4288          rts
                    4289   ; }
                    4290   ; void IllegalInstruction() {
                    4291   _IllegalInstruction:
                    4292   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027F0  4879 0000 4293          pea       @m68kde~1_135.L
000027F4  6F0C      
000027F6  4EB8 2714 4294          jsr       _PrintErrorMessageandAbort
000027FA  584F      4295          addq.w    #4,A7
000027FC  4E75      4296          rts
                    4297   ; }
                    4298   ; void Dividebyzero() {
                    4299   _Dividebyzero:
                    4300   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027FE  4879 0000 4301          pea       @m68kde~1_136.L
00002802  6F20      
00002804  4EB8 2714 4302          jsr       _PrintErrorMessageandAbort
00002808  584F      4303          addq.w    #4,A7
0000280A  4E75      4304          rts
                    4305   ; }
                    4306   ; void Check() {
                    4307   _Check:
                    4308   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000280C  4879 0000 4309          pea       @m68kde~1_137.L
00002810  6F30      
00002812  4EB8 2714 4310          jsr       _PrintErrorMessageandAbort
00002816  584F      4311          addq.w    #4,A7
00002818  4E75      4312          rts
                    4313   ; }
                    4314   ; void Trapv() {
                    4315   _Trapv:
                    4316   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000281A  4879 0000 4317          pea       @m68kde~1_138.L
0000281E  6F42      
00002820  4EB8 2714 4318          jsr       _PrintErrorMessageandAbort
00002824  584F      4319          addq.w    #4,A7
00002826  4E75      4320          rts
                    4321   ; }
                    4322   ; void PrivError() {
                    4323   _PrivError:
                    4324   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002828  4879 0000 4325          pea       @m68kde~1_139.L
0000282C  6F54      
0000282E  4EB8 2714 4326          jsr       _PrintErrorMessageandAbort
00002832  584F      4327          addq.w    #4,A7
00002834  4E75      4328          rts
                    4329   ; }
                    4330   ; void UnitIRQ() {
                    4331   _UnitIRQ:
                    4332   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002836  4879 0000 4333          pea       @m68kde~1_140.L
0000283A  6F68      
0000283C  4EB8 2714 4334          jsr       _PrintErrorMessageandAbort
00002840  584F      4335          addq.w    #4,A7
00002842  4E75      4336          rts
                    4337   ; }
                    4338   ; void Spurious() {
                    4339   _Spurious:
                    4340   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002844  4879 0000 4341          pea       @m68kde~1_141.L
00002848  6F7A      
0000284A  4EB8 2714 4342          jsr       _PrintErrorMessageandAbort
0000284E  584F      4343          addq.w    #4,A7
00002850  4E75      4344          rts
                    4345   ; }
                    4346   ; void EnterString(void)
                    4347   ; {
                    4348   _EnterString:
00002852  4E56 FFFC 4349          link      A6,#-4
00002856  2F02      4350          move.l    D2,-(A7)
                    4351   ; unsigned char *Start;
                    4352   ; unsigned char c;
                    4353   ; printf("\r\nStart Address in Memory: ") ;
00002858  4879 0000 4354          pea       @m68kde~1_142.L
0000285C  6F88      
0000285E  4EB9 0000 4355          jsr       _printf
00002862  55EA      
00002864  584F      4356          addq.w    #4,A7
                    4357   ; Start = Get8HexDigits(0) ;
00002866  42A7      4358          clr.l     -(A7)
00002868  4EB8 0CA4 4359          jsr       _Get8HexDigits
0000286C  584F      4360          addq.w    #4,A7
0000286E  2400      4361          move.l    D0,D2
                    4362   ; printf("\r\nEnter String (ESC to end) :") ;
00002870  4879 0000 4363          pea       @m68kde~1_143.L
00002874  6FA4      
00002876  4EB9 0000 4364          jsr       _printf
0000287A  55EA      
0000287C  584F      4365          addq.w    #4,A7
                    4366   ; while((c = getchar()) != 0x1b)
                    4367   EnterString_1:
0000287E  4EB9 0000 4368          jsr       _getch
00002882  5532      
00002884  1D40 FFFF 4369          move.b    D0,-1(A6)
00002888  0C00 001B 4370          cmp.b     #27,D0
0000288C  670A      4371          beq.s     EnterString_3
                    4372   ; *Start++ = c ;
0000288E  2042      4373          move.l    D2,A0
00002890  5282      4374          addq.l    #1,D2
00002892  10AE FFFF 4375          move.b    -1(A6),(A0)
00002896  60E6      4376          bra       EnterString_1
                    4377   EnterString_3:
                    4378   ; *Start = 0x00;  // terminate with a null
00002898  2042      4379          move.l    D2,A0
0000289A  4210      4380          clr.b     (A0)
0000289C  241F      4381          move.l    (A7)+,D2
0000289E  4E5E      4382          unlk      A6
000028A0  4E75      4383          rts
                    4384   ; }
                    4385   ; void MemoryTest(void)
                    4386   ; {
                    4387   _MemoryTest:
000028A2  48E7 3830 4388          movem.l   D2/D3/D4/A2/A3,-(A7)
000028A6  45F9 0000 4389          lea       _printf.L,A2
000028AA  55EA      
000028AC  47F8 09D4 4390          lea       _Oline0.L,A3
                    4391   ; unsigned int *RamPtr;
                    4392   ; unsigned int *Start, *End ;
                    4393   ; // Output to LCD
                    4394   ; Oline0("Performing Memory Test!");
000028B0  4879 0000 4395          pea       @m68kde~1_144.L
000028B4  6FC2      
000028B6  4E93      4396          jsr       (A3)
000028B8  584F      4397          addq.w    #4,A7
                    4398   ; Oline1("");
000028BA  4879 0000 4399          pea       @m68kde~1_33.L
000028BE  6240      
000028C0  4EB8 0A02 4400          jsr       _Oline1
000028C4  584F      4401          addq.w    #4,A7
                    4402   ; printf("\r\nStart Address: ") ;
000028C6  4879 0000 4403          pea       @m68kde~1_145.L
000028CA  6FDA      
000028CC  4E92      4404          jsr       (A2)
000028CE  584F      4405          addq.w    #4,A7
                    4406   ; Start = Get8HexDigits(0) ;
000028D0  42A7      4407          clr.l     -(A7)
000028D2  4EB8 0CA4 4408          jsr       _Get8HexDigits
000028D6  584F      4409          addq.w    #4,A7
000028D8  2800      4410          move.l    D0,D4
                    4411   ; printf("\r\nEnd Address: ") ;
000028DA  4879 0000 4412          pea       @m68kde~1_146.L
000028DE  6FEC      
000028E0  4E92      4413          jsr       (A2)
000028E2  584F      4414          addq.w    #4,A7
                    4415   ; End = Get8HexDigits(0) ;
000028E4  42A7      4416          clr.l     -(A7)
000028E6  4EB8 0CA4 4417          jsr       _Get8HexDigits
000028EA  584F      4418          addq.w    #4,A7
000028EC  2600      4419          move.l    D0,D3
                    4420   ; // Write to Memory
                    4421   ; for(RamPtr=Start; RamPtr <= End; RamPtr+=0x1){
000028EE  2404      4422          move.l    D4,D2
                    4423   MemoryTest_1:
000028F0  B483      4424          cmp.l     D3,D2
000028F2  620C      4425          bhi.s     MemoryTest_3
                    4426   ; *RamPtr = 0xDEADBEEF;
000028F4  2042      4427          move.l    D2,A0
000028F6  20BC DEAD 4428          move.l    #-559038737,(A0)
000028FA  BEEF      
000028FC  5882      4429          addq.l    #4,D2
000028FE  60F0      4430          bra       MemoryTest_1
                    4431   MemoryTest_3:
                    4432   ; } 
                    4433   ; // Read from Memory & Validate Data
                    4434   ; for(RamPtr=Start; RamPtr <= End; RamPtr+=0x1){
00002900  2404      4435          move.l    D4,D2
                    4436   MemoryTest_4:
00002902  B483      4437          cmp.l     D3,D2
00002904  6200 0054 4438          bhi       MemoryTest_6
                    4439   ; if(*RamPtr != 0xDEADBEEF){
00002908  2042      4440          move.l    D2,A0
0000290A  2010      4441          move.l    (A0),D0
0000290C  0C80 DEAD 4442          cmp.l     #-559038737,D0
00002910  BEEF      
00002912  6700 0042 4443          beq       MemoryTest_7
                    4444   ; printf("\r\nMemory Test Failed!");
00002916  4879 0000 4445          pea       @m68kde~1_147.L
0000291A  6FFC      
0000291C  4E92      4446          jsr       (A2)
0000291E  584F      4447          addq.w    #4,A7
                    4448   ; printf("\r\nAddress = %u", RamPtr) ;
00002920  2F02      4449          move.l    D2,-(A7)
00002922  4879 0000 4450          pea       @m68kde~1_148.L
00002926  7012      
00002928  4E92      4451          jsr       (A2)
0000292A  504F      4452          addq.w    #8,A7
                    4453   ; printf("\r\nData Written to address = %u", 0xDEADBEEF) ;
0000292C  4879 DEAD 4454          pea       -559038737
00002930  BEEF      
00002932  4879 0000 4455          pea       @m68kde~1_149.L
00002936  7022      
00002938  4E92      4456          jsr       (A2)
0000293A  504F      4457          addq.w    #8,A7
                    4458   ; printf("\r\nData found in address = %u", *RamPtr) ;
0000293C  2042      4459          move.l    D2,A0
0000293E  2F10      4460          move.l    (A0),-(A7)
00002940  4879 0000 4461          pea       @m68kde~1_150.L
00002944  7042      
00002946  4E92      4462          jsr       (A2)
00002948  504F      4463          addq.w    #8,A7
                    4464   ; Oline0("Memory Test Failed!");
0000294A  4879 0000 4465          pea       @m68kde~1_151.L
0000294E  7060      
00002950  4E93      4466          jsr       (A3)
00002952  584F      4467          addq.w    #4,A7
                    4468   ; return;
00002954  6018      4469          bra.s     MemoryTest_9
                    4470   MemoryTest_7:
00002956  5882      4471          addq.l    #4,D2
00002958  60A8      4472          bra       MemoryTest_4
                    4473   MemoryTest_6:
                    4474   ; }
                    4475   ; }
                    4476   ; printf("\r\nMemory Test Successful") ;
0000295A  4879 0000 4477          pea       @m68kde~1_152.L
0000295E  7074      
00002960  4E92      4478          jsr       (A2)
00002962  584F      4479          addq.w    #4,A7
                    4480   ; Oline0("Memory Test Successful!");
00002964  4879 0000 4481          pea       @m68kde~1_153.L
00002968  708E      
0000296A  4E93      4482          jsr       (A3)
0000296C  584F      4483          addq.w    #4,A7
                    4484   ; return;
                    4485   MemoryTest_9:
0000296E  4CDF 0C1C 4486          movem.l   (A7)+,D2/D3/D4/A2/A3
00002972  4E75      4487          rts
                    4488   ; }
                    4489   ; void main(void)
                    4490   ; {
                    4491   _main:
00002974  4E56 FFE8 4492          link      A6,#-24
00002978  48E7 2030 4493          movem.l   D2/A2/A3,-(A7)
0000297C  45F8 0A30 4494          lea       _InstallExceptionHandler.L,A2
00002980  47F9 0000 4495          lea       _printf.L,A3
00002984  55EA      
                    4496   ; char c ;
                    4497   ; int i, j ;
                    4498   ; char *BugMessage = "DE1-68k Bug V1.77";
00002986  41F9 0000 4499          lea       @m68kde~1_154.L,A0
0000298A  70A6      
0000298C  2D48 FFF0 4500          move.l    A0,-16(A6)
                    4501   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002990  41F9 0000 4502          lea       @m68kde~1_155.L,A0
00002994  70B8      
00002996  2D48 FFF4 4503          move.l    A0,-12(A6)
                    4504   ; char *StudentName = "Mohamed Abouelmagd";
0000299A  41F9 0000 4505          lea       @m68kde~1_156.L,A0
0000299E  70D6      
000029A0  2D48 FFF8 4506          move.l    A0,-8(A6)
                    4507   ; char *StudentNumber = "Std #: 38585148";
000029A4  41F9 0000 4508          lea       @m68kde~1_157.L,A0
000029A8  70EA      
000029AA  2D48 FFFC 4509          move.l    A0,-4(A6)
                    4510   ; KillAllBreakPoints() ;
000029AE  4EB8 1EEE 4511          jsr       _KillAllBreakPoints
                    4512   ; i = x = y = z = PortA_Count = 0;
000029B2  42B9 0803 4513          clr.l     _PortA_Count.L
000029B6  00D4      
000029B8  42B9 0803 4514          clr.l     _z.L
000029BC  00D0      
000029BE  42B9 0803 4515          clr.l     _y.L
000029C2  00CC      
000029C4  42B9 0803 4516          clr.l     _x.L
000029C8  00C8      
000029CA  4282      4517          clr.l     D2
                    4518   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
000029CC  42B9 0803 4519          clr.l     _GoFlag.L
000029D0  00DC      
000029D2  42B9 0803 4520          clr.l     _Trace.L
000029D6  00D8      
                    4521   ; Echo = 1 ;
000029D8  23FC 0000 4522          move.l    #1,_Echo.L
000029DC  0001 0803 
000029E0  00E0      
                    4523   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
000029E2  42B9 0803 4524          clr.l     _d7.L
000029E6  0100      
000029E8  42B9 0803 4525          clr.l     _d6.L
000029EC  00FC      
000029EE  42B9 0803 4526          clr.l     _d5.L
000029F2  00F8      
000029F4  42B9 0803 4527          clr.l     _d4.L
000029F8  00F4      
000029FA  42B9 0803 4528          clr.l     _d3.L
000029FE  00F0      
00002A00  42B9 0803 4529          clr.l     _d2.L
00002A04  00EC      
00002A06  42B9 0803 4530          clr.l     _d1.L
00002A0A  00E8      
00002A0C  42B9 0803 4531          clr.l     _d0.L
00002A10  00E4      
                    4532   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002A12  42B9 0803 4533          clr.l     _a6.L
00002A16  011C      
00002A18  42B9 0803 4534          clr.l     _a5.L
00002A1C  0118      
00002A1E  42B9 0803 4535          clr.l     _a4.L
00002A22  0114      
00002A24  42B9 0803 4536          clr.l     _a3.L
00002A28  0110      
00002A2A  42B9 0803 4537          clr.l     _a2.L
00002A2E  010C      
00002A30  42B9 0803 4538          clr.l     _a1.L
00002A34  0108      
00002A36  42B9 0803 4539          clr.l     _a0.L
00002A3A  0104      
                    4540   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002A3C  23FC 0800 4541          move.l    #134217728,_PC.L
00002A40  0000 0803 
00002A44  0120      
00002A46  23FC 0804 4542          move.l    #134479872,_SSP.L
00002A4A  0000 0803 
00002A4E  0124      
00002A50  23FC 0804 4543          move.l    #134479872,_USP.L
00002A54  0000 0803 
00002A58  0128      
                    4544   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002A5A  33FC 2000 4545          move.w    #8192,_SR.L
00002A5E  0803 012C 
                    4546   ; // Initialise Breakpoint variables
                    4547   ; for(i = 0; i < 8; i++)  {
00002A62  4282      4548          clr.l     D2
                    4549   main_1:
00002A64  0C82 0000 4550          cmp.l     #8,D2
00002A68  0008      
00002A6A  6C00 004C 4551          bge       main_3
                    4552   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002A6E  2002      4553          move.l    D2,D0
00002A70  E588      4554          lsl.l     #2,D0
00002A72  41F9 0803 4555          lea       _BreakPointAddress.L,A0
00002A76  012E      
00002A78  42B0 0800 4556          clr.l     0(A0,D0.L)
                    4557   ; WatchPointAddress[i] = 0 ;
00002A7C  2002      4558          move.l    D2,D0
00002A7E  E588      4559          lsl.l     #2,D0
00002A80  41F9 0803 4560          lea       _WatchPointAddress.L,A0
00002A84  0182      
00002A86  42B0 0800 4561          clr.l     0(A0,D0.L)
                    4562   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002A8A  2002      4563          move.l    D2,D0
00002A8C  E388      4564          lsl.l     #1,D0
00002A8E  41F9 0803 4565          lea       _BreakPointInstruction.L,A0
00002A92  014E      
00002A94  4270 0800 4566          clr.w     0(A0,D0.L)
                    4567   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002A98  2002      4568          move.l    D2,D0
00002A9A  E588      4569          lsl.l     #2,D0
00002A9C  41F9 0803 4570          lea       _BreakPointSetOrCleared.L,A0
00002AA0  015E      
00002AA2  42B0 0800 4571          clr.l     0(A0,D0.L)
                    4572   ; WatchPointSetOrCleared[i] = 0;
00002AA6  2002      4573          move.l    D2,D0
00002AA8  E588      4574          lsl.l     #2,D0
00002AAA  41F9 0803 4575          lea       _WatchPointSetOrCleared.L,A0
00002AAE  01A2      
00002AB0  42B0 0800 4576          clr.l     0(A0,D0.L)
00002AB4  5282      4577          addq.l    #1,D2
00002AB6  60AC      4578          bra       main_1
                    4579   main_3:
                    4580   ; }
                    4581   ; Init_RS232() ;     // initialise the RS232 port
00002AB8  4EB8 0B12 4582          jsr       _Init_RS232
                    4583   ; Init_LCD() ;
00002ABC  4EB8 095E 4584          jsr       _Init_LCD
                    4585   ; for( i = 32; i < 48; i++)
00002AC0  7420      4586          moveq     #32,D2
                    4587   main_4:
00002AC2  0C82 0000 4588          cmp.l     #48,D2
00002AC6  0030      
00002AC8  6C0E      4589          bge.s     main_6
                    4590   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002ACA  2F02      4591          move.l    D2,-(A7)
00002ACC  4878 27C6 4592          pea       _UnhandledTrap.L
00002AD0  4E92      4593          jsr       (A2)
00002AD2  504F      4594          addq.w    #8,A7
00002AD4  5282      4595          addq.l    #1,D2
00002AD6  60EA      4596          bra       main_4
                    4597   main_6:
                    4598   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002AD8  4878 002F 4599          pea       47
00002ADC  4878 24A0 4600          pea       _menu.L
00002AE0  4E92      4601          jsr       (A2)
00002AE2  504F      4602          addq.w    #8,A7
                    4603   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002AE4  4878 0019 4604          pea       25
00002AE8  4878 276C 4605          pea       _UnhandledIRQ1.L
00002AEC  4E92      4606          jsr       (A2)
00002AEE  504F      4607          addq.w    #8,A7
                    4608   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002AF0  4878 001A 4609          pea       26
00002AF4  4878 2778 4610          pea       _UnhandledIRQ2.L
00002AF8  4E92      4611          jsr       (A2)
00002AFA  504F      4612          addq.w    #8,A7
                    4613   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002AFC  4878 001B 4614          pea       27
00002B00  4878 2784 4615          pea       _UnhandledIRQ3.L
00002B04  4E92      4616          jsr       (A2)
00002B06  504F      4617          addq.w    #8,A7
                    4618   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002B08  4878 001C 4619          pea       28
00002B0C  4878 2790 4620          pea       _UnhandledIRQ4.L
00002B10  4E92      4621          jsr       (A2)
00002B12  504F      4622          addq.w    #8,A7
                    4623   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002B14  4878 001D 4624          pea       29
00002B18  4878 279C 4625          pea       _UnhandledIRQ5.L
00002B1C  4E92      4626          jsr       (A2)
00002B1E  504F      4627          addq.w    #8,A7
                    4628   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002B20  4878 001E 4629          pea       30
00002B24  4878 27A8 4630          pea       _UnhandledIRQ6.L
00002B28  4E92      4631          jsr       (A2)
00002B2A  504F      4632          addq.w    #8,A7
                    4633   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002B2C  4878 001F 4634          pea       31
00002B30  4878 27BA 4635          pea       _UnhandledIRQ7.L
00002B34  4E92      4636          jsr       (A2)
00002B36  504F      4637          addq.w    #8,A7
                    4638   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002B38  4878 002E 4639          pea       46
00002B3C  4878 2192 4640          pea       _HandleBreakPoint.L
00002B40  4E92      4641          jsr       (A2)
00002B42  504F      4642          addq.w    #8,A7
                    4643   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002B44  4878 001D 4644          pea       29
00002B48  4878 1836 4645          pea       _DumpRegistersandPause.L
00002B4C  4E92      4646          jsr       (A2)
00002B4E  504F      4647          addq.w    #8,A7
                    4648   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002B50  4878 0002 4649          pea       2
00002B54  4878 27D4 4650          pea       _BusError.L
00002B58  4E92      4651          jsr       (A2)
00002B5A  504F      4652          addq.w    #8,A7
                    4653   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002B5C  4878 0003 4654          pea       3
00002B60  4878 27E2 4655          pea       _AddressError.L
00002B64  4E92      4656          jsr       (A2)
00002B66  504F      4657          addq.w    #8,A7
                    4658   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002B68  4878 0004 4659          pea       4
00002B6C  4878 27F0 4660          pea       _IllegalInstruction.L
00002B70  4E92      4661          jsr       (A2)
00002B72  504F      4662          addq.w    #8,A7
                    4663   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002B74  4878 0005 4664          pea       5
00002B78  4878 27FE 4665          pea       _Dividebyzero.L
00002B7C  4E92      4666          jsr       (A2)
00002B7E  504F      4667          addq.w    #8,A7
                    4668   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002B80  4878 0006 4669          pea       6
00002B84  4878 280C 4670          pea       _Check.L
00002B88  4E92      4671          jsr       (A2)
00002B8A  504F      4672          addq.w    #8,A7
                    4673   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002B8C  4878 0007 4674          pea       7
00002B90  4878 281A 4675          pea       _Trapv.L
00002B94  4E92      4676          jsr       (A2)
00002B96  504F      4677          addq.w    #8,A7
                    4678   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002B98  4878 0008 4679          pea       8
00002B9C  4878 2828 4680          pea       _PrivError.L
00002BA0  4E92      4681          jsr       (A2)
00002BA2  504F      4682          addq.w    #8,A7
                    4683   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002BA4  4878 000F 4684          pea       15
00002BA8  4878 2836 4685          pea       _UnitIRQ.L
00002BAC  4E92      4686          jsr       (A2)
00002BAE  504F      4687          addq.w    #8,A7
                    4688   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002BB0  4878 0018 4689          pea       24
00002BB4  4878 280C 4690          pea       _Check.L
00002BB8  4E92      4691          jsr       (A2)
00002BBA  504F      4692          addq.w    #8,A7
                    4693   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002BBC  4EB8 0BA6 4694          jsr       _FlushKeyboard
                    4695   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002BC0  4239 0040 4696          clr.b     4194314
00002BC4  000A      
                    4697   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4698   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4699   main_7:
00002BC6  1039 0040 4700          move.b    4194306,D0
00002BCA  0002      
00002BCC  C03C 0002 4701          and.b     #2,D0
00002BD0  0C00 0002 4702          cmp.b     #2,D0
00002BD4  662A      4703          bne.s     main_9
                    4704   ; LoadFromFlashChip();
00002BD6  4EB8 12DA 4705          jsr       _LoadFromFlashChip
                    4706   ; printf("\r\nRunning.....") ;
00002BDA  4879 0000 4707          pea       @m68kde~1_158.L
00002BDE  70FA      
00002BE0  4E93      4708          jsr       (A3)
00002BE2  584F      4709          addq.w    #4,A7
                    4710   ; Oline1("Running.....") ;
00002BE4  4879 0000 4711          pea       @m68kde~1_159.L
00002BE8  710A      
00002BEA  4EB8 0A02 4712          jsr       _Oline1
00002BEE  584F      4713          addq.w    #4,A7
                    4714   ; GoFlag = 1;
00002BF0  23FC 0000 4715          move.l    #1,_GoFlag.L
00002BF4  0001 0803 
00002BF8  00DC      
                    4716   ; go() ;
00002BFA  4EB8 08B8 4717          jsr       _go
00002BFE  60C6      4718          bra       main_7
                    4719   main_9:
                    4720   ; }
                    4721   ; // otherwise start the debug monitor
                    4722   ; Oline0(StudentName) ;
00002C00  2F2E FFF8 4723          move.l    -8(A6),-(A7)
00002C04  4EB8 09D4 4724          jsr       _Oline0
00002C08  584F      4725          addq.w    #4,A7
                    4726   ; Oline1(StudentNumber) ;
00002C0A  2F2E FFFC 4727          move.l    -4(A6),-(A7)
00002C0E  4EB8 0A02 4728          jsr       _Oline1
00002C12  584F      4729          addq.w    #4,A7
                    4730   ; printf("\r\n%s", BugMessage) ;
00002C14  2F2E FFF0 4731          move.l    -16(A6),-(A7)
00002C18  4879 0000 4732          pea       @m68kde~1_160.L
00002C1C  7118      
00002C1E  4E93      4733          jsr       (A3)
00002C20  504F      4734          addq.w    #8,A7
                    4735   ; printf("\r\n%s", CopyrightMessage) ;
00002C22  2F2E FFF4 4736          move.l    -12(A6),-(A7)
00002C26  4879 0000 4737          pea       @m68kde~1_160.L
00002C2A  7118      
00002C2C  4E93      4738          jsr       (A3)
00002C2E  504F      4739          addq.w    #8,A7
                    4740   ; menu();
00002C30  4EB8 24A0 4741          jsr       _menu
00002C34  4CDF 0C04 4742          movem.l   (A7)+,D2/A2/A3
00002C38  4E5E      4743          unlk      A6
00002C3A  4E75      4744          rts
                    4745   ; }
                    4746   ; void FormatInstruction(void)    // for disassembly
                    4747   ; {
                    4748   _FormatInstruction:
00002C3C  4E56 FEC0 4749          link      A6,#-320
00002C40  48E7 3C20 4750          movem.l   D2/D3/D4/D5/A2,-(A7)
00002C44  45EE FEC0 4751          lea       -320(A6),A2
                    4752   ; short i, ilen = 0 ;
00002C48  4245      4753          clr.w     D5
                    4754   ; char *iptr = Instruction ;
00002C4A  41F9 0803 4755          lea       _Instruction.L,A0
00002C4E  04E2      
00002C50  2608      4756          move.l    A0,D3
                    4757   ; char *Formatted[80], *fptr ;
                    4758   ; fptr = Formatted ;
00002C52  280A      4759          move.l    A2,D4
                    4760   ; for(i = 0; i < (short)(80); i ++)
00002C54  4242      4761          clr.w     D2
                    4762   FormatInstruction_1:
00002C56  0C42 0050 4763          cmp.w     #80,D2
00002C5A  6C0E      4764          bge.s     FormatInstruction_3
                    4765   ; Formatted[i] = (char)(0);          // set formatted string to null
00002C5C  48C2      4766          ext.l     D2
00002C5E  2002      4767          move.l    D2,D0
00002C60  E588      4768          lsl.l     #2,D0
00002C62  42B2 0800 4769          clr.l     0(A2,D0.L)
00002C66  5242      4770          addq.w    #1,D2
00002C68  60EC      4771          bra       FormatInstruction_1
                    4772   FormatInstruction_3:
                    4773   ; while((*iptr != ' '))   {   // while ot a space char
                    4774   FormatInstruction_4:
00002C6A  2043      4775          move.l    D3,A0
00002C6C  1010      4776          move.b    (A0),D0
00002C6E  0C00 0020 4777          cmp.b     #32,D0
00002C72  6718      4778          beq.s     FormatInstruction_6
                    4779   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002C74  2043      4780          move.l    D3,A0
00002C76  5283      4781          addq.l    #1,D3
00002C78  2244      4782          move.l    D4,A1
00002C7A  5284      4783          addq.l    #1,D4
00002C7C  1290      4784          move.b    (A0),(A1)
                    4785   ; ilen ++ ;               // count length of string as we go
00002C7E  5245      4786          addq.w    #1,D5
                    4787   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002C80  2043      4788          move.l    D3,A0
00002C82  1010      4789          move.b    (A0),D0
00002C84  6604      4790          bne.s     FormatInstruction_7
                    4791   ; return ;
00002C86  6000 003E 4792          bra       FormatInstruction_9
                    4793   FormatInstruction_7:
00002C8A  60DE      4794          bra       FormatInstruction_4
                    4795   FormatInstruction_6:
                    4796   ; }
                    4797   ; // must still be more text to process otherwise we would have returned above if got to the end
                    4798   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002C8C  4242      4799          clr.w     D2
                    4800   FormatInstruction_10:
00002C8E  7008      4801          moveq     #8,D0
00002C90  4880      4802          ext.w     D0
00002C92  9045      4803          sub.w     D5,D0
00002C94  B440      4804          cmp.w     D0,D2
00002C96  6C0C      4805          bge.s     FormatInstruction_12
                    4806   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002C98  2044      4807          move.l    D4,A0
00002C9A  5284      4808          addq.l    #1,D4
00002C9C  10BC 0020 4809          move.b    #32,(A0)
00002CA0  5242      4810          addq.w    #1,D2
00002CA2  60EA      4811          bra       FormatInstruction_10
                    4812   FormatInstruction_12:
                    4813   ; // now skip over any spaces in original unformatted string before copying the rest
                    4814   ; while((*iptr == ' '))
                    4815   FormatInstruction_13:
00002CA4  2043      4816          move.l    D3,A0
00002CA6  1010      4817          move.b    (A0),D0
00002CA8  0C00 0020 4818          cmp.b     #32,D0
00002CAC  6604      4819          bne.s     FormatInstruction_15
                    4820   ; iptr++ ;
00002CAE  5283      4821          addq.l    #1,D3
00002CB0  60F2      4822          bra       FormatInstruction_13
                    4823   FormatInstruction_15:
                    4824   ; strcat(fptr,iptr) ;
00002CB2  2F03      4825          move.l    D3,-(A7)
00002CB4  2F04      4826          move.l    D4,-(A7)
00002CB6  4EB9 0000 4827          jsr       _strcat
00002CBA  55B8      
00002CBC  504F      4828          addq.w    #8,A7
                    4829   ; strcpyInstruction(Formatted) ;
00002CBE  2F0A      4830          move.l    A2,-(A7)
00002CC0  4EB8 0CE6 4831          jsr       _strcpyInstruction
00002CC4  584F      4832          addq.w    #4,A7
                    4833   FormatInstruction_9:
00002CC6  4CDF 043C 4834          movem.l   (A7)+,D2/D3/D4/D5/A2
00002CCA  4E5E      4835          unlk      A6
00002CCC  4E75      4836          rts
                    4837   ; }
                    4838   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    4839   ; {
                    4840   _Decode2BitOperandSize:
00002CCE  4E56 0000 4841          link      A6,#0
00002CD2  48E7 3020 4842          movem.l   D2/D3/A2,-(A7)
00002CD6  362E 000A 4843          move.w    10(A6),D3
00002CDA  C6BC 0000 4844          and.l     #65535,D3
00002CDE  FFFF      
00002CE0  45F8 0CCC 4845          lea       _strcatInstruction.L,A2
                    4846   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    4847   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00002CE4  3003      4848          move.w    D3,D0
00002CE6  C07C 00C0 4849          and.w     #192,D0
00002CEA  EC48      4850          lsr.w     #6,D0
00002CEC  3600      4851          move.w    D0,D3
                    4852   ; if(OpCode == (unsigned short int)(0))   {
00002CEE  4A43      4853          tst.w     D3
00002CF0  660E      4854          bne.s     Decode2BitOperandSize_1
                    4855   ; strcatInstruction(".B ") ;
00002CF2  4879 0000 4856          pea       @m68kde~1_161.L
00002CF6  711E      
00002CF8  4E92      4857          jsr       (A2)
00002CFA  584F      4858          addq.w    #4,A7
                    4859   ; DataSize = 1 ;
00002CFC  7401      4860          moveq     #1,D2
00002CFE  6020      4861          bra.s     Decode2BitOperandSize_4
                    4862   Decode2BitOperandSize_1:
                    4863   ; }
                    4864   ; else if(OpCode == (unsigned short int)(1)) {
00002D00  0C43 0001 4865          cmp.w     #1,D3
00002D04  660E      4866          bne.s     Decode2BitOperandSize_3
                    4867   ; strcatInstruction(".W ") ;
00002D06  4879 0000 4868          pea       @m68kde~1_162.L
00002D0A  7122      
00002D0C  4E92      4869          jsr       (A2)
00002D0E  584F      4870          addq.w    #4,A7
                    4871   ; DataSize = 1 ;
00002D10  7401      4872          moveq     #1,D2
00002D12  600C      4873          bra.s     Decode2BitOperandSize_4
                    4874   Decode2BitOperandSize_3:
                    4875   ; }
                    4876   ; else {
                    4877   ; strcatInstruction(".L ") ;
00002D14  4879 0000 4878          pea       @m68kde~1_163.L
00002D18  7126      
00002D1A  4E92      4879          jsr       (A2)
00002D1C  584F      4880          addq.w    #4,A7
                    4881   ; DataSize = 2 ;
00002D1E  7402      4882          moveq     #2,D2
                    4883   Decode2BitOperandSize_4:
                    4884   ; }
                    4885   ; return DataSize;
00002D20  3002      4886          move.w    D2,D0
00002D22  4CDF 040C 4887          movem.l   (A7)+,D2/D3/A2
00002D26  4E5E      4888          unlk      A6
00002D28  4E75      4889          rts
                    4890   ; }
                    4891   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    4892   ; {
                    4893   _Decode3BitDataRegister:
00002D2A  4E56 FFFC 4894          link      A6,#-4
00002D2E  2F0A      4895          move.l    A2,-(A7)
00002D30  45EE FFFC 4896          lea       -4(A6),A2
                    4897   ; unsigned char RegNumber[3] ;
                    4898   ; RegNumber[0] = 'D' ;
00002D34  14BC 0044 4899          move.b    #68,(A2)
                    4900   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002D38  7030      4901          moveq     #48,D0
00002D3A  322E 000A 4902          move.w    10(A6),D1
00002D3E  C27C 0E00 4903          and.w     #3584,D1
00002D42  E049      4904          lsr.w     #8,D1
00002D44  E249      4905          lsr.w     #1,D1
00002D46  D001      4906          add.b     D1,D0
00002D48  1540 0001 4907          move.b    D0,1(A2)
                    4908   ; RegNumber[2] = 0 ;
00002D4C  422A 0002 4909          clr.b     2(A2)
                    4910   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002D50  2F0A      4911          move.l    A2,-(A7)
00002D52  4EB8 0CCC 4912          jsr       _strcatInstruction
00002D56  584F      4913          addq.w    #4,A7
00002D58  245F      4914          move.l    (A7)+,A2
00002D5A  4E5E      4915          unlk      A6
00002D5C  4E75      4916          rts
                    4917   ; }
                    4918   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    4919   ; {
                    4920   _Decode3BitAddressRegister:
00002D5E  4E56 FFFC 4921          link      A6,#-4
00002D62  2F0A      4922          move.l    A2,-(A7)
00002D64  45EE FFFC 4923          lea       -4(A6),A2
                    4924   ; unsigned char RegNumber[3];
                    4925   ; RegNumber[0] = 'A' ;
00002D68  14BC 0041 4926          move.b    #65,(A2)
                    4927   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002D6C  7030      4928          moveq     #48,D0
00002D6E  322E 000A 4929          move.w    10(A6),D1
00002D72  D001      4930          add.b     D1,D0
00002D74  1540 0001 4931          move.b    D0,1(A2)
                    4932   ; RegNumber[2] = 0 ;
00002D78  422A 0002 4933          clr.b     2(A2)
                    4934   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002D7C  2F0A      4935          move.l    A2,-(A7)
00002D7E  4EB8 0CCC 4936          jsr       _strcatInstruction
00002D82  584F      4937          addq.w    #4,A7
00002D84  245F      4938          move.l    (A7)+,A2
00002D86  4E5E      4939          unlk      A6
00002D88  4E75      4940          rts
                    4941   ; }
                    4942   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    4943   ; // Special function is used to print 8,16, 32 bit operands after move #
                    4944   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    4945   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    4946   ; {
                    4947   _DecodeBWLDataAfterOpCodeForMove:
00002D8A  4E56 0000 4948          link      A6,#0
00002D8E  48E7 3030 4949          movem.l   D2/D3/A2/A3,-(A7)
00002D92  242E 0008 4950          move.l    8(A6),D2
00002D96  45F9 0803 4951          lea       _TempString.L,A2
00002D9A  0546      
00002D9C  47F9 0000 4952          lea       _sprintf.L,A3
00002DA0  5586      
                    4953   ; unsigned char OperandSize ;
                    4954   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
00002DA2  2042      4955          move.l    D2,A0
00002DA4  3010      4956          move.w    (A0),D0
00002DA6  E048      4957          lsr.w     #8,D0
00002DA8  E848      4958          lsr.w     #4,D0
00002DAA  C07C 0003 4959          and.w     #3,D0
00002DAE  1600      4960          move.b    D0,D3
                    4961   ; InstructionSize += 1;
00002DB0  52B9 0803 4962          addq.l    #1,_InstructionSize.L
00002DB4  017E      
                    4963   ; if(OperandSize == (char)(1))                // #byte value
00002DB6  0C03 0001 4964          cmp.b     #1,D3
00002DBA  6620      4965          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    4966   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002DBC  2042      4967          move.l    D2,A0
00002DBE  3228 0002 4968          move.w    2(A0),D1
00002DC2  C2BC 0000 4969          and.l     #65535,D1
00002DC6  FFFF      
00002DC8  2F01      4970          move.l    D1,-(A7)
00002DCA  4879 0000 4971          pea       @m68kde~1_164.L
00002DCE  712A      
00002DD0  2F0A      4972          move.l    A2,-(A7)
00002DD2  4E93      4973          jsr       (A3)
00002DD4  DEFC 000C 4974          add.w     #12,A7
00002DD8  6000 0068 4975          bra       DecodeBWLDataAfterOpCodeForMove_5
                    4976   DecodeBWLDataAfterOpCodeForMove_1:
                    4977   ; else if(OperandSize == (char)(3))          // #word value
00002DDC  0C03 0003 4978          cmp.b     #3,D3
00002DE0  6620      4979          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    4980   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002DE2  2042      4981          move.l    D2,A0
00002DE4  3228 0002 4982          move.w    2(A0),D1
00002DE8  C2BC 0000 4983          and.l     #65535,D1
00002DEC  FFFF      
00002DEE  2F01      4984          move.l    D1,-(A7)
00002DF0  4879 0000 4985          pea       @m68kde~1_164.L
00002DF4  712A      
00002DF6  2F0A      4986          move.l    A2,-(A7)
00002DF8  4E93      4987          jsr       (A3)
00002DFA  DEFC 000C 4988          add.w     #12,A7
00002DFE  6000 0042 4989          bra       DecodeBWLDataAfterOpCodeForMove_5
                    4990   DecodeBWLDataAfterOpCodeForMove_3:
                    4991   ; else if(OperandSize == (char)(2)) {                                       // long value
00002E02  0C03 0002 4992          cmp.b     #2,D3
00002E06  6600 003A 4993          bne       DecodeBWLDataAfterOpCodeForMove_5
                    4994   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00002E0A  2042      4995          move.l    D2,A0
00002E0C  3228 0002 4996          move.w    2(A0),D1
00002E10  C2BC 0000 4997          and.l     #65535,D1
00002E14  FFFF      
00002E16  E189      4998          lsl.l     #8,D1
00002E18  E189      4999          lsl.l     #8,D1
00002E1A  2042      5000          move.l    D2,A0
00002E1C  2F00      5001          move.l    D0,-(A7)
00002E1E  3028 0004 5002          move.w    4(A0),D0
00002E22  C0BC 0000 5003          and.l     #65535,D0
00002E26  FFFF      
00002E28  8280      5004          or.l      D0,D1
00002E2A  201F      5005          move.l    (A7)+,D0
00002E2C  2F01      5006          move.l    D1,-(A7)
00002E2E  4879 0000 5007          pea       @m68kde~1_164.L
00002E32  712A      
00002E34  2F0A      5008          move.l    A2,-(A7)
00002E36  4E93      5009          jsr       (A3)
00002E38  DEFC 000C 5010          add.w     #12,A7
                    5011   ; InstructionSize += 1;
00002E3C  52B9 0803 5012          addq.l    #1,_InstructionSize.L
00002E40  017E      
                    5013   DecodeBWLDataAfterOpCodeForMove_5:
                    5014   ; }
                    5015   ; strcatInstruction(TempString) ;
00002E42  2F0A      5016          move.l    A2,-(A7)
00002E44  4EB8 0CCC 5017          jsr       _strcatInstruction
00002E48  584F      5018          addq.w    #4,A7
00002E4A  4CDF 0C0C 5019          movem.l   (A7)+,D2/D3/A2/A3
00002E4E  4E5E      5020          unlk      A6
00002E50  4E75      5021          rts
                    5022   ; }
                    5023   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5024   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5025   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5026   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5027   ; {
                    5028   _DecodeBWLDataAfterOpCode:
00002E52  4E56 0000 5029          link      A6,#0
00002E56  48E7 3038 5030          movem.l   D2/D3/A2/A3/A4,-(A7)
00002E5A  262E 0008 5031          move.l    8(A6),D3
00002E5E  45F9 0803 5032          lea       _TempString.L,A2
00002E62  0546      
00002E64  47F9 0000 5033          lea       _sprintf.L,A3
00002E68  5586      
00002E6A  49F9 0803 5034          lea       _InstructionSize.L,A4
00002E6E  017E      
                    5035   ; unsigned char OperandSize ;
                    5036   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
00002E70  2043      5037          move.l    D3,A0
00002E72  3010      5038          move.w    (A0),D0
00002E74  C07C 01C0 5039          and.w     #448,D0
00002E78  EC48      5040          lsr.w     #6,D0
00002E7A  1400      5041          move.b    D0,D2
                    5042   ; InstructionSize += 1;
00002E7C  5294      5043          addq.l    #1,(A4)
                    5044   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
00002E7E  4A02      5045          tst.b     D2
00002E80  6706      5046          beq.s     DecodeBWLDataAfterOpCode_3
00002E82  0C02 0004 5047          cmp.b     #4,D2
00002E86  6620      5048          bne.s     DecodeBWLDataAfterOpCode_1
                    5049   DecodeBWLDataAfterOpCode_3:
                    5050   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002E88  2043      5051          move.l    D3,A0
00002E8A  3228 0002 5052          move.w    2(A0),D1
00002E8E  C2BC 0000 5053          and.l     #65535,D1
00002E92  FFFF      
00002E94  2F01      5054          move.l    D1,-(A7)
00002E96  4879 0000 5055          pea       @m68kde~1_164.L
00002E9A  712A      
00002E9C  2F0A      5056          move.l    A2,-(A7)
00002E9E  4E93      5057          jsr       (A3)
00002EA0  DEFC 000C 5058          add.w     #12,A7
00002EA4  6000 007C 5059          bra       DecodeBWLDataAfterOpCode_7
                    5060   DecodeBWLDataAfterOpCode_1:
                    5061   ; // #word value 7 is used by divs.w instruction (not divu)
                    5062   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5063   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5064   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00002EA8  0C02 0001 5065          cmp.b     #1,D2
00002EAC  670C      5066          beq.s     DecodeBWLDataAfterOpCode_6
00002EAE  0C02 0005 5067          cmp.b     #5,D2
00002EB2  6706      5068          beq.s     DecodeBWLDataAfterOpCode_6
00002EB4  0C02 0003 5069          cmp.b     #3,D2
00002EB8  6620      5070          bne.s     DecodeBWLDataAfterOpCode_4
                    5071   DecodeBWLDataAfterOpCode_6:
                    5072   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002EBA  2043      5073          move.l    D3,A0
00002EBC  3228 0002 5074          move.w    2(A0),D1
00002EC0  C2BC 0000 5075          and.l     #65535,D1
00002EC4  FFFF      
00002EC6  2F01      5076          move.l    D1,-(A7)
00002EC8  4879 0000 5077          pea       @m68kde~1_164.L
00002ECC  712A      
00002ECE  2F0A      5078          move.l    A2,-(A7)
00002ED0  4E93      5079          jsr       (A3)
00002ED2  DEFC 000C 5080          add.w     #12,A7
00002ED6  6000 004A 5081          bra       DecodeBWLDataAfterOpCode_7
                    5082   DecodeBWLDataAfterOpCode_4:
                    5083   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00002EDA  0C02 0002 5084          cmp.b     #2,D2
00002EDE  670E      5085          beq.s     DecodeBWLDataAfterOpCode_9
00002EE0  0C02 0006 5086          cmp.b     #6,D2
00002EE4  6708      5087          beq.s     DecodeBWLDataAfterOpCode_9
00002EE6  0C02 0007 5088          cmp.b     #7,D2
00002EEA  6600 0036 5089          bne       DecodeBWLDataAfterOpCode_7
                    5090   DecodeBWLDataAfterOpCode_9:
                    5091   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
00002EEE  2043      5092          move.l    D3,A0
00002EF0  3228 0002 5093          move.w    2(A0),D1
00002EF4  C2BC 0000 5094          and.l     #65535,D1
00002EF8  FFFF      
00002EFA  E189      5095          lsl.l     #8,D1
00002EFC  E189      5096          lsl.l     #8,D1
00002EFE  2043      5097          move.l    D3,A0
00002F00  2F00      5098          move.l    D0,-(A7)
00002F02  3028 0004 5099          move.w    4(A0),D0
00002F06  C0BC 0000 5100          and.l     #65535,D0
00002F0A  FFFF      
00002F0C  8280      5101          or.l      D0,D1
00002F0E  201F      5102          move.l    (A7)+,D0
00002F10  2F01      5103          move.l    D1,-(A7)
00002F12  4879 0000 5104          pea       @m68kde~1_164.L
00002F16  712A      
00002F18  2F0A      5105          move.l    A2,-(A7)
00002F1A  4E93      5106          jsr       (A3)
00002F1C  DEFC 000C 5107          add.w     #12,A7
                    5108   ; InstructionSize += 1;
00002F20  5294      5109          addq.l    #1,(A4)
                    5110   DecodeBWLDataAfterOpCode_7:
                    5111   ; }
                    5112   ; // special case for divs - bugger!!!
                    5113   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
00002F22  2043      5114          move.l    D3,A0
00002F24  3010      5115          move.w    (A0),D0
00002F26  C07C F1C0 5116          and.w     #61888,D0
00002F2A  0C40 81C0 5117          cmp.w     #33216,D0
00002F2E  6622      5118          bne.s     DecodeBWLDataAfterOpCode_10
                    5119   ; {
                    5120   ; InstructionSize = 2 ;
00002F30  28BC 0000 5121          move.l    #2,(A4)
00002F34  0002      
                    5122   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F36  2043      5123          move.l    D3,A0
00002F38  3228 0002 5124          move.w    2(A0),D1
00002F3C  C2BC 0000 5125          and.l     #65535,D1
00002F40  FFFF      
00002F42  2F01      5126          move.l    D1,-(A7)
00002F44  4879 0000 5127          pea       @m68kde~1_164.L
00002F48  712A      
00002F4A  2F0A      5128          move.l    A2,-(A7)
00002F4C  4E93      5129          jsr       (A3)
00002F4E  DEFC 000C 5130          add.w     #12,A7
                    5131   DecodeBWLDataAfterOpCode_10:
                    5132   ; }
                    5133   ; strcatInstruction(TempString) ;
00002F52  2F0A      5134          move.l    A2,-(A7)
00002F54  4EB8 0CCC 5135          jsr       _strcatInstruction
00002F58  584F      5136          addq.w    #4,A7
00002F5A  4CDF 1C0C 5137          movem.l   (A7)+,D2/D3/A2/A3/A4
00002F5E  4E5E      5138          unlk      A6
00002F60  4E75      5139          rts
                    5140   ; }
                    5141   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5142   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5143   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5144   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5145   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5146   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5147   ; {
                    5148   _Decode6BitEA:
00002F62  4E56 FFF4 5149          link      A6,#-12
00002F66  48E7 3F3C 5150          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002F6A  45F8 0CCC 5151          lea       _strcatInstruction.L,A2
00002F6E  47F9 0803 5152          lea       _TempString.L,A3
00002F72  0546      
00002F74  282E 0008 5153          move.l    8(A6),D4
00002F78  49F9 0000 5154          lea       _sprintf.L,A4
00002F7C  5586      
00002F7E  4BF9 0803 5155          lea       _InstructionSize.L,A5
00002F82  017E      
00002F84  3C2E 0012 5156          move.w    18(A6),D6
00002F88  CCBC 0000 5157          and.l     #65535,D6
00002F8C  FFFF      
                    5158   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5159   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5160   ; unsigned char RegNumber[3];
                    5161   ; signed char offset ;
                    5162   ; unsigned short int Xn, XnSize ;
                    5163   ; if(EAChoice == 0)   {   // if EA in bits 5-0
00002F8E  202E 000C 5164          move.l    12(A6),D0
00002F92  6620      5165          bne.s     Decode6BitEA_1
                    5166   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
00002F94  2044      5167          move.l    D4,A0
00002F96  3010      5168          move.w    (A0),D0
00002F98  E648      5169          lsr.w     #3,D0
00002F9A  C07C 00FF 5170          and.w     #255,D0
00002F9E  C07C 0007 5171          and.w     #7,D0
00002FA2  1A00      5172          move.b    D0,D5
                    5173   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
00002FA4  2044      5174          move.l    D4,A0
00002FA6  3010      5175          move.w    (A0),D0
00002FA8  C07C 00FF 5176          and.w     #255,D0
00002FAC  C07C 0007 5177          and.w     #7,D0
00002FB0  1600      5178          move.b    D0,D3
00002FB2  6022      5179          bra.s     Decode6BitEA_2
                    5180   Decode6BitEA_1:
                    5181   ; }
                    5182   ; else    {               // else EA in bits 11-6
                    5183   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
00002FB4  2044      5184          move.l    D4,A0
00002FB6  3010      5185          move.w    (A0),D0
00002FB8  EC48      5186          lsr.w     #6,D0
00002FBA  C07C 00FF 5187          and.w     #255,D0
00002FBE  C07C 0007 5188          and.w     #7,D0
00002FC2  1A00      5189          move.b    D0,D5
                    5190   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00002FC4  2044      5191          move.l    D4,A0
00002FC6  3010      5192          move.w    (A0),D0
00002FC8  E048      5193          lsr.w     #8,D0
00002FCA  E248      5194          lsr.w     #1,D0
00002FCC  C07C 00FF 5195          and.w     #255,D0
00002FD0  C07C 0007 5196          and.w     #7,D0
00002FD4  1600      5197          move.b    D0,D3
                    5198   Decode6BitEA_2:
                    5199   ; }
                    5200   ; if(EAChoice == 0)    {
00002FD6  202E 000C 5201          move.l    12(A6),D0
00002FDA  6600 0034 5202          bne       Decode6BitEA_3
                    5203   ; ExWord1 = OpCode[1+DataSize] ;
00002FDE  2044      5204          move.l    D4,A0
00002FE0  7001      5205          moveq     #1,D0
00002FE2  4880      5206          ext.w     D0
00002FE4  48C0      5207          ext.l     D0
00002FE6  CCBC 0000 5208          and.l     #65535,D6
00002FEA  FFFF      
00002FEC  D086      5209          add.l     D6,D0
00002FEE  E388      5210          lsl.l     #1,D0
00002FF0  3430 0800 5211          move.w    0(A0,D0.L),D2
                    5212   ; ExWord2 = OpCode[2+DataSize] ;
00002FF4  2044      5213          move.l    D4,A0
00002FF6  7002      5214          moveq     #2,D0
00002FF8  4880      5215          ext.w     D0
00002FFA  48C0      5216          ext.l     D0
00002FFC  CCBC 0000 5217          and.l     #65535,D6
00003000  FFFF      
00003002  D086      5218          add.l     D6,D0
00003004  E388      5219          lsl.l     #1,D0
00003006  3D70 0800 5220          move.w    0(A0,D0.L),-8(A6)
0000300A  FFF8      
0000300C  6000 007E 5221          bra       Decode6BitEA_7
                    5222   Decode6BitEA_3:
                    5223   ; }
                    5224   ; else if(EAChoice == 1)   {
00003010  202E 000C 5225          move.l    12(A6),D0
00003014  0C80 0000 5226          cmp.l     #1,D0
00003018  0001      
0000301A  6600 0034 5227          bne       Decode6BitEA_5
                    5228   ; ExWord1 = OpCode[3+DataSize] ;
0000301E  2044      5229          move.l    D4,A0
00003020  7003      5230          moveq     #3,D0
00003022  4880      5231          ext.w     D0
00003024  48C0      5232          ext.l     D0
00003026  CCBC 0000 5233          and.l     #65535,D6
0000302A  FFFF      
0000302C  D086      5234          add.l     D6,D0
0000302E  E388      5235          lsl.l     #1,D0
00003030  3430 0800 5236          move.w    0(A0,D0.L),D2
                    5237   ; ExWord2 = OpCode[4+DataSize] ;
00003034  2044      5238          move.l    D4,A0
00003036  7004      5239          moveq     #4,D0
00003038  4880      5240          ext.w     D0
0000303A  48C0      5241          ext.l     D0
0000303C  CCBC 0000 5242          and.l     #65535,D6
00003040  FFFF      
00003042  D086      5243          add.l     D6,D0
00003044  E388      5244          lsl.l     #1,D0
00003046  3D70 0800 5245          move.w    0(A0,D0.L),-8(A6)
0000304A  FFF8      
0000304C  6000 003E 5246          bra       Decode6BitEA_7
                    5247   Decode6BitEA_5:
                    5248   ; }
                    5249   ; else if(EAChoice == 2)   {  // for move instruction
00003050  202E 000C 5250          move.l    12(A6),D0
00003054  0C80 0000 5251          cmp.l     #2,D0
00003058  0002      
0000305A  6600 0030 5252          bne       Decode6BitEA_7
                    5253   ; ExWord1 = OpCode[1+DataSize] ;
0000305E  2044      5254          move.l    D4,A0
00003060  7001      5255          moveq     #1,D0
00003062  4880      5256          ext.w     D0
00003064  48C0      5257          ext.l     D0
00003066  CCBC 0000 5258          and.l     #65535,D6
0000306A  FFFF      
0000306C  D086      5259          add.l     D6,D0
0000306E  E388      5260          lsl.l     #1,D0
00003070  3430 0800 5261          move.w    0(A0,D0.L),D2
                    5262   ; ExWord2 = OpCode[2+DataSize] ;
00003074  2044      5263          move.l    D4,A0
00003076  7002      5264          moveq     #2,D0
00003078  4880      5265          ext.w     D0
0000307A  48C0      5266          ext.l     D0
0000307C  CCBC 0000 5267          and.l     #65535,D6
00003080  FFFF      
00003082  D086      5268          add.l     D6,D0
00003084  E388      5269          lsl.l     #1,D0
00003086  3D70 0800 5270          move.w    0(A0,D0.L),-8(A6)
0000308A  FFF8      
                    5271   Decode6BitEA_7:
                    5272   ; }
                    5273   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
0000308C  4A05      5274          tst.b     D5
0000308E  661E      5275          bne.s     Decode6BitEA_9
                    5276   ; RegNumber[0] = 'D' ;
00003090  1D7C 0044 5277          move.b    #68,-6+0(A6)
00003094  FFFA      
                    5278   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
00003096  7030      5279          moveq     #48,D0
00003098  D003      5280          add.b     D3,D0
0000309A  1D40 FFFB 5281          move.b    D0,-6+1(A6)
                    5282   ; RegNumber[2] = 0 ;
0000309E  422E FFFC 5283          clr.b     -6+2(A6)
                    5284   ; strcatInstruction(RegNumber) ;
000030A2  486E FFFA 5285          pea       -6(A6)
000030A6  4E92      5286          jsr       (A2)
000030A8  584F      5287          addq.w    #4,A7
000030AA  6000 02D6 5288          bra       Decode6BitEA_44
                    5289   Decode6BitEA_9:
                    5290   ; }
                    5291   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
000030AE  0C05 0001 5292          cmp.b     #1,D5
000030B2  6616      5293          bne.s     Decode6BitEA_11
                    5294   ; Decode3BitAddressRegister(OperandRegister) ;
000030B4  C67C 00FF 5295          and.w     #255,D3
000030B8  C6BC 0000 5296          and.l     #65535,D3
000030BC  FFFF      
000030BE  2F03      5297          move.l    D3,-(A7)
000030C0  4EB8 2D5E 5298          jsr       _Decode3BitAddressRegister
000030C4  584F      5299          addq.w    #4,A7
000030C6  6000 02BA 5300          bra       Decode6BitEA_44
                    5301   Decode6BitEA_11:
                    5302   ; }
                    5303   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
000030CA  0C05 0002 5304          cmp.b     #2,D5
000030CE  662A      5305          bne.s     Decode6BitEA_13
                    5306   ; strcatInstruction("(") ;
000030D0  4879 0000 5307          pea       @m68kde~1_165.L
000030D4  7130      
000030D6  4E92      5308          jsr       (A2)
000030D8  584F      5309          addq.w    #4,A7
                    5310   ; Decode3BitAddressRegister(OperandRegister) ;
000030DA  C67C 00FF 5311          and.w     #255,D3
000030DE  C6BC 0000 5312          and.l     #65535,D3
000030E2  FFFF      
000030E4  2F03      5313          move.l    D3,-(A7)
000030E6  4EB8 2D5E 5314          jsr       _Decode3BitAddressRegister
000030EA  584F      5315          addq.w    #4,A7
                    5316   ; strcatInstruction(")") ;
000030EC  4879 0000 5317          pea       @m68kde~1_166.L
000030F0  7132      
000030F2  4E92      5318          jsr       (A2)
000030F4  584F      5319          addq.w    #4,A7
000030F6  6000 028A 5320          bra       Decode6BitEA_44
                    5321   Decode6BitEA_13:
                    5322   ; }
                    5323   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
000030FA  0C05 0003 5324          cmp.b     #3,D5
000030FE  662A      5325          bne.s     Decode6BitEA_15
                    5326   ; strcatInstruction("(") ;
00003100  4879 0000 5327          pea       @m68kde~1_165.L
00003104  7130      
00003106  4E92      5328          jsr       (A2)
00003108  584F      5329          addq.w    #4,A7
                    5330   ; Decode3BitAddressRegister(OperandRegister) ;
0000310A  C67C 00FF 5331          and.w     #255,D3
0000310E  C6BC 0000 5332          and.l     #65535,D3
00003112  FFFF      
00003114  2F03      5333          move.l    D3,-(A7)
00003116  4EB8 2D5E 5334          jsr       _Decode3BitAddressRegister
0000311A  584F      5335          addq.w    #4,A7
                    5336   ; strcatInstruction(")+") ;
0000311C  4879 0000 5337          pea       @m68kde~1_167.L
00003120  7134      
00003122  4E92      5338          jsr       (A2)
00003124  584F      5339          addq.w    #4,A7
00003126  6000 025A 5340          bra       Decode6BitEA_44
                    5341   Decode6BitEA_15:
                    5342   ; }
                    5343   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
0000312A  0C05 0004 5344          cmp.b     #4,D5
0000312E  662A      5345          bne.s     Decode6BitEA_17
                    5346   ; strcatInstruction("-(") ;
00003130  4879 0000 5347          pea       @m68kde~1_168.L
00003134  7138      
00003136  4E92      5348          jsr       (A2)
00003138  584F      5349          addq.w    #4,A7
                    5350   ; Decode3BitAddressRegister(OperandRegister) ;
0000313A  C67C 00FF 5351          and.w     #255,D3
0000313E  C6BC 0000 5352          and.l     #65535,D3
00003142  FFFF      
00003144  2F03      5353          move.l    D3,-(A7)
00003146  4EB8 2D5E 5354          jsr       _Decode3BitAddressRegister
0000314A  584F      5355          addq.w    #4,A7
                    5356   ; strcatInstruction(")") ;
0000314C  4879 0000 5357          pea       @m68kde~1_166.L
00003150  7132      
00003152  4E92      5358          jsr       (A2)
00003154  584F      5359          addq.w    #4,A7
00003156  6000 022A 5360          bra       Decode6BitEA_44
                    5361   Decode6BitEA_17:
                    5362   ; }
                    5363   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
0000315A  0C05 0005 5364          cmp.b     #5,D5
0000315E  6626      5365          bne.s     Decode6BitEA_19
                    5366   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
00003160  C6BC 0000 5367          and.l     #255,D3
00003164  00FF      
00003166  2F03      5368          move.l    D3,-(A7)
00003168  48C2      5369          ext.l     D2
0000316A  2F02      5370          move.l    D2,-(A7)
0000316C  4879 0000 5371          pea       @m68kde~1_169.L
00003170  713C      
00003172  2F0B      5372          move.l    A3,-(A7)
00003174  4E94      5373          jsr       (A4)
00003176  DEFC 0010 5374          add.w     #16,A7
                    5375   ; strcatInstruction(TempString) ;
0000317A  2F0B      5376          move.l    A3,-(A7)
0000317C  4E92      5377          jsr       (A2)
0000317E  584F      5378          addq.w    #4,A7
                    5379   ; InstructionSize += 1;
00003180  5295      5380          addq.l    #1,(A5)
00003182  6000 01FE 5381          bra       Decode6BitEA_44
                    5382   Decode6BitEA_19:
                    5383   ; }
                    5384   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
00003186  0C05 0006 5385          cmp.b     #6,D5
0000318A  6600 00AA 5386          bne       Decode6BitEA_21
                    5387   ; offset = ExWord1 & (short int)(0x00FF);
0000318E  3002      5388          move.w    D2,D0
00003190  C07C 00FF 5389          and.w     #255,D0
00003194  1D40 FFFD 5390          move.b    D0,-3(A6)
                    5391   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
00003198  C6BC 0000 5392          and.l     #255,D3
0000319C  00FF      
0000319E  2F03      5393          move.l    D3,-(A7)
000031A0  122E FFFD 5394          move.b    -3(A6),D1
000031A4  4881      5395          ext.w     D1
000031A6  48C1      5396          ext.l     D1
000031A8  2F01      5397          move.l    D1,-(A7)
000031AA  4879 0000 5398          pea       @m68kde~1_170.L
000031AE  7144      
000031B0  2F0B      5399          move.l    A3,-(A7)
000031B2  4E94      5400          jsr       (A4)
000031B4  DEFC 0010 5401          add.w     #16,A7
                    5402   ; strcatInstruction(TempString) ;
000031B8  2F0B      5403          move.l    A3,-(A7)
000031BA  4E92      5404          jsr       (A2)
000031BC  584F      5405          addq.w    #4,A7
                    5406   ; InstructionSize += 1;
000031BE  5295      5407          addq.l    #1,(A5)
                    5408   ; // decode the Xn bit
                    5409   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
000031C0  3002      5410          move.w    D2,D0
000031C2  C07C 8000 5411          and.w     #32768,D0
000031C6  660C      5412          bne.s     Decode6BitEA_23
                    5413   ; strcatInstruction("D") ;
000031C8  4879 0000 5414          pea       @m68kde~1_171.L
000031CC  714C      
000031CE  4E92      5415          jsr       (A2)
000031D0  584F      5416          addq.w    #4,A7
000031D2  600A      5417          bra.s     Decode6BitEA_24
                    5418   Decode6BitEA_23:
                    5419   ; else
                    5420   ; strcatInstruction("A") ;
000031D4  4879 0000 5421          pea       @m68kde~1_172.L
000031D8  714E      
000031DA  4E92      5422          jsr       (A2)
000031DC  584F      5423          addq.w    #4,A7
                    5424   Decode6BitEA_24:
                    5425   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
000031DE  3002      5426          move.w    D2,D0
000031E0  C07C 7000 5427          and.w     #28672,D0
000031E4  E048      5428          lsr.w     #8,D0
000031E6  E848      5429          lsr.w     #4,D0
000031E8  3D40 FFFE 5430          move.w    D0,-2(A6)
                    5431   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000031EC  322E FFFE 5432          move.w    -2(A6),D1
000031F0  C2BC 0000 5433          and.l     #65535,D1
000031F4  FFFF      
000031F6  2F01      5434          move.l    D1,-(A7)
000031F8  4879 0000 5435          pea       @m68kde~1_173.L
000031FC  7150      
000031FE  2F0B      5436          move.l    A3,-(A7)
00003200  4E94      5437          jsr       (A4)
00003202  DEFC 000C 5438          add.w     #12,A7
                    5439   ; strcatInstruction(TempString) ;
00003206  2F0B      5440          move.l    A3,-(A7)
00003208  4E92      5441          jsr       (A2)
0000320A  584F      5442          addq.w    #4,A7
                    5443   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
0000320C  3002      5444          move.w    D2,D0
0000320E  C07C 0800 5445          and.w     #2048,D0
00003212  E048      5446          lsr.w     #8,D0
00003214  E648      5447          lsr.w     #3,D0
00003216  3E00      5448          move.w    D0,D7
                    5449   ; if(XnSize == 0)
00003218  4A47      5450          tst.w     D7
0000321A  660C      5451          bne.s     Decode6BitEA_25
                    5452   ; strcatInstruction(".W)") ;
0000321C  4879 0000 5453          pea       @m68kde~1_174.L
00003220  7154      
00003222  4E92      5454          jsr       (A2)
00003224  584F      5455          addq.w    #4,A7
00003226  600A      5456          bra.s     Decode6BitEA_26
                    5457   Decode6BitEA_25:
                    5458   ; else
                    5459   ; strcatInstruction(".L)") ;
00003228  4879 0000 5460          pea       @m68kde~1_175.L
0000322C  7158      
0000322E  4E92      5461          jsr       (A2)
00003230  584F      5462          addq.w    #4,A7
                    5463   Decode6BitEA_26:
00003232  6000 014E 5464          bra       Decode6BitEA_44
                    5465   Decode6BitEA_21:
                    5466   ; }
                    5467   ; else if(OperandMode == (unsigned char)(7)) {
00003236  0C05 0007 5468          cmp.b     #7,D5
0000323A  6600 0146 5469          bne       Decode6BitEA_44
                    5470   ; if(OperandRegister == 0) {                               // EA = (xxx).W
0000323E  4A03      5471          tst.b     D3
00003240  661E      5472          bne.s     Decode6BitEA_29
                    5473   ; sprintf(TempString, "$%X", ExWord1) ;
00003242  48C2      5474          ext.l     D2
00003244  2F02      5475          move.l    D2,-(A7)
00003246  4879 0000 5476          pea       @m68kde~1_176.L
0000324A  715C      
0000324C  2F0B      5477          move.l    A3,-(A7)
0000324E  4E94      5478          jsr       (A4)
00003250  DEFC 000C 5479          add.w     #12,A7
                    5480   ; strcatInstruction(TempString) ;
00003254  2F0B      5481          move.l    A3,-(A7)
00003256  4E92      5482          jsr       (A2)
00003258  584F      5483          addq.w    #4,A7
                    5484   ; InstructionSize += 1;
0000325A  5295      5485          addq.l    #1,(A5)
0000325C  6000 0124 5486          bra       Decode6BitEA_44
                    5487   Decode6BitEA_29:
                    5488   ; }
                    5489   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
00003260  0C03 0001 5490          cmp.b     #1,D3
00003264  6600 0032 5491          bne       Decode6BitEA_31
                    5492   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
00003268  3202      5493          move.w    D2,D1
0000326A  48C1      5494          ext.l     D1
0000326C  E189      5495          lsl.l     #8,D1
0000326E  E189      5496          lsl.l     #8,D1
00003270  2F00      5497          move.l    D0,-(A7)
00003272  302E FFF8 5498          move.w    -8(A6),D0
00003276  48C0      5499          ext.l     D0
00003278  8280      5500          or.l      D0,D1
0000327A  201F      5501          move.l    (A7)+,D0
0000327C  2F01      5502          move.l    D1,-(A7)
0000327E  4879 0000 5503          pea       @m68kde~1_176.L
00003282  715C      
00003284  2F0B      5504          move.l    A3,-(A7)
00003286  4E94      5505          jsr       (A4)
00003288  DEFC 000C 5506          add.w     #12,A7
                    5507   ; strcatInstruction(TempString) ;
0000328C  2F0B      5508          move.l    A3,-(A7)
0000328E  4E92      5509          jsr       (A2)
00003290  584F      5510          addq.w    #4,A7
                    5511   ; InstructionSize += 2;
00003292  5495      5512          addq.l    #2,(A5)
00003294  6000 00EC 5513          bra       Decode6BitEA_44
                    5514   Decode6BitEA_31:
                    5515   ; }
                    5516   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
00003298  0C03 0004 5517          cmp.b     #4,D3
0000329C  661C      5518          bne.s     Decode6BitEA_33
                    5519   ; if(IsItMoveInstruction == 0)        //not move instruction
0000329E  302E 0016 5520          move.w    22(A6),D0
000032A2  660A      5521          bne.s     Decode6BitEA_35
                    5522   ; DecodeBWLDataAfterOpCode(OpCode);
000032A4  2F04      5523          move.l    D4,-(A7)
000032A6  4EB8 2E52 5524          jsr       _DecodeBWLDataAfterOpCode
000032AA  584F      5525          addq.w    #4,A7
000032AC  6008      5526          bra.s     Decode6BitEA_36
                    5527   Decode6BitEA_35:
                    5528   ; else
                    5529   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
000032AE  2F04      5530          move.l    D4,-(A7)
000032B0  4EB8 2D8A 5531          jsr       _DecodeBWLDataAfterOpCodeForMove
000032B4  584F      5532          addq.w    #4,A7
                    5533   Decode6BitEA_36:
000032B6  6000 00CA 5534          bra       Decode6BitEA_44
                    5535   Decode6BitEA_33:
                    5536   ; }
                    5537   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
000032BA  0C03 0002 5538          cmp.b     #2,D3
000032BE  661E      5539          bne.s     Decode6BitEA_37
                    5540   ; sprintf(TempString, "%d(PC)", ExWord1) ;
000032C0  48C2      5541          ext.l     D2
000032C2  2F02      5542          move.l    D2,-(A7)
000032C4  4879 0000 5543          pea       @m68kde~1_177.L
000032C8  7160      
000032CA  2F0B      5544          move.l    A3,-(A7)
000032CC  4E94      5545          jsr       (A4)
000032CE  DEFC 000C 5546          add.w     #12,A7
                    5547   ; strcatInstruction(TempString) ;
000032D2  2F0B      5548          move.l    A3,-(A7)
000032D4  4E92      5549          jsr       (A2)
000032D6  584F      5550          addq.w    #4,A7
                    5551   ; InstructionSize += 1;
000032D8  5295      5552          addq.l    #1,(A5)
000032DA  6000 00A6 5553          bra       Decode6BitEA_44
                    5554   Decode6BitEA_37:
                    5555   ; }
                    5556   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
000032DE  0C03 0003 5557          cmp.b     #3,D3
000032E2  6600 009E 5558          bne       Decode6BitEA_44
                    5559   ; offset = ExWord1 & (short int)(0x00FF);
000032E6  3002      5560          move.w    D2,D0
000032E8  C07C 00FF 5561          and.w     #255,D0
000032EC  1D40 FFFD 5562          move.b    D0,-3(A6)
                    5563   ; sprintf(TempString, "%d(PC,", offset ) ;
000032F0  122E FFFD 5564          move.b    -3(A6),D1
000032F4  4881      5565          ext.w     D1
000032F6  48C1      5566          ext.l     D1
000032F8  2F01      5567          move.l    D1,-(A7)
000032FA  4879 0000 5568          pea       @m68kde~1_178.L
000032FE  7168      
00003300  2F0B      5569          move.l    A3,-(A7)
00003302  4E94      5570          jsr       (A4)
00003304  DEFC 000C 5571          add.w     #12,A7
                    5572   ; strcatInstruction(TempString) ;
00003308  2F0B      5573          move.l    A3,-(A7)
0000330A  4E92      5574          jsr       (A2)
0000330C  584F      5575          addq.w    #4,A7
                    5576   ; InstructionSize += 1;
0000330E  5295      5577          addq.l    #1,(A5)
                    5578   ; // decode the Xn bit
                    5579   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
00003310  3002      5580          move.w    D2,D0
00003312  C07C 8000 5581          and.w     #32768,D0
00003316  660C      5582          bne.s     Decode6BitEA_41
                    5583   ; strcatInstruction("D") ;
00003318  4879 0000 5584          pea       @m68kde~1_171.L
0000331C  714C      
0000331E  4E92      5585          jsr       (A2)
00003320  584F      5586          addq.w    #4,A7
00003322  600A      5587          bra.s     Decode6BitEA_42
                    5588   Decode6BitEA_41:
                    5589   ; else
                    5590   ; strcatInstruction("A") ;
00003324  4879 0000 5591          pea       @m68kde~1_172.L
00003328  714E      
0000332A  4E92      5592          jsr       (A2)
0000332C  584F      5593          addq.w    #4,A7
                    5594   Decode6BitEA_42:
                    5595   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000332E  3002      5596          move.w    D2,D0
00003330  C07C 7000 5597          and.w     #28672,D0
00003334  E048      5598          lsr.w     #8,D0
00003336  E848      5599          lsr.w     #4,D0
00003338  3D40 FFFE 5600          move.w    D0,-2(A6)
                    5601   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
0000333C  322E FFFE 5602          move.w    -2(A6),D1
00003340  C2BC 0000 5603          and.l     #65535,D1
00003344  FFFF      
00003346  2F01      5604          move.l    D1,-(A7)
00003348  4879 0000 5605          pea       @m68kde~1_173.L
0000334C  7150      
0000334E  2F0B      5606          move.l    A3,-(A7)
00003350  4E94      5607          jsr       (A4)
00003352  DEFC 000C 5608          add.w     #12,A7
                    5609   ; strcatInstruction(TempString) ;
00003356  2F0B      5610          move.l    A3,-(A7)
00003358  4E92      5611          jsr       (A2)
0000335A  584F      5612          addq.w    #4,A7
                    5613   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
0000335C  3002      5614          move.w    D2,D0
0000335E  C07C 0800 5615          and.w     #2048,D0
00003362  E048      5616          lsr.w     #8,D0
00003364  E648      5617          lsr.w     #3,D0
00003366  3E00      5618          move.w    D0,D7
                    5619   ; if(XnSize == 0)
00003368  4A47      5620          tst.w     D7
0000336A  660C      5621          bne.s     Decode6BitEA_43
                    5622   ; strcatInstruction(".W)") ;
0000336C  4879 0000 5623          pea       @m68kde~1_174.L
00003370  7154      
00003372  4E92      5624          jsr       (A2)
00003374  584F      5625          addq.w    #4,A7
00003376  600A      5626          bra.s     Decode6BitEA_44
                    5627   Decode6BitEA_43:
                    5628   ; else
                    5629   ; strcatInstruction(".L)") ;
00003378  4879 0000 5630          pea       @m68kde~1_175.L
0000337C  7158      
0000337E  4E92      5631          jsr       (A2)
00003380  584F      5632          addq.w    #4,A7
                    5633   Decode6BitEA_44:
00003382  4CDF 3CFC 5634          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003386  4E5E      5635          unlk      A6
00003388  4E75      5636          rts
                    5637   ; }
                    5638   ; }
                    5639   ; }
                    5640   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    5641   ; {
                    5642   _Decode3BitOperandMode:
0000338A  4E56 FFFC 5643          link      A6,#-4
0000338E  2F02      5644          move.l    D2,-(A7)
00003390  242E 0008 5645          move.l    8(A6),D2
                    5646   ; unsigned short int OperandMode;
                    5647   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
00003394  2042      5648          move.l    D2,A0
00003396  3010      5649          move.w    (A0),D0
00003398  C07C 0100 5650          and.w     #256,D0
0000339C  E048      5651          lsr.w     #8,D0
0000339E  3D40 FFFE 5652          move.w    D0,-2(A6)
                    5653   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000033A2  2042      5654          move.l    D2,A0
000033A4  3210      5655          move.w    (A0),D1
000033A6  C2BC 0000 5656          and.l     #65535,D1
000033AA  FFFF      
000033AC  2F01      5657          move.l    D1,-(A7)
000033AE  4EB8 2CCE 5658          jsr       _Decode2BitOperandSize
000033B2  584F      5659          addq.w    #4,A7
                    5660   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
000033B4  302E FFFE 5661          move.w    -2(A6),D0
000033B8  6600 0032 5662          bne       Decode3BitOperandMode_1
                    5663   ; Decode6BitEA(OpCode,0,0,0) ;
000033BC  42A7      5664          clr.l     -(A7)
000033BE  42A7      5665          clr.l     -(A7)
000033C0  42A7      5666          clr.l     -(A7)
000033C2  2F02      5667          move.l    D2,-(A7)
000033C4  4EB8 2F62 5668          jsr       _Decode6BitEA
000033C8  DEFC 0010 5669          add.w     #16,A7
                    5670   ; strcatInstruction(",") ;
000033CC  4879 0000 5671          pea       @m68kde~1_179.L
000033D0  7170      
000033D2  4EB8 0CCC 5672          jsr       _strcatInstruction
000033D6  584F      5673          addq.w    #4,A7
                    5674   ; Decode3BitDataRegister(*OpCode) ;
000033D8  2042      5675          move.l    D2,A0
000033DA  3210      5676          move.w    (A0),D1
000033DC  C2BC 0000 5677          and.l     #65535,D1
000033E0  FFFF      
000033E2  2F01      5678          move.l    D1,-(A7)
000033E4  4EB8 2D2A 5679          jsr       _Decode3BitDataRegister
000033E8  584F      5680          addq.w    #4,A7
000033EA  602E      5681          bra.s     Decode3BitOperandMode_2
                    5682   Decode3BitOperandMode_1:
                    5683   ; }
                    5684   ; else {                                                         // Destination is in EA
                    5685   ; Decode3BitDataRegister(*OpCode) ;
000033EC  2042      5686          move.l    D2,A0
000033EE  3210      5687          move.w    (A0),D1
000033F0  C2BC 0000 5688          and.l     #65535,D1
000033F4  FFFF      
000033F6  2F01      5689          move.l    D1,-(A7)
000033F8  4EB8 2D2A 5690          jsr       _Decode3BitDataRegister
000033FC  584F      5691          addq.w    #4,A7
                    5692   ; strcatInstruction(",") ;
000033FE  4879 0000 5693          pea       @m68kde~1_179.L
00003402  7170      
00003404  4EB8 0CCC 5694          jsr       _strcatInstruction
00003408  584F      5695          addq.w    #4,A7
                    5696   ; Decode6BitEA(OpCode,0,0,0) ;
0000340A  42A7      5697          clr.l     -(A7)
0000340C  42A7      5698          clr.l     -(A7)
0000340E  42A7      5699          clr.l     -(A7)
00003410  2F02      5700          move.l    D2,-(A7)
00003412  4EB8 2F62 5701          jsr       _Decode6BitEA
00003416  DEFC 0010 5702          add.w     #16,A7
                    5703   Decode3BitOperandMode_2:
0000341A  241F      5704          move.l    (A7)+,D2
0000341C  4E5E      5705          unlk      A6
0000341E  4E75      5706          rts
                    5707   ; }
                    5708   ; }
                    5709   ; void DecodeBranchCondition(unsigned short int Condition)
                    5710   ; {
                    5711   _DecodeBranchCondition:
00003420  4E56 0000 5712          link      A6,#0
00003424  48E7 2020 5713          movem.l   D2/A2,-(A7)
00003428  45F8 0CCC 5714          lea       _strcatInstruction.L,A2
0000342C  342E 000A 5715          move.w    10(A6),D2
00003430  C4BC 0000 5716          and.l     #65535,D2
00003434  FFFF      
                    5717   ; if(Condition == (unsigned short int)(0x04))
00003436  0C42 0004 5718          cmp.w     #4,D2
0000343A  660E      5719          bne.s     DecodeBranchCondition_1
                    5720   ; strcatInstruction("CC") ;
0000343C  4879 0000 5721          pea       @m68kde~1_180.L
00003440  7172      
00003442  4E92      5722          jsr       (A2)
00003444  584F      5723          addq.w    #4,A7
00003446  6000 011C 5724          bra       DecodeBranchCondition_30
                    5725   DecodeBranchCondition_1:
                    5726   ; else if(Condition == (unsigned short int)(0x05))
0000344A  0C42 0005 5727          cmp.w     #5,D2
0000344E  660E      5728          bne.s     DecodeBranchCondition_3
                    5729   ; strcatInstruction("CS") ;
00003450  4879 0000 5730          pea       @m68kde~1_181.L
00003454  7176      
00003456  4E92      5731          jsr       (A2)
00003458  584F      5732          addq.w    #4,A7
0000345A  6000 0108 5733          bra       DecodeBranchCondition_30
                    5734   DecodeBranchCondition_3:
                    5735   ; else if(Condition == (unsigned short int)(0x07))
0000345E  0C42 0007 5736          cmp.w     #7,D2
00003462  660E      5737          bne.s     DecodeBranchCondition_5
                    5738   ; strcatInstruction("EQ") ;
00003464  4879 0000 5739          pea       @m68kde~1_182.L
00003468  717A      
0000346A  4E92      5740          jsr       (A2)
0000346C  584F      5741          addq.w    #4,A7
0000346E  6000 00F4 5742          bra       DecodeBranchCondition_30
                    5743   DecodeBranchCondition_5:
                    5744   ; else if(Condition == (unsigned short int)(0x0C))
00003472  0C42 000C 5745          cmp.w     #12,D2
00003476  660E      5746          bne.s     DecodeBranchCondition_7
                    5747   ; strcatInstruction("GE") ;
00003478  4879 0000 5748          pea       @m68kde~1_183.L
0000347C  717E      
0000347E  4E92      5749          jsr       (A2)
00003480  584F      5750          addq.w    #4,A7
00003482  6000 00E0 5751          bra       DecodeBranchCondition_30
                    5752   DecodeBranchCondition_7:
                    5753   ; else if(Condition == (unsigned short int)(0x0E))
00003486  0C42 000E 5754          cmp.w     #14,D2
0000348A  660E      5755          bne.s     DecodeBranchCondition_9
                    5756   ; strcatInstruction("GT") ;
0000348C  4879 0000 5757          pea       @m68kde~1_184.L
00003490  7182      
00003492  4E92      5758          jsr       (A2)
00003494  584F      5759          addq.w    #4,A7
00003496  6000 00CC 5760          bra       DecodeBranchCondition_30
                    5761   DecodeBranchCondition_9:
                    5762   ; else if(Condition == (unsigned short int)(0x02))
0000349A  0C42 0002 5763          cmp.w     #2,D2
0000349E  660E      5764          bne.s     DecodeBranchCondition_11
                    5765   ; strcatInstruction("HI") ;
000034A0  4879 0000 5766          pea       @m68kde~1_185.L
000034A4  7186      
000034A6  4E92      5767          jsr       (A2)
000034A8  584F      5768          addq.w    #4,A7
000034AA  6000 00B8 5769          bra       DecodeBranchCondition_30
                    5770   DecodeBranchCondition_11:
                    5771   ; else if(Condition == (unsigned short int)(0x0F))
000034AE  0C42 000F 5772          cmp.w     #15,D2
000034B2  660E      5773          bne.s     DecodeBranchCondition_13
                    5774   ; strcatInstruction("LE") ;
000034B4  4879 0000 5775          pea       @m68kde~1_186.L
000034B8  718A      
000034BA  4E92      5776          jsr       (A2)
000034BC  584F      5777          addq.w    #4,A7
000034BE  6000 00A4 5778          bra       DecodeBranchCondition_30
                    5779   DecodeBranchCondition_13:
                    5780   ; else if(Condition == (unsigned short int)(0x03))
000034C2  0C42 0003 5781          cmp.w     #3,D2
000034C6  660E      5782          bne.s     DecodeBranchCondition_15
                    5783   ; strcatInstruction("LS") ;
000034C8  4879 0000 5784          pea       @m68kde~1_187.L
000034CC  718E      
000034CE  4E92      5785          jsr       (A2)
000034D0  584F      5786          addq.w    #4,A7
000034D2  6000 0090 5787          bra       DecodeBranchCondition_30
                    5788   DecodeBranchCondition_15:
                    5789   ; else if(Condition == (unsigned short int)(0x0D))
000034D6  0C42 000D 5790          cmp.w     #13,D2
000034DA  660E      5791          bne.s     DecodeBranchCondition_17
                    5792   ; strcatInstruction("LT") ;
000034DC  4879 0000 5793          pea       @m68kde~1_188.L
000034E0  7192      
000034E2  4E92      5794          jsr       (A2)
000034E4  584F      5795          addq.w    #4,A7
000034E6  6000 007C 5796          bra       DecodeBranchCondition_30
                    5797   DecodeBranchCondition_17:
                    5798   ; else if(Condition == (unsigned short int)(0x0B))
000034EA  0C42 000B 5799          cmp.w     #11,D2
000034EE  660E      5800          bne.s     DecodeBranchCondition_19
                    5801   ; strcatInstruction("MI") ;
000034F0  4879 0000 5802          pea       @m68kde~1_189.L
000034F4  7196      
000034F6  4E92      5803          jsr       (A2)
000034F8  584F      5804          addq.w    #4,A7
000034FA  6000 0068 5805          bra       DecodeBranchCondition_30
                    5806   DecodeBranchCondition_19:
                    5807   ; else if(Condition == (unsigned short int)(0x06))
000034FE  0C42 0006 5808          cmp.w     #6,D2
00003502  660E      5809          bne.s     DecodeBranchCondition_21
                    5810   ; strcatInstruction("NE") ;
00003504  4879 0000 5811          pea       @m68kde~1_190.L
00003508  719A      
0000350A  4E92      5812          jsr       (A2)
0000350C  584F      5813          addq.w    #4,A7
0000350E  6000 0054 5814          bra       DecodeBranchCondition_30
                    5815   DecodeBranchCondition_21:
                    5816   ; else if(Condition == (unsigned short int)(0x0A))
00003512  0C42 000A 5817          cmp.w     #10,D2
00003516  660E      5818          bne.s     DecodeBranchCondition_23
                    5819   ; strcatInstruction("PL") ;
00003518  4879 0000 5820          pea       @m68kde~1_191.L
0000351C  719E      
0000351E  4E92      5821          jsr       (A2)
00003520  584F      5822          addq.w    #4,A7
00003522  6000 0040 5823          bra       DecodeBranchCondition_30
                    5824   DecodeBranchCondition_23:
                    5825   ; else if(Condition == (unsigned short int)(0x09))
00003526  0C42 0009 5826          cmp.w     #9,D2
0000352A  660C      5827          bne.s     DecodeBranchCondition_25
                    5828   ; strcatInstruction("VS") ;
0000352C  4879 0000 5829          pea       @m68kde~1_192.L
00003530  71A2      
00003532  4E92      5830          jsr       (A2)
00003534  584F      5831          addq.w    #4,A7
00003536  602C      5832          bra.s     DecodeBranchCondition_30
                    5833   DecodeBranchCondition_25:
                    5834   ; else if(Condition == (unsigned short int)(0x08))
00003538  0C42 0008 5835          cmp.w     #8,D2
0000353C  660C      5836          bne.s     DecodeBranchCondition_27
                    5837   ; strcatInstruction("VC") ;
0000353E  4879 0000 5838          pea       @m68kde~1_193.L
00003542  71A6      
00003544  4E92      5839          jsr       (A2)
00003546  584F      5840          addq.w    #4,A7
00003548  601A      5841          bra.s     DecodeBranchCondition_30
                    5842   DecodeBranchCondition_27:
                    5843   ; else if(Condition == (unsigned short int)(0))
0000354A  4A42      5844          tst.w     D2
0000354C  660C      5845          bne.s     DecodeBranchCondition_29
                    5846   ; strcatInstruction("RA") ;
0000354E  4879 0000 5847          pea       @m68kde~1_194.L
00003552  71AA      
00003554  4E92      5848          jsr       (A2)
00003556  584F      5849          addq.w    #4,A7
00003558  600A      5850          bra.s     DecodeBranchCondition_30
                    5851   DecodeBranchCondition_29:
                    5852   ; else
                    5853   ; strcatInstruction("SR");
0000355A  4879 0000 5854          pea       @m68kde~1_195.L
0000355E  71AE      
00003560  4E92      5855          jsr       (A2)
00003562  584F      5856          addq.w    #4,A7
                    5857   DecodeBranchCondition_30:
                    5858   ; strcatInstruction(" ") ;
00003564  4879 0000 5859          pea       @m68kde~1_30.L
00003568  6238      
0000356A  4E92      5860          jsr       (A2)
0000356C  584F      5861          addq.w    #4,A7
0000356E  4CDF 0404 5862          movem.l   (A7)+,D2/A2
00003572  4E5E      5863          unlk      A6
00003574  4E75      5864          rts
                    5865   ; }
                    5866   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    5867   ; {
                    5868   _DisassembleInstruction:
00003576  4E56 FFD8 5869          link      A6,#-40
0000357A  48E7 3F3C 5870          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000357E  242E 0008 5871          move.l    8(A6),D2
00003582  45F9 0803 5872          lea       _InstructionSize.L,A2
00003586  017E      
00003588  47F8 0CE6 5873          lea       _strcpyInstruction.L,A3
0000358C  49F9 0803 5874          lea       _TempString.L,A4
00003590  0546      
00003592  4BF9 0000 5875          lea       _sprintf.L,A5
00003596  5586      
                    5876   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
00003598  2042      5877          move.l    D2,A0
0000359A  3010      5878          move.w    (A0),D0
0000359C  E040      5879          asr.w     #8,D0
0000359E  E840      5880          asr.w     #4,D0
000035A0  3D40 FFDA 5881          move.w    D0,-38(A6)
                    5882   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
000035A4  2042      5883          move.l    D2,A0
000035A6  3010      5884          move.w    (A0),D0
000035A8  C07C 0FFF 5885          and.w     #4095,D0
000035AC  3D40 FFDC 5886          move.w    D0,-36(A6)
                    5887   ; unsigned short int SourceBits, DestBits, Size ;
                    5888   ; unsigned char *Mode, Condition;
                    5889   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    5890   ; unsigned short int DataRegister, AddressRegister;
                    5891   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    5892   ; signed short int Displacement16Bit;
                    5893   ; short int Mask, DoneSlash;
                    5894   ; int i;
                    5895   ; strcpyInstruction("Unknown") ;
000035B0  4879 0000 5896          pea       @m68kde~1_196.L
000035B4  71B2      
000035B6  4E93      5897          jsr       (A3)
000035B8  584F      5898          addq.w    #4,A7
                    5899   ; /////////////////////////////////////////////////////////////////////////////////
                    5900   ; // if instruction is ABCD
                    5901   ; /////////////////////////////////////////////////////////////////////////////////
                    5902   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
000035BA  2042      5903          move.l    D2,A0
000035BC  3010      5904          move.w    (A0),D0
000035BE  C07C F1F0 5905          and.w     #61936,D0
000035C2  0C40 C100 5906          cmp.w     #49408,D0
000035C6  6600 008C 5907          bne       DisassembleInstruction_4
                    5908   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
000035CA  2042      5909          move.l    D2,A0
000035CC  3010      5910          move.w    (A0),D0
000035CE  E040      5911          asr.w     #8,D0
000035D0  E240      5912          asr.w     #1,D0
000035D2  C07C 0007 5913          and.w     #7,D0
000035D6  3D40 FFE0 5914          move.w    D0,-32(A6)
                    5915   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
000035DA  2042      5916          move.l    D2,A0
000035DC  3010      5917          move.w    (A0),D0
000035DE  C07C 0007 5918          and.w     #7,D0
000035E2  3D40 FFDE 5919          move.w    D0,-34(A6)
                    5920   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000035E6  2042      5921          move.l    D2,A0
000035E8  3010      5922          move.w    (A0),D0
000035EA  E640      5923          asr.w     #3,D0
000035EC  48C0      5924          ext.l     D0
000035EE  C0BC 0000 5925          and.l     #1,D0
000035F2  0001      
000035F4  2D40 FFE4 5926          move.l    D0,-28(A6)
                    5927   ; if(Mode == 0)
000035F8  202E FFE4 5928          move.l    -28(A6),D0
000035FC  662C      5929          bne.s     DisassembleInstruction_3
                    5930   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
000035FE  322E FFE0 5931          move.w    -32(A6),D1
00003602  C2BC 0000 5932          and.l     #65535,D1
00003606  FFFF      
00003608  2F01      5933          move.l    D1,-(A7)
0000360A  322E FFDE 5934          move.w    -34(A6),D1
0000360E  C2BC 0000 5935          and.l     #65535,D1
00003612  FFFF      
00003614  2F01      5936          move.l    D1,-(A7)
00003616  4879 0000 5937          pea       @m68kde~1_197.L
0000361A  71BA      
0000361C  4879 0803 5938          pea       _Instruction.L
00003620  04E2      
00003622  4E95      5939          jsr       (A5)
00003624  DEFC 0010 5940          add.w     #16,A7
00003628  602A      5941          bra.s     DisassembleInstruction_4
                    5942   DisassembleInstruction_3:
                    5943   ; else
                    5944   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
0000362A  322E FFE0 5945          move.w    -32(A6),D1
0000362E  C2BC 0000 5946          and.l     #65535,D1
00003632  FFFF      
00003634  2F01      5947          move.l    D1,-(A7)
00003636  322E FFDE 5948          move.w    -34(A6),D1
0000363A  C2BC 0000 5949          and.l     #65535,D1
0000363E  FFFF      
00003640  2F01      5950          move.l    D1,-(A7)
00003642  4879 0000 5951          pea       @m68kde~1_198.L
00003646  71C8      
00003648  4879 0803 5952          pea       _Instruction.L
0000364C  04E2      
0000364E  4E95      5953          jsr       (A5)
00003650  DEFC 0010 5954          add.w     #16,A7
                    5955   DisassembleInstruction_4:
                    5956   ; }
                    5957   ; /////////////////////////////////////////////////////////////////////////////////
                    5958   ; // if instruction is ADD or ADDA
                    5959   ; /////////////////////////////////////////////////////////////////////////////////
                    5960   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
00003654  2042      5961          move.l    D2,A0
00003656  3010      5962          move.w    (A0),D0
00003658  C07C F000 5963          and.w     #61440,D0
0000365C  0C40 D000 5964          cmp.w     #53248,D0
00003660  6600 008C 5965          bne       DisassembleInstruction_8
                    5966   ; InstructionSize = 1;
00003664  24BC 0000 5967          move.l    #1,(A2)
00003668  0001      
                    5968   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
0000366A  2042      5969          move.l    D2,A0
0000366C  3010      5970          move.w    (A0),D0
0000366E  EC40      5971          asr.w     #6,D0
00003670  C07C 0007 5972          and.w     #7,D0
00003674  3600      5973          move.w    D0,D3
                    5974   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00003676  0C43 0003 5975          cmp.w     #3,D3
0000367A  6708      5976          beq.s     DisassembleInstruction_9
0000367C  0C43 0007 5977          cmp.w     #7,D3
00003680  6600 005A 5978          bne       DisassembleInstruction_7
                    5979   DisassembleInstruction_9:
                    5980   ; {
                    5981   ; if(OpMode == (unsigned short int)(0x0003))
00003684  0C43 0003 5982          cmp.w     #3,D3
00003688  660C      5983          bne.s     DisassembleInstruction_10
                    5984   ; strcpyInstruction("ADDA.W ") ;
0000368A  4879 0000 5985          pea       @m68kde~1_199.L
0000368E  71DC      
00003690  4E93      5986          jsr       (A3)
00003692  584F      5987          addq.w    #4,A7
00003694  600A      5988          bra.s     DisassembleInstruction_11
                    5989   DisassembleInstruction_10:
                    5990   ; else
                    5991   ; strcpyInstruction("ADDA.L ") ;
00003696  4879 0000 5992          pea       @m68kde~1_200.L
0000369A  71E4      
0000369C  4E93      5993          jsr       (A3)
0000369E  584F      5994          addq.w    #4,A7
                    5995   DisassembleInstruction_11:
                    5996   ; Decode6BitEA(OpCode,0,0,0)  ;
000036A0  42A7      5997          clr.l     -(A7)
000036A2  42A7      5998          clr.l     -(A7)
000036A4  42A7      5999          clr.l     -(A7)
000036A6  2F02      6000          move.l    D2,-(A7)
000036A8  4EB8 2F62 6001          jsr       _Decode6BitEA
000036AC  DEFC 0010 6002          add.w     #16,A7
                    6003   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000036B0  2042      6004          move.l    D2,A0
000036B2  3210      6005          move.w    (A0),D1
000036B4  E041      6006          asr.w     #8,D1
000036B6  E241      6007          asr.w     #1,D1
000036B8  C27C 0007 6008          and.w     #7,D1
000036BC  C2BC 0000 6009          and.l     #65535,D1
000036C0  FFFF      
000036C2  2F01      6010          move.l    D1,-(A7)
000036C4  4879 0000 6011          pea       @m68kde~1_201.L
000036C8  71EC      
000036CA  2F0C      6012          move.l    A4,-(A7)
000036CC  4E95      6013          jsr       (A5)
000036CE  DEFC 000C 6014          add.w     #12,A7
                    6015   ; strcatInstruction(TempString) ;
000036D2  2F0C      6016          move.l    A4,-(A7)
000036D4  4EB8 0CCC 6017          jsr       _strcatInstruction
000036D8  584F      6018          addq.w    #4,A7
000036DA  6012      6019          bra.s     DisassembleInstruction_8
                    6020   DisassembleInstruction_7:
                    6021   ; }
                    6022   ; else {
                    6023   ; strcpyInstruction("ADD") ;
000036DC  4879 0000 6024          pea       @m68kde~1_202.L
000036E0  71F2      
000036E2  4E93      6025          jsr       (A3)
000036E4  584F      6026          addq.w    #4,A7
                    6027   ; Decode3BitOperandMode(OpCode) ;
000036E6  2F02      6028          move.l    D2,-(A7)
000036E8  4EB8 338A 6029          jsr       _Decode3BitOperandMode
000036EC  584F      6030          addq.w    #4,A7
                    6031   DisassembleInstruction_8:
                    6032   ; }
                    6033   ; }
                    6034   ; /////////////////////////////////////////////////////////////////////////////////
                    6035   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6036   ; /////////////////////////////////////////////////////////////////////////////////
                    6037   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
000036EE  2042      6038          move.l    D2,A0
000036F0  3010      6039          move.w    (A0),D0
000036F2  C07C FF00 6040          and.w     #65280,D0
000036F6  0C40 0600 6041          cmp.w     #1536,D0
000036FA  6604      6042          bne.s     DisassembleInstruction_14
000036FC  7001      6043          moveq     #1,D0
000036FE  6002      6044          bra.s     DisassembleInstruction_15
                    6045   DisassembleInstruction_14:
00003700  4280      6046          clr.l     D0
                    6047   DisassembleInstruction_15:
00003702  2042      6048          move.l    D2,A0
00003704  3210      6049          move.w    (A0),D1
00003706  C27C FF00 6050          and.w     #65280,D1
0000370A  0C41 0200 6051          cmp.w     #512,D1
0000370E  6604      6052          bne.s     DisassembleInstruction_16
00003710  7201      6053          moveq     #1,D1
00003712  6002      6054          bra.s     DisassembleInstruction_17
                    6055   DisassembleInstruction_16:
00003714  4281      6056          clr.l     D1
                    6057   DisassembleInstruction_17:
00003716  8041      6058          or.w      D1,D0
00003718  2042      6059          move.l    D2,A0
0000371A  3210      6060          move.w    (A0),D1
0000371C  C27C FF00 6061          and.w     #65280,D1
00003720  0C41 0C00 6062          cmp.w     #3072,D1
00003724  6604      6063          bne.s     DisassembleInstruction_18
00003726  7201      6064          moveq     #1,D1
00003728  6002      6065          bra.s     DisassembleInstruction_19
                    6066   DisassembleInstruction_18:
0000372A  4281      6067          clr.l     D1
                    6068   DisassembleInstruction_19:
0000372C  8041      6069          or.w      D1,D0
0000372E  2042      6070          move.l    D2,A0
00003730  3210      6071          move.w    (A0),D1
00003732  C27C FF00 6072          and.w     #65280,D1
00003736  0C41 0A00 6073          cmp.w     #2560,D1
0000373A  6604      6074          bne.s     DisassembleInstruction_20
0000373C  7201      6075          moveq     #1,D1
0000373E  6002      6076          bra.s     DisassembleInstruction_21
                    6077   DisassembleInstruction_20:
00003740  4281      6078          clr.l     D1
                    6079   DisassembleInstruction_21:
00003742  8041      6080          or.w      D1,D0
00003744  2042      6081          move.l    D2,A0
00003746  3210      6082          move.w    (A0),D1
00003748  C27C FF00 6083          and.w     #65280,D1
0000374C  6604      6084          bne.s     DisassembleInstruction_22
0000374E  7201      6085          moveq     #1,D1
00003750  6002      6086          bra.s     DisassembleInstruction_23
                    6087   DisassembleInstruction_22:
00003752  4281      6088          clr.l     D1
                    6089   DisassembleInstruction_23:
00003754  8041      6090          or.w      D1,D0
00003756  2042      6091          move.l    D2,A0
00003758  3210      6092          move.w    (A0),D1
0000375A  C27C FF00 6093          and.w     #65280,D1
0000375E  0C41 0400 6094          cmp.w     #1024,D1
00003762  6604      6095          bne.s     DisassembleInstruction_24
00003764  7201      6096          moveq     #1,D1
00003766  6002      6097          bra.s     DisassembleInstruction_25
                    6098   DisassembleInstruction_24:
00003768  4281      6099          clr.l     D1
                    6100   DisassembleInstruction_25:
0000376A  8041      6101          or.w      D1,D0
0000376C  6700 00E4 6102          beq       DisassembleInstruction_12
                    6103   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6104   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6105   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6106   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6107   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6108   ; {
                    6109   ; InstructionSize = 1;
00003770  24BC 0000 6110          move.l    #1,(A2)
00003774  0001      
                    6111   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
00003776  2042      6112          move.l    D2,A0
00003778  3010      6113          move.w    (A0),D0
0000377A  C07C FF00 6114          and.w     #65280,D0
0000377E  0C40 0600 6115          cmp.w     #1536,D0
00003782  660E      6116          bne.s     DisassembleInstruction_26
                    6117   ; strcpyInstruction("ADDI") ;
00003784  4879 0000 6118          pea       @m68kde~1_203.L
00003788  71F6      
0000378A  4E93      6119          jsr       (A3)
0000378C  584F      6120          addq.w    #4,A7
0000378E  6000 0084 6121          bra       DisassembleInstruction_36
                    6122   DisassembleInstruction_26:
                    6123   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003792  2042      6124          move.l    D2,A0
00003794  3010      6125          move.w    (A0),D0
00003796  C07C FF00 6126          and.w     #65280,D0
0000379A  0C40 0200 6127          cmp.w     #512,D0
0000379E  660E      6128          bne.s     DisassembleInstruction_28
                    6129   ; strcpyInstruction("ANDI") ;
000037A0  4879 0000 6130          pea       @m68kde~1_204.L
000037A4  71FC      
000037A6  4E93      6131          jsr       (A3)
000037A8  584F      6132          addq.w    #4,A7
000037AA  6000 0068 6133          bra       DisassembleInstruction_36
                    6134   DisassembleInstruction_28:
                    6135   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
000037AE  2042      6136          move.l    D2,A0
000037B0  3010      6137          move.w    (A0),D0
000037B2  C07C FF00 6138          and.w     #65280,D0
000037B6  0C40 0C00 6139          cmp.w     #3072,D0
000037BA  660E      6140          bne.s     DisassembleInstruction_30
                    6141   ; strcpyInstruction("CMPI") ;
000037BC  4879 0000 6142          pea       @m68kde~1_205.L
000037C0  7202      
000037C2  4E93      6143          jsr       (A3)
000037C4  584F      6144          addq.w    #4,A7
000037C6  6000 004C 6145          bra       DisassembleInstruction_36
                    6146   DisassembleInstruction_30:
                    6147   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
000037CA  2042      6148          move.l    D2,A0
000037CC  3010      6149          move.w    (A0),D0
000037CE  C07C FF00 6150          and.w     #65280,D0
000037D2  0C40 0A00 6151          cmp.w     #2560,D0
000037D6  660E      6152          bne.s     DisassembleInstruction_32
                    6153   ; strcpyInstruction("EORI") ;
000037D8  4879 0000 6154          pea       @m68kde~1_206.L
000037DC  7208      
000037DE  4E93      6155          jsr       (A3)
000037E0  584F      6156          addq.w    #4,A7
000037E2  6000 0030 6157          bra       DisassembleInstruction_36
                    6158   DisassembleInstruction_32:
                    6159   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
000037E6  2042      6160          move.l    D2,A0
000037E8  3010      6161          move.w    (A0),D0
000037EA  C07C FF00 6162          and.w     #65280,D0
000037EE  660C      6163          bne.s     DisassembleInstruction_34
                    6164   ; strcpyInstruction("ORI") ;
000037F0  4879 0000 6165          pea       @m68kde~1_207.L
000037F4  720E      
000037F6  4E93      6166          jsr       (A3)
000037F8  584F      6167          addq.w    #4,A7
000037FA  6018      6168          bra.s     DisassembleInstruction_36
                    6169   DisassembleInstruction_34:
                    6170   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
000037FC  2042      6171          move.l    D2,A0
000037FE  3010      6172          move.w    (A0),D0
00003800  C07C FF00 6173          and.w     #65280,D0
00003804  0C40 0400 6174          cmp.w     #1024,D0
00003808  660A      6175          bne.s     DisassembleInstruction_36
                    6176   ; strcpyInstruction("SUBI") ;
0000380A  4879 0000 6177          pea       @m68kde~1_208.L
0000380E  7212      
00003810  4E93      6178          jsr       (A3)
00003812  584F      6179          addq.w    #4,A7
                    6180   DisassembleInstruction_36:
                    6181   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003814  2042      6182          move.l    D2,A0
00003816  3210      6183          move.w    (A0),D1
00003818  C2BC 0000 6184          and.l     #65535,D1
0000381C  FFFF      
0000381E  2F01      6185          move.l    D1,-(A7)
00003820  4EB8 2CCE 6186          jsr       _Decode2BitOperandSize
00003824  584F      6187          addq.w    #4,A7
00003826  3E00      6188          move.w    D0,D7
                    6189   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
00003828  2F02      6190          move.l    D2,-(A7)
0000382A  4EB8 2E52 6191          jsr       _DecodeBWLDataAfterOpCode
0000382E  584F      6192          addq.w    #4,A7
                    6193   ; strcatInstruction(",") ;
00003830  4879 0000 6194          pea       @m68kde~1_179.L
00003834  7170      
00003836  4EB8 0CCC 6195          jsr       _strcatInstruction
0000383A  584F      6196          addq.w    #4,A7
                    6197   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
0000383C  42A7      6198          clr.l     -(A7)
0000383E  CEBC 0000 6199          and.l     #65535,D7
00003842  FFFF      
00003844  2F07      6200          move.l    D7,-(A7)
00003846  42A7      6201          clr.l     -(A7)
00003848  2F02      6202          move.l    D2,-(A7)
0000384A  4EB8 2F62 6203          jsr       _Decode6BitEA
0000384E  DEFC 0010 6204          add.w     #16,A7
                    6205   DisassembleInstruction_12:
                    6206   ; }
                    6207   ; /////////////////////////////////////////////////////////////////////////////////
                    6208   ; // if instruction is ADDI #data,SR
                    6209   ; /////////////////////////////////////////////////////////////////////////////////
                    6210   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003852  2042      6211          move.l    D2,A0
00003854  3010      6212          move.w    (A0),D0
00003856  0C40 027C 6213          cmp.w     #636,D0
0000385A  6622      6214          bne.s     DisassembleInstruction_38
                    6215   ; InstructionSize = 2;
0000385C  24BC 0000 6216          move.l    #2,(A2)
00003860  0002      
                    6217   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003862  2042      6218          move.l    D2,A0
00003864  3228 0002 6219          move.w    2(A0),D1
00003868  48C1      6220          ext.l     D1
0000386A  2F01      6221          move.l    D1,-(A7)
0000386C  4879 0000 6222          pea       @m68kde~1_209.L
00003870  7218      
00003872  4879 0803 6223          pea       _Instruction.L
00003876  04E2      
00003878  4E95      6224          jsr       (A5)
0000387A  DEFC 000C 6225          add.w     #12,A7
                    6226   DisassembleInstruction_38:
                    6227   ; }
                    6228   ; /////////////////////////////////////////////////////////////////////////////////
                    6229   ; // if instruction is ADDQ
                    6230   ; /////////////////////////////////////////////////////////////////////////////////
                    6231   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
0000387E  2042      6232          move.l    D2,A0
00003880  3010      6233          move.w    (A0),D0
00003882  C07C F100 6234          and.w     #61696,D0
00003886  0C40 5000 6235          cmp.w     #20480,D0
0000388A  6600 005E 6236          bne       DisassembleInstruction_40
                    6237   ; InstructionSize = 1;
0000388E  24BC 0000 6238          move.l    #1,(A2)
00003892  0001      
                    6239   ; strcpyInstruction("ADDQ") ;
00003894  4879 0000 6240          pea       @m68kde~1_210.L
00003898  7226      
0000389A  4E93      6241          jsr       (A3)
0000389C  584F      6242          addq.w    #4,A7
                    6243   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000389E  2042      6244          move.l    D2,A0
000038A0  3210      6245          move.w    (A0),D1
000038A2  C2BC 0000 6246          and.l     #65535,D1
000038A6  FFFF      
000038A8  2F01      6247          move.l    D1,-(A7)
000038AA  4EB8 2CCE 6248          jsr       _Decode2BitOperandSize
000038AE  584F      6249          addq.w    #4,A7
                    6250   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
000038B0  2042      6251          move.l    D2,A0
000038B2  3210      6252          move.w    (A0),D1
000038B4  E041      6253          asr.w     #8,D1
000038B6  E241      6254          asr.w     #1,D1
000038B8  C27C 0007 6255          and.w     #7,D1
000038BC  C2BC 0000 6256          and.l     #65535,D1
000038C0  FFFF      
000038C2  2F01      6257          move.l    D1,-(A7)
000038C4  4879 0000 6258          pea       @m68kde~1_211.L
000038C8  722C      
000038CA  2F0C      6259          move.l    A4,-(A7)
000038CC  4E95      6260          jsr       (A5)
000038CE  DEFC 000C 6261          add.w     #12,A7
                    6262   ; strcatInstruction(TempString) ;
000038D2  2F0C      6263          move.l    A4,-(A7)
000038D4  4EB8 0CCC 6264          jsr       _strcatInstruction
000038D8  584F      6265          addq.w    #4,A7
                    6266   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
000038DA  42A7      6267          clr.l     -(A7)
000038DC  42A7      6268          clr.l     -(A7)
000038DE  42A7      6269          clr.l     -(A7)
000038E0  2F02      6270          move.l    D2,-(A7)
000038E2  4EB8 2F62 6271          jsr       _Decode6BitEA
000038E6  DEFC 0010 6272          add.w     #16,A7
                    6273   DisassembleInstruction_40:
                    6274   ; }
                    6275   ; /////////////////////////////////////////////////////////////////////////////////
                    6276   ; // if instruction is ADDX
                    6277   ; /////////////////////////////////////////////////////////////////////////////////
                    6278   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
000038EA  2042      6279          move.l    D2,A0
000038EC  3010      6280          move.w    (A0),D0
000038EE  C07C F130 6281          and.w     #61744,D0
000038F2  0C40 D100 6282          cmp.w     #53504,D0
000038F6  6600 00A4 6283          bne       DisassembleInstruction_44
                    6284   ; InstructionSize = 1;
000038FA  24BC 0000 6285          move.l    #1,(A2)
000038FE  0001      
                    6286   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003900  2042      6287          move.l    D2,A0
00003902  3010      6288          move.w    (A0),D0
00003904  EC40      6289          asr.w     #6,D0
00003906  C07C 0003 6290          and.w     #3,D0
0000390A  3600      6291          move.w    D0,D3
                    6292   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
0000390C  0C43 0003 6293          cmp.w     #3,D3
00003910  6700 008A 6294          beq       DisassembleInstruction_44
                    6295   ; {
                    6296   ; strcpyInstruction("ADDX") ;
00003914  4879 0000 6297          pea       @m68kde~1_212.L
00003918  7232      
0000391A  4E93      6298          jsr       (A3)
0000391C  584F      6299          addq.w    #4,A7
                    6300   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000391E  2042      6301          move.l    D2,A0
00003920  3210      6302          move.w    (A0),D1
00003922  C2BC 0000 6303          and.l     #65535,D1
00003926  FFFF      
00003928  2F01      6304          move.l    D1,-(A7)
0000392A  4EB8 2CCE 6305          jsr       _Decode2BitOperandSize
0000392E  584F      6306          addq.w    #4,A7
                    6307   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003930  2042      6308          move.l    D2,A0
00003932  3010      6309          move.w    (A0),D0
00003934  C07C 0008 6310          and.w     #8,D0
00003938  6600 0030 6311          bne       DisassembleInstruction_46
                    6312   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
0000393C  2042      6313          move.l    D2,A0
0000393E  3210      6314          move.w    (A0),D1
00003940  E041      6315          asr.w     #8,D1
00003942  E241      6316          asr.w     #1,D1
00003944  C27C 0007 6317          and.w     #7,D1
00003948  48C1      6318          ext.l     D1
0000394A  2F01      6319          move.l    D1,-(A7)
0000394C  2042      6320          move.l    D2,A0
0000394E  3210      6321          move.w    (A0),D1
00003950  C27C 0007 6322          and.w     #7,D1
00003954  48C1      6323          ext.l     D1
00003956  2F01      6324          move.l    D1,-(A7)
00003958  4879 0000 6325          pea       @m68kde~1_213.L
0000395C  7238      
0000395E  2F0C      6326          move.l    A4,-(A7)
00003960  4E95      6327          jsr       (A5)
00003962  DEFC 0010 6328          add.w     #16,A7
00003966  6000 002C 6329          bra       DisassembleInstruction_47
                    6330   DisassembleInstruction_46:
                    6331   ; else        // -(ax),-(ay) mode used
                    6332   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
0000396A  2042      6333          move.l    D2,A0
0000396C  3210      6334          move.w    (A0),D1
0000396E  E041      6335          asr.w     #8,D1
00003970  E241      6336          asr.w     #1,D1
00003972  C27C 0007 6337          and.w     #7,D1
00003976  48C1      6338          ext.l     D1
00003978  2F01      6339          move.l    D1,-(A7)
0000397A  2042      6340          move.l    D2,A0
0000397C  3210      6341          move.w    (A0),D1
0000397E  C27C 0007 6342          and.w     #7,D1
00003982  48C1      6343          ext.l     D1
00003984  2F01      6344          move.l    D1,-(A7)
00003986  4879 0000 6345          pea       @m68kde~1_214.L
0000398A  7240      
0000398C  2F0C      6346          move.l    A4,-(A7)
0000398E  4E95      6347          jsr       (A5)
00003990  DEFC 0010 6348          add.w     #16,A7
                    6349   DisassembleInstruction_47:
                    6350   ; strcatInstruction(TempString) ;
00003994  2F0C      6351          move.l    A4,-(A7)
00003996  4EB8 0CCC 6352          jsr       _strcatInstruction
0000399A  584F      6353          addq.w    #4,A7
                    6354   DisassembleInstruction_44:
                    6355   ; }
                    6356   ; }
                    6357   ; /////////////////////////////////////////////////////////////////////////////////
                    6358   ; // if instruction is AND
                    6359   ; /////////////////////////////////////////////////////////////////////////////////
                    6360   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
0000399C  2042      6361          move.l    D2,A0
0000399E  3010      6362          move.w    (A0),D0
000039A0  C07C F000 6363          and.w     #61440,D0
000039A4  0C40 C000 6364          cmp.w     #49152,D0
000039A8  662A      6365          bne.s     DisassembleInstruction_50
                    6366   ; InstructionSize = 1;
000039AA  24BC 0000 6367          move.l    #1,(A2)
000039AE  0001      
                    6368   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6369   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
000039B0  2042      6370          move.l    D2,A0
000039B2  3010      6371          move.w    (A0),D0
000039B4  E840      6372          asr.w     #4,D0
000039B6  C07C 001F 6373          and.w     #31,D0
000039BA  3600      6374          move.w    D0,D3
                    6375   ; if(OpMode != (unsigned short int)(0x0010))   {
000039BC  0C43 0010 6376          cmp.w     #16,D3
000039C0  6712      6377          beq.s     DisassembleInstruction_50
                    6378   ; strcpyInstruction("AND") ;
000039C2  4879 0000 6379          pea       @m68kde~1_215.L
000039C6  724E      
000039C8  4E93      6380          jsr       (A3)
000039CA  584F      6381          addq.w    #4,A7
                    6382   ; Decode3BitOperandMode(OpCode) ;
000039CC  2F02      6383          move.l    D2,-(A7)
000039CE  4EB8 338A 6384          jsr       _Decode3BitOperandMode
000039D2  584F      6385          addq.w    #4,A7
                    6386   DisassembleInstruction_50:
                    6387   ; }
                    6388   ; }
                    6389   ; /////////////////////////////////////////////////////////////////////////////////
                    6390   ; // if instruction is ANDI to CCR
                    6391   ; /////////////////////////////////////////////////////////////////////////////////
                    6392   ; if(*OpCode == (unsigned short int)(0x023C))   {
000039D4  2042      6393          move.l    D2,A0
000039D6  3010      6394          move.w    (A0),D0
000039D8  0C40 023C 6395          cmp.w     #572,D0
000039DC  662A      6396          bne.s     DisassembleInstruction_52
                    6397   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
000039DE  2042      6398          move.l    D2,A0
000039E0  3228 0002 6399          move.w    2(A0),D1
000039E4  C27C 00FF 6400          and.w     #255,D1
000039E8  C2BC 0000 6401          and.l     #65535,D1
000039EC  FFFF      
000039EE  2F01      6402          move.l    D1,-(A7)
000039F0  4879 0000 6403          pea       @m68kde~1_216.L
000039F4  7252      
000039F6  4879 0803 6404          pea       _Instruction.L
000039FA  04E2      
000039FC  4E95      6405          jsr       (A5)
000039FE  DEFC 000C 6406          add.w     #12,A7
                    6407   ; InstructionSize = 2;
00003A02  24BC 0000 6408          move.l    #2,(A2)
00003A06  0002      
                    6409   DisassembleInstruction_52:
                    6410   ; }
                    6411   ; /////////////////////////////////////////////////////////////////////////////////
                    6412   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6413   ; /////////////////////////////////////////////////////////////////////////////////
                    6414   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003A08  2042      6415          move.l    D2,A0
00003A0A  3010      6416          move.w    (A0),D0
00003A0C  C07C F018 6417          and.w     #61464,D0
00003A10  0C40 E000 6418          cmp.w     #57344,D0
00003A14  6604      6419          bne.s     DisassembleInstruction_56
00003A16  7001      6420          moveq     #1,D0
00003A18  6002      6421          bra.s     DisassembleInstruction_57
                    6422   DisassembleInstruction_56:
00003A1A  4280      6423          clr.l     D0
                    6424   DisassembleInstruction_57:
00003A1C  2042      6425          move.l    D2,A0
00003A1E  3210      6426          move.w    (A0),D1
00003A20  C27C FEC0 6427          and.w     #65216,D1
00003A24  0C41 E0C0 6428          cmp.w     #57536,D1
00003A28  6604      6429          bne.s     DisassembleInstruction_58
00003A2A  7201      6430          moveq     #1,D1
00003A2C  6002      6431          bra.s     DisassembleInstruction_59
                    6432   DisassembleInstruction_58:
00003A2E  4281      6433          clr.l     D1
                    6434   DisassembleInstruction_59:
00003A30  8041      6435          or.w      D1,D0
00003A32  2042      6436          move.l    D2,A0
00003A34  3210      6437          move.w    (A0),D1
00003A36  C27C F018 6438          and.w     #61464,D1
00003A3A  0C41 E008 6439          cmp.w     #57352,D1
00003A3E  6604      6440          bne.s     DisassembleInstruction_60
00003A40  7201      6441          moveq     #1,D1
00003A42  6002      6442          bra.s     DisassembleInstruction_61
                    6443   DisassembleInstruction_60:
00003A44  4281      6444          clr.l     D1
                    6445   DisassembleInstruction_61:
00003A46  8041      6446          or.w      D1,D0
00003A48  2042      6447          move.l    D2,A0
00003A4A  3210      6448          move.w    (A0),D1
00003A4C  C27C FEC0 6449          and.w     #65216,D1
00003A50  0C41 E2C0 6450          cmp.w     #58048,D1
00003A54  6604      6451          bne.s     DisassembleInstruction_62
00003A56  7201      6452          moveq     #1,D1
00003A58  6002      6453          bra.s     DisassembleInstruction_63
                    6454   DisassembleInstruction_62:
00003A5A  4281      6455          clr.l     D1
                    6456   DisassembleInstruction_63:
00003A5C  8041      6457          or.w      D1,D0
00003A5E  2042      6458          move.l    D2,A0
00003A60  3210      6459          move.w    (A0),D1
00003A62  C27C F018 6460          and.w     #61464,D1
00003A66  0C41 E018 6461          cmp.w     #57368,D1
00003A6A  6604      6462          bne.s     DisassembleInstruction_64
00003A6C  7201      6463          moveq     #1,D1
00003A6E  6002      6464          bra.s     DisassembleInstruction_65
                    6465   DisassembleInstruction_64:
00003A70  4281      6466          clr.l     D1
                    6467   DisassembleInstruction_65:
00003A72  8041      6468          or.w      D1,D0
00003A74  2042      6469          move.l    D2,A0
00003A76  3210      6470          move.w    (A0),D1
00003A78  C27C FEC0 6471          and.w     #65216,D1
00003A7C  0C41 E6C0 6472          cmp.w     #59072,D1
00003A80  6604      6473          bne.s     DisassembleInstruction_66
00003A82  7201      6474          moveq     #1,D1
00003A84  6002      6475          bra.s     DisassembleInstruction_67
                    6476   DisassembleInstruction_66:
00003A86  4281      6477          clr.l     D1
                    6478   DisassembleInstruction_67:
00003A88  8041      6479          or.w      D1,D0
00003A8A  2042      6480          move.l    D2,A0
00003A8C  3210      6481          move.w    (A0),D1
00003A8E  C27C F018 6482          and.w     #61464,D1
00003A92  0C41 E010 6483          cmp.w     #57360,D1
00003A96  6604      6484          bne.s     DisassembleInstruction_68
00003A98  7201      6485          moveq     #1,D1
00003A9A  6002      6486          bra.s     DisassembleInstruction_69
                    6487   DisassembleInstruction_68:
00003A9C  4281      6488          clr.l     D1
                    6489   DisassembleInstruction_69:
00003A9E  8041      6490          or.w      D1,D0
00003AA0  2042      6491          move.l    D2,A0
00003AA2  3210      6492          move.w    (A0),D1
00003AA4  C27C FEC0 6493          and.w     #65216,D1
00003AA8  0C41 E4C0 6494          cmp.w     #58560,D1
00003AAC  6604      6495          bne.s     DisassembleInstruction_70
00003AAE  7201      6496          moveq     #1,D1
00003AB0  6002      6497          bra.s     DisassembleInstruction_71
                    6498   DisassembleInstruction_70:
00003AB2  4281      6499          clr.l     D1
                    6500   DisassembleInstruction_71:
00003AB4  8041      6501          or.w      D1,D0
00003AB6  6700 0252 6502          beq       DisassembleInstruction_73
                    6503   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6504   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6505   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6506   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6507   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6508   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6509   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6510   ; {
                    6511   ; InstructionSize = 1;
00003ABA  24BC 0000 6512          move.l    #1,(A2)
00003ABE  0001      
                    6513   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6514   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003AC0  2042      6515          move.l    D2,A0
00003AC2  3010      6516          move.w    (A0),D0
00003AC4  C07C 00C0 6517          and.w     #192,D0
00003AC8  0C40 00C0 6518          cmp.w     #192,D0
00003ACC  6600 00EA 6519          bne       DisassembleInstruction_72
                    6520   ; {
                    6521   ; // test direction by testing bit 8
                    6522   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003AD0  2042      6523          move.l    D2,A0
00003AD2  3010      6524          move.w    (A0),D0
00003AD4  C07C FEC0 6525          and.w     #65216,D0
00003AD8  0C40 E0C0 6526          cmp.w     #57536,D0
00003ADC  6624      6527          bne.s     DisassembleInstruction_77
                    6528   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003ADE  2042      6529          move.l    D2,A0
00003AE0  3010      6530          move.w    (A0),D0
00003AE2  C07C 0100 6531          and.w     #256,D0
00003AE6  0C40 0100 6532          cmp.w     #256,D0
00003AEA  660C      6533          bne.s     DisassembleInstruction_76
                    6534   ; strcpyInstruction("ASL") ;
00003AEC  4879 0000 6535          pea       @m68kde~1_217.L
00003AF0  7262      
00003AF2  4E93      6536          jsr       (A3)
00003AF4  584F      6537          addq.w    #4,A7
00003AF6  600A      6538          bra.s     DisassembleInstruction_77
                    6539   DisassembleInstruction_76:
                    6540   ; else
                    6541   ; strcpyInstruction("ASR") ;
00003AF8  4879 0000 6542          pea       @m68kde~1_218.L
00003AFC  7266      
00003AFE  4E93      6543          jsr       (A3)
00003B00  584F      6544          addq.w    #4,A7
                    6545   DisassembleInstruction_77:
                    6546   ; // test direction by testing bit 8
                    6547   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003B02  2042      6548          move.l    D2,A0
00003B04  3010      6549          move.w    (A0),D0
00003B06  C07C FEC0 6550          and.w     #65216,D0
00003B0A  0C40 E2C0 6551          cmp.w     #58048,D0
00003B0E  6624      6552          bne.s     DisassembleInstruction_81
                    6553   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003B10  2042      6554          move.l    D2,A0
00003B12  3010      6555          move.w    (A0),D0
00003B14  C07C 0100 6556          and.w     #256,D0
00003B18  0C40 0100 6557          cmp.w     #256,D0
00003B1C  660C      6558          bne.s     DisassembleInstruction_80
                    6559   ; strcpyInstruction("LSL") ;
00003B1E  4879 0000 6560          pea       @m68kde~1_219.L
00003B22  726A      
00003B24  4E93      6561          jsr       (A3)
00003B26  584F      6562          addq.w    #4,A7
00003B28  600A      6563          bra.s     DisassembleInstruction_81
                    6564   DisassembleInstruction_80:
                    6565   ; else
                    6566   ; strcpyInstruction("LSR") ;
00003B2A  4879 0000 6567          pea       @m68kde~1_220.L
00003B2E  726E      
00003B30  4E93      6568          jsr       (A3)
00003B32  584F      6569          addq.w    #4,A7
                    6570   DisassembleInstruction_81:
                    6571   ; // test direction by testing bit 8
                    6572   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003B34  2042      6573          move.l    D2,A0
00003B36  3010      6574          move.w    (A0),D0
00003B38  C07C FEC0 6575          and.w     #65216,D0
00003B3C  0C40 E6C0 6576          cmp.w     #59072,D0
00003B40  6624      6577          bne.s     DisassembleInstruction_85
                    6578   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003B42  2042      6579          move.l    D2,A0
00003B44  3010      6580          move.w    (A0),D0
00003B46  C07C 0100 6581          and.w     #256,D0
00003B4A  0C40 0100 6582          cmp.w     #256,D0
00003B4E  660C      6583          bne.s     DisassembleInstruction_84
                    6584   ; strcpyInstruction("ROL") ;
00003B50  4879 0000 6585          pea       @m68kde~1_221.L
00003B54  7272      
00003B56  4E93      6586          jsr       (A3)
00003B58  584F      6587          addq.w    #4,A7
00003B5A  600A      6588          bra.s     DisassembleInstruction_85
                    6589   DisassembleInstruction_84:
                    6590   ; else
                    6591   ; strcpyInstruction("ROR") ;
00003B5C  4879 0000 6592          pea       @m68kde~1_222.L
00003B60  7276      
00003B62  4E93      6593          jsr       (A3)
00003B64  584F      6594          addq.w    #4,A7
                    6595   DisassembleInstruction_85:
                    6596   ; // test direction by testing bit 8
                    6597   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003B66  2042      6598          move.l    D2,A0
00003B68  3010      6599          move.w    (A0),D0
00003B6A  C07C FEC0 6600          and.w     #65216,D0
00003B6E  0C40 E4C0 6601          cmp.w     #58560,D0
00003B72  6624      6602          bne.s     DisassembleInstruction_89
                    6603   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003B74  2042      6604          move.l    D2,A0
00003B76  3010      6605          move.w    (A0),D0
00003B78  C07C 0100 6606          and.w     #256,D0
00003B7C  0C40 0100 6607          cmp.w     #256,D0
00003B80  660C      6608          bne.s     DisassembleInstruction_88
                    6609   ; strcpyInstruction("ROXL") ;
00003B82  4879 0000 6610          pea       @m68kde~1_223.L
00003B86  727A      
00003B88  4E93      6611          jsr       (A3)
00003B8A  584F      6612          addq.w    #4,A7
00003B8C  600A      6613          bra.s     DisassembleInstruction_89
                    6614   DisassembleInstruction_88:
                    6615   ; else
                    6616   ; strcpyInstruction("ROXR") ;
00003B8E  4879 0000 6617          pea       @m68kde~1_224.L
00003B92  7280      
00003B94  4E93      6618          jsr       (A3)
00003B96  584F      6619          addq.w    #4,A7
                    6620   DisassembleInstruction_89:
                    6621   ; strcatInstruction("  ") ;
00003B98  4879 0000 6622          pea       @m68kde~1_15.L
00003B9C  6066      
00003B9E  4EB8 0CCC 6623          jsr       _strcatInstruction
00003BA2  584F      6624          addq.w    #4,A7
                    6625   ; Decode6BitEA(OpCode,0, 0,0) ;
00003BA4  42A7      6626          clr.l     -(A7)
00003BA6  42A7      6627          clr.l     -(A7)
00003BA8  42A7      6628          clr.l     -(A7)
00003BAA  2F02      6629          move.l    D2,-(A7)
00003BAC  4EB8 2F62 6630          jsr       _Decode6BitEA
00003BB0  DEFC 0010 6631          add.w     #16,A7
00003BB4  6000 0154 6632          bra       DisassembleInstruction_73
                    6633   DisassembleInstruction_72:
                    6634   ; }
                    6635   ; // first version of above instructions, bit 5 is 0
                    6636   ; else
                    6637   ; {
                    6638   ; // test instruction and direction by testing bits 4,3
                    6639   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003BB8  2042      6640          move.l    D2,A0
00003BBA  3010      6641          move.w    (A0),D0
00003BBC  C07C 0018 6642          and.w     #24,D0
00003BC0  6624      6643          bne.s     DisassembleInstruction_93
                    6644   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003BC2  2042      6645          move.l    D2,A0
00003BC4  3010      6646          move.w    (A0),D0
00003BC6  C07C 0100 6647          and.w     #256,D0
00003BCA  0C40 0100 6648          cmp.w     #256,D0
00003BCE  660C      6649          bne.s     DisassembleInstruction_92
                    6650   ; strcpyInstruction("ASL") ;
00003BD0  4879 0000 6651          pea       @m68kde~1_217.L
00003BD4  7262      
00003BD6  4E93      6652          jsr       (A3)
00003BD8  584F      6653          addq.w    #4,A7
00003BDA  600A      6654          bra.s     DisassembleInstruction_93
                    6655   DisassembleInstruction_92:
                    6656   ; else
                    6657   ; strcpyInstruction("ASR") ;
00003BDC  4879 0000 6658          pea       @m68kde~1_218.L
00003BE0  7266      
00003BE2  4E93      6659          jsr       (A3)
00003BE4  584F      6660          addq.w    #4,A7
                    6661   DisassembleInstruction_93:
                    6662   ; // test instruction and direction by testing bits 4,3
                    6663   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003BE6  2042      6664          move.l    D2,A0
00003BE8  3010      6665          move.w    (A0),D0
00003BEA  C07C 0018 6666          and.w     #24,D0
00003BEE  0C40 0008 6667          cmp.w     #8,D0
00003BF2  6624      6668          bne.s     DisassembleInstruction_97
                    6669   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003BF4  2042      6670          move.l    D2,A0
00003BF6  3010      6671          move.w    (A0),D0
00003BF8  C07C 0100 6672          and.w     #256,D0
00003BFC  0C40 0100 6673          cmp.w     #256,D0
00003C00  660C      6674          bne.s     DisassembleInstruction_96
                    6675   ; strcpyInstruction("LSL") ;
00003C02  4879 0000 6676          pea       @m68kde~1_219.L
00003C06  726A      
00003C08  4E93      6677          jsr       (A3)
00003C0A  584F      6678          addq.w    #4,A7
00003C0C  600A      6679          bra.s     DisassembleInstruction_97
                    6680   DisassembleInstruction_96:
                    6681   ; else
                    6682   ; strcpyInstruction("LSR") ;
00003C0E  4879 0000 6683          pea       @m68kde~1_220.L
00003C12  726E      
00003C14  4E93      6684          jsr       (A3)
00003C16  584F      6685          addq.w    #4,A7
                    6686   DisassembleInstruction_97:
                    6687   ; // test instruction and direction by testing bits 4,3
                    6688   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003C18  2042      6689          move.l    D2,A0
00003C1A  3010      6690          move.w    (A0),D0
00003C1C  C07C 0018 6691          and.w     #24,D0
00003C20  0C40 0018 6692          cmp.w     #24,D0
00003C24  6624      6693          bne.s     DisassembleInstruction_101
                    6694   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C26  2042      6695          move.l    D2,A0
00003C28  3010      6696          move.w    (A0),D0
00003C2A  C07C 0100 6697          and.w     #256,D0
00003C2E  0C40 0100 6698          cmp.w     #256,D0
00003C32  660C      6699          bne.s     DisassembleInstruction_100
                    6700   ; strcpyInstruction("ROL") ;
00003C34  4879 0000 6701          pea       @m68kde~1_221.L
00003C38  7272      
00003C3A  4E93      6702          jsr       (A3)
00003C3C  584F      6703          addq.w    #4,A7
00003C3E  600A      6704          bra.s     DisassembleInstruction_101
                    6705   DisassembleInstruction_100:
                    6706   ; else
                    6707   ; strcpyInstruction("ROR") ;
00003C40  4879 0000 6708          pea       @m68kde~1_222.L
00003C44  7276      
00003C46  4E93      6709          jsr       (A3)
00003C48  584F      6710          addq.w    #4,A7
                    6711   DisassembleInstruction_101:
                    6712   ; // test instruction and direction by testing bits 4,3
                    6713   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003C4A  2042      6714          move.l    D2,A0
00003C4C  3010      6715          move.w    (A0),D0
00003C4E  C07C 0018 6716          and.w     #24,D0
00003C52  0C40 0010 6717          cmp.w     #16,D0
00003C56  6624      6718          bne.s     DisassembleInstruction_105
                    6719   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C58  2042      6720          move.l    D2,A0
00003C5A  3010      6721          move.w    (A0),D0
00003C5C  C07C 0100 6722          and.w     #256,D0
00003C60  0C40 0100 6723          cmp.w     #256,D0
00003C64  660C      6724          bne.s     DisassembleInstruction_104
                    6725   ; strcpyInstruction("ROXL") ;
00003C66  4879 0000 6726          pea       @m68kde~1_223.L
00003C6A  727A      
00003C6C  4E93      6727          jsr       (A3)
00003C6E  584F      6728          addq.w    #4,A7
00003C70  600A      6729          bra.s     DisassembleInstruction_105
                    6730   DisassembleInstruction_104:
                    6731   ; else
                    6732   ; strcpyInstruction("ROXR") ;
00003C72  4879 0000 6733          pea       @m68kde~1_224.L
00003C76  7280      
00003C78  4E93      6734          jsr       (A3)
00003C7A  584F      6735          addq.w    #4,A7
                    6736   DisassembleInstruction_105:
                    6737   ; Decode2BitOperandSize(*OpCode) ;
00003C7C  2042      6738          move.l    D2,A0
00003C7E  3210      6739          move.w    (A0),D1
00003C80  C2BC 0000 6740          and.l     #65535,D1
00003C84  FFFF      
00003C86  2F01      6741          move.l    D1,-(A7)
00003C88  4EB8 2CCE 6742          jsr       _Decode2BitOperandSize
00003C8C  584F      6743          addq.w    #4,A7
                    6744   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003C8E  2042      6745          move.l    D2,A0
00003C90  3010      6746          move.w    (A0),D0
00003C92  C07C 0020 6747          and.w     #32,D0
00003C96  6600 0038 6748          bne       DisassembleInstruction_106
                    6749   ; sprintf(TempString,"#$%X,D%X",
00003C9A  2042      6750          move.l    D2,A0
00003C9C  3210      6751          move.w    (A0),D1
00003C9E  C27C 0007 6752          and.w     #7,D1
00003CA2  C2BC 0000 6753          and.l     #65535,D1
00003CA6  FFFF      
00003CA8  2F01      6754          move.l    D1,-(A7)
00003CAA  2042      6755          move.l    D2,A0
00003CAC  3210      6756          move.w    (A0),D1
00003CAE  E041      6757          asr.w     #8,D1
00003CB0  E241      6758          asr.w     #1,D1
00003CB2  C27C 0007 6759          and.w     #7,D1
00003CB6  C2BC 0000 6760          and.l     #65535,D1
00003CBA  FFFF      
00003CBC  2F01      6761          move.l    D1,-(A7)
00003CBE  4879 0000 6762          pea       @m68kde~1_225.L
00003CC2  7286      
00003CC4  2F0C      6763          move.l    A4,-(A7)
00003CC6  4E95      6764          jsr       (A5)
00003CC8  DEFC 0010 6765          add.w     #16,A7
00003CCC  6000 0034 6766          bra       DisassembleInstruction_107
                    6767   DisassembleInstruction_106:
                    6768   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6769   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6770   ; }
                    6771   ; else {                                                                      // if shift is for example ASR D1,D2
                    6772   ; sprintf(TempString,"D%X,D%X",
00003CD0  2042      6773          move.l    D2,A0
00003CD2  3210      6774          move.w    (A0),D1
00003CD4  C27C 0007 6775          and.w     #7,D1
00003CD8  C2BC 0000 6776          and.l     #65535,D1
00003CDC  FFFF      
00003CDE  2F01      6777          move.l    D1,-(A7)
00003CE0  2042      6778          move.l    D2,A0
00003CE2  3210      6779          move.w    (A0),D1
00003CE4  E041      6780          asr.w     #8,D1
00003CE6  E241      6781          asr.w     #1,D1
00003CE8  C27C 0007 6782          and.w     #7,D1
00003CEC  C2BC 0000 6783          and.l     #65535,D1
00003CF0  FFFF      
00003CF2  2F01      6784          move.l    D1,-(A7)
00003CF4  4879 0000 6785          pea       @m68kde~1_213.L
00003CF8  7238      
00003CFA  2F0C      6786          move.l    A4,-(A7)
00003CFC  4E95      6787          jsr       (A5)
00003CFE  DEFC 0010 6788          add.w     #16,A7
                    6789   DisassembleInstruction_107:
                    6790   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6791   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6792   ; }
                    6793   ; strcatInstruction(TempString) ;
00003D02  2F0C      6794          move.l    A4,-(A7)
00003D04  4EB8 0CCC 6795          jsr       _strcatInstruction
00003D08  584F      6796          addq.w    #4,A7
                    6797   DisassembleInstruction_73:
                    6798   ; }
                    6799   ; }
                    6800   ; /////////////////////////////////////////////////////////////////////////////////
                    6801   ; // if instruction is BCC and BSR and BRA
                    6802   ; /////////////////////////////////////////////////////////////////////////////////
                    6803   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00003D0A  2042      6804          move.l    D2,A0
00003D0C  3010      6805          move.w    (A0),D0
00003D0E  C07C F000 6806          and.w     #61440,D0
00003D12  0C40 6000 6807          cmp.w     #24576,D0
00003D16  6600 00A0 6808          bne       DisassembleInstruction_108
                    6809   ; {
                    6810   ; InstructionSize = 1;
00003D1A  24BC 0000 6811          move.l    #1,(A2)
00003D1E  0001      
                    6812   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00003D20  2042      6813          move.l    D2,A0
00003D22  3010      6814          move.w    (A0),D0
00003D24  E040      6815          asr.w     #8,D0
00003D26  C07C 000F 6816          and.w     #15,D0
00003D2A  1D40 FFE9 6817          move.b    D0,-23(A6)
                    6818   ; strcpyInstruction("B") ;
00003D2E  4879 0000 6819          pea       @m68kde~1_226.L
00003D32  7290      
00003D34  4E93      6820          jsr       (A3)
00003D36  584F      6821          addq.w    #4,A7
                    6822   ; DecodeBranchCondition(Condition) ;
00003D38  122E FFE9 6823          move.b    -23(A6),D1
00003D3C  C27C 00FF 6824          and.w     #255,D1
00003D40  C2BC 0000 6825          and.l     #65535,D1
00003D44  FFFF      
00003D46  2F01      6826          move.l    D1,-(A7)
00003D48  4EB8 3420 6827          jsr       _DecodeBranchCondition
00003D4C  584F      6828          addq.w    #4,A7
                    6829   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00003D4E  2042      6830          move.l    D2,A0
00003D50  3010      6831          move.w    (A0),D0
00003D52  C07C 00FF 6832          and.w     #255,D0
00003D56  1D40 FFFB 6833          move.b    D0,-5(A6)
                    6834   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00003D5A  102E FFFB 6835          move.b    -5(A6),D0
00003D5E  4880      6836          ext.w     D0
00003D60  4A40      6837          tst.w     D0
00003D62  662A      6838          bne.s     DisassembleInstruction_110
                    6839   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00003D64  2202      6840          move.l    D2,D1
00003D66  2042      6841          move.l    D2,A0
00003D68  2F00      6842          move.l    D0,-(A7)
00003D6A  3028 0002 6843          move.w    2(A0),D0
00003D6E  48C0      6844          ext.l     D0
00003D70  D280      6845          add.l     D0,D1
00003D72  201F      6846          move.l    (A7)+,D0
00003D74  5481      6847          addq.l    #2,D1
00003D76  2F01      6848          move.l    D1,-(A7)
00003D78  4879 0000 6849          pea       @m68kde~1_176.L
00003D7C  715C      
00003D7E  2F0C      6850          move.l    A4,-(A7)
00003D80  4E95      6851          jsr       (A5)
00003D82  DEFC 000C 6852          add.w     #12,A7
                    6853   ; InstructionSize = 2 ;
00003D86  24BC 0000 6854          move.l    #2,(A2)
00003D8A  0002      
00003D8C  6022      6855          bra.s     DisassembleInstruction_111
                    6856   DisassembleInstruction_110:
                    6857   ; }
                    6858   ; else
                    6859   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00003D8E  2202      6860          move.l    D2,D1
00003D90  2F00      6861          move.l    D0,-(A7)
00003D92  102E FFFB 6862          move.b    -5(A6),D0
00003D96  4880      6863          ext.w     D0
00003D98  48C0      6864          ext.l     D0
00003D9A  D280      6865          add.l     D0,D1
00003D9C  201F      6866          move.l    (A7)+,D0
00003D9E  5481      6867          addq.l    #2,D1
00003DA0  2F01      6868          move.l    D1,-(A7)
00003DA2  4879 0000 6869          pea       @m68kde~1_176.L
00003DA6  715C      
00003DA8  2F0C      6870          move.l    A4,-(A7)
00003DAA  4E95      6871          jsr       (A5)
00003DAC  DEFC 000C 6872          add.w     #12,A7
                    6873   DisassembleInstruction_111:
                    6874   ; strcatInstruction(TempString) ;
00003DB0  2F0C      6875          move.l    A4,-(A7)
00003DB2  4EB8 0CCC 6876          jsr       _strcatInstruction
00003DB6  584F      6877          addq.w    #4,A7
                    6878   DisassembleInstruction_108:
                    6879   ; }
                    6880   ; /////////////////////////////////////////////////////////////////////////////////
                    6881   ; // if instruction is BCHG dn,<EA>
                    6882   ; /////////////////////////////////////////////////////////////////////////////////
                    6883   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00003DB8  2042      6884          move.l    D2,A0
00003DBA  3010      6885          move.w    (A0),D0
00003DBC  C07C F1C0 6886          and.w     #61888,D0
00003DC0  0C40 0140 6887          cmp.w     #320,D0
00003DC4  6600 004C 6888          bne       DisassembleInstruction_112
                    6889   ; InstructionSize = 1;
00003DC8  24BC 0000 6890          move.l    #1,(A2)
00003DCC  0001      
                    6891   ; strcpyInstruction("BCHG ") ;
00003DCE  4879 0000 6892          pea       @m68kde~1_227.L
00003DD2  7292      
00003DD4  4E93      6893          jsr       (A3)
00003DD6  584F      6894          addq.w    #4,A7
                    6895   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003DD8  2042      6896          move.l    D2,A0
00003DDA  3210      6897          move.w    (A0),D1
00003DDC  E041      6898          asr.w     #8,D1
00003DDE  E241      6899          asr.w     #1,D1
00003DE0  C27C 0007 6900          and.w     #7,D1
00003DE4  C2BC 0000 6901          and.l     #65535,D1
00003DE8  FFFF      
00003DEA  2F01      6902          move.l    D1,-(A7)
00003DEC  4879 0000 6903          pea       @m68kde~1_228.L
00003DF0  7298      
00003DF2  2F0C      6904          move.l    A4,-(A7)
00003DF4  4E95      6905          jsr       (A5)
00003DF6  DEFC 000C 6906          add.w     #12,A7
                    6907   ; strcatInstruction(TempString) ;
00003DFA  2F0C      6908          move.l    A4,-(A7)
00003DFC  4EB8 0CCC 6909          jsr       _strcatInstruction
00003E00  584F      6910          addq.w    #4,A7
                    6911   ; Decode6BitEA(OpCode,0,0,0) ;
00003E02  42A7      6912          clr.l     -(A7)
00003E04  42A7      6913          clr.l     -(A7)
00003E06  42A7      6914          clr.l     -(A7)
00003E08  2F02      6915          move.l    D2,-(A7)
00003E0A  4EB8 2F62 6916          jsr       _Decode6BitEA
00003E0E  DEFC 0010 6917          add.w     #16,A7
                    6918   DisassembleInstruction_112:
                    6919   ; }
                    6920   ; /////////////////////////////////////////////////////////////////////////////////
                    6921   ; // if instruction is BCHG #data,<EA>
                    6922   ; /////////////////////////////////////////////////////////////////////////////////
                    6923   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
00003E12  2042      6924          move.l    D2,A0
00003E14  3010      6925          move.w    (A0),D0
00003E16  C07C FFC0 6926          and.w     #65472,D0
00003E1A  0C40 0840 6927          cmp.w     #2112,D0
00003E1E  6600 0044 6928          bne       DisassembleInstruction_114
                    6929   ; strcpyInstruction("BCHG ") ;
00003E22  4879 0000 6930          pea       @m68kde~1_227.L
00003E26  7292      
00003E28  4E93      6931          jsr       (A3)
00003E2A  584F      6932          addq.w    #4,A7
                    6933   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003E2C  2042      6934          move.l    D2,A0
00003E2E  3228 0002 6935          move.w    2(A0),D1
00003E32  48C1      6936          ext.l     D1
00003E34  2F01      6937          move.l    D1,-(A7)
00003E36  4879 0000 6938          pea       @m68kde~1_229.L
00003E3A  729E      
00003E3C  2F0C      6939          move.l    A4,-(A7)
00003E3E  4E95      6940          jsr       (A5)
00003E40  DEFC 000C 6941          add.w     #12,A7
                    6942   ; InstructionSize = 2 ;
00003E44  24BC 0000 6943          move.l    #2,(A2)
00003E48  0002      
                    6944   ; strcatInstruction(TempString) ;
00003E4A  2F0C      6945          move.l    A4,-(A7)
00003E4C  4EB8 0CCC 6946          jsr       _strcatInstruction
00003E50  584F      6947          addq.w    #4,A7
                    6948   ; Decode6BitEA(OpCode,0,1,0) ;
00003E52  42A7      6949          clr.l     -(A7)
00003E54  4878 0001 6950          pea       1
00003E58  42A7      6951          clr.l     -(A7)
00003E5A  2F02      6952          move.l    D2,-(A7)
00003E5C  4EB8 2F62 6953          jsr       _Decode6BitEA
00003E60  DEFC 0010 6954          add.w     #16,A7
                    6955   DisassembleInstruction_114:
                    6956   ; }
                    6957   ; /////////////////////////////////////////////////////////////////////////////////
                    6958   ; // if instruction is BCLR  dn,<EA>
                    6959   ; /////////////////////////////////////////////////////////////////////////////////
                    6960   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00003E64  2042      6961          move.l    D2,A0
00003E66  3010      6962          move.w    (A0),D0
00003E68  C07C F1C0 6963          and.w     #61888,D0
00003E6C  0C40 0180 6964          cmp.w     #384,D0
00003E70  6600 004C 6965          bne       DisassembleInstruction_116
                    6966   ; InstructionSize = 1;
00003E74  24BC 0000 6967          move.l    #1,(A2)
00003E78  0001      
                    6968   ; strcpyInstruction("BCLR ") ;
00003E7A  4879 0000 6969          pea       @m68kde~1_230.L
00003E7E  72A4      
00003E80  4E93      6970          jsr       (A3)
00003E82  584F      6971          addq.w    #4,A7
                    6972   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003E84  2042      6973          move.l    D2,A0
00003E86  3210      6974          move.w    (A0),D1
00003E88  E041      6975          asr.w     #8,D1
00003E8A  E241      6976          asr.w     #1,D1
00003E8C  C27C 0007 6977          and.w     #7,D1
00003E90  C2BC 0000 6978          and.l     #65535,D1
00003E94  FFFF      
00003E96  2F01      6979          move.l    D1,-(A7)
00003E98  4879 0000 6980          pea       @m68kde~1_228.L
00003E9C  7298      
00003E9E  2F0C      6981          move.l    A4,-(A7)
00003EA0  4E95      6982          jsr       (A5)
00003EA2  DEFC 000C 6983          add.w     #12,A7
                    6984   ; strcatInstruction(TempString) ;
00003EA6  2F0C      6985          move.l    A4,-(A7)
00003EA8  4EB8 0CCC 6986          jsr       _strcatInstruction
00003EAC  584F      6987          addq.w    #4,A7
                    6988   ; Decode6BitEA(OpCode,0,0,0) ;
00003EAE  42A7      6989          clr.l     -(A7)
00003EB0  42A7      6990          clr.l     -(A7)
00003EB2  42A7      6991          clr.l     -(A7)
00003EB4  2F02      6992          move.l    D2,-(A7)
00003EB6  4EB8 2F62 6993          jsr       _Decode6BitEA
00003EBA  DEFC 0010 6994          add.w     #16,A7
                    6995   DisassembleInstruction_116:
                    6996   ; }
                    6997   ; /////////////////////////////////////////////////////////////////////////////////
                    6998   ; // if instruction is BCLR #data,<EA>
                    6999   ; /////////////////////////////////////////////////////////////////////////////////
                    7000   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
00003EBE  2042      7001          move.l    D2,A0
00003EC0  3010      7002          move.w    (A0),D0
00003EC2  C07C FFC0 7003          and.w     #65472,D0
00003EC6  0C40 0880 7004          cmp.w     #2176,D0
00003ECA  6600 0044 7005          bne       DisassembleInstruction_118
                    7006   ; strcpyInstruction("BCLR ") ;
00003ECE  4879 0000 7007          pea       @m68kde~1_230.L
00003ED2  72A4      
00003ED4  4E93      7008          jsr       (A3)
00003ED6  584F      7009          addq.w    #4,A7
                    7010   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003ED8  2042      7011          move.l    D2,A0
00003EDA  3228 0002 7012          move.w    2(A0),D1
00003EDE  48C1      7013          ext.l     D1
00003EE0  2F01      7014          move.l    D1,-(A7)
00003EE2  4879 0000 7015          pea       @m68kde~1_229.L
00003EE6  729E      
00003EE8  2F0C      7016          move.l    A4,-(A7)
00003EEA  4E95      7017          jsr       (A5)
00003EEC  DEFC 000C 7018          add.w     #12,A7
                    7019   ; InstructionSize = 2 ;
00003EF0  24BC 0000 7020          move.l    #2,(A2)
00003EF4  0002      
                    7021   ; strcatInstruction(TempString) ;
00003EF6  2F0C      7022          move.l    A4,-(A7)
00003EF8  4EB8 0CCC 7023          jsr       _strcatInstruction
00003EFC  584F      7024          addq.w    #4,A7
                    7025   ; Decode6BitEA(OpCode,0,1,0) ;
00003EFE  42A7      7026          clr.l     -(A7)
00003F00  4878 0001 7027          pea       1
00003F04  42A7      7028          clr.l     -(A7)
00003F06  2F02      7029          move.l    D2,-(A7)
00003F08  4EB8 2F62 7030          jsr       _Decode6BitEA
00003F0C  DEFC 0010 7031          add.w     #16,A7
                    7032   DisassembleInstruction_118:
                    7033   ; }
                    7034   ; /////////////////////////////////////////////////////////////////////////////////
                    7035   ; // if instruction is BSET dn,<EA>
                    7036   ; /////////////////////////////////////////////////////////////////////////////////
                    7037   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
00003F10  2042      7038          move.l    D2,A0
00003F12  3010      7039          move.w    (A0),D0
00003F14  C07C F1C0 7040          and.w     #61888,D0
00003F18  0C40 01C0 7041          cmp.w     #448,D0
00003F1C  6600 004C 7042          bne       DisassembleInstruction_120
                    7043   ; InstructionSize = 1;
00003F20  24BC 0000 7044          move.l    #1,(A2)
00003F24  0001      
                    7045   ; strcpyInstruction("BSET ") ;
00003F26  4879 0000 7046          pea       @m68kde~1_231.L
00003F2A  72AA      
00003F2C  4E93      7047          jsr       (A3)
00003F2E  584F      7048          addq.w    #4,A7
                    7049   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003F30  2042      7050          move.l    D2,A0
00003F32  3210      7051          move.w    (A0),D1
00003F34  E041      7052          asr.w     #8,D1
00003F36  E241      7053          asr.w     #1,D1
00003F38  C27C 0007 7054          and.w     #7,D1
00003F3C  C2BC 0000 7055          and.l     #65535,D1
00003F40  FFFF      
00003F42  2F01      7056          move.l    D1,-(A7)
00003F44  4879 0000 7057          pea       @m68kde~1_228.L
00003F48  7298      
00003F4A  2F0C      7058          move.l    A4,-(A7)
00003F4C  4E95      7059          jsr       (A5)
00003F4E  DEFC 000C 7060          add.w     #12,A7
                    7061   ; strcatInstruction(TempString) ;
00003F52  2F0C      7062          move.l    A4,-(A7)
00003F54  4EB8 0CCC 7063          jsr       _strcatInstruction
00003F58  584F      7064          addq.w    #4,A7
                    7065   ; Decode6BitEA(OpCode,0,0,0) ;
00003F5A  42A7      7066          clr.l     -(A7)
00003F5C  42A7      7067          clr.l     -(A7)
00003F5E  42A7      7068          clr.l     -(A7)
00003F60  2F02      7069          move.l    D2,-(A7)
00003F62  4EB8 2F62 7070          jsr       _Decode6BitEA
00003F66  DEFC 0010 7071          add.w     #16,A7
                    7072   DisassembleInstruction_120:
                    7073   ; }
                    7074   ; /////////////////////////////////////////////////////////////////////////////////
                    7075   ; // if instruction is BSET #data,<EA>
                    7076   ; /////////////////////////////////////////////////////////////////////////////////
                    7077   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
00003F6A  2042      7078          move.l    D2,A0
00003F6C  3010      7079          move.w    (A0),D0
00003F6E  C07C FFC0 7080          and.w     #65472,D0
00003F72  0C40 08C0 7081          cmp.w     #2240,D0
00003F76  6600 0044 7082          bne       DisassembleInstruction_122
                    7083   ; strcpyInstruction("BSET ") ;
00003F7A  4879 0000 7084          pea       @m68kde~1_231.L
00003F7E  72AA      
00003F80  4E93      7085          jsr       (A3)
00003F82  584F      7086          addq.w    #4,A7
                    7087   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003F84  2042      7088          move.l    D2,A0
00003F86  3228 0002 7089          move.w    2(A0),D1
00003F8A  48C1      7090          ext.l     D1
00003F8C  2F01      7091          move.l    D1,-(A7)
00003F8E  4879 0000 7092          pea       @m68kde~1_229.L
00003F92  729E      
00003F94  2F0C      7093          move.l    A4,-(A7)
00003F96  4E95      7094          jsr       (A5)
00003F98  DEFC 000C 7095          add.w     #12,A7
                    7096   ; InstructionSize = 2 ;
00003F9C  24BC 0000 7097          move.l    #2,(A2)
00003FA0  0002      
                    7098   ; strcatInstruction(TempString) ;
00003FA2  2F0C      7099          move.l    A4,-(A7)
00003FA4  4EB8 0CCC 7100          jsr       _strcatInstruction
00003FA8  584F      7101          addq.w    #4,A7
                    7102   ; Decode6BitEA(OpCode,0,1,0) ;
00003FAA  42A7      7103          clr.l     -(A7)
00003FAC  4878 0001 7104          pea       1
00003FB0  42A7      7105          clr.l     -(A7)
00003FB2  2F02      7106          move.l    D2,-(A7)
00003FB4  4EB8 2F62 7107          jsr       _Decode6BitEA
00003FB8  DEFC 0010 7108          add.w     #16,A7
                    7109   DisassembleInstruction_122:
                    7110   ; }
                    7111   ; /////////////////////////////////////////////////////////////////////////////////
                    7112   ; // if instruction is BTST dn,<EA>
                    7113   ; /////////////////////////////////////////////////////////////////////////////////
                    7114   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
00003FBC  2042      7115          move.l    D2,A0
00003FBE  3010      7116          move.w    (A0),D0
00003FC0  C07C F1C0 7117          and.w     #61888,D0
00003FC4  0C40 0100 7118          cmp.w     #256,D0
00003FC8  6600 004C 7119          bne       DisassembleInstruction_124
                    7120   ; InstructionSize = 1;
00003FCC  24BC 0000 7121          move.l    #1,(A2)
00003FD0  0001      
                    7122   ; strcpyInstruction("BTST ") ;
00003FD2  4879 0000 7123          pea       @m68kde~1_232.L
00003FD6  72B0      
00003FD8  4E93      7124          jsr       (A3)
00003FDA  584F      7125          addq.w    #4,A7
                    7126   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003FDC  2042      7127          move.l    D2,A0
00003FDE  3210      7128          move.w    (A0),D1
00003FE0  E041      7129          asr.w     #8,D1
00003FE2  E241      7130          asr.w     #1,D1
00003FE4  C27C 0007 7131          and.w     #7,D1
00003FE8  C2BC 0000 7132          and.l     #65535,D1
00003FEC  FFFF      
00003FEE  2F01      7133          move.l    D1,-(A7)
00003FF0  4879 0000 7134          pea       @m68kde~1_228.L
00003FF4  7298      
00003FF6  2F0C      7135          move.l    A4,-(A7)
00003FF8  4E95      7136          jsr       (A5)
00003FFA  DEFC 000C 7137          add.w     #12,A7
                    7138   ; strcatInstruction(TempString) ;
00003FFE  2F0C      7139          move.l    A4,-(A7)
00004000  4EB8 0CCC 7140          jsr       _strcatInstruction
00004004  584F      7141          addq.w    #4,A7
                    7142   ; Decode6BitEA(OpCode,0,0,0) ;
00004006  42A7      7143          clr.l     -(A7)
00004008  42A7      7144          clr.l     -(A7)
0000400A  42A7      7145          clr.l     -(A7)
0000400C  2F02      7146          move.l    D2,-(A7)
0000400E  4EB8 2F62 7147          jsr       _Decode6BitEA
00004012  DEFC 0010 7148          add.w     #16,A7
                    7149   DisassembleInstruction_124:
                    7150   ; }
                    7151   ; /////////////////////////////////////////////////////////////////////////////////
                    7152   ; // if instruction is BTST #data,<EA>
                    7153   ; /////////////////////////////////////////////////////////////////////////////////
                    7154   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
00004016  2042      7155          move.l    D2,A0
00004018  3010      7156          move.w    (A0),D0
0000401A  C07C FFC0 7157          and.w     #65472,D0
0000401E  0C40 0800 7158          cmp.w     #2048,D0
00004022  6600 0044 7159          bne       DisassembleInstruction_126
                    7160   ; strcpyInstruction("BTST ") ;
00004026  4879 0000 7161          pea       @m68kde~1_232.L
0000402A  72B0      
0000402C  4E93      7162          jsr       (A3)
0000402E  584F      7163          addq.w    #4,A7
                    7164   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004030  2042      7165          move.l    D2,A0
00004032  3228 0002 7166          move.w    2(A0),D1
00004036  48C1      7167          ext.l     D1
00004038  2F01      7168          move.l    D1,-(A7)
0000403A  4879 0000 7169          pea       @m68kde~1_229.L
0000403E  729E      
00004040  2F0C      7170          move.l    A4,-(A7)
00004042  4E95      7171          jsr       (A5)
00004044  DEFC 000C 7172          add.w     #12,A7
                    7173   ; InstructionSize = 2 ;
00004048  24BC 0000 7174          move.l    #2,(A2)
0000404C  0002      
                    7175   ; strcatInstruction(TempString) ;
0000404E  2F0C      7176          move.l    A4,-(A7)
00004050  4EB8 0CCC 7177          jsr       _strcatInstruction
00004054  584F      7178          addq.w    #4,A7
                    7179   ; Decode6BitEA(OpCode,0,1,0) ;
00004056  42A7      7180          clr.l     -(A7)
00004058  4878 0001 7181          pea       1
0000405C  42A7      7182          clr.l     -(A7)
0000405E  2F02      7183          move.l    D2,-(A7)
00004060  4EB8 2F62 7184          jsr       _Decode6BitEA
00004064  DEFC 0010 7185          add.w     #16,A7
                    7186   DisassembleInstruction_126:
                    7187   ; }
                    7188   ; /////////////////////////////////////////////////////////////////////////////////
                    7189   ; // if instruction is CHK.W <EA>,DN
                    7190   ; /////////////////////////////////////////////////////////////////////////////////
                    7191   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
00004068  2042      7192          move.l    D2,A0
0000406A  3010      7193          move.w    (A0),D0
0000406C  C07C F1C0 7194          and.w     #61888,D0
00004070  0C40 4180 7195          cmp.w     #16768,D0
00004074  6600 004C 7196          bne       DisassembleInstruction_128
                    7197   ; InstructionSize = 1;
00004078  24BC 0000 7198          move.l    #1,(A2)
0000407C  0001      
                    7199   ; strcpyInstruction("CHK ") ;
0000407E  4879 0000 7200          pea       @m68kde~1_233.L
00004082  72B6      
00004084  4E93      7201          jsr       (A3)
00004086  584F      7202          addq.w    #4,A7
                    7203   ; Decode6BitEA(OpCode,0,0,0) ;
00004088  42A7      7204          clr.l     -(A7)
0000408A  42A7      7205          clr.l     -(A7)
0000408C  42A7      7206          clr.l     -(A7)
0000408E  2F02      7207          move.l    D2,-(A7)
00004090  4EB8 2F62 7208          jsr       _Decode6BitEA
00004094  DEFC 0010 7209          add.w     #16,A7
                    7210   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004098  2042      7211          move.l    D2,A0
0000409A  3210      7212          move.w    (A0),D1
0000409C  E041      7213          asr.w     #8,D1
0000409E  E241      7214          asr.w     #1,D1
000040A0  C27C 0007 7215          and.w     #7,D1
000040A4  C2BC 0000 7216          and.l     #65535,D1
000040A8  FFFF      
000040AA  2F01      7217          move.l    D1,-(A7)
000040AC  4879 0000 7218          pea       @m68kde~1_234.L
000040B0  72BC      
000040B2  2F0C      7219          move.l    A4,-(A7)
000040B4  4E95      7220          jsr       (A5)
000040B6  DEFC 000C 7221          add.w     #12,A7
                    7222   ; strcatInstruction(TempString) ;
000040BA  2F0C      7223          move.l    A4,-(A7)
000040BC  4EB8 0CCC 7224          jsr       _strcatInstruction
000040C0  584F      7225          addq.w    #4,A7
                    7226   DisassembleInstruction_128:
                    7227   ; }
                    7228   ; /////////////////////////////////////////////////////////////////////////////////
                    7229   ; // if instruction is CLR <EA>
                    7230   ; /////////////////////////////////////////////////////////////////////////////////
                    7231   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
000040C2  2042      7232          move.l    D2,A0
000040C4  3010      7233          move.w    (A0),D0
000040C6  C07C FF00 7234          and.w     #65280,D0
000040CA  0C40 4200 7235          cmp.w     #16896,D0
000040CE  6600 0034 7236          bne       DisassembleInstruction_130
                    7237   ; InstructionSize = 1;
000040D2  24BC 0000 7238          move.l    #1,(A2)
000040D6  0001      
                    7239   ; strcpyInstruction("CLR") ;
000040D8  4879 0000 7240          pea       @m68kde~1_235.L
000040DC  72C2      
000040DE  4E93      7241          jsr       (A3)
000040E0  584F      7242          addq.w    #4,A7
                    7243   ; Decode2BitOperandSize(*OpCode) ;
000040E2  2042      7244          move.l    D2,A0
000040E4  3210      7245          move.w    (A0),D1
000040E6  C2BC 0000 7246          and.l     #65535,D1
000040EA  FFFF      
000040EC  2F01      7247          move.l    D1,-(A7)
000040EE  4EB8 2CCE 7248          jsr       _Decode2BitOperandSize
000040F2  584F      7249          addq.w    #4,A7
                    7250   ; Decode6BitEA(OpCode,0,0,0) ;
000040F4  42A7      7251          clr.l     -(A7)
000040F6  42A7      7252          clr.l     -(A7)
000040F8  42A7      7253          clr.l     -(A7)
000040FA  2F02      7254          move.l    D2,-(A7)
000040FC  4EB8 2F62 7255          jsr       _Decode6BitEA
00004100  DEFC 0010 7256          add.w     #16,A7
                    7257   DisassembleInstruction_130:
                    7258   ; }
                    7259   ; /////////////////////////////////////////////////////////////////////////////////
                    7260   ; // if instruction is CMP, CMPA
                    7261   ; /////////////////////////////////////////////////////////////////////////////////
                    7262   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
00004104  2042      7263          move.l    D2,A0
00004106  3010      7264          move.w    (A0),D0
00004108  C07C F000 7265          and.w     #61440,D0
0000410C  0C40 B000 7266          cmp.w     #45056,D0
00004110  6600 008C 7267          bne       DisassembleInstruction_135
                    7268   ; {
                    7269   ; InstructionSize = 1;
00004114  24BC 0000 7270          move.l    #1,(A2)
00004118  0001      
                    7271   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
0000411A  2042      7272          move.l    D2,A0
0000411C  3010      7273          move.w    (A0),D0
0000411E  EC40      7274          asr.w     #6,D0
00004120  C07C 0007 7275          and.w     #7,D0
00004124  3600      7276          move.w    D0,D3
                    7277   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
00004126  0C43 0003 7278          cmp.w     #3,D3
0000412A  6708      7279          beq.s     DisassembleInstruction_136
0000412C  0C43 0007 7280          cmp.w     #7,D3
00004130  6600 005A 7281          bne       DisassembleInstruction_134
                    7282   DisassembleInstruction_136:
                    7283   ; if(OpMode == (unsigned short int)(0x0003))
00004134  0C43 0003 7284          cmp.w     #3,D3
00004138  660C      7285          bne.s     DisassembleInstruction_137
                    7286   ; strcpyInstruction("CMPA.W ") ;
0000413A  4879 0000 7287          pea       @m68kde~1_236.L
0000413E  72C6      
00004140  4E93      7288          jsr       (A3)
00004142  584F      7289          addq.w    #4,A7
00004144  600A      7290          bra.s     DisassembleInstruction_138
                    7291   DisassembleInstruction_137:
                    7292   ; else
                    7293   ; strcpyInstruction("CMPA.L ") ;
00004146  4879 0000 7294          pea       @m68kde~1_237.L
0000414A  72CE      
0000414C  4E93      7295          jsr       (A3)
0000414E  584F      7296          addq.w    #4,A7
                    7297   DisassembleInstruction_138:
                    7298   ; Decode6BitEA(OpCode,0,0,0) ;
00004150  42A7      7299          clr.l     -(A7)
00004152  42A7      7300          clr.l     -(A7)
00004154  42A7      7301          clr.l     -(A7)
00004156  2F02      7302          move.l    D2,-(A7)
00004158  4EB8 2F62 7303          jsr       _Decode6BitEA
0000415C  DEFC 0010 7304          add.w     #16,A7
                    7305   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
00004160  2042      7306          move.l    D2,A0
00004162  3210      7307          move.w    (A0),D1
00004164  E041      7308          asr.w     #8,D1
00004166  E241      7309          asr.w     #1,D1
00004168  C27C 0007 7310          and.w     #7,D1
0000416C  C2BC 0000 7311          and.l     #65535,D1
00004170  FFFF      
00004172  2F01      7312          move.l    D1,-(A7)
00004174  4879 0000 7313          pea       @m68kde~1_238.L
00004178  72D6      
0000417A  2F0C      7314          move.l    A4,-(A7)
0000417C  4E95      7315          jsr       (A5)
0000417E  DEFC 000C 7316          add.w     #12,A7
                    7317   ; strcatInstruction(TempString) ;
00004182  2F0C      7318          move.l    A4,-(A7)
00004184  4EB8 0CCC 7319          jsr       _strcatInstruction
00004188  584F      7320          addq.w    #4,A7
0000418A  6012      7321          bra.s     DisassembleInstruction_135
                    7322   DisassembleInstruction_134:
                    7323   ; }
                    7324   ; else {
                    7325   ; strcpyInstruction("CMP") ;
0000418C  4879 0000 7326          pea       @m68kde~1_239.L
00004190  72DC      
00004192  4E93      7327          jsr       (A3)
00004194  584F      7328          addq.w    #4,A7
                    7329   ; Decode3BitOperandMode(OpCode) ;
00004196  2F02      7330          move.l    D2,-(A7)
00004198  4EB8 338A 7331          jsr       _Decode3BitOperandMode
0000419C  584F      7332          addq.w    #4,A7
                    7333   DisassembleInstruction_135:
                    7334   ; }
                    7335   ; }
                    7336   ; /////////////////////////////////////////////////////////////////////////////////
                    7337   ; // if instruction is CMPM
                    7338   ; /////////////////////////////////////////////////////////////////////////////////
                    7339   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
0000419E  2042      7340          move.l    D2,A0
000041A0  3010      7341          move.w    (A0),D0
000041A2  C07C F138 7342          and.w     #61752,D0
000041A6  0C40 B108 7343          cmp.w     #45320,D0
000041AA  6600 007A 7344          bne       DisassembleInstruction_141
                    7345   ; {
                    7346   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000041AE  2042      7347          move.l    D2,A0
000041B0  3010      7348          move.w    (A0),D0
000041B2  EC40      7349          asr.w     #6,D0
000041B4  C07C 0003 7350          and.w     #3,D0
000041B8  3600      7351          move.w    D0,D3
                    7352   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
000041BA  0C43 0000 7353          cmp.w     #0,D3
000041BE  6500 0066 7354          blo       DisassembleInstruction_141
000041C2  0C43 0002 7355          cmp.w     #2,D3
000041C6  6200 005E 7356          bhi       DisassembleInstruction_141
                    7357   ; {
                    7358   ; InstructionSize = 1;
000041CA  24BC 0000 7359          move.l    #1,(A2)
000041CE  0001      
                    7360   ; strcpyInstruction("CMPM") ;
000041D0  4879 0000 7361          pea       @m68kde~1_240.L
000041D4  72E0      
000041D6  4E93      7362          jsr       (A3)
000041D8  584F      7363          addq.w    #4,A7
                    7364   ; Decode2BitOperandSize(*OpCode) ;
000041DA  2042      7365          move.l    D2,A0
000041DC  3210      7366          move.w    (A0),D1
000041DE  C2BC 0000 7367          and.l     #65535,D1
000041E2  FFFF      
000041E4  2F01      7368          move.l    D1,-(A7)
000041E6  4EB8 2CCE 7369          jsr       _Decode2BitOperandSize
000041EA  584F      7370          addq.w    #4,A7
                    7371   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
000041EC  2042      7372          move.l    D2,A0
000041EE  3210      7373          move.w    (A0),D1
000041F0  E041      7374          asr.w     #8,D1
000041F2  E241      7375          asr.w     #1,D1
000041F4  C27C 0007 7376          and.w     #7,D1
000041F8  C2BC 0000 7377          and.l     #65535,D1
000041FC  FFFF      
000041FE  2F01      7378          move.l    D1,-(A7)
00004200  2042      7379          move.l    D2,A0
00004202  3210      7380          move.w    (A0),D1
00004204  C27C 0007 7381          and.w     #7,D1
00004208  C2BC 0000 7382          and.l     #65535,D1
0000420C  FFFF      
0000420E  2F01      7383          move.l    D1,-(A7)
00004210  4879 0000 7384          pea       @m68kde~1_241.L
00004214  72E6      
00004216  2F0C      7385          move.l    A4,-(A7)
00004218  4E95      7386          jsr       (A5)
0000421A  DEFC 0010 7387          add.w     #16,A7
                    7388   ; strcatInstruction(TempString) ;
0000421E  2F0C      7389          move.l    A4,-(A7)
00004220  4EB8 0CCC 7390          jsr       _strcatInstruction
00004224  584F      7391          addq.w    #4,A7
                    7392   DisassembleInstruction_141:
                    7393   ; }
                    7394   ; }
                    7395   ; /////////////////////////////////////////////////////////////////////////////////
                    7396   ; // if instruction is DBCC
                    7397   ; /////////////////////////////////////////////////////////////////////////////////
                    7398   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
00004226  2042      7399          move.l    D2,A0
00004228  3010      7400          move.w    (A0),D0
0000422A  C07C F0F8 7401          and.w     #61688,D0
0000422E  0C40 50C8 7402          cmp.w     #20680,D0
00004232  6600 0084 7403          bne       DisassembleInstruction_143
                    7404   ; {
                    7405   ; InstructionSize = 2;
00004236  24BC 0000 7406          move.l    #2,(A2)
0000423A  0002      
                    7407   ; strcpy(Instruction,"DB") ;
0000423C  4879 0000 7408          pea       @m68kde~1_242.L
00004240  72F4      
00004242  4879 0803 7409          pea       _Instruction.L
00004246  04E2      
00004248  4EB9 0000 7410          jsr       _strcpy
0000424C  5418      
0000424E  504F      7411          addq.w    #8,A7
                    7412   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
00004250  2042      7413          move.l    D2,A0
00004252  3010      7414          move.w    (A0),D0
00004254  E040      7415          asr.w     #8,D0
00004256  C07C 000F 7416          and.w     #15,D0
0000425A  1D40 FFE9 7417          move.b    D0,-23(A6)
                    7418   ; DecodeBranchCondition(Condition) ;
0000425E  122E FFE9 7419          move.b    -23(A6),D1
00004262  C27C 00FF 7420          and.w     #255,D1
00004266  C2BC 0000 7421          and.l     #65535,D1
0000426A  FFFF      
0000426C  2F01      7422          move.l    D1,-(A7)
0000426E  4EB8 3420 7423          jsr       _DecodeBranchCondition
00004272  584F      7424          addq.w    #4,A7
                    7425   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00004274  2202      7426          move.l    D2,D1
00004276  2042      7427          move.l    D2,A0
00004278  2F00      7428          move.l    D0,-(A7)
0000427A  3028 0002 7429          move.w    2(A0),D0
0000427E  48C0      7430          ext.l     D0
00004280  D280      7431          add.l     D0,D1
00004282  201F      7432          move.l    (A7)+,D0
00004284  5481      7433          addq.l    #2,D1
00004286  2F01      7434          move.l    D1,-(A7)
00004288  2042      7435          move.l    D2,A0
0000428A  3228 0002 7436          move.w    2(A0),D1
0000428E  48C1      7437          ext.l     D1
00004290  2F01      7438          move.l    D1,-(A7)
00004292  2042      7439          move.l    D2,A0
00004294  3210      7440          move.w    (A0),D1
00004296  C27C 0007 7441          and.w     #7,D1
0000429A  C2BC 0000 7442          and.l     #65535,D1
0000429E  FFFF      
000042A0  2F01      7443          move.l    D1,-(A7)
000042A2  4879 0000 7444          pea       @m68kde~1_243.L
000042A6  72F8      
000042A8  2F0C      7445          move.l    A4,-(A7)
000042AA  4E95      7446          jsr       (A5)
000042AC  DEFC 0014 7447          add.w     #20,A7
                    7448   ; strcatInstruction(TempString) ;
000042B0  2F0C      7449          move.l    A4,-(A7)
000042B2  4EB8 0CCC 7450          jsr       _strcatInstruction
000042B6  584F      7451          addq.w    #4,A7
                    7452   DisassembleInstruction_143:
                    7453   ; }
                    7454   ; /////////////////////////////////////////////////////////////////////////////////
                    7455   ; // if instruction is DIVS
                    7456   ; /////////////////////////////////////////////////////////////////////////////////
                    7457   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
000042B8  2042      7458          move.l    D2,A0
000042BA  3010      7459          move.w    (A0),D0
000042BC  C07C F1C0 7460          and.w     #61888,D0
000042C0  0C40 81C0 7461          cmp.w     #33216,D0
000042C4  6600 004A 7462          bne       DisassembleInstruction_145
                    7463   ; {
                    7464   ; InstructionSize = 1;
000042C8  24BC 0000 7465          move.l    #1,(A2)
000042CC  0001      
                    7466   ; strcpy(Instruction,"DIVS ") ;
000042CE  4879 0000 7467          pea       @m68kde~1_244.L
000042D2  7310      
000042D4  4879 0803 7468          pea       _Instruction.L
000042D8  04E2      
000042DA  4EB9 0000 7469          jsr       _strcpy
000042DE  5418      
000042E0  504F      7470          addq.w    #8,A7
                    7471   ; Decode6BitEA(OpCode,0,0,0) ;
000042E2  42A7      7472          clr.l     -(A7)
000042E4  42A7      7473          clr.l     -(A7)
000042E6  42A7      7474          clr.l     -(A7)
000042E8  2F02      7475          move.l    D2,-(A7)
000042EA  4EB8 2F62 7476          jsr       _Decode6BitEA
000042EE  DEFC 0010 7477          add.w     #16,A7
                    7478   ; strcatInstruction(",") ;
000042F2  4879 0000 7479          pea       @m68kde~1_179.L
000042F6  7170      
000042F8  4EB8 0CCC 7480          jsr       _strcatInstruction
000042FC  584F      7481          addq.w    #4,A7
                    7482   ; Decode3BitDataRegister(*OpCode) ;
000042FE  2042      7483          move.l    D2,A0
00004300  3210      7484          move.w    (A0),D1
00004302  C2BC 0000 7485          and.l     #65535,D1
00004306  FFFF      
00004308  2F01      7486          move.l    D1,-(A7)
0000430A  4EB8 2D2A 7487          jsr       _Decode3BitDataRegister
0000430E  584F      7488          addq.w    #4,A7
                    7489   DisassembleInstruction_145:
                    7490   ; }
                    7491   ; /////////////////////////////////////////////////////////////////////////////////
                    7492   ; // if instruction is DIVU
                    7493   ; /////////////////////////////////////////////////////////////////////////////////
                    7494   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
00004310  2042      7495          move.l    D2,A0
00004312  3010      7496          move.w    (A0),D0
00004314  C07C F1C0 7497          and.w     #61888,D0
00004318  0C40 80C0 7498          cmp.w     #32960,D0
0000431C  6600 004A 7499          bne       DisassembleInstruction_147
                    7500   ; {
                    7501   ; InstructionSize = 1;
00004320  24BC 0000 7502          move.l    #1,(A2)
00004324  0001      
                    7503   ; strcpy(Instruction,"DIVU ") ;
00004326  4879 0000 7504          pea       @m68kde~1_245.L
0000432A  7316      
0000432C  4879 0803 7505          pea       _Instruction.L
00004330  04E2      
00004332  4EB9 0000 7506          jsr       _strcpy
00004336  5418      
00004338  504F      7507          addq.w    #8,A7
                    7508   ; Decode6BitEA(OpCode,0,0,0) ;
0000433A  42A7      7509          clr.l     -(A7)
0000433C  42A7      7510          clr.l     -(A7)
0000433E  42A7      7511          clr.l     -(A7)
00004340  2F02      7512          move.l    D2,-(A7)
00004342  4EB8 2F62 7513          jsr       _Decode6BitEA
00004346  DEFC 0010 7514          add.w     #16,A7
                    7515   ; strcatInstruction(",") ;
0000434A  4879 0000 7516          pea       @m68kde~1_179.L
0000434E  7170      
00004350  4EB8 0CCC 7517          jsr       _strcatInstruction
00004354  584F      7518          addq.w    #4,A7
                    7519   ; Decode3BitDataRegister(*OpCode) ;
00004356  2042      7520          move.l    D2,A0
00004358  3210      7521          move.w    (A0),D1
0000435A  C2BC 0000 7522          and.l     #65535,D1
0000435E  FFFF      
00004360  2F01      7523          move.l    D1,-(A7)
00004362  4EB8 2D2A 7524          jsr       _Decode3BitDataRegister
00004366  584F      7525          addq.w    #4,A7
                    7526   DisassembleInstruction_147:
                    7527   ; }
                    7528   ; /////////////////////////////////////////////////////////////////////////////////
                    7529   ; // if instruction is EOR
                    7530   ; /////////////////////////////////////////////////////////////////////////////////
                    7531   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
00004368  2042      7532          move.l    D2,A0
0000436A  3010      7533          move.w    (A0),D0
0000436C  C07C F000 7534          and.w     #61440,D0
00004370  0C40 B000 7535          cmp.w     #45056,D0
00004374  6600 004A 7536          bne       DisassembleInstruction_151
                    7537   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004378  2042      7538          move.l    D2,A0
0000437A  3010      7539          move.w    (A0),D0
0000437C  EC40      7540          asr.w     #6,D0
0000437E  C07C 0007 7541          and.w     #7,D0
00004382  3600      7542          move.w    D0,D3
                    7543   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
00004384  2042      7544          move.l    D2,A0
00004386  3010      7545          move.w    (A0),D0
00004388  E640      7546          asr.w     #3,D0
0000438A  C07C 0007 7547          and.w     #7,D0
0000438E  3D40 FFEC 7548          move.w    D0,-20(A6)
                    7549   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
00004392  0C43 0004 7550          cmp.w     #4,D3
00004396  6528      7551          blo.s     DisassembleInstruction_151
00004398  0C43 0006 7552          cmp.w     #6,D3
0000439C  6222      7553          bhi.s     DisassembleInstruction_151
0000439E  302E FFEC 7554          move.w    -20(A6),D0
000043A2  0C40 0001 7555          cmp.w     #1,D0
000043A6  6718      7556          beq.s     DisassembleInstruction_151
                    7557   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7558   ; (EAMode != (unsigned short int)(0x0001)))
                    7559   ; {
                    7560   ; InstructionSize = 1;
000043A8  24BC 0000 7561          move.l    #1,(A2)
000043AC  0001      
                    7562   ; strcpyInstruction("EOR") ;
000043AE  4879 0000 7563          pea       @m68kde~1_246.L
000043B2  731C      
000043B4  4E93      7564          jsr       (A3)
000043B6  584F      7565          addq.w    #4,A7
                    7566   ; Decode3BitOperandMode(OpCode);
000043B8  2F02      7567          move.l    D2,-(A7)
000043BA  4EB8 338A 7568          jsr       _Decode3BitOperandMode
000043BE  584F      7569          addq.w    #4,A7
                    7570   DisassembleInstruction_151:
                    7571   ; }
                    7572   ; }
                    7573   ; /////////////////////////////////////////////////////////////////////////////////
                    7574   ; // if instruction is EOR to CCR
                    7575   ; /////////////////////////////////////////////////////////////////////////////////
                    7576   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
000043C0  2042      7577          move.l    D2,A0
000043C2  3010      7578          move.w    (A0),D0
000043C4  0C40 0A3C 7579          cmp.w     #2620,D0
000043C8  662C      7580          bne.s     DisassembleInstruction_153
                    7581   ; InstructionSize = 1;
000043CA  24BC 0000 7582          move.l    #1,(A2)
000043CE  0001      
                    7583   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
000043D0  2042      7584          move.l    D2,A0
000043D2  3228 0002 7585          move.w    2(A0),D1
000043D6  C27C 00FF 7586          and.w     #255,D1
000043DA  C2BC 0000 7587          and.l     #65535,D1
000043DE  FFFF      
000043E0  2F01      7588          move.l    D1,-(A7)
000043E2  4879 0000 7589          pea       @m68kde~1_247.L
000043E6  7320      
000043E8  4879 0803 7590          pea       _Instruction.L
000043EC  04E2      
000043EE  4E95      7591          jsr       (A5)
000043F0  DEFC 000C 7592          add.w     #12,A7
                    7593   ; InstructionSize += 1;
000043F4  5292      7594          addq.l    #1,(A2)
                    7595   DisassembleInstruction_153:
                    7596   ; }
                    7597   ; /////////////////////////////////////////////////////////////////////////////////
                    7598   ; // if instruction is EORI #data,SR
                    7599   ; /////////////////////////////////////////////////////////////////////////////////
                    7600   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
000043F6  2042      7601          move.l    D2,A0
000043F8  3010      7602          move.w    (A0),D0
000043FA  0C40 0A7C 7603          cmp.w     #2684,D0
000043FE  6622      7604          bne.s     DisassembleInstruction_155
                    7605   ; InstructionSize = 2;
00004400  24BC 0000 7606          move.l    #2,(A2)
00004404  0002      
                    7607   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
00004406  2042      7608          move.l    D2,A0
00004408  3228 0002 7609          move.w    2(A0),D1
0000440C  48C1      7610          ext.l     D1
0000440E  2F01      7611          move.l    D1,-(A7)
00004410  4879 0000 7612          pea       @m68kde~1_248.L
00004414  7330      
00004416  4879 0803 7613          pea       _Instruction.L
0000441A  04E2      
0000441C  4E95      7614          jsr       (A5)
0000441E  DEFC 000C 7615          add.w     #12,A7
                    7616   DisassembleInstruction_155:
                    7617   ; }
                    7618   ; /////////////////////////////////////////////////////////////////////////////////
                    7619   ; // if instruction is EXG
                    7620   ; /////////////////////////////////////////////////////////////////////////////////
                    7621   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
00004422  2042      7622          move.l    D2,A0
00004424  3010      7623          move.w    (A0),D0
00004426  C07C F100 7624          and.w     #61696,D0
0000442A  0C40 C100 7625          cmp.w     #49408,D0
0000442E  6600 00E0 7626          bne       DisassembleInstruction_163
                    7627   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
00004432  2042      7628          move.l    D2,A0
00004434  3010      7629          move.w    (A0),D0
00004436  E040      7630          asr.w     #8,D0
00004438  E240      7631          asr.w     #1,D0
0000443A  C07C 0007 7632          and.w     #7,D0
0000443E  3D40 FFF0 7633          move.w    D0,-16(A6)
                    7634   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
00004442  2042      7635          move.l    D2,A0
00004444  3010      7636          move.w    (A0),D0
00004446  C07C 0007 7637          and.w     #7,D0
0000444A  3D40 FFF2 7638          move.w    D0,-14(A6)
                    7639   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
0000444E  2042      7640          move.l    D2,A0
00004450  3010      7641          move.w    (A0),D0
00004452  E640      7642          asr.w     #3,D0
00004454  C07C 001F 7643          and.w     #31,D0
00004458  3D40 FFF4 7644          move.w    D0,-12(A6)
                    7645   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
0000445C  302E FFF4 7646          move.w    -12(A6),D0
00004460  0C40 0008 7647          cmp.w     #8,D0
00004464  6634      7648          bne.s     DisassembleInstruction_159
                    7649   ; InstructionSize = 1;
00004466  24BC 0000 7650          move.l    #1,(A2)
0000446A  0001      
                    7651   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
0000446C  322E FFF2 7652          move.w    -14(A6),D1
00004470  C2BC 0000 7653          and.l     #65535,D1
00004474  FFFF      
00004476  2F01      7654          move.l    D1,-(A7)
00004478  322E FFF0 7655          move.w    -16(A6),D1
0000447C  C2BC 0000 7656          and.l     #65535,D1
00004480  FFFF      
00004482  2F01      7657          move.l    D1,-(A7)
00004484  4879 0000 7658          pea       @m68kde~1_249.L
00004488  733E      
0000448A  4879 0803 7659          pea       _Instruction.L
0000448E  04E2      
00004490  4E95      7660          jsr       (A5)
00004492  DEFC 0010 7661          add.w     #16,A7
00004496  6000 0078 7662          bra       DisassembleInstruction_163
                    7663   DisassembleInstruction_159:
                    7664   ; }
                    7665   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
0000449A  302E FFF4 7666          move.w    -12(A6),D0
0000449E  0C40 0009 7667          cmp.w     #9,D0
000044A2  6632      7668          bne.s     DisassembleInstruction_161
                    7669   ; InstructionSize = 1;
000044A4  24BC 0000 7670          move.l    #1,(A2)
000044A8  0001      
                    7671   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
000044AA  322E FFF2 7672          move.w    -14(A6),D1
000044AE  C2BC 0000 7673          and.l     #65535,D1
000044B2  FFFF      
000044B4  2F01      7674          move.l    D1,-(A7)
000044B6  322E FFF0 7675          move.w    -16(A6),D1
000044BA  C2BC 0000 7676          and.l     #65535,D1
000044BE  FFFF      
000044C0  2F01      7677          move.l    D1,-(A7)
000044C2  4879 0000 7678          pea       @m68kde~1_250.L
000044C6  734A      
000044C8  4879 0803 7679          pea       _Instruction.L
000044CC  04E2      
000044CE  4E95      7680          jsr       (A5)
000044D0  DEFC 0010 7681          add.w     #16,A7
000044D4  603A      7682          bra.s     DisassembleInstruction_163
                    7683   DisassembleInstruction_161:
                    7684   ; }
                    7685   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
000044D6  302E FFF4 7686          move.w    -12(A6),D0
000044DA  0C40 0011 7687          cmp.w     #17,D0
000044DE  6630      7688          bne.s     DisassembleInstruction_163
                    7689   ; InstructionSize = 1;
000044E0  24BC 0000 7690          move.l    #1,(A2)
000044E4  0001      
                    7691   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
000044E6  322E FFF2 7692          move.w    -14(A6),D1
000044EA  C2BC 0000 7693          and.l     #65535,D1
000044EE  FFFF      
000044F0  2F01      7694          move.l    D1,-(A7)
000044F2  322E FFF0 7695          move.w    -16(A6),D1
000044F6  C2BC 0000 7696          and.l     #65535,D1
000044FA  FFFF      
000044FC  2F01      7697          move.l    D1,-(A7)
000044FE  4879 0000 7698          pea       @m68kde~1_251.L
00004502  7356      
00004504  4879 0803 7699          pea       _Instruction.L
00004508  04E2      
0000450A  4E95      7700          jsr       (A5)
0000450C  DEFC 0010 7701          add.w     #16,A7
                    7702   DisassembleInstruction_163:
                    7703   ; }
                    7704   ; }
                    7705   ; /////////////////////////////////////////////////////////////////////////////////
                    7706   ; // if instruction is EXT
                    7707   ; /////////////////////////////////////////////////////////////////////////////////
                    7708   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
00004510  2042      7709          move.l    D2,A0
00004512  3010      7710          move.w    (A0),D0
00004514  C07C FE38 7711          and.w     #65080,D0
00004518  0C40 4800 7712          cmp.w     #18432,D0
0000451C  6600 0054 7713          bne       DisassembleInstruction_165
                    7714   ; {
                    7715   ; InstructionSize = 1;
00004520  24BC 0000 7716          move.l    #1,(A2)
00004524  0001      
                    7717   ; strcpy(Instruction,"EXT") ;
00004526  4879 0000 7718          pea       @m68kde~1_252.L
0000452A  7362      
0000452C  4879 0803 7719          pea       _Instruction.L
00004530  04E2      
00004532  4EB9 0000 7720          jsr       _strcpy
00004536  5418      
00004538  504F      7721          addq.w    #8,A7
                    7722   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
0000453A  2042      7723          move.l    D2,A0
0000453C  3010      7724          move.w    (A0),D0
0000453E  C07C 00C0 7725          and.w     #192,D0
00004542  0C40 00C0 7726          cmp.w     #192,D0
00004546  660E      7727          bne.s     DisassembleInstruction_167
                    7728   ; strcatInstruction(".L ") ;
00004548  4879 0000 7729          pea       @m68kde~1_163.L
0000454C  7126      
0000454E  4EB8 0CCC 7730          jsr       _strcatInstruction
00004552  584F      7731          addq.w    #4,A7
00004554  600C      7732          bra.s     DisassembleInstruction_168
                    7733   DisassembleInstruction_167:
                    7734   ; else
                    7735   ; strcatInstruction(".W ") ;
00004556  4879 0000 7736          pea       @m68kde~1_162.L
0000455A  7122      
0000455C  4EB8 0CCC 7737          jsr       _strcatInstruction
00004560  584F      7738          addq.w    #4,A7
                    7739   DisassembleInstruction_168:
                    7740   ; Decode6BitEA(OpCode,0,0,0) ;
00004562  42A7      7741          clr.l     -(A7)
00004564  42A7      7742          clr.l     -(A7)
00004566  42A7      7743          clr.l     -(A7)
00004568  2F02      7744          move.l    D2,-(A7)
0000456A  4EB8 2F62 7745          jsr       _Decode6BitEA
0000456E  DEFC 0010 7746          add.w     #16,A7
                    7747   DisassembleInstruction_165:
                    7748   ; }
                    7749   ; /////////////////////////////////////////////////////////////////////////////////
                    7750   ; // if instruction is ILLEGAL $4afc
                    7751   ; /////////////////////////////////////////////////////////////////////////////////
                    7752   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
00004572  2042      7753          move.l    D2,A0
00004574  3010      7754          move.w    (A0),D0
00004576  0C40 4AFC 7755          cmp.w     #19196,D0
0000457A  661A      7756          bne.s     DisassembleInstruction_169
                    7757   ; InstructionSize = 1;
0000457C  24BC 0000 7758          move.l    #1,(A2)
00004580  0001      
                    7759   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
00004582  4879 0000 7760          pea       @m68kde~1_253.L
00004586  7366      
00004588  4879 0803 7761          pea       _Instruction.L
0000458C  04E2      
0000458E  4EB9 0000 7762          jsr       _strcpy
00004592  5418      
00004594  504F      7763          addq.w    #8,A7
                    7764   DisassembleInstruction_169:
                    7765   ; }
                    7766   ; /////////////////////////////////////////////////////////////////////////////////
                    7767   ; // if instruction is JMP
                    7768   ; /////////////////////////////////////////////////////////////////////////////////
                    7769   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
00004596  2042      7770          move.l    D2,A0
00004598  3010      7771          move.w    (A0),D0
0000459A  C07C FFC0 7772          and.w     #65472,D0
0000459E  0C40 4EC0 7773          cmp.w     #20160,D0
000045A2  662A      7774          bne.s     DisassembleInstruction_171
                    7775   ; {
                    7776   ; InstructionSize = 1;
000045A4  24BC 0000 7777          move.l    #1,(A2)
000045A8  0001      
                    7778   ; strcpy(Instruction,"JMP ") ;
000045AA  4879 0000 7779          pea       @m68kde~1_254.L
000045AE  7376      
000045B0  4879 0803 7780          pea       _Instruction.L
000045B4  04E2      
000045B6  4EB9 0000 7781          jsr       _strcpy
000045BA  5418      
000045BC  504F      7782          addq.w    #8,A7
                    7783   ; Decode6BitEA(OpCode,0,0,0) ;
000045BE  42A7      7784          clr.l     -(A7)
000045C0  42A7      7785          clr.l     -(A7)
000045C2  42A7      7786          clr.l     -(A7)
000045C4  2F02      7787          move.l    D2,-(A7)
000045C6  4EB8 2F62 7788          jsr       _Decode6BitEA
000045CA  DEFC 0010 7789          add.w     #16,A7
                    7790   DisassembleInstruction_171:
                    7791   ; }
                    7792   ; /////////////////////////////////////////////////////////////////////////////////
                    7793   ; // if instruction is JSR
                    7794   ; /////////////////////////////////////////////////////////////////////////////////
                    7795   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
000045CE  2042      7796          move.l    D2,A0
000045D0  3010      7797          move.w    (A0),D0
000045D2  C07C FFC0 7798          and.w     #65472,D0
000045D6  0C40 4E80 7799          cmp.w     #20096,D0
000045DA  662A      7800          bne.s     DisassembleInstruction_173
                    7801   ; {
                    7802   ; InstructionSize = 1;
000045DC  24BC 0000 7803          move.l    #1,(A2)
000045E0  0001      
                    7804   ; strcpy(Instruction,"JSR ") ;
000045E2  4879 0000 7805          pea       @m68kde~1_255.L
000045E6  737C      
000045E8  4879 0803 7806          pea       _Instruction.L
000045EC  04E2      
000045EE  4EB9 0000 7807          jsr       _strcpy
000045F2  5418      
000045F4  504F      7808          addq.w    #8,A7
                    7809   ; Decode6BitEA(OpCode,0,0,0) ;
000045F6  42A7      7810          clr.l     -(A7)
000045F8  42A7      7811          clr.l     -(A7)
000045FA  42A7      7812          clr.l     -(A7)
000045FC  2F02      7813          move.l    D2,-(A7)
000045FE  4EB8 2F62 7814          jsr       _Decode6BitEA
00004602  DEFC 0010 7815          add.w     #16,A7
                    7816   DisassembleInstruction_173:
                    7817   ; }
                    7818   ; /////////////////////////////////////////////////////////////////////////////////
                    7819   ; // if instruction is LEA
                    7820   ; /////////////////////////////////////////////////////////////////////////////////
                    7821   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
00004606  2042      7822          move.l    D2,A0
00004608  3010      7823          move.w    (A0),D0
0000460A  C07C F1C0 7824          and.w     #61888,D0
0000460E  0C40 41C0 7825          cmp.w     #16832,D0
00004612  6600 0056 7826          bne       DisassembleInstruction_175
                    7827   ; {
                    7828   ; InstructionSize = 1;
00004616  24BC 0000 7829          move.l    #1,(A2)
0000461A  0001      
                    7830   ; strcpy(Instruction,"LEA ") ;
0000461C  4879 0000 7831          pea       @m68kde~1_256.L
00004620  7382      
00004622  4879 0803 7832          pea       _Instruction.L
00004626  04E2      
00004628  4EB9 0000 7833          jsr       _strcpy
0000462C  5418      
0000462E  504F      7834          addq.w    #8,A7
                    7835   ; Decode6BitEA(OpCode,0,0,0) ;
00004630  42A7      7836          clr.l     -(A7)
00004632  42A7      7837          clr.l     -(A7)
00004634  42A7      7838          clr.l     -(A7)
00004636  2F02      7839          move.l    D2,-(A7)
00004638  4EB8 2F62 7840          jsr       _Decode6BitEA
0000463C  DEFC 0010 7841          add.w     #16,A7
                    7842   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
00004640  2042      7843          move.l    D2,A0
00004642  3210      7844          move.w    (A0),D1
00004644  E041      7845          asr.w     #8,D1
00004646  E241      7846          asr.w     #1,D1
00004648  C27C 0007 7847          and.w     #7,D1
0000464C  C2BC 0000 7848          and.l     #65535,D1
00004650  FFFF      
00004652  2F01      7849          move.l    D1,-(A7)
00004654  4879 0000 7850          pea       @m68kde~1_238.L
00004658  72D6      
0000465A  2F0C      7851          move.l    A4,-(A7)
0000465C  4E95      7852          jsr       (A5)
0000465E  DEFC 000C 7853          add.w     #12,A7
                    7854   ; strcatInstruction(TempString);
00004662  2F0C      7855          move.l    A4,-(A7)
00004664  4EB8 0CCC 7856          jsr       _strcatInstruction
00004668  584F      7857          addq.w    #4,A7
                    7858   DisassembleInstruction_175:
                    7859   ; }
                    7860   ; /////////////////////////////////////////////////////////////////////////////////
                    7861   ; // if instruction is LINK.W
                    7862   ; /////////////////////////////////////////////////////////////////////////////////
                    7863   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
0000466A  2042      7864          move.l    D2,A0
0000466C  3010      7865          move.w    (A0),D0
0000466E  C07C FFF8 7866          and.w     #65528,D0
00004672  0C40 4E50 7867          cmp.w     #20048,D0
00004676  6600 0052 7868          bne       DisassembleInstruction_177
                    7869   ; {
                    7870   ; InstructionSize = 1;
0000467A  24BC 0000 7871          move.l    #1,(A2)
0000467E  0001      
                    7872   ; strcpy(Instruction,"LINK ") ;
00004680  4879 0000 7873          pea       @m68kde~1_257.L
00004684  7388      
00004686  4879 0803 7874          pea       _Instruction.L
0000468A  04E2      
0000468C  4EB9 0000 7875          jsr       _strcpy
00004690  5418      
00004692  504F      7876          addq.w    #8,A7
                    7877   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
00004694  2042      7878          move.l    D2,A0
00004696  3228 0002 7879          move.w    2(A0),D1
0000469A  48C1      7880          ext.l     D1
0000469C  2F01      7881          move.l    D1,-(A7)
0000469E  2042      7882          move.l    D2,A0
000046A0  3210      7883          move.w    (A0),D1
000046A2  C27C 0007 7884          and.w     #7,D1
000046A6  C2BC 0000 7885          and.l     #65535,D1
000046AA  FFFF      
000046AC  2F01      7886          move.l    D1,-(A7)
000046AE  4879 0000 7887          pea       @m68kde~1_258.L
000046B2  738E      
000046B4  2F0C      7888          move.l    A4,-(A7)
000046B6  4E95      7889          jsr       (A5)
000046B8  DEFC 0010 7890          add.w     #16,A7
                    7891   ; InstructionSize = 2 ;
000046BC  24BC 0000 7892          move.l    #2,(A2)
000046C0  0002      
                    7893   ; strcatInstruction(TempString);
000046C2  2F0C      7894          move.l    A4,-(A7)
000046C4  4EB8 0CCC 7895          jsr       _strcatInstruction
000046C8  584F      7896          addq.w    #4,A7
                    7897   DisassembleInstruction_177:
                    7898   ; }
                    7899   ; /////////////////////////////////////////////////////////////////////////////////
                    7900   ; // if instruction is MOVE, MOVEA
                    7901   ; /////////////////////////////////////////////////////////////////////////////////
                    7902   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
000046CA  2042      7903          move.l    D2,A0
000046CC  3010      7904          move.w    (A0),D0
000046CE  C07C C000 7905          and.w     #49152,D0
000046D2  6600 00F0 7906          bne       DisassembleInstruction_193
                    7907   ; {
                    7908   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
000046D6  2042      7909          move.l    D2,A0
000046D8  3010      7910          move.w    (A0),D0
000046DA  C07C 3000 7911          and.w     #12288,D0
000046DE  E048      7912          lsr.w     #8,D0
000046E0  E848      7913          lsr.w     #4,D0
000046E2  3D40 FFE2 7914          move.w    D0,-30(A6)
                    7915   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
000046E6  2042      7916          move.l    D2,A0
000046E8  3010      7917          move.w    (A0),D0
000046EA  E640      7918          asr.w     #3,D0
000046EC  C07C 0007 7919          and.w     #7,D0
000046F0  3600      7920          move.w    D0,D3
                    7921   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
000046F2  2042      7922          move.l    D2,A0
000046F4  3010      7923          move.w    (A0),D0
000046F6  C07C 0007 7924          and.w     #7,D0
000046FA  3D40 FFF6 7925          move.w    D0,-10(A6)
                    7926   ; DataSize = 0 ;
000046FE  7E00      7927          moveq     #0,D7
                    7928   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    7929   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
00004700  0C43 0005 7930          cmp.w     #5,D3
00004704  6706      7931          beq.s     DisassembleInstruction_183
00004706  0C43 0006 7932          cmp.w     #6,D3
0000470A  6602      7933          bne.s     DisassembleInstruction_181
                    7934   DisassembleInstruction_183:
                    7935   ; DataSize = 1;  // source operands has 1 word after EA
0000470C  7E01      7936          moveq     #1,D7
                    7937   DisassembleInstruction_181:
                    7938   ; // if source addressing mode is a 16 or 32 bit address
                    7939   ; if((OpMode == (unsigned short int)(0x0007))) {
0000470E  0C43 0007 7940          cmp.w     #7,D3
00004712  660C      7941          bne.s     DisassembleInstruction_187
                    7942   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
00004714  302E FFF6 7943          move.w    -10(A6),D0
00004718  6604      7944          bne.s     DisassembleInstruction_186
                    7945   ; DataSize = 1 ;
0000471A  7E01      7946          moveq     #1,D7
0000471C  6002      7947          bra.s     DisassembleInstruction_187
                    7948   DisassembleInstruction_186:
                    7949   ; else
                    7950   ; DataSize = 2 ;
0000471E  7E02      7951          moveq     #2,D7
                    7952   DisassembleInstruction_187:
                    7953   ; }
                    7954   ; // if source addressing mode is # then figure out size
                    7955   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
00004720  0C43 0007 7956          cmp.w     #7,D3
00004724  6624      7957          bne.s     DisassembleInstruction_191
00004726  302E FFF6 7958          move.w    -10(A6),D0
0000472A  0C40 0004 7959          cmp.w     #4,D0
0000472E  661A      7960          bne.s     DisassembleInstruction_191
                    7961   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
00004730  302E FFE2 7962          move.w    -30(A6),D0
00004734  0C40 0001 7963          cmp.w     #1,D0
00004738  670A      7964          beq.s     DisassembleInstruction_192
0000473A  302E FFE2 7965          move.w    -30(A6),D0
0000473E  0C40 0003 7966          cmp.w     #3,D0
00004742  6604      7967          bne.s     DisassembleInstruction_190
                    7968   DisassembleInstruction_192:
                    7969   ; DataSize = 1;
00004744  7E01      7970          moveq     #1,D7
00004746  6002      7971          bra.s     DisassembleInstruction_191
                    7972   DisassembleInstruction_190:
                    7973   ; else
                    7974   ; DataSize = 2 ;
00004748  7E02      7975          moveq     #2,D7
                    7976   DisassembleInstruction_191:
                    7977   ; //printf("DataSize = %d",DataSize) ;
                    7978   ; }
                    7979   ; if(Size != 0)
0000474A  302E FFE2 7980          move.w    -30(A6),D0
0000474E  6700 0074 7981          beq       DisassembleInstruction_193
                    7982   ; {
                    7983   ; InstructionSize = 1;
00004752  24BC 0000 7984          move.l    #1,(A2)
00004756  0001      
                    7985   ; if(Size == 1)
00004758  302E FFE2 7986          move.w    -30(A6),D0
0000475C  0C40 0001 7987          cmp.w     #1,D0
00004760  660C      7988          bne.s     DisassembleInstruction_195
                    7989   ; strcpyInstruction("MOVE.B ") ;
00004762  4879 0000 7990          pea       @m68kde~1_259.L
00004766  7396      
00004768  4E93      7991          jsr       (A3)
0000476A  584F      7992          addq.w    #4,A7
0000476C  6020      7993          bra.s     DisassembleInstruction_198
                    7994   DisassembleInstruction_195:
                    7995   ; else if(Size == 2)
0000476E  302E FFE2 7996          move.w    -30(A6),D0
00004772  0C40 0002 7997          cmp.w     #2,D0
00004776  660C      7998          bne.s     DisassembleInstruction_197
                    7999   ; strcpyInstruction("MOVE.L ") ;
00004778  4879 0000 8000          pea       @m68kde~1_260.L
0000477C  739E      
0000477E  4E93      8001          jsr       (A3)
00004780  584F      8002          addq.w    #4,A7
00004782  600A      8003          bra.s     DisassembleInstruction_198
                    8004   DisassembleInstruction_197:
                    8005   ; else
                    8006   ; strcpyInstruction("MOVE.W ") ;
00004784  4879 0000 8007          pea       @m68kde~1_261.L
00004788  73A6      
0000478A  4E93      8008          jsr       (A3)
0000478C  584F      8009          addq.w    #4,A7
                    8010   DisassembleInstruction_198:
                    8011   ; Decode6BitEA(OpCode,0,0,1) ;
0000478E  4878 0001 8012          pea       1
00004792  42A7      8013          clr.l     -(A7)
00004794  42A7      8014          clr.l     -(A7)
00004796  2F02      8015          move.l    D2,-(A7)
00004798  4EB8 2F62 8016          jsr       _Decode6BitEA
0000479C  DEFC 0010 8017          add.w     #16,A7
                    8018   ; strcatInstruction(",") ;
000047A0  4879 0000 8019          pea       @m68kde~1_179.L
000047A4  7170      
000047A6  4EB8 0CCC 8020          jsr       _strcatInstruction
000047AA  584F      8021          addq.w    #4,A7
                    8022   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8023   ; // but subtract 1 to make the maths correct in the called function
                    8024   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
000047AC  42A7      8025          clr.l     -(A7)
000047AE  CEBC 0000 8026          and.l     #65535,D7
000047B2  FFFF      
000047B4  2F07      8027          move.l    D7,-(A7)
000047B6  4878 0002 8028          pea       2
000047BA  2F02      8029          move.l    D2,-(A7)
000047BC  4EB8 2F62 8030          jsr       _Decode6BitEA
000047C0  DEFC 0010 8031          add.w     #16,A7
                    8032   DisassembleInstruction_193:
                    8033   ; }
                    8034   ; }
                    8035   ; /////////////////////////////////////////////////////////////////////////////////
                    8036   ; // if instruction is MOVE <EA>,CCR
                    8037   ; /////////////////////////////////////////////////////////////////////////////////
                    8038   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
000047C4  2042      8039          move.l    D2,A0
000047C6  3010      8040          move.w    (A0),D0
000047C8  C07C FFC0 8041          and.w     #65472,D0
000047CC  0C40 44C0 8042          cmp.w     #17600,D0
000047D0  6636      8043          bne.s     DisassembleInstruction_199
                    8044   ; {
                    8045   ; InstructionSize = 1;
000047D2  24BC 0000 8046          move.l    #1,(A2)
000047D6  0001      
                    8047   ; strcpy(Instruction,"MOVE ") ;
000047D8  4879 0000 8048          pea       @m68kde~1_262.L
000047DC  73AE      
000047DE  4879 0803 8049          pea       _Instruction.L
000047E2  04E2      
000047E4  4EB9 0000 8050          jsr       _strcpy
000047E8  5418      
000047EA  504F      8051          addq.w    #8,A7
                    8052   ; Decode6BitEA(OpCode,0,0,0) ;
000047EC  42A7      8053          clr.l     -(A7)
000047EE  42A7      8054          clr.l     -(A7)
000047F0  42A7      8055          clr.l     -(A7)
000047F2  2F02      8056          move.l    D2,-(A7)
000047F4  4EB8 2F62 8057          jsr       _Decode6BitEA
000047F8  DEFC 0010 8058          add.w     #16,A7
                    8059   ; strcatInstruction(",CCR") ;
000047FC  4879 0000 8060          pea       @m68kde~1_263.L
00004800  73B4      
00004802  4EB8 0CCC 8061          jsr       _strcatInstruction
00004806  584F      8062          addq.w    #4,A7
                    8063   DisassembleInstruction_199:
                    8064   ; }
                    8065   ; /////////////////////////////////////////////////////////////////////////////////
                    8066   ; // if instruction is MOVE SR,<EA>
                    8067   ; /////////////////////////////////////////////////////////////////////////////////
                    8068   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
00004808  2042      8069          move.l    D2,A0
0000480A  3010      8070          move.w    (A0),D0
0000480C  C07C FFC0 8071          and.w     #65472,D0
00004810  0C40 40C0 8072          cmp.w     #16576,D0
00004814  662A      8073          bne.s     DisassembleInstruction_201
                    8074   ; {
                    8075   ; InstructionSize = 1;
00004816  24BC 0000 8076          move.l    #1,(A2)
0000481A  0001      
                    8077   ; strcpy(Instruction,"MOVE SR,") ;
0000481C  4879 0000 8078          pea       @m68kde~1_264.L
00004820  73BA      
00004822  4879 0803 8079          pea       _Instruction.L
00004826  04E2      
00004828  4EB9 0000 8080          jsr       _strcpy
0000482C  5418      
0000482E  504F      8081          addq.w    #8,A7
                    8082   ; Decode6BitEA(OpCode,0,0,0) ;
00004830  42A7      8083          clr.l     -(A7)
00004832  42A7      8084          clr.l     -(A7)
00004834  42A7      8085          clr.l     -(A7)
00004836  2F02      8086          move.l    D2,-(A7)
00004838  4EB8 2F62 8087          jsr       _Decode6BitEA
0000483C  DEFC 0010 8088          add.w     #16,A7
                    8089   DisassembleInstruction_201:
                    8090   ; }
                    8091   ; /////////////////////////////////////////////////////////////////////////////////
                    8092   ; // if instruction is MOVE <EA>,SR
                    8093   ; /////////////////////////////////////////////////////////////////////////////////
                    8094   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
00004840  2042      8095          move.l    D2,A0
00004842  3010      8096          move.w    (A0),D0
00004844  C07C FFC0 8097          and.w     #65472,D0
00004848  0C40 46C0 8098          cmp.w     #18112,D0
0000484C  6636      8099          bne.s     DisassembleInstruction_203
                    8100   ; {
                    8101   ; InstructionSize = 1;
0000484E  24BC 0000 8102          move.l    #1,(A2)
00004852  0001      
                    8103   ; strcpy(Instruction,"MOVE ") ;
00004854  4879 0000 8104          pea       @m68kde~1_262.L
00004858  73AE      
0000485A  4879 0803 8105          pea       _Instruction.L
0000485E  04E2      
00004860  4EB9 0000 8106          jsr       _strcpy
00004864  5418      
00004866  504F      8107          addq.w    #8,A7
                    8108   ; Decode6BitEA(OpCode,0,0,0) ;
00004868  42A7      8109          clr.l     -(A7)
0000486A  42A7      8110          clr.l     -(A7)
0000486C  42A7      8111          clr.l     -(A7)
0000486E  2F02      8112          move.l    D2,-(A7)
00004870  4EB8 2F62 8113          jsr       _Decode6BitEA
00004874  DEFC 0010 8114          add.w     #16,A7
                    8115   ; strcatInstruction(",SR") ;
00004878  4879 0000 8116          pea       @m68kde~1_265.L
0000487C  73C4      
0000487E  4EB8 0CCC 8117          jsr       _strcatInstruction
00004882  584F      8118          addq.w    #4,A7
                    8119   DisassembleInstruction_203:
                    8120   ; }
                    8121   ; /////////////////////////////////////////////////////////////////////////////////
                    8122   ; // if instruction is MOVE USP,An
                    8123   ; /////////////////////////////////////////////////////////////////////////////////
                    8124   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004884  2042      8125          move.l    D2,A0
00004886  3010      8126          move.w    (A0),D0
00004888  C07C FFF0 8127          and.w     #65520,D0
0000488C  0C40 4E60 8128          cmp.w     #20064,D0
00004890  6600 0060 8129          bne       DisassembleInstruction_208
                    8130   ; {
                    8131   ; InstructionSize = 1;
00004894  24BC 0000 8132          move.l    #1,(A2)
00004898  0001      
                    8133   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
0000489A  2042      8134          move.l    D2,A0
0000489C  3010      8135          move.w    (A0),D0
0000489E  C07C 0007 8136          and.w     #7,D0
000048A2  3D40 FFEA 8137          move.w    D0,-22(A6)
                    8138   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
000048A6  2042      8139          move.l    D2,A0
000048A8  3010      8140          move.w    (A0),D0
000048AA  C07C 0008 8141          and.w     #8,D0
000048AE  0C40 0008 8142          cmp.w     #8,D0
000048B2  6620      8143          bne.s     DisassembleInstruction_207
                    8144   ; sprintf(Instruction, "MOVE USP,A%d", Register);
000048B4  322E FFEA 8145          move.w    -22(A6),D1
000048B8  C2BC 0000 8146          and.l     #65535,D1
000048BC  FFFF      
000048BE  2F01      8147          move.l    D1,-(A7)
000048C0  4879 0000 8148          pea       @m68kde~1_266.L
000048C4  73C8      
000048C6  4879 0803 8149          pea       _Instruction.L
000048CA  04E2      
000048CC  4E95      8150          jsr       (A5)
000048CE  DEFC 000C 8151          add.w     #12,A7
000048D2  601E      8152          bra.s     DisassembleInstruction_208
                    8153   DisassembleInstruction_207:
                    8154   ; else
                    8155   ; sprintf(Instruction, "MOVE A%d,USP", Register);
000048D4  322E FFEA 8156          move.w    -22(A6),D1
000048D8  C2BC 0000 8157          and.l     #65535,D1
000048DC  FFFF      
000048DE  2F01      8158          move.l    D1,-(A7)
000048E0  4879 0000 8159          pea       @m68kde~1_267.L
000048E4  73D6      
000048E6  4879 0803 8160          pea       _Instruction.L
000048EA  04E2      
000048EC  4E95      8161          jsr       (A5)
000048EE  DEFC 000C 8162          add.w     #12,A7
                    8163   DisassembleInstruction_208:
                    8164   ; }
                    8165   ; /////////////////////////////////////////////////////////////////////////////////
                    8166   ; // if instruction is MOVEM
                    8167   ; /////////////////////////////////////////////////////////////////////////////////
                    8168   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
000048F2  2042      8169          move.l    D2,A0
000048F4  3010      8170          move.w    (A0),D0
000048F6  C07C FB80 8171          and.w     #64384,D0
000048FA  0C40 4880 8172          cmp.w     #18560,D0
000048FE  6600 01FC 8173          bne       DisassembleInstruction_230
                    8174   ; {
                    8175   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004902  2042      8176          move.l    D2,A0
00004904  3010      8177          move.w    (A0),D0
00004906  E640      8178          asr.w     #3,D0
00004908  C07C 0007 8179          and.w     #7,D0
0000490C  3600      8180          move.w    D0,D3
                    8181   ; if( (OpMode != (unsigned short int)(0x0)) &&
0000490E  4A43      8182          tst.w     D3
00004910  6700 01EA 8183          beq       DisassembleInstruction_230
00004914  0C43 0001 8184          cmp.w     #1,D3
00004918  6700 01E2 8185          beq       DisassembleInstruction_230
0000491C  4A43      8186          tst.w     D3
0000491E  6700 01DC 8187          beq       DisassembleInstruction_230
                    8188   ; (OpMode != (unsigned short int)(0x1)) &&
                    8189   ; (OpMode != (unsigned short int)(0x0)))
                    8190   ; {
                    8191   ; InstructionSize = 1;
00004922  24BC 0000 8192          move.l    #1,(A2)
00004926  0001      
                    8193   ; strcpy(Instruction,"MOVEM") ;
00004928  4879 0000 8194          pea       @m68kde~1_268.L
0000492C  73E4      
0000492E  4879 0803 8195          pea       _Instruction.L
00004932  04E2      
00004934  4EB9 0000 8196          jsr       _strcpy
00004938  5418      
0000493A  504F      8197          addq.w    #8,A7
                    8198   ; InstructionSize ++ ;
0000493C  5292      8199          addq.l    #1,(A2)
                    8200   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
0000493E  2042      8201          move.l    D2,A0
00004940  3010      8202          move.w    (A0),D0
00004942  C07C 0040 8203          and.w     #64,D0
00004946  660E      8204          bne.s     DisassembleInstruction_213
                    8205   ; strcatInstruction(".W ") ;
00004948  4879 0000 8206          pea       @m68kde~1_162.L
0000494C  7122      
0000494E  4EB8 0CCC 8207          jsr       _strcatInstruction
00004952  584F      8208          addq.w    #4,A7
00004954  600C      8209          bra.s     DisassembleInstruction_214
                    8210   DisassembleInstruction_213:
                    8211   ; else
                    8212   ; strcatInstruction(".L ") ;
00004956  4879 0000 8213          pea       @m68kde~1_163.L
0000495A  7126      
0000495C  4EB8 0CCC 8214          jsr       _strcatInstruction
00004960  584F      8215          addq.w    #4,A7
                    8216   DisassembleInstruction_214:
                    8217   ; // movem  reg,-(An) if bit 10 = 0
                    8218   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004962  2042      8219          move.l    D2,A0
00004964  3010      8220          move.w    (A0),D0
00004966  C07C 0400 8221          and.w     #1024,D0
0000496A  6600 00D2 8222          bne       DisassembleInstruction_215
                    8223   ; {
                    8224   ; Mask = 0x8000 ;                     // bit 15 = 1
0000496E  3D7C 8000 8225          move.w    #32768,-2(A6)
00004972  FFFE      
                    8226   ; DoneSlash = 0 ;
00004974  4246      8227          clr.w     D6
                    8228   ; for(i = 0; i < 16; i ++)    {
00004976  4284      8229          clr.l     D4
                    8230   DisassembleInstruction_217:
00004978  0C84 0000 8231          cmp.l     #16,D4
0000497C  0010      
0000497E  6C00 009E 8232          bge       DisassembleInstruction_219
                    8233   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004982  4879 0000 8234          pea       @m68kde~1_33.L
00004986  6240      
00004988  4EB9 0000 8235          jsr       _printf
0000498C  55EA      
0000498E  584F      8236          addq.w    #4,A7
                    8237   ; if((OpCode[1] & Mask) == Mask)    {
00004990  2042      8238          move.l    D2,A0
00004992  3028 0002 8239          move.w    2(A0),D0
00004996  C06E FFFE 8240          and.w     -2(A6),D0
0000499A  B06E FFFE 8241          cmp.w     -2(A6),D0
0000499E  6600 006E 8242          bne       DisassembleInstruction_220
                    8243   ; if(i < 8 )  {
000049A2  0C84 0000 8244          cmp.l     #8,D4
000049A6  0008      
000049A8  6C2C      8245          bge.s     DisassembleInstruction_222
                    8246   ; if(DoneSlash == 0)  {
000049AA  4A46      8247          tst.w     D6
000049AC  6614      8248          bne.s     DisassembleInstruction_224
                    8249   ; sprintf(TempString, "D%d", i) ;
000049AE  2F04      8250          move.l    D4,-(A7)
000049B0  4879 0000 8251          pea       @m68kde~1_269.L
000049B4  73EA      
000049B6  2F0C      8252          move.l    A4,-(A7)
000049B8  4E95      8253          jsr       (A5)
000049BA  DEFC 000C 8254          add.w     #12,A7
                    8255   ; DoneSlash = 1;
000049BE  7C01      8256          moveq     #1,D6
000049C0  6010      8257          bra.s     DisassembleInstruction_225
                    8258   DisassembleInstruction_224:
                    8259   ; }
                    8260   ; else
                    8261   ; sprintf(TempString, "/D%d", i) ;
000049C2  2F04      8262          move.l    D4,-(A7)
000049C4  4879 0000 8263          pea       @m68kde~1_270.L
000049C8  73EE      
000049CA  2F0C      8264          move.l    A4,-(A7)
000049CC  4E95      8265          jsr       (A5)
000049CE  DEFC 000C 8266          add.w     #12,A7
                    8267   DisassembleInstruction_225:
000049D2  6000 0032 8268          bra       DisassembleInstruction_227
                    8269   DisassembleInstruction_222:
                    8270   ; }
                    8271   ; else   {
                    8272   ; if(DoneSlash == 0)  {
000049D6  4A46      8273          tst.w     D6
000049D8  6618      8274          bne.s     DisassembleInstruction_226
                    8275   ; sprintf(TempString, "A%d", i-8) ;
000049DA  2204      8276          move.l    D4,D1
000049DC  5181      8277          subq.l    #8,D1
000049DE  2F01      8278          move.l    D1,-(A7)
000049E0  4879 0000 8279          pea       @m68kde~1_271.L
000049E4  73F4      
000049E6  2F0C      8280          move.l    A4,-(A7)
000049E8  4E95      8281          jsr       (A5)
000049EA  DEFC 000C 8282          add.w     #12,A7
                    8283   ; DoneSlash = 1;
000049EE  7C01      8284          moveq     #1,D6
000049F0  6014      8285          bra.s     DisassembleInstruction_227
                    8286   DisassembleInstruction_226:
                    8287   ; }
                    8288   ; else
                    8289   ; sprintf(TempString, "/A%d", i-8) ;
000049F2  2204      8290          move.l    D4,D1
000049F4  5181      8291          subq.l    #8,D1
000049F6  2F01      8292          move.l    D1,-(A7)
000049F8  4879 0000 8293          pea       @m68kde~1_272.L
000049FC  73F8      
000049FE  2F0C      8294          move.l    A4,-(A7)
00004A00  4E95      8295          jsr       (A5)
00004A02  DEFC 000C 8296          add.w     #12,A7
                    8297   DisassembleInstruction_227:
                    8298   ; }
                    8299   ; strcatInstruction(TempString) ;
00004A06  2F0C      8300          move.l    A4,-(A7)
00004A08  4EB8 0CCC 8301          jsr       _strcatInstruction
00004A0C  584F      8302          addq.w    #4,A7
                    8303   DisassembleInstruction_220:
                    8304   ; }
                    8305   ; Mask = Mask >> 1 ;
00004A0E  302E FFFE 8306          move.w    -2(A6),D0
00004A12  E240      8307          asr.w     #1,D0
00004A14  3D40 FFFE 8308          move.w    D0,-2(A6)
00004A18  5284      8309          addq.l    #1,D4
00004A1A  6000 FF5C 8310          bra       DisassembleInstruction_217
                    8311   DisassembleInstruction_219:
                    8312   ; }
                    8313   ; strcatInstruction(",") ;
00004A1E  4879 0000 8314          pea       @m68kde~1_179.L
00004A22  7170      
00004A24  4EB8 0CCC 8315          jsr       _strcatInstruction
00004A28  584F      8316          addq.w    #4,A7
                    8317   ; Decode6BitEA(OpCode,0,0,0) ;
00004A2A  42A7      8318          clr.l     -(A7)
00004A2C  42A7      8319          clr.l     -(A7)
00004A2E  42A7      8320          clr.l     -(A7)
00004A30  2F02      8321          move.l    D2,-(A7)
00004A32  4EB8 2F62 8322          jsr       _Decode6BitEA
00004A36  DEFC 0010 8323          add.w     #16,A7
00004A3A  6000 00C0 8324          bra       DisassembleInstruction_230
                    8325   DisassembleInstruction_215:
                    8326   ; }
                    8327   ; //movem  (An)+,reg
                    8328   ; else    {
                    8329   ; Decode6BitEA(OpCode,0,0,0) ;
00004A3E  42A7      8330          clr.l     -(A7)
00004A40  42A7      8331          clr.l     -(A7)
00004A42  42A7      8332          clr.l     -(A7)
00004A44  2F02      8333          move.l    D2,-(A7)
00004A46  4EB8 2F62 8334          jsr       _Decode6BitEA
00004A4A  DEFC 0010 8335          add.w     #16,A7
                    8336   ; strcatInstruction(",") ;
00004A4E  4879 0000 8337          pea       @m68kde~1_179.L
00004A52  7170      
00004A54  4EB8 0CCC 8338          jsr       _strcatInstruction
00004A58  584F      8339          addq.w    #4,A7
                    8340   ; Mask = 0x0001 ;                     // bit 0 = 1
00004A5A  3D7C 0001 8341          move.w    #1,-2(A6)
00004A5E  FFFE      
                    8342   ; DoneSlash = 0 ;
00004A60  4246      8343          clr.w     D6
                    8344   ; for(i = 0; i < 16 ; i ++)    {
00004A62  4284      8345          clr.l     D4
                    8346   DisassembleInstruction_228:
00004A64  0C84 0000 8347          cmp.l     #16,D4
00004A68  0010      
00004A6A  6C00 0090 8348          bge       DisassembleInstruction_230
                    8349   ; if((OpCode[1] & Mask) == Mask)    {
00004A6E  2042      8350          move.l    D2,A0
00004A70  3028 0002 8351          move.w    2(A0),D0
00004A74  C06E FFFE 8352          and.w     -2(A6),D0
00004A78  B06E FFFE 8353          cmp.w     -2(A6),D0
00004A7C  6600 006E 8354          bne       DisassembleInstruction_231
                    8355   ; if(i < 8)   {       // data registers in bits 7-0
00004A80  0C84 0000 8356          cmp.l     #8,D4
00004A84  0008      
00004A86  6C2C      8357          bge.s     DisassembleInstruction_233
                    8358   ; if(DoneSlash == 0)  {
00004A88  4A46      8359          tst.w     D6
00004A8A  6614      8360          bne.s     DisassembleInstruction_235
                    8361   ; sprintf(TempString, "D%d", i) ;
00004A8C  2F04      8362          move.l    D4,-(A7)
00004A8E  4879 0000 8363          pea       @m68kde~1_269.L
00004A92  73EA      
00004A94  2F0C      8364          move.l    A4,-(A7)
00004A96  4E95      8365          jsr       (A5)
00004A98  DEFC 000C 8366          add.w     #12,A7
                    8367   ; DoneSlash = 1;
00004A9C  7C01      8368          moveq     #1,D6
00004A9E  6010      8369          bra.s     DisassembleInstruction_236
                    8370   DisassembleInstruction_235:
                    8371   ; }
                    8372   ; else
                    8373   ; sprintf(TempString, "/D%d", i) ;
00004AA0  2F04      8374          move.l    D4,-(A7)
00004AA2  4879 0000 8375          pea       @m68kde~1_270.L
00004AA6  73EE      
00004AA8  2F0C      8376          move.l    A4,-(A7)
00004AAA  4E95      8377          jsr       (A5)
00004AAC  DEFC 000C 8378          add.w     #12,A7
                    8379   DisassembleInstruction_236:
00004AB0  6000 0032 8380          bra       DisassembleInstruction_238
                    8381   DisassembleInstruction_233:
                    8382   ; }
                    8383   ; else    {
                    8384   ; if(DoneSlash == 0)  {
00004AB4  4A46      8385          tst.w     D6
00004AB6  6618      8386          bne.s     DisassembleInstruction_237
                    8387   ; sprintf(TempString, "A%d", i-8) ;
00004AB8  2204      8388          move.l    D4,D1
00004ABA  5181      8389          subq.l    #8,D1
00004ABC  2F01      8390          move.l    D1,-(A7)
00004ABE  4879 0000 8391          pea       @m68kde~1_271.L
00004AC2  73F4      
00004AC4  2F0C      8392          move.l    A4,-(A7)
00004AC6  4E95      8393          jsr       (A5)
00004AC8  DEFC 000C 8394          add.w     #12,A7
                    8395   ; DoneSlash = 1;
00004ACC  7C01      8396          moveq     #1,D6
00004ACE  6014      8397          bra.s     DisassembleInstruction_238
                    8398   DisassembleInstruction_237:
                    8399   ; }
                    8400   ; else
                    8401   ; sprintf(TempString, "/A%d", i-8) ;
00004AD0  2204      8402          move.l    D4,D1
00004AD2  5181      8403          subq.l    #8,D1
00004AD4  2F01      8404          move.l    D1,-(A7)
00004AD6  4879 0000 8405          pea       @m68kde~1_272.L
00004ADA  73F8      
00004ADC  2F0C      8406          move.l    A4,-(A7)
00004ADE  4E95      8407          jsr       (A5)
00004AE0  DEFC 000C 8408          add.w     #12,A7
                    8409   DisassembleInstruction_238:
                    8410   ; }
                    8411   ; strcatInstruction(TempString) ;
00004AE4  2F0C      8412          move.l    A4,-(A7)
00004AE6  4EB8 0CCC 8413          jsr       _strcatInstruction
00004AEA  584F      8414          addq.w    #4,A7
                    8415   DisassembleInstruction_231:
                    8416   ; }
                    8417   ; Mask = Mask << 1 ;
00004AEC  302E FFFE 8418          move.w    -2(A6),D0
00004AF0  E340      8419          asl.w     #1,D0
00004AF2  3D40 FFFE 8420          move.w    D0,-2(A6)
00004AF6  5284      8421          addq.l    #1,D4
00004AF8  6000 FF6A 8422          bra       DisassembleInstruction_228
                    8423   DisassembleInstruction_230:
                    8424   ; }
                    8425   ; }
                    8426   ; }
                    8427   ; }
                    8428   ; /////////////////////////////////////////////////////////////////////////////////
                    8429   ; // if instruction is MOVEP
                    8430   ; /////////////////////////////////////////////////////////////////////////////////
                    8431   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004AFC  2042      8432          move.l    D2,A0
00004AFE  3010      8433          move.w    (A0),D0
00004B00  C07C F038 8434          and.w     #61496,D0
00004B04  0C40 0008 8435          cmp.w     #8,D0
00004B08  6600 0112 8436          bne       DisassembleInstruction_247
                    8437   ; {
                    8438   ; InstructionSize = 1;
00004B0C  24BC 0000 8439          move.l    #1,(A2)
00004B10  0001      
                    8440   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004B12  2042      8441          move.l    D2,A0
00004B14  3010      8442          move.w    (A0),D0
00004B16  E040      8443          asr.w     #8,D0
00004B18  E240      8444          asr.w     #1,D0
00004B1A  C07C 0007 8445          and.w     #7,D0
00004B1E  3A00      8446          move.w    D0,D5
                    8447   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004B20  2042      8448          move.l    D2,A0
00004B22  3010      8449          move.w    (A0),D0
00004B24  C07C 0007 8450          and.w     #7,D0
00004B28  3D40 FFF8 8451          move.w    D0,-8(A6)
                    8452   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004B2C  2042      8453          move.l    D2,A0
00004B2E  3010      8454          move.w    (A0),D0
00004B30  EC40      8455          asr.w     #6,D0
00004B32  C07C 0007 8456          and.w     #7,D0
00004B36  3600      8457          move.w    D0,D3
                    8458   ; InstructionSize++ ;
00004B38  5292      8459          addq.l    #1,(A2)
                    8460   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004B3A  0C43 0004 8461          cmp.w     #4,D3
00004B3E  6634      8462          bne.s     DisassembleInstruction_241
                    8463   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004B40  CABC 0000 8464          and.l     #65535,D5
00004B44  FFFF      
00004B46  2F05      8465          move.l    D5,-(A7)
00004B48  322E FFF8 8466          move.w    -8(A6),D1
00004B4C  C2BC 0000 8467          and.l     #65535,D1
00004B50  FFFF      
00004B52  2F01      8468          move.l    D1,-(A7)
00004B54  2042      8469          move.l    D2,A0
00004B56  3228 0002 8470          move.w    2(A0),D1
00004B5A  48C1      8471          ext.l     D1
00004B5C  2F01      8472          move.l    D1,-(A7)
00004B5E  4879 0000 8473          pea       @m68kde~1_273.L
00004B62  73FE      
00004B64  4879 0803 8474          pea       _Instruction.L
00004B68  04E2      
00004B6A  4E95      8475          jsr       (A5)
00004B6C  DEFC 0014 8476          add.w     #20,A7
00004B70  6000 00AA 8477          bra       DisassembleInstruction_247
                    8478   DisassembleInstruction_241:
                    8479   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004B74  0C43 0005 8480          cmp.w     #5,D3
00004B78  6634      8481          bne.s     DisassembleInstruction_243
                    8482   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004B7A  CABC 0000 8483          and.l     #65535,D5
00004B7E  FFFF      
00004B80  2F05      8484          move.l    D5,-(A7)
00004B82  322E FFF8 8485          move.w    -8(A6),D1
00004B86  C2BC 0000 8486          and.l     #65535,D1
00004B8A  FFFF      
00004B8C  2F01      8487          move.l    D1,-(A7)
00004B8E  2042      8488          move.l    D2,A0
00004B90  3228 0002 8489          move.w    2(A0),D1
00004B94  48C1      8490          ext.l     D1
00004B96  2F01      8491          move.l    D1,-(A7)
00004B98  4879 0000 8492          pea       @m68kde~1_274.L
00004B9C  7414      
00004B9E  4879 0803 8493          pea       _Instruction.L
00004BA2  04E2      
00004BA4  4E95      8494          jsr       (A5)
00004BA6  DEFC 0014 8495          add.w     #20,A7
00004BAA  6000 0070 8496          bra       DisassembleInstruction_247
                    8497   DisassembleInstruction_243:
                    8498   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004BAE  0C43 0006 8499          cmp.w     #6,D3
00004BB2  6632      8500          bne.s     DisassembleInstruction_245
                    8501   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004BB4  322E FFF8 8502          move.w    -8(A6),D1
00004BB8  C2BC 0000 8503          and.l     #65535,D1
00004BBC  FFFF      
00004BBE  2F01      8504          move.l    D1,-(A7)
00004BC0  2042      8505          move.l    D2,A0
00004BC2  3228 0002 8506          move.w    2(A0),D1
00004BC6  48C1      8507          ext.l     D1
00004BC8  2F01      8508          move.l    D1,-(A7)
00004BCA  CABC 0000 8509          and.l     #65535,D5
00004BCE  FFFF      
00004BD0  2F05      8510          move.l    D5,-(A7)
00004BD2  4879 0000 8511          pea       @m68kde~1_275.L
00004BD6  742A      
00004BD8  4879 0803 8512          pea       _Instruction.L
00004BDC  04E2      
00004BDE  4E95      8513          jsr       (A5)
00004BE0  DEFC 0014 8514          add.w     #20,A7
00004BE4  6036      8515          bra.s     DisassembleInstruction_247
                    8516   DisassembleInstruction_245:
                    8517   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004BE6  0C43 0007 8518          cmp.w     #7,D3
00004BEA  6630      8519          bne.s     DisassembleInstruction_247
                    8520   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004BEC  322E FFF8 8521          move.w    -8(A6),D1
00004BF0  C2BC 0000 8522          and.l     #65535,D1
00004BF4  FFFF      
00004BF6  2F01      8523          move.l    D1,-(A7)
00004BF8  2042      8524          move.l    D2,A0
00004BFA  3228 0002 8525          move.w    2(A0),D1
00004BFE  48C1      8526          ext.l     D1
00004C00  2F01      8527          move.l    D1,-(A7)
00004C02  CABC 0000 8528          and.l     #65535,D5
00004C06  FFFF      
00004C08  2F05      8529          move.l    D5,-(A7)
00004C0A  4879 0000 8530          pea       @m68kde~1_276.L
00004C0E  7440      
00004C10  4879 0803 8531          pea       _Instruction.L
00004C14  04E2      
00004C16  4E95      8532          jsr       (A5)
00004C18  DEFC 0014 8533          add.w     #20,A7
                    8534   DisassembleInstruction_247:
                    8535   ; }
                    8536   ; /////////////////////////////////////////////////////////////////////////////////
                    8537   ; // if instruction is MOVEQ
                    8538   ; /////////////////////////////////////////////////////////////////////////////////
                    8539   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004C1C  2042      8540          move.l    D2,A0
00004C1E  3010      8541          move.w    (A0),D0
00004C20  C07C F100 8542          and.w     #61696,D0
00004C24  0C40 7000 8543          cmp.w     #28672,D0
00004C28  6600 0040 8544          bne       DisassembleInstruction_249
                    8545   ; {
                    8546   ; InstructionSize = 1;
00004C2C  24BC 0000 8547          move.l    #1,(A2)
00004C30  0001      
                    8548   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004C32  2042      8549          move.l    D2,A0
00004C34  3010      8550          move.w    (A0),D0
00004C36  E040      8551          asr.w     #8,D0
00004C38  E240      8552          asr.w     #1,D0
00004C3A  C07C 0007 8553          and.w     #7,D0
00004C3E  3A00      8554          move.w    D0,D5
                    8555   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004C40  CABC 0000 8556          and.l     #65535,D5
00004C44  FFFF      
00004C46  2F05      8557          move.l    D5,-(A7)
00004C48  2042      8558          move.l    D2,A0
00004C4A  3210      8559          move.w    (A0),D1
00004C4C  C27C 00FF 8560          and.w     #255,D1
00004C50  C2BC 0000 8561          and.l     #65535,D1
00004C54  FFFF      
00004C56  2F01      8562          move.l    D1,-(A7)
00004C58  4879 0000 8563          pea       @m68kde~1_277.L
00004C5C  7456      
00004C5E  4879 0803 8564          pea       _Instruction.L
00004C62  04E2      
00004C64  4E95      8565          jsr       (A5)
00004C66  DEFC 0010 8566          add.w     #16,A7
                    8567   DisassembleInstruction_249:
                    8568   ; }
                    8569   ; /////////////////////////////////////////////////////////////////////////////////
                    8570   ; // if instruction is MULS.W
                    8571   ; /////////////////////////////////////////////////////////////////////////////////
                    8572   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004C6A  2042      8573          move.l    D2,A0
00004C6C  3010      8574          move.w    (A0),D0
00004C6E  C07C F1C0 8575          and.w     #61888,D0
00004C72  0C40 C1C0 8576          cmp.w     #49600,D0
00004C76  6600 004E 8577          bne       DisassembleInstruction_251
                    8578   ; {
                    8579   ; InstructionSize = 1;
00004C7A  24BC 0000 8580          move.l    #1,(A2)
00004C7E  0001      
                    8581   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004C80  2042      8582          move.l    D2,A0
00004C82  3010      8583          move.w    (A0),D0
00004C84  E040      8584          asr.w     #8,D0
00004C86  E240      8585          asr.w     #1,D0
00004C88  C07C 0007 8586          and.w     #7,D0
00004C8C  3A00      8587          move.w    D0,D5
                    8588   ; strcpyInstruction("MULS ");
00004C8E  4879 0000 8589          pea       @m68kde~1_278.L
00004C92  7466      
00004C94  4E93      8590          jsr       (A3)
00004C96  584F      8591          addq.w    #4,A7
                    8592   ; Decode6BitEA(OpCode,0,0,0) ;
00004C98  42A7      8593          clr.l     -(A7)
00004C9A  42A7      8594          clr.l     -(A7)
00004C9C  42A7      8595          clr.l     -(A7)
00004C9E  2F02      8596          move.l    D2,-(A7)
00004CA0  4EB8 2F62 8597          jsr       _Decode6BitEA
00004CA4  DEFC 0010 8598          add.w     #16,A7
                    8599   ; sprintf(TempString, ",D%d", DataRegister) ;
00004CA8  CABC 0000 8600          and.l     #65535,D5
00004CAC  FFFF      
00004CAE  2F05      8601          move.l    D5,-(A7)
00004CB0  4879 0000 8602          pea       @m68kde~1_234.L
00004CB4  72BC      
00004CB6  2F0C      8603          move.l    A4,-(A7)
00004CB8  4E95      8604          jsr       (A5)
00004CBA  DEFC 000C 8605          add.w     #12,A7
                    8606   ; strcatInstruction(TempString);
00004CBE  2F0C      8607          move.l    A4,-(A7)
00004CC0  4EB8 0CCC 8608          jsr       _strcatInstruction
00004CC4  584F      8609          addq.w    #4,A7
                    8610   DisassembleInstruction_251:
                    8611   ; }
                    8612   ; /////////////////////////////////////////////////////////////////////////////////
                    8613   ; // if instruction is MULU.W
                    8614   ; /////////////////////////////////////////////////////////////////////////////////
                    8615   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004CC6  2042      8616          move.l    D2,A0
00004CC8  3010      8617          move.w    (A0),D0
00004CCA  C07C F1C0 8618          and.w     #61888,D0
00004CCE  0C40 C0C0 8619          cmp.w     #49344,D0
00004CD2  6600 004E 8620          bne       DisassembleInstruction_253
                    8621   ; {
                    8622   ; InstructionSize = 1;
00004CD6  24BC 0000 8623          move.l    #1,(A2)
00004CDA  0001      
                    8624   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004CDC  2042      8625          move.l    D2,A0
00004CDE  3010      8626          move.w    (A0),D0
00004CE0  E040      8627          asr.w     #8,D0
00004CE2  E240      8628          asr.w     #1,D0
00004CE4  C07C 0007 8629          and.w     #7,D0
00004CE8  3A00      8630          move.w    D0,D5
                    8631   ; strcpyInstruction("MULU ");
00004CEA  4879 0000 8632          pea       @m68kde~1_279.L
00004CEE  746C      
00004CF0  4E93      8633          jsr       (A3)
00004CF2  584F      8634          addq.w    #4,A7
                    8635   ; Decode6BitEA(OpCode,0,0,0) ;
00004CF4  42A7      8636          clr.l     -(A7)
00004CF6  42A7      8637          clr.l     -(A7)
00004CF8  42A7      8638          clr.l     -(A7)
00004CFA  2F02      8639          move.l    D2,-(A7)
00004CFC  4EB8 2F62 8640          jsr       _Decode6BitEA
00004D00  DEFC 0010 8641          add.w     #16,A7
                    8642   ; sprintf(TempString, ",D%d", DataRegister) ;
00004D04  CABC 0000 8643          and.l     #65535,D5
00004D08  FFFF      
00004D0A  2F05      8644          move.l    D5,-(A7)
00004D0C  4879 0000 8645          pea       @m68kde~1_234.L
00004D10  72BC      
00004D12  2F0C      8646          move.l    A4,-(A7)
00004D14  4E95      8647          jsr       (A5)
00004D16  DEFC 000C 8648          add.w     #12,A7
                    8649   ; strcatInstruction(TempString);
00004D1A  2F0C      8650          move.l    A4,-(A7)
00004D1C  4EB8 0CCC 8651          jsr       _strcatInstruction
00004D20  584F      8652          addq.w    #4,A7
                    8653   DisassembleInstruction_253:
                    8654   ; }
                    8655   ; /////////////////////////////////////////////////////////////////////////////////
                    8656   ; // if instruction is NBCD <EA>
                    8657   ; /////////////////////////////////////////////////////////////////////////////////
                    8658   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
00004D22  2042      8659          move.l    D2,A0
00004D24  3010      8660          move.w    (A0),D0
00004D26  C07C FFC0 8661          and.w     #65472,D0
00004D2A  0C40 4800 8662          cmp.w     #18432,D0
00004D2E  6620      8663          bne.s     DisassembleInstruction_255
                    8664   ; {
                    8665   ; InstructionSize = 1;
00004D30  24BC 0000 8666          move.l    #1,(A2)
00004D34  0001      
                    8667   ; strcpyInstruction("NBCD ");
00004D36  4879 0000 8668          pea       @m68kde~1_280.L
00004D3A  7472      
00004D3C  4E93      8669          jsr       (A3)
00004D3E  584F      8670          addq.w    #4,A7
                    8671   ; Decode6BitEA(OpCode,0,0,0);
00004D40  42A7      8672          clr.l     -(A7)
00004D42  42A7      8673          clr.l     -(A7)
00004D44  42A7      8674          clr.l     -(A7)
00004D46  2F02      8675          move.l    D2,-(A7)
00004D48  4EB8 2F62 8676          jsr       _Decode6BitEA
00004D4C  DEFC 0010 8677          add.w     #16,A7
                    8678   DisassembleInstruction_255:
                    8679   ; }
                    8680   ; /////////////////////////////////////////////////////////////////////////////////
                    8681   ; // if instruction is NEG <EA>
                    8682   ; /////////////////////////////////////////////////////////////////////////////////
                    8683   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
00004D50  2042      8684          move.l    D2,A0
00004D52  3010      8685          move.w    (A0),D0
00004D54  C07C FF00 8686          and.w     #65280,D0
00004D58  0C40 4400 8687          cmp.w     #17408,D0
00004D5C  6600 0046 8688          bne       DisassembleInstruction_259
                    8689   ; {
                    8690   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004D60  2042      8691          move.l    D2,A0
00004D62  3010      8692          move.w    (A0),D0
00004D64  EC40      8693          asr.w     #6,D0
00004D66  C07C 0003 8694          and.w     #3,D0
00004D6A  0C40 0003 8695          cmp.w     #3,D0
00004D6E  6700 0034 8696          beq       DisassembleInstruction_259
                    8697   ; {
                    8698   ; InstructionSize = 1;
00004D72  24BC 0000 8699          move.l    #1,(A2)
00004D76  0001      
                    8700   ; strcpyInstruction("NEG");
00004D78  4879 0000 8701          pea       @m68kde~1_281.L
00004D7C  7478      
00004D7E  4E93      8702          jsr       (A3)
00004D80  584F      8703          addq.w    #4,A7
                    8704   ; Decode2BitOperandSize(*OpCode) ;
00004D82  2042      8705          move.l    D2,A0
00004D84  3210      8706          move.w    (A0),D1
00004D86  C2BC 0000 8707          and.l     #65535,D1
00004D8A  FFFF      
00004D8C  2F01      8708          move.l    D1,-(A7)
00004D8E  4EB8 2CCE 8709          jsr       _Decode2BitOperandSize
00004D92  584F      8710          addq.w    #4,A7
                    8711   ; Decode6BitEA(OpCode,0,0,0);
00004D94  42A7      8712          clr.l     -(A7)
00004D96  42A7      8713          clr.l     -(A7)
00004D98  42A7      8714          clr.l     -(A7)
00004D9A  2F02      8715          move.l    D2,-(A7)
00004D9C  4EB8 2F62 8716          jsr       _Decode6BitEA
00004DA0  DEFC 0010 8717          add.w     #16,A7
                    8718   DisassembleInstruction_259:
                    8719   ; }
                    8720   ; }
                    8721   ; /////////////////////////////////////////////////////////////////////////////////
                    8722   ; // if instruction is NEGX <EA>
                    8723   ; /////////////////////////////////////////////////////////////////////////////////
                    8724   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00004DA4  2042      8725          move.l    D2,A0
00004DA6  3010      8726          move.w    (A0),D0
00004DA8  C07C FF00 8727          and.w     #65280,D0
00004DAC  0C40 4000 8728          cmp.w     #16384,D0
00004DB0  6600 0046 8729          bne       DisassembleInstruction_263
                    8730   ; {
                    8731   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004DB4  2042      8732          move.l    D2,A0
00004DB6  3010      8733          move.w    (A0),D0
00004DB8  EC40      8734          asr.w     #6,D0
00004DBA  C07C 0003 8735          and.w     #3,D0
00004DBE  0C40 0003 8736          cmp.w     #3,D0
00004DC2  6700 0034 8737          beq       DisassembleInstruction_263
                    8738   ; {
                    8739   ; InstructionSize = 1;
00004DC6  24BC 0000 8740          move.l    #1,(A2)
00004DCA  0001      
                    8741   ; strcpyInstruction("NEGX");
00004DCC  4879 0000 8742          pea       @m68kde~1_282.L
00004DD0  747C      
00004DD2  4E93      8743          jsr       (A3)
00004DD4  584F      8744          addq.w    #4,A7
                    8745   ; Decode2BitOperandSize(*OpCode) ;
00004DD6  2042      8746          move.l    D2,A0
00004DD8  3210      8747          move.w    (A0),D1
00004DDA  C2BC 0000 8748          and.l     #65535,D1
00004DDE  FFFF      
00004DE0  2F01      8749          move.l    D1,-(A7)
00004DE2  4EB8 2CCE 8750          jsr       _Decode2BitOperandSize
00004DE6  584F      8751          addq.w    #4,A7
                    8752   ; Decode6BitEA(OpCode,0,0,0);
00004DE8  42A7      8753          clr.l     -(A7)
00004DEA  42A7      8754          clr.l     -(A7)
00004DEC  42A7      8755          clr.l     -(A7)
00004DEE  2F02      8756          move.l    D2,-(A7)
00004DF0  4EB8 2F62 8757          jsr       _Decode6BitEA
00004DF4  DEFC 0010 8758          add.w     #16,A7
                    8759   DisassembleInstruction_263:
                    8760   ; }
                    8761   ; }
                    8762   ; /////////////////////////////////////////////////////////////////////////////////
                    8763   ; // if instruction is NOP
                    8764   ; /////////////////////////////////////////////////////////////////////////////////
                    8765   ; if(*OpCode == (unsigned short int)(0x4E71))
00004DF8  2042      8766          move.l    D2,A0
00004DFA  3010      8767          move.w    (A0),D0
00004DFC  0C40 4E71 8768          cmp.w     #20081,D0
00004E00  6610      8769          bne.s     DisassembleInstruction_265
                    8770   ; {
                    8771   ; InstructionSize = 1;
00004E02  24BC 0000 8772          move.l    #1,(A2)
00004E06  0001      
                    8773   ; strcpyInstruction("NOP");
00004E08  4879 0000 8774          pea       @m68kde~1_283.L
00004E0C  7482      
00004E0E  4E93      8775          jsr       (A3)
00004E10  584F      8776          addq.w    #4,A7
                    8777   DisassembleInstruction_265:
                    8778   ; }
                    8779   ; /////////////////////////////////////////////////////////////////////////////////
                    8780   ; // if instruction is NOT <EA>
                    8781   ; /////////////////////////////////////////////////////////////////////////////////
                    8782   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
00004E12  2042      8783          move.l    D2,A0
00004E14  3010      8784          move.w    (A0),D0
00004E16  C07C FF00 8785          and.w     #65280,D0
00004E1A  0C40 4600 8786          cmp.w     #17920,D0
00004E1E  6600 0046 8787          bne       DisassembleInstruction_269
                    8788   ; {
                    8789   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004E22  2042      8790          move.l    D2,A0
00004E24  3010      8791          move.w    (A0),D0
00004E26  EC40      8792          asr.w     #6,D0
00004E28  C07C 0003 8793          and.w     #3,D0
00004E2C  0C40 0003 8794          cmp.w     #3,D0
00004E30  6700 0034 8795          beq       DisassembleInstruction_269
                    8796   ; {
                    8797   ; InstructionSize = 1;
00004E34  24BC 0000 8798          move.l    #1,(A2)
00004E38  0001      
                    8799   ; strcpyInstruction("NOT");
00004E3A  4879 0000 8800          pea       @m68kde~1_284.L
00004E3E  7486      
00004E40  4E93      8801          jsr       (A3)
00004E42  584F      8802          addq.w    #4,A7
                    8803   ; Decode2BitOperandSize(*OpCode) ;
00004E44  2042      8804          move.l    D2,A0
00004E46  3210      8805          move.w    (A0),D1
00004E48  C2BC 0000 8806          and.l     #65535,D1
00004E4C  FFFF      
00004E4E  2F01      8807          move.l    D1,-(A7)
00004E50  4EB8 2CCE 8808          jsr       _Decode2BitOperandSize
00004E54  584F      8809          addq.w    #4,A7
                    8810   ; Decode6BitEA(OpCode,0,0,0);
00004E56  42A7      8811          clr.l     -(A7)
00004E58  42A7      8812          clr.l     -(A7)
00004E5A  42A7      8813          clr.l     -(A7)
00004E5C  2F02      8814          move.l    D2,-(A7)
00004E5E  4EB8 2F62 8815          jsr       _Decode6BitEA
00004E62  DEFC 0010 8816          add.w     #16,A7
                    8817   DisassembleInstruction_269:
                    8818   ; }
                    8819   ; }
                    8820   ; /////////////////////////////////////////////////////////////////////////////////
                    8821   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    8822   ; /////////////////////////////////////////////////////////////////////////////////
                    8823   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00004E66  2042      8824          move.l    D2,A0
00004E68  3010      8825          move.w    (A0),D0
00004E6A  C07C F000 8826          and.w     #61440,D0
00004E6E  0C40 8000 8827          cmp.w     #32768,D0
00004E72  6600 0038 8828          bne       DisassembleInstruction_273
                    8829   ; {
                    8830   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004E76  2042      8831          move.l    D2,A0
00004E78  3010      8832          move.w    (A0),D0
00004E7A  EC40      8833          asr.w     #6,D0
00004E7C  C07C 0007 8834          and.w     #7,D0
00004E80  3600      8835          move.w    D0,D3
                    8836   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
00004E82  0C43 0002 8837          cmp.w     #2,D3
00004E86  630C      8838          bls.s     DisassembleInstruction_275
00004E88  0C43 0004 8839          cmp.w     #4,D3
00004E8C  651E      8840          blo.s     DisassembleInstruction_273
00004E8E  0C43 0006 8841          cmp.w     #6,D3
00004E92  6218      8842          bhi.s     DisassembleInstruction_273
                    8843   DisassembleInstruction_275:
                    8844   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    8845   ; {
                    8846   ; InstructionSize = 1;
00004E94  24BC 0000 8847          move.l    #1,(A2)
00004E98  0001      
                    8848   ; strcpyInstruction("OR") ;
00004E9A  4879 0000 8849          pea       @m68kde~1_285.L
00004E9E  748A      
00004EA0  4E93      8850          jsr       (A3)
00004EA2  584F      8851          addq.w    #4,A7
                    8852   ; Decode3BitOperandMode(OpCode) ;
00004EA4  2F02      8853          move.l    D2,-(A7)
00004EA6  4EB8 338A 8854          jsr       _Decode3BitOperandMode
00004EAA  584F      8855          addq.w    #4,A7
                    8856   DisassembleInstruction_273:
                    8857   ; }
                    8858   ; }
                    8859   ; /////////////////////////////////////////////////////////////////////////////////
                    8860   ; // if instruction is ORI to CCR
                    8861   ; /////////////////////////////////////////////////////////////////////////////////
                    8862   ; if(*OpCode == (unsigned short int)(0x003C))   {
00004EAC  2042      8863          move.l    D2,A0
00004EAE  3010      8864          move.w    (A0),D0
00004EB0  0C40 003C 8865          cmp.w     #60,D0
00004EB4  662A      8866          bne.s     DisassembleInstruction_276
                    8867   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00004EB6  2042      8868          move.l    D2,A0
00004EB8  3228 0002 8869          move.w    2(A0),D1
00004EBC  C27C 00FF 8870          and.w     #255,D1
00004EC0  C2BC 0000 8871          and.l     #65535,D1
00004EC4  FFFF      
00004EC6  2F01      8872          move.l    D1,-(A7)
00004EC8  4879 0000 8873          pea       @m68kde~1_286.L
00004ECC  748E      
00004ECE  4879 0803 8874          pea       _Instruction.L
00004ED2  04E2      
00004ED4  4E95      8875          jsr       (A5)
00004ED6  DEFC 000C 8876          add.w     #12,A7
                    8877   ; InstructionSize = 2;
00004EDA  24BC 0000 8878          move.l    #2,(A2)
00004EDE  0002      
                    8879   DisassembleInstruction_276:
                    8880   ; }
                    8881   ; /////////////////////////////////////////////////////////////////////////////////
                    8882   ; // if instruction is ORI #data,SR
                    8883   ; /////////////////////////////////////////////////////////////////////////////////
                    8884   ; if(*OpCode  == (unsigned short int)(0x007c))
00004EE0  2042      8885          move.l    D2,A0
00004EE2  3010      8886          move.w    (A0),D0
00004EE4  0C40 007C 8887          cmp.w     #124,D0
00004EE8  6622      8888          bne.s     DisassembleInstruction_278
                    8889   ; {
                    8890   ; InstructionSize = 2;
00004EEA  24BC 0000 8891          move.l    #2,(A2)
00004EEE  0002      
                    8892   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
00004EF0  2042      8893          move.l    D2,A0
00004EF2  3228 0002 8894          move.w    2(A0),D1
00004EF6  48C1      8895          ext.l     D1
00004EF8  2F01      8896          move.l    D1,-(A7)
00004EFA  4879 0000 8897          pea       @m68kde~1_287.L
00004EFE  749C      
00004F00  4879 0803 8898          pea       _Instruction.L
00004F04  04E2      
00004F06  4E95      8899          jsr       (A5)
00004F08  DEFC 000C 8900          add.w     #12,A7
                    8901   DisassembleInstruction_278:
                    8902   ; }
                    8903   ; /////////////////////////////////////////////////////////////////////////////////
                    8904   ; // if instruction is PEA
                    8905   ; /////////////////////////////////////////////////////////////////////////////////
                    8906   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
00004F0C  2042      8907          move.l    D2,A0
00004F0E  3010      8908          move.w    (A0),D0
00004F10  C07C FFC0 8909          and.w     #65472,D0
00004F14  0C40 4840 8910          cmp.w     #18496,D0
00004F18  6620      8911          bne.s     DisassembleInstruction_280
                    8912   ; {
                    8913   ; InstructionSize = 1;
00004F1A  24BC 0000 8914          move.l    #1,(A2)
00004F1E  0001      
                    8915   ; strcpyInstruction("PEA ");
00004F20  4879 0000 8916          pea       @m68kde~1_288.L
00004F24  74AA      
00004F26  4E93      8917          jsr       (A3)
00004F28  584F      8918          addq.w    #4,A7
                    8919   ; Decode6BitEA(OpCode,0,0,0);
00004F2A  42A7      8920          clr.l     -(A7)
00004F2C  42A7      8921          clr.l     -(A7)
00004F2E  42A7      8922          clr.l     -(A7)
00004F30  2F02      8923          move.l    D2,-(A7)
00004F32  4EB8 2F62 8924          jsr       _Decode6BitEA
00004F36  DEFC 0010 8925          add.w     #16,A7
                    8926   DisassembleInstruction_280:
                    8927   ; }
                    8928   ; /////////////////////////////////////////////////////////////////////////////////
                    8929   ; // if instruction is reset
                    8930   ; /////////////////////////////////////////////////////////////////////////////////
                    8931   ; if(*OpCode  == (unsigned short int)(0x4E70))
00004F3A  2042      8932          move.l    D2,A0
00004F3C  3010      8933          move.w    (A0),D0
00004F3E  0C40 4E70 8934          cmp.w     #20080,D0
00004F42  6616      8935          bne.s     DisassembleInstruction_282
                    8936   ; {
                    8937   ; InstructionSize = 1;
00004F44  24BC 0000 8938          move.l    #1,(A2)
00004F48  0001      
                    8939   ; sprintf(Instruction, "RESET");
00004F4A  4879 0000 8940          pea       @m68kde~1_289.L
00004F4E  74B0      
00004F50  4879 0803 8941          pea       _Instruction.L
00004F54  04E2      
00004F56  4E95      8942          jsr       (A5)
00004F58  504F      8943          addq.w    #8,A7
                    8944   DisassembleInstruction_282:
                    8945   ; }
                    8946   ; /////////////////////////////////////////////////////////////////////////////////
                    8947   ; // if instruction is RTE
                    8948   ; /////////////////////////////////////////////////////////////////////////////////
                    8949   ; if(*OpCode  == (unsigned short int)(0x4E73))
00004F5A  2042      8950          move.l    D2,A0
00004F5C  3010      8951          move.w    (A0),D0
00004F5E  0C40 4E73 8952          cmp.w     #20083,D0
00004F62  6616      8953          bne.s     DisassembleInstruction_284
                    8954   ; {
                    8955   ; InstructionSize = 1;
00004F64  24BC 0000 8956          move.l    #1,(A2)
00004F68  0001      
                    8957   ; sprintf(Instruction, "RTE");
00004F6A  4879 0000 8958          pea       @m68kde~1_290.L
00004F6E  74B6      
00004F70  4879 0803 8959          pea       _Instruction.L
00004F74  04E2      
00004F76  4E95      8960          jsr       (A5)
00004F78  504F      8961          addq.w    #8,A7
                    8962   DisassembleInstruction_284:
                    8963   ; }
                    8964   ; /////////////////////////////////////////////////////////////////////////////////
                    8965   ; // if instruction is RTR
                    8966   ; /////////////////////////////////////////////////////////////////////////////////
                    8967   ; if(*OpCode == (unsigned short int)(0x4E77))
00004F7A  2042      8968          move.l    D2,A0
00004F7C  3010      8969          move.w    (A0),D0
00004F7E  0C40 4E77 8970          cmp.w     #20087,D0
00004F82  6610      8971          bne.s     DisassembleInstruction_286
                    8972   ; {
                    8973   ; InstructionSize = 1;
00004F84  24BC 0000 8974          move.l    #1,(A2)
00004F88  0001      
                    8975   ; strcpyInstruction("RTR");
00004F8A  4879 0000 8976          pea       @m68kde~1_291.L
00004F8E  74BA      
00004F90  4E93      8977          jsr       (A3)
00004F92  584F      8978          addq.w    #4,A7
                    8979   DisassembleInstruction_286:
                    8980   ; }
                    8981   ; /////////////////////////////////////////////////////////////////////////////////
                    8982   ; // if instruction is RTS
                    8983   ; /////////////////////////////////////////////////////////////////////////////////
                    8984   ; if(*OpCode == (unsigned short int)(0x4E75))
00004F94  2042      8985          move.l    D2,A0
00004F96  3010      8986          move.w    (A0),D0
00004F98  0C40 4E75 8987          cmp.w     #20085,D0
00004F9C  6610      8988          bne.s     DisassembleInstruction_288
                    8989   ; {
                    8990   ; InstructionSize = 1;
00004F9E  24BC 0000 8991          move.l    #1,(A2)
00004FA2  0001      
                    8992   ; strcpyInstruction("RTS");
00004FA4  4879 0000 8993          pea       @m68kde~1_292.L
00004FA8  74BE      
00004FAA  4E93      8994          jsr       (A3)
00004FAC  584F      8995          addq.w    #4,A7
                    8996   DisassembleInstruction_288:
                    8997   ; }
                    8998   ; /////////////////////////////////////////////////////////////////////////////////
                    8999   ; // if instruction is STOP
                    9000   ; /////////////////////////////////////////////////////////////////////////////////
                    9001   ; if(*OpCode  == (unsigned short int)(0x4E72))
00004FAE  2042      9002          move.l    D2,A0
00004FB0  3010      9003          move.w    (A0),D0
00004FB2  0C40 4E72 9004          cmp.w     #20082,D0
00004FB6  6622      9005          bne.s     DisassembleInstruction_290
                    9006   ; {
                    9007   ; InstructionSize = 2;
00004FB8  24BC 0000 9008          move.l    #2,(A2)
00004FBC  0002      
                    9009   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
00004FBE  2042      9010          move.l    D2,A0
00004FC0  3228 0002 9011          move.w    2(A0),D1
00004FC4  48C1      9012          ext.l     D1
00004FC6  2F01      9013          move.l    D1,-(A7)
00004FC8  4879 0000 9014          pea       @m68kde~1_293.L
00004FCC  74C2      
00004FCE  4879 0803 9015          pea       _Instruction.L
00004FD2  04E2      
00004FD4  4E95      9016          jsr       (A5)
00004FD6  DEFC 000C 9017          add.w     #12,A7
                    9018   DisassembleInstruction_290:
                    9019   ; }
                    9020   ; /////////////////////////////////////////////////////////////////////////////////
                    9021   ; // if instruction is SBCD
                    9022   ; /////////////////////////////////////////////////////////////////////////////////
                    9023   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
00004FDA  2042      9024          move.l    D2,A0
00004FDC  3010      9025          move.w    (A0),D0
00004FDE  C07C F1F0 9026          and.w     #61936,D0
00004FE2  0C40 8100 9027          cmp.w     #33024,D0
00004FE6  6600 0092 9028          bne       DisassembleInstruction_295
                    9029   ; {
                    9030   ; InstructionSize = 1;
00004FEA  24BC 0000 9031          move.l    #1,(A2)
00004FEE  0001      
                    9032   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00004FF0  2042      9033          move.l    D2,A0
00004FF2  3010      9034          move.w    (A0),D0
00004FF4  E040      9035          asr.w     #8,D0
00004FF6  E240      9036          asr.w     #1,D0
00004FF8  C07C 0007 9037          and.w     #7,D0
00004FFC  3D40 FFE0 9038          move.w    D0,-32(A6)
                    9039   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00005000  2042      9040          move.l    D2,A0
00005002  3010      9041          move.w    (A0),D0
00005004  C07C 0007 9042          and.w     #7,D0
00005008  3D40 FFDE 9043          move.w    D0,-34(A6)
                    9044   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
0000500C  2042      9045          move.l    D2,A0
0000500E  3010      9046          move.w    (A0),D0
00005010  E640      9047          asr.w     #3,D0
00005012  48C0      9048          ext.l     D0
00005014  C0BC 0000 9049          and.l     #1,D0
00005018  0001      
0000501A  2D40 FFE4 9050          move.l    D0,-28(A6)
                    9051   ; if(Mode == 0)
0000501E  202E FFE4 9052          move.l    -28(A6),D0
00005022  662C      9053          bne.s     DisassembleInstruction_294
                    9054   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
00005024  322E FFE0 9055          move.w    -32(A6),D1
00005028  C2BC 0000 9056          and.l     #65535,D1
0000502C  FFFF      
0000502E  2F01      9057          move.l    D1,-(A7)
00005030  322E FFDE 9058          move.w    -34(A6),D1
00005034  C2BC 0000 9059          and.l     #65535,D1
00005038  FFFF      
0000503A  2F01      9060          move.l    D1,-(A7)
0000503C  4879 0000 9061          pea       @m68kde~1_294.L
00005040  74CC      
00005042  4879 0803 9062          pea       _Instruction.L
00005046  04E2      
00005048  4E95      9063          jsr       (A5)
0000504A  DEFC 0010 9064          add.w     #16,A7
0000504E  602A      9065          bra.s     DisassembleInstruction_295
                    9066   DisassembleInstruction_294:
                    9067   ; else
                    9068   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00005050  322E FFE0 9069          move.w    -32(A6),D1
00005054  C2BC 0000 9070          and.l     #65535,D1
00005058  FFFF      
0000505A  2F01      9071          move.l    D1,-(A7)
0000505C  322E FFDE 9072          move.w    -34(A6),D1
00005060  C2BC 0000 9073          and.l     #65535,D1
00005064  FFFF      
00005066  2F01      9074          move.l    D1,-(A7)
00005068  4879 0000 9075          pea       @m68kde~1_295.L
0000506C  74DA      
0000506E  4879 0803 9076          pea       _Instruction.L
00005072  04E2      
00005074  4E95      9077          jsr       (A5)
00005076  DEFC 0010 9078          add.w     #16,A7
                    9079   DisassembleInstruction_295:
                    9080   ; }
                    9081   ; /////////////////////////////////////////////////////////////////////////////////
                    9082   ; // if instruction is Scc
                    9083   ; /////////////////////////////////////////////////////////////////////////////////
                    9084   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
0000507A  2042      9085          move.l    D2,A0
0000507C  3010      9086          move.w    (A0),D0
0000507E  C07C F0C0 9087          and.w     #61632,D0
00005082  0C40 50C0 9088          cmp.w     #20672,D0
00005086  6600 0060 9089          bne       DisassembleInstruction_298
                    9090   ; {
                    9091   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
0000508A  2042      9092          move.l    D2,A0
0000508C  3010      9093          move.w    (A0),D0
0000508E  E640      9094          asr.w     #3,D0
00005090  C07C 0007 9095          and.w     #7,D0
00005094  3D40 FFEC 9096          move.w    D0,-20(A6)
                    9097   ; if(EAMode != (unsigned short int)(0x0001))
00005098  302E FFEC 9098          move.w    -20(A6),D0
0000509C  0C40 0001 9099          cmp.w     #1,D0
000050A0  6700 0046 9100          beq       DisassembleInstruction_298
                    9101   ; {
                    9102   ; InstructionSize = 1;
000050A4  24BC 0000 9103          move.l    #1,(A2)
000050A8  0001      
                    9104   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
000050AA  2042      9105          move.l    D2,A0
000050AC  3010      9106          move.w    (A0),D0
000050AE  E040      9107          asr.w     #8,D0
000050B0  C07C 000F 9108          and.w     #15,D0
000050B4  1D40 FFE9 9109          move.b    D0,-23(A6)
                    9110   ; strcpyInstruction("S") ;
000050B8  4879 0000 9111          pea       @m68kde~1_296.L
000050BC  74EE      
000050BE  4E93      9112          jsr       (A3)
000050C0  584F      9113          addq.w    #4,A7
                    9114   ; DecodeBranchCondition(Condition) ;
000050C2  122E FFE9 9115          move.b    -23(A6),D1
000050C6  C27C 00FF 9116          and.w     #255,D1
000050CA  C2BC 0000 9117          and.l     #65535,D1
000050CE  FFFF      
000050D0  2F01      9118          move.l    D1,-(A7)
000050D2  4EB8 3420 9119          jsr       _DecodeBranchCondition
000050D6  584F      9120          addq.w    #4,A7
                    9121   ; Decode6BitEA(OpCode,0,0,0);
000050D8  42A7      9122          clr.l     -(A7)
000050DA  42A7      9123          clr.l     -(A7)
000050DC  42A7      9124          clr.l     -(A7)
000050DE  2F02      9125          move.l    D2,-(A7)
000050E0  4EB8 2F62 9126          jsr       _Decode6BitEA
000050E4  DEFC 0010 9127          add.w     #16,A7
                    9128   DisassembleInstruction_298:
                    9129   ; }
                    9130   ; }
                    9131   ; /////////////////////////////////////////////////////////////////////////////////
                    9132   ; // if instruction is SUB or SUBA
                    9133   ; /////////////////////////////////////////////////////////////////////////////////
                    9134   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
000050E8  2042      9135          move.l    D2,A0
000050EA  3010      9136          move.w    (A0),D0
000050EC  C07C F000 9137          and.w     #61440,D0
000050F0  0C40 9000 9138          cmp.w     #36864,D0
000050F4  6600 008C 9139          bne       DisassembleInstruction_303
                    9140   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000050F8  2042      9141          move.l    D2,A0
000050FA  3010      9142          move.w    (A0),D0
000050FC  EC40      9143          asr.w     #6,D0
000050FE  C07C 0007 9144          and.w     #7,D0
00005102  3600      9145          move.w    D0,D3
                    9146   ; InstructionSize = 1;
00005104  24BC 0000 9147          move.l    #1,(A2)
00005108  0001      
                    9148   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
0000510A  0C43 0003 9149          cmp.w     #3,D3
0000510E  6708      9150          beq.s     DisassembleInstruction_304
00005110  0C43 0007 9151          cmp.w     #7,D3
00005114  6600 005A 9152          bne       DisassembleInstruction_302
                    9153   DisassembleInstruction_304:
                    9154   ; {
                    9155   ; if(OpMode == (unsigned short int)(0x0003))
00005118  0C43 0003 9156          cmp.w     #3,D3
0000511C  660C      9157          bne.s     DisassembleInstruction_305
                    9158   ; strcpyInstruction("SUBA.W ") ;
0000511E  4879 0000 9159          pea       @m68kde~1_297.L
00005122  74F0      
00005124  4E93      9160          jsr       (A3)
00005126  584F      9161          addq.w    #4,A7
00005128  600A      9162          bra.s     DisassembleInstruction_306
                    9163   DisassembleInstruction_305:
                    9164   ; else
                    9165   ; strcpyInstruction("SUBA.L ") ;
0000512A  4879 0000 9166          pea       @m68kde~1_298.L
0000512E  74F8      
00005130  4E93      9167          jsr       (A3)
00005132  584F      9168          addq.w    #4,A7
                    9169   DisassembleInstruction_306:
                    9170   ; Decode6BitEA(OpCode,0,0,0)  ;
00005134  42A7      9171          clr.l     -(A7)
00005136  42A7      9172          clr.l     -(A7)
00005138  42A7      9173          clr.l     -(A7)
0000513A  2F02      9174          move.l    D2,-(A7)
0000513C  4EB8 2F62 9175          jsr       _Decode6BitEA
00005140  DEFC 0010 9176          add.w     #16,A7
                    9177   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00005144  2042      9178          move.l    D2,A0
00005146  3210      9179          move.w    (A0),D1
00005148  E041      9180          asr.w     #8,D1
0000514A  E241      9181          asr.w     #1,D1
0000514C  C27C 0007 9182          and.w     #7,D1
00005150  C2BC 0000 9183          and.l     #65535,D1
00005154  FFFF      
00005156  2F01      9184          move.l    D1,-(A7)
00005158  4879 0000 9185          pea       @m68kde~1_201.L
0000515C  71EC      
0000515E  2F0C      9186          move.l    A4,-(A7)
00005160  4E95      9187          jsr       (A5)
00005162  DEFC 000C 9188          add.w     #12,A7
                    9189   ; strcatInstruction(TempString) ;
00005166  2F0C      9190          move.l    A4,-(A7)
00005168  4EB8 0CCC 9191          jsr       _strcatInstruction
0000516C  584F      9192          addq.w    #4,A7
0000516E  6012      9193          bra.s     DisassembleInstruction_303
                    9194   DisassembleInstruction_302:
                    9195   ; }
                    9196   ; else {
                    9197   ; strcpyInstruction("SUB") ;
00005170  4879 0000 9198          pea       @m68kde~1_299.L
00005174  7500      
00005176  4E93      9199          jsr       (A3)
00005178  584F      9200          addq.w    #4,A7
                    9201   ; Decode3BitOperandMode(OpCode) ;
0000517A  2F02      9202          move.l    D2,-(A7)
0000517C  4EB8 338A 9203          jsr       _Decode3BitOperandMode
00005180  584F      9204          addq.w    #4,A7
                    9205   DisassembleInstruction_303:
                    9206   ; }
                    9207   ; }
                    9208   ; /////////////////////////////////////////////////////////////////////////////////
                    9209   ; // if instruction is SUBQ
                    9210   ; /////////////////////////////////////////////////////////////////////////////////
                    9211   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
00005182  2042      9212          move.l    D2,A0
00005184  3010      9213          move.w    (A0),D0
00005186  C07C F100 9214          and.w     #61696,D0
0000518A  0C40 5100 9215          cmp.w     #20736,D0
0000518E  6600 0072 9216          bne       DisassembleInstruction_309
                    9217   ; {
                    9218   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005192  2042      9219          move.l    D2,A0
00005194  3010      9220          move.w    (A0),D0
00005196  EC40      9221          asr.w     #6,D0
00005198  C07C 0003 9222          and.w     #3,D0
0000519C  3600      9223          move.w    D0,D3
                    9224   ; if(OpMode <= (unsigned short int)(0x0002))
0000519E  0C43 0002 9225          cmp.w     #2,D3
000051A2  6200 005E 9226          bhi       DisassembleInstruction_309
                    9227   ; {
                    9228   ; InstructionSize = 1;
000051A6  24BC 0000 9229          move.l    #1,(A2)
000051AA  0001      
                    9230   ; strcpyInstruction("SUBQ") ;
000051AC  4879 0000 9231          pea       @m68kde~1_300.L
000051B0  7504      
000051B2  4E93      9232          jsr       (A3)
000051B4  584F      9233          addq.w    #4,A7
                    9234   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000051B6  2042      9235          move.l    D2,A0
000051B8  3210      9236          move.w    (A0),D1
000051BA  C2BC 0000 9237          and.l     #65535,D1
000051BE  FFFF      
000051C0  2F01      9238          move.l    D1,-(A7)
000051C2  4EB8 2CCE 9239          jsr       _Decode2BitOperandSize
000051C6  584F      9240          addq.w    #4,A7
                    9241   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
000051C8  2042      9242          move.l    D2,A0
000051CA  3210      9243          move.w    (A0),D1
000051CC  E041      9244          asr.w     #8,D1
000051CE  E241      9245          asr.w     #1,D1
000051D0  C27C 0007 9246          and.w     #7,D1
000051D4  C2BC 0000 9247          and.l     #65535,D1
000051D8  FFFF      
000051DA  2F01      9248          move.l    D1,-(A7)
000051DC  4879 0000 9249          pea       @m68kde~1_211.L
000051E0  722C      
000051E2  2F0C      9250          move.l    A4,-(A7)
000051E4  4E95      9251          jsr       (A5)
000051E6  DEFC 000C 9252          add.w     #12,A7
                    9253   ; strcatInstruction(TempString) ;
000051EA  2F0C      9254          move.l    A4,-(A7)
000051EC  4EB8 0CCC 9255          jsr       _strcatInstruction
000051F0  584F      9256          addq.w    #4,A7
                    9257   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
000051F2  42A7      9258          clr.l     -(A7)
000051F4  42A7      9259          clr.l     -(A7)
000051F6  42A7      9260          clr.l     -(A7)
000051F8  2F02      9261          move.l    D2,-(A7)
000051FA  4EB8 2F62 9262          jsr       _Decode6BitEA
000051FE  DEFC 0010 9263          add.w     #16,A7
                    9264   DisassembleInstruction_309:
                    9265   ; }
                    9266   ; }
                    9267   ; /////////////////////////////////////////////////////////////////////////////////
                    9268   ; // if instruction is SUBX
                    9269   ; /////////////////////////////////////////////////////////////////////////////////
                    9270   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
00005202  2042      9271          move.l    D2,A0
00005204  3010      9272          move.w    (A0),D0
00005206  C07C F130 9273          and.w     #61744,D0
0000520A  0C40 9100 9274          cmp.w     #37120,D0
0000520E  6600 00A4 9275          bne       DisassembleInstruction_313
                    9276   ; {
                    9277   ; InstructionSize = 1;
00005212  24BC 0000 9278          move.l    #1,(A2)
00005216  0001      
                    9279   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00005218  2042      9280          move.l    D2,A0
0000521A  3010      9281          move.w    (A0),D0
0000521C  EC40      9282          asr.w     #6,D0
0000521E  C07C 0003 9283          and.w     #3,D0
00005222  3600      9284          move.w    D0,D3
                    9285   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
00005224  0C43 0003 9286          cmp.w     #3,D3
00005228  6700 008A 9287          beq       DisassembleInstruction_313
                    9288   ; {
                    9289   ; strcpyInstruction("SUBX") ;
0000522C  4879 0000 9290          pea       @m68kde~1_301.L
00005230  750A      
00005232  4E93      9291          jsr       (A3)
00005234  584F      9292          addq.w    #4,A7
                    9293   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005236  2042      9294          move.l    D2,A0
00005238  3210      9295          move.w    (A0),D1
0000523A  C2BC 0000 9296          and.l     #65535,D1
0000523E  FFFF      
00005240  2F01      9297          move.l    D1,-(A7)
00005242  4EB8 2CCE 9298          jsr       _Decode2BitOperandSize
00005246  584F      9299          addq.w    #4,A7
                    9300   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00005248  2042      9301          move.l    D2,A0
0000524A  3010      9302          move.w    (A0),D0
0000524C  C07C 0008 9303          and.w     #8,D0
00005250  6600 0030 9304          bne       DisassembleInstruction_315
                    9305   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005254  2042      9306          move.l    D2,A0
00005256  3210      9307          move.w    (A0),D1
00005258  E041      9308          asr.w     #8,D1
0000525A  E241      9309          asr.w     #1,D1
0000525C  C27C 0007 9310          and.w     #7,D1
00005260  48C1      9311          ext.l     D1
00005262  2F01      9312          move.l    D1,-(A7)
00005264  2042      9313          move.l    D2,A0
00005266  3210      9314          move.w    (A0),D1
00005268  C27C 0007 9315          and.w     #7,D1
0000526C  48C1      9316          ext.l     D1
0000526E  2F01      9317          move.l    D1,-(A7)
00005270  4879 0000 9318          pea       @m68kde~1_302.L
00005274  7510      
00005276  2F0C      9319          move.l    A4,-(A7)
00005278  4E95      9320          jsr       (A5)
0000527A  DEFC 0010 9321          add.w     #16,A7
0000527E  6000 002C 9322          bra       DisassembleInstruction_316
                    9323   DisassembleInstruction_315:
                    9324   ; else        // -(ax),-(ay) mode used
                    9325   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005282  2042      9326          move.l    D2,A0
00005284  3210      9327          move.w    (A0),D1
00005286  E041      9328          asr.w     #8,D1
00005288  E241      9329          asr.w     #1,D1
0000528A  C27C 0007 9330          and.w     #7,D1
0000528E  48C1      9331          ext.l     D1
00005290  2F01      9332          move.l    D1,-(A7)
00005292  2042      9333          move.l    D2,A0
00005294  3210      9334          move.w    (A0),D1
00005296  C27C 0007 9335          and.w     #7,D1
0000529A  48C1      9336          ext.l     D1
0000529C  2F01      9337          move.l    D1,-(A7)
0000529E  4879 0000 9338          pea       @m68kde~1_303.L
000052A2  751A      
000052A4  2F0C      9339          move.l    A4,-(A7)
000052A6  4E95      9340          jsr       (A5)
000052A8  DEFC 0010 9341          add.w     #16,A7
                    9342   DisassembleInstruction_316:
                    9343   ; strcatInstruction(TempString) ;
000052AC  2F0C      9344          move.l    A4,-(A7)
000052AE  4EB8 0CCC 9345          jsr       _strcatInstruction
000052B2  584F      9346          addq.w    #4,A7
                    9347   DisassembleInstruction_313:
                    9348   ; }
                    9349   ; }
                    9350   ; /////////////////////////////////////////////////////////////////////////////////
                    9351   ; // if instruction is SWAP
                    9352   ; /////////////////////////////////////////////////////////////////////////////////
                    9353   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
000052B4  2042      9354          move.l    D2,A0
000052B6  3010      9355          move.w    (A0),D0
000052B8  C07C FFF8 9356          and.w     #65528,D0
000052BC  0C40 4840 9357          cmp.w     #18496,D0
000052C0  662A      9358          bne.s     DisassembleInstruction_317
                    9359   ; {
                    9360   ; InstructionSize = 1;
000052C2  24BC 0000 9361          move.l    #1,(A2)
000052C6  0001      
                    9362   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
000052C8  2042      9363          move.l    D2,A0
000052CA  3010      9364          move.w    (A0),D0
000052CC  C07C 0007 9365          and.w     #7,D0
000052D0  3A00      9366          move.w    D0,D5
                    9367   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
000052D2  CABC 0000 9368          and.l     #65535,D5
000052D6  FFFF      
000052D8  2F05      9369          move.l    D5,-(A7)
000052DA  4879 0000 9370          pea       @m68kde~1_304.L
000052DE  752A      
000052E0  4879 0803 9371          pea       _Instruction.L
000052E4  04E2      
000052E6  4E95      9372          jsr       (A5)
000052E8  DEFC 000C 9373          add.w     #12,A7
                    9374   DisassembleInstruction_317:
                    9375   ; }
                    9376   ; /////////////////////////////////////////////////////////////////////////////////
                    9377   ; // if instruction is TAS
                    9378   ; /////////////////////////////////////////////////////////////////////////////////
                    9379   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
000052EC  2042      9380          move.l    D2,A0
000052EE  3010      9381          move.w    (A0),D0
000052F0  C07C FFC0 9382          and.w     #65472,D0
000052F4  0C40 4AC0 9383          cmp.w     #19136,D0
000052F8  662A      9384          bne.s     DisassembleInstruction_321
                    9385   ; {
                    9386   ; if(*OpCode != (unsigned short int)(0x4AFC))
000052FA  2042      9387          move.l    D2,A0
000052FC  3010      9388          move.w    (A0),D0
000052FE  0C40 4AFC 9389          cmp.w     #19196,D0
00005302  6720      9390          beq.s     DisassembleInstruction_321
                    9391   ; {
                    9392   ; InstructionSize = 1;
00005304  24BC 0000 9393          move.l    #1,(A2)
00005308  0001      
                    9394   ; strcpyInstruction("TAS ") ;
0000530A  4879 0000 9395          pea       @m68kde~1_305.L
0000530E  7534      
00005310  4E93      9396          jsr       (A3)
00005312  584F      9397          addq.w    #4,A7
                    9398   ; Decode6BitEA(OpCode,0,0,0) ;
00005314  42A7      9399          clr.l     -(A7)
00005316  42A7      9400          clr.l     -(A7)
00005318  42A7      9401          clr.l     -(A7)
0000531A  2F02      9402          move.l    D2,-(A7)
0000531C  4EB8 2F62 9403          jsr       _Decode6BitEA
00005320  DEFC 0010 9404          add.w     #16,A7
                    9405   DisassembleInstruction_321:
                    9406   ; }
                    9407   ; }
                    9408   ; /////////////////////////////////////////////////////////////////////////////////
                    9409   ; // if instruction is TRAP
                    9410   ; /////////////////////////////////////////////////////////////////////////////////
                    9411   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
00005324  2042      9412          move.l    D2,A0
00005326  3010      9413          move.w    (A0),D0
00005328  C07C FFF0 9414          and.w     #65520,D0
0000532C  0C40 4E40 9415          cmp.w     #20032,D0
00005330  6622      9416          bne.s     DisassembleInstruction_323
                    9417   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
00005332  2042      9418          move.l    D2,A0
00005334  3210      9419          move.w    (A0),D1
00005336  C27C 000F 9420          and.w     #15,D1
0000533A  C2BC 0000 9421          and.l     #65535,D1
0000533E  FFFF      
00005340  2F01      9422          move.l    D1,-(A7)
00005342  4879 0000 9423          pea       @m68kde~1_306.L
00005346  753A      
00005348  4879 0803 9424          pea       _Instruction.L
0000534C  04E2      
0000534E  4E95      9425          jsr       (A5)
00005350  DEFC 000C 9426          add.w     #12,A7
                    9427   DisassembleInstruction_323:
                    9428   ; }
                    9429   ; /////////////////////////////////////////////////////////////////////////////////
                    9430   ; // if instruction is TRAPV
                    9431   ; /////////////////////////////////////////////////////////////////////////////////
                    9432   ; if(*OpCode == (unsigned short int)(0x4E76))
00005354  2042      9433          move.l    D2,A0
00005356  3010      9434          move.w    (A0),D0
00005358  0C40 4E76 9435          cmp.w     #20086,D0
0000535C  6610      9436          bne.s     DisassembleInstruction_325
                    9437   ; {
                    9438   ; InstructionSize = 1;
0000535E  24BC 0000 9439          move.l    #1,(A2)
00005362  0001      
                    9440   ; strcpyInstruction("TRAPV") ;
00005364  4879 0000 9441          pea       @m68kde~1_307.L
00005368  7544      
0000536A  4E93      9442          jsr       (A3)
0000536C  584F      9443          addq.w    #4,A7
                    9444   DisassembleInstruction_325:
                    9445   ; }
                    9446   ; /////////////////////////////////////////////////////////////////////////////////
                    9447   ; // if instruction is TST
                    9448   ; /////////////////////////////////////////////////////////////////////////////////
                    9449   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
0000536E  2042      9450          move.l    D2,A0
00005370  3010      9451          move.w    (A0),D0
00005372  C07C FF00 9452          and.w     #65280,D0
00005376  0C40 4A00 9453          cmp.w     #18944,D0
0000537A  6600 005A 9454          bne       DisassembleInstruction_329
                    9455   ; {
                    9456   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000537E  2042      9457          move.l    D2,A0
00005380  3010      9458          move.w    (A0),D0
00005382  EC40      9459          asr.w     #6,D0
00005384  C07C 0003 9460          and.w     #3,D0
00005388  3D40 FFE2 9461          move.w    D0,-30(A6)
                    9462   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
0000538C  2042      9463          move.l    D2,A0
0000538E  3010      9464          move.w    (A0),D0
00005390  0C40 4AFC 9465          cmp.w     #19196,D0
00005394  6700 0040 9466          beq       DisassembleInstruction_329
00005398  302E FFE2 9467          move.w    -30(A6),D0
0000539C  0C40 0003 9468          cmp.w     #3,D0
000053A0  6700 0034 9469          beq       DisassembleInstruction_329
                    9470   ; InstructionSize = 1;
000053A4  24BC 0000 9471          move.l    #1,(A2)
000053A8  0001      
                    9472   ; strcpyInstruction("TST") ;
000053AA  4879 0000 9473          pea       @m68kde~1_308.L
000053AE  754A      
000053B0  4E93      9474          jsr       (A3)
000053B2  584F      9475          addq.w    #4,A7
                    9476   ; Decode2BitOperandSize(*OpCode) ;
000053B4  2042      9477          move.l    D2,A0
000053B6  3210      9478          move.w    (A0),D1
000053B8  C2BC 0000 9479          and.l     #65535,D1
000053BC  FFFF      
000053BE  2F01      9480          move.l    D1,-(A7)
000053C0  4EB8 2CCE 9481          jsr       _Decode2BitOperandSize
000053C4  584F      9482          addq.w    #4,A7
                    9483   ; Decode6BitEA(OpCode,0,0,0) ;
000053C6  42A7      9484          clr.l     -(A7)
000053C8  42A7      9485          clr.l     -(A7)
000053CA  42A7      9486          clr.l     -(A7)
000053CC  2F02      9487          move.l    D2,-(A7)
000053CE  4EB8 2F62 9488          jsr       _Decode6BitEA
000053D2  DEFC 0010 9489          add.w     #16,A7
                    9490   DisassembleInstruction_329:
                    9491   ; }
                    9492   ; }
                    9493   ; /////////////////////////////////////////////////////////////////////////////////
                    9494   ; // if instruction is UNLK
                    9495   ; //////////////////////////////////////////////////////////
                    9496   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
000053D6  2042      9497          move.l    D2,A0
000053D8  3010      9498          move.w    (A0),D0
000053DA  C07C FFF8 9499          and.w     #65528,D0
000053DE  0C40 4E58 9500          cmp.w     #20056,D0
000053E2  6628      9501          bne.s     DisassembleInstruction_331
                    9502   ; {
                    9503   ; InstructionSize = 1;
000053E4  24BC 0000 9504          move.l    #1,(A2)
000053E8  0001      
                    9505   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
000053EA  2042      9506          move.l    D2,A0
000053EC  3210      9507          move.w    (A0),D1
000053EE  C27C 0007 9508          and.w     #7,D1
000053F2  C2BC 0000 9509          and.l     #65535,D1
000053F6  FFFF      
000053F8  2F01      9510          move.l    D1,-(A7)
000053FA  4879 0000 9511          pea       @m68kde~1_309.L
000053FE  754E      
00005400  4879 0803 9512          pea       _Instruction.L
00005404  04E2      
00005406  4E95      9513          jsr       (A5)
00005408  DEFC 000C 9514          add.w     #12,A7
                    9515   DisassembleInstruction_331:
                    9516   ; }
                    9517   ; FormatInstruction() ;
0000540C  4EB8 2C3C 9518          jsr       _FormatInstruction
00005410  4CDF 3CFC 9519          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005414  4E5E      9520          unlk      A6
00005416  4E75      9521          rts
                    9522   ; }
                    9523   ; C:\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS 2\PROGRAMS\DEBUGMONITORCODE\FLASHROUTINES.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    9524   _strcpy:
00005418  206F 0004 9525          move.l    (4,A7),A0
0000541C  226F 0008 9526          move.l    (8,A7),A1
00005420  2008      9527          move.l    A0,D0
                    9528   strcpy_1:
00005422  10D9      9529          move.b    (A1)+,(A0)+
00005424  66FC      9530          bne.s     strcpy_1
00005426  4E75      9531          rts
                    9532   ULDIV:
00005428  4E56 0000 9533          link    A6,#0
0000542C  48E7 C000 9534          movem.l D0/D1,-(A7)
00005430  222E 0008 9535          move.l  8(A6),D1
00005434  202E 000C 9536          move.l  12(A6),D0
00005438  6036      9537          bra.s   ldiv_3
                    9538   LDIV:
0000543A  4E56 0000 9539          link    A6,#0
0000543E  48E7 C000 9540          movem.l D0/D1,-(A7)
00005442  222E 0008 9541          move.l  8(A6),D1
00005446  202E 000C 9542          move.l  12(A6),D0
0000544A  4A80      9543          tst.l   D0
0000544C  6A0E      9544          bpl.s   ldiv_1
0000544E  4480      9545          neg.l   D0
00005450  4A81      9546          tst.l   D1
00005452  6A14      9547          bpl.s   ldiv_2
00005454  4481      9548          neg.l   D1
00005456  612A      9549          bsr.s   dodiv
00005458  4481      9550          neg.l   D1
0000545A  6016      9551          bra.s   ldiv_4
                    9552   ldiv_1:
0000545C  4A81      9553          tst.l   D1
0000545E  6A10      9554          bpl.s   ldiv_3
00005460  4481      9555          neg.l   D1
00005462  611E      9556          bsr.s   dodiv
00005464  4480      9557          neg.l   D0
00005466  600A      9558          bra.s   ldiv_4
                    9559   ldiv_2:
00005468  6118      9560          bsr.s   dodiv
0000546A  4480      9561          neg.l   D0
0000546C  4481      9562          neg.l   D1
0000546E  6002      9563          bra.s   ldiv_4
                    9564   ldiv_3:
00005470  6110      9565          bsr.s   dodiv
                    9566   ldiv_4:
00005472  2D40 0008 9567          move.l  D0,8(A6)
00005476  2D41 000C 9568          move.l  D1,12(A6)
0000547A  4CDF 0003 9569          movem.l (A7)+,D0/D1
0000547E  4E5E      9570          unlk    A6
00005480  4E75      9571          rts
                    9572   dodiv:
00005482  0C81 0000 9573          cmpi.l  #$FFFF,D1
00005486  FFFF      
00005488  6236      9574          bhi.s   dodiv_2
0000548A  0C80 0000 9575          cmpi.l  #$FFFF,D0
0000548E  FFFF      
00005490  6210      9576          bhi.s   dodiv_1
00005492  80C1      9577          divu    D1,D0
00005494  2200      9578          move.l  D0,D1
00005496  4241      9579          clr.w   D1
00005498  4841      9580          swap    D1
0000549A  0280 0000 9581          andi.l  #$FFFF,D0
0000549E  FFFF      
000054A0  4E75      9582          rts
                    9583   dodiv_1:
000054A2  48A7 A000 9584          movem.w D0/D2,-(A7)
000054A6  4240      9585          clr.w   D0
000054A8  4840      9586          swap    D0
000054AA  80C1      9587          divu    D1,D0
000054AC  3400      9588          move.w  D0,D2
000054AE  301F      9589          move.w  (A7)+,D0
000054B0  80C1      9590          divu    D1,D0
000054B2  4840      9591          swap    D0
000054B4  4281      9592          clr.l   D1
000054B6  3200      9593          move.w  D0,D1
000054B8  3002      9594          move.w  D2,D0
000054BA  4840      9595          swap    D0
000054BC  341F      9596          move.w  (A7)+,D2
000054BE  4E75      9597          rts
                    9598   dodiv_2:
000054C0  48E7 3800 9599          movem.l D2/D3/D4,-(A7)
000054C4  2401      9600          move.l  D1,D2
000054C6  4242      9601          clr.w   D2
000054C8  4842      9602          swap    D2
000054CA  5282      9603          addq.l  #1,D2
000054CC  2600      9604          move.l  D0,D3
000054CE  2801      9605          move.l  D1,D4
000054D0  2202      9606          move.l  D2,D1
000054D2  61CE      9607          bsr.s   dodiv_1
000054D4  2204      9608          move.l  D4,D1
000054D6  82C2      9609          divu    D2,D1
000054D8  80C1      9610          divu    D1,D0
000054DA  0280 0000 9611          andi.l  #$FFFF,D0
000054DE  FFFF      
                    9612   dodiv_3:
000054E0  2204      9613          move.l  D4,D1
000054E2  2404      9614          move.l  D4,D2
000054E4  4842      9615          swap    D2
000054E6  C2C0      9616          mulu    D0,D1
000054E8  C4C0      9617          mulu    D0,D2
000054EA  4842      9618          swap    D2
000054EC  D282      9619          add.l   D2,D1
000054EE  9283      9620          sub.l   D3,D1
000054F0  620A      9621          bhi.s   dodiv_4
000054F2  4481      9622          neg.l   D1
000054F4  B881      9623          cmp.l   D1,D4
000054F6  6208      9624          bhi.s   dodiv_5
000054F8  5280      9625          addq.l  #1,D0
000054FA  60E4      9626          bra.s   dodiv_3
                    9627   dodiv_4:
000054FC  5380      9628          subq.l  #1,D0
000054FE  60E0      9629          bra.s   dodiv_3
                    9630   dodiv_5:
00005500  4CDF 001C 9631          movem.l (A7)+,D2/D3/D4
00005504  4E75      9632          rts
                    9633   _putch:
00005506  4E56 0000 9634          link      A6,#0
0000550A  2F02      9635          move.l    D2,-(A7)
0000550C  242E 0008 9636          move.l    8(A6),D2
00005510  0C82 0000 9637          cmp.l     #10,D2
00005514  000A      
00005516  660A      9638          bne.s     putch_1
00005518  4878 000D 9639          pea       13
0000551C  4EB8 0B3C 9640          jsr       __putch
00005520  584F      9641          addq.w    #4,A7
                    9642   putch_1:
00005522  2F02      9643          move.l    D2,-(A7)
00005524  4EB8 0B3C 9644          jsr       __putch
00005528  584F      9645          addq.w    #4,A7
0000552A  2002      9646          move.l    D2,D0
0000552C  241F      9647          move.l    (A7)+,D2
0000552E  4E5E      9648          unlk      A6
00005530  4E75      9649          rts
                    9650   _getch:
00005532  2F02      9651          move.l    D2,-(A7)
00005534  2439 0803 9652          move.l    __ungetbuf.L,D2
00005538  00C0      
0000553A  2039 0803 9653          move.l    __ungetbuf.L,D0
0000553E  00C0      
00005540  0C80 FFFF 9654          cmp.l     #-1,D0
00005544  FFFF      
00005546  670C      9655          beq.s     getch_1
00005548  23FC FFFF 9656          move.l    #-1,__ungetbuf.L
0000554C  FFFF 0803 
00005550  00C0      
00005552  6010      9657          bra.s     getch_3
                    9658   getch_1:
00005554  4EB8 0B68 9659          jsr       __getch
00005558  2400      9660          move.l    D0,D2
0000555A  0C80 0000 9661          cmp.l     #13,D0
0000555E  000D      
00005560  6602      9662          bne.s     getch_3
00005562  740A      9663          moveq     #10,D2
                    9664   getch_3:
00005564  2002      9665          move.l    D2,D0
00005566  241F      9666          move.l    (A7)+,D2
00005568  4E75      9667          rts
                    9668   _tolower:
0000556A  202F 0004 9669          move.l    4(A7),D0
0000556E  0C80 0000 9670          cmp.l     #'A',D0
00005572  0041      
00005574  6D0E      9671          blt.s     tolower_1
00005576  0C80 0000 9672          cmp.l     #'Z',D0
0000557A  005A      
0000557C  6E06      9673          bgt.s     tolower_1
0000557E  0680 0000 9674          add.l     #$20,D0
00005582  0020      
                    9675   tolower_1:
00005584  4E75      9676          rts
                    9677   _sprintf:
00005586  4E56 FFFC 9678          link      A6,#-4
0000558A  2F02      9679          move.l    D2,-(A7)
0000558C  41EE 000C 9680          lea       12(A6),A0
00005590  5848      9681          addq.w    #4,A0
00005592  2408      9682          move.l    A0,D2
00005594  2F02      9683          move.l    D2,-(A7)
00005596  2F2E 000C 9684          move.l    12(A6),-(A7)
0000559A  2F2E 0008 9685          move.l    8(A6),-(A7)
0000559E  4EB9 0000 9686          jsr       _doprint
000055A2  56C0      
000055A4  DEFC 000C 9687          add.w     #12,A7
000055A8  2D40 FFFC 9688          move.l    D0,-4(A6)
000055AC  4282      9689          clr.l     D2
000055AE  202E FFFC 9690          move.l    -4(A6),D0
000055B2  241F      9691          move.l    (A7)+,D2
000055B4  4E5E      9692          unlk      A6
000055B6  4E75      9693          rts
                    9694   _strcat:
000055B8  206F 0004 9695          move.l    (4,A7),A0
000055BC  226F 0008 9696          move.l    (8,A7),A1
000055C0  2008      9697          move.l    A0,D0
                    9698   strcat_1:
000055C2  4A18      9699          tst.b     (A0)+
000055C4  66FC      9700          bne.s     strcat_1
000055C6  5388      9701          subq.l    #1,A0
                    9702   strcat_2:
000055C8  10D9      9703          move.b    (A1)+,(A0)+
000055CA  66FC      9704          bne.s     strcat_2
000055CC  4E75      9705          rts
                    9706   _toupper:
000055CE  202F 0004 9707          move.l    4(A7),D0
000055D2  0C80 0000 9708          cmp.l     #'a',D0
000055D6  0061      
000055D8  6D0E      9709          blt.s     toupper_1
000055DA  0C80 0000 9710          cmp.l     #'z',D0
000055DE  007A      
000055E0  6E06      9711          bgt.s     toupper_1
000055E2  0480 0000 9712          sub.l     #$20,D0
000055E6  0020      
                    9713   toupper_1:
000055E8  4E75      9714          rts
                    9715   _printf:
000055EA  4E56 FFFC 9716          link      A6,#-4
000055EE  2F02      9717          move.l    D2,-(A7)
000055F0  41EE 0008 9718          lea       8(A6),A0
000055F4  5848      9719          addq.w    #4,A0
000055F6  2408      9720          move.l    A0,D2
000055F8  2F02      9721          move.l    D2,-(A7)
000055FA  2F2E 0008 9722          move.l    8(A6),-(A7)
000055FE  42A7      9723          clr.l     -(A7)
00005600  4EB9 0000 9724          jsr       _doprint
00005604  56C0      
00005606  DEFC 000C 9725          add.w     #12,A7
0000560A  2D40 FFFC 9726          move.l    D0,-4(A6)
0000560E  4282      9727          clr.l     D2
00005610  202E FFFC 9728          move.l    -4(A6),D0
00005614  241F      9729          move.l    (A7)+,D2
00005616  4E5E      9730          unlk      A6
00005618  4E75      9731          rts
                    9732   @doprint_copy:
0000561A  4E56 0000 9733          link      A6,#0
0000561E  206E 0008 9734          move.l    8(A6),A0
00005622  4A90      9735          tst.l     (A0)
00005624  6710      9736          beq.s     @doprint_copy_1
00005626  202E 000C 9737          move.l    12(A6),D0
0000562A  206E 0008 9738          move.l    8(A6),A0
0000562E  2250      9739          move.l    (A0),A1
00005630  5290      9740          addq.l    #1,(A0)
00005632  1280      9741          move.b    D0,(A1)
00005634  600A      9742          bra.s     @doprint_copy_2
                    9743   @doprint_copy_1:
00005636  2F2E 000C 9744          move.l    12(A6),-(A7)
0000563A  4EB8 5506 9745          jsr       _putch
0000563E  584F      9746          addq.w    #4,A7
                    9747   @doprint_copy_2:
00005640  4E5E      9748          unlk      A6
00005642  4E75      9749          rts
                    9750   @doprint_getval:
00005644  4E56 0000 9751          link      A6,#0
00005648  48E7 3000 9752          movem.l   D2/D3,-(A7)
0000564C  262E 0008 9753          move.l    8(A6),D3
00005650  4282      9754          clr.l     D2
00005652  2043      9755          move.l    D3,A0
00005654  2050      9756          move.l    (A0),A0
00005656  1010      9757          move.b    (A0),D0
00005658  0C00 002A 9758          cmp.b     #42,D0
0000565C  6612      9759          bne.s     @doprint_getval_1
0000565E  206E 000C 9760          move.l    12(A6),A0
00005662  2250      9761          move.l    (A0),A1
00005664  5890      9762          addq.l    #4,(A0)
00005666  2411      9763          move.l    (A1),D2
00005668  2043      9764          move.l    D3,A0
0000566A  5290      9765          addq.l    #1,(A0)
0000566C  6000 0048 9766          bra       @doprint_getval_5
                    9767   @doprint_getval_1:
00005670  7001      9768          moveq     #1,D0
00005672  2043      9769          move.l    D3,A0
00005674  2050      9770          move.l    (A0),A0
00005676  1210      9771          move.b    (A0),D1
00005678  4881      9772          ext.w     D1
0000567A  48C1      9773          ext.l     D1
0000567C  D081      9774          add.l     D1,D0
0000567E  41F9 0000 9775          lea       __ctype.L,A0
00005682  7564      
00005684  1030 0800 9776          move.b    0(A0,D0.L),D0
00005688  C03C 0004 9777          and.b     #4,D0
0000568C  6728      9778          beq.s     @doprint_getval_5
0000568E  2F02      9779          move.l    D2,-(A7)
00005690  4878 000A 9780          pea       10
00005694  4EB9 0000 9781          jsr       LMUL
00005698  5E5C      
0000569A  2017      9782          move.l    (A7),D0
0000569C  504F      9783          addq.w    #8,A7
0000569E  2043      9784          move.l    D3,A0
000056A0  2250      9785          move.l    (A0),A1
000056A2  5290      9786          addq.l    #1,(A0)
000056A4  1211      9787          move.b    (A1),D1
000056A6  4881      9788          ext.w     D1
000056A8  48C1      9789          ext.l     D1
000056AA  D081      9790          add.l     D1,D0
000056AC  0480 0000 9791          sub.l     #48,D0
000056B0  0030      
000056B2  2400      9792          move.l    D0,D2
000056B4  60BA      9793          bra       @doprint_getval_1
                    9794   @doprint_getval_5:
000056B6  2002      9795          move.l    D2,D0
000056B8  4CDF 000C 9796          movem.l   (A7)+,D2/D3
000056BC  4E5E      9797          unlk      A6
000056BE  4E75      9798          rts
                    9799   _doprint:
000056C0  4E56 FFCC 9800          link      A6,#-52
000056C4  48E7 3F3C 9801          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000056C8  45EE 0008 9802          lea       8(A6),A2
000056CC  47F8 561A 9803          lea       @doprint_copy.L,A3
000056D0  49F9 0000 9804          lea       _ultoa.L,A4
000056D4  5DE8      
000056D6  4286      9805          clr.l     D6
                    9806   doprint_1:
000056D8  206E 000C 9807          move.l    12(A6),A0
000056DC  4A10      9808          tst.b     (A0)
000056DE  6700 05EA 9809          beq       doprint_3
000056E2  206E 000C 9810          move.l    12(A6),A0
000056E6  1010      9811          move.b    (A0),D0
000056E8  0C00 0025 9812          cmp.b     #37,D0
000056EC  671C      9813          beq.s     doprint_4
000056EE  206E 000C 9814          move.l    12(A6),A0
000056F2  52AE 000C 9815          addq.l    #1,12(A6)
000056F6  1210      9816          move.b    (A0),D1
000056F8  4881      9817          ext.w     D1
000056FA  48C1      9818          ext.l     D1
000056FC  2F01      9819          move.l    D1,-(A7)
000056FE  2F0A      9820          move.l    A2,-(A7)
00005700  4E93      9821          jsr       (A3)
00005702  504F      9822          addq.w    #8,A7
00005704  5286      9823          addq.l    #1,D6
00005706  6000 05BE 9824          bra       doprint_2
                    9825   doprint_4:
0000570A  52AE 000C 9826          addq.l    #1,12(A6)
0000570E  422E FFD3 9827          clr.b     -45(A6)
00005712  422E FFD2 9828          clr.b     -46(A6)
00005716  422E FFD0 9829          clr.b     -48(A6)
0000571A  422E FFCF 9830          clr.b     -49(A6)
0000571E  422E FFCE 9831          clr.b     -50(A6)
00005722  422E FFCD 9832          clr.b     -51(A6)
00005726  42AE FFFC 9833          clr.l     -4(A6)
0000572A  7AFF      9834          moveq     #-1,D5
0000572C  41EE FFDC 9835          lea       -36(A6),A0
00005730  2608      9836          move.l    A0,D3
00005732  2408      9837          move.l    A0,D2
                    9838   doprint_6:
00005734  206E 000C 9839          move.l    12(A6),A0
00005738  1010      9840          move.b    (A0),D0
0000573A  4880      9841          ext.w     D0
0000573C  48C0      9842          ext.l     D0
0000573E  0C80 0000 9843          cmp.l     #43,D0
00005742  002B      
00005744  6730      9844          beq.s     doprint_12
00005746  6E18      9845          bgt.s     doprint_15
00005748  0C80 0000 9846          cmp.l     #35,D0
0000574C  0023      
0000574E  6700 003E 9847          beq       doprint_14
00005752  6E00 0046 9848          bgt       doprint_9
00005756  0C80 0000 9849          cmp.l     #32,D0
0000575A  0020      
0000575C  6724      9850          beq.s     doprint_13
0000575E  603A      9851          bra.s     doprint_9
                    9852   doprint_15:
00005760  0C80 0000 9853          cmp.l     #45,D0
00005764  002D      
00005766  6702      9854          beq.s     doprint_11
00005768  6030      9855          bra.s     doprint_9
                    9856   doprint_11:
0000576A  1D7C 0001 9857          move.b    #1,-51(A6)
0000576E  FFCD      
00005770  52AE 000C 9858          addq.l    #1,12(A6)
00005774  6026      9859          bra.s     doprint_7
                    9860   doprint_12:
00005776  1D7C 0001 9861          move.b    #1,-50(A6)
0000577A  FFCE      
0000577C  52AE 000C 9862          addq.l    #1,12(A6)
00005780  601A      9863          bra.s     doprint_7
                    9864   doprint_13:
00005782  1D7C 0001 9865          move.b    #1,-49(A6)
00005786  FFCF      
00005788  52AE 000C 9866          addq.l    #1,12(A6)
0000578C  600E      9867          bra.s     doprint_7
                    9868   doprint_14:
0000578E  1D7C 0001 9869          move.b    #1,-48(A6)
00005792  FFD0      
00005794  52AE 000C 9870          addq.l    #1,12(A6)
00005798  6002      9871          bra.s     doprint_7
                    9872   doprint_9:
0000579A  6002      9873          bra.s     doprint_8
                    9874   doprint_7:
0000579C  6096      9875          bra       doprint_6
                    9876   doprint_8:
0000579E  206E 000C 9877          move.l    12(A6),A0
000057A2  1010      9878          move.b    (A0),D0
000057A4  0C00 0030 9879          cmp.b     #48,D0
000057A8  660A      9880          bne.s     doprint_16
000057AA  52AE 000C 9881          addq.l    #1,12(A6)
000057AE  1D7C 0001 9882          move.b    #1,-46(A6)
000057B2  FFD2      
                    9883   doprint_16:
000057B4  486E 0010 9884          pea       16(A6)
000057B8  486E 000C 9885          pea       12(A6)
000057BC  4EB8 5644 9886          jsr       @doprint_getval
000057C0  504F      9887          addq.w    #8,A7
000057C2  2A40      9888          move.l    D0,A5
000057C4  206E 000C 9889          move.l    12(A6),A0
000057C8  1010      9890          move.b    (A0),D0
000057CA  0C00 002E 9891          cmp.b     #46,D0
000057CE  6614      9892          bne.s     doprint_18
000057D0  52AE 000C 9893          addq.l    #1,12(A6)
000057D4  486E 0010 9894          pea       16(A6)
000057D8  486E 000C 9895          pea       12(A6)
000057DC  4EB8 5644 9896          jsr       @doprint_getval
000057E0  504F      9897          addq.w    #8,A7
000057E2  2A00      9898          move.l    D0,D5
                    9899   doprint_18:
000057E4  206E 000C 9900          move.l    12(A6),A0
000057E8  1010      9901          move.b    (A0),D0
000057EA  0C00 006C 9902          cmp.b     #108,D0
000057EE  660A      9903          bne.s     doprint_20
000057F0  52AE 000C 9904          addq.l    #1,12(A6)
000057F4  1D7C 0001 9905          move.b    #1,-45(A6)
000057F8  FFD3      
                    9906   doprint_20:
000057FA  206E 000C 9907          move.l    12(A6),A0
000057FE  1010      9908          move.b    (A0),D0
00005800  4880      9909          ext.w     D0
00005802  48C0      9910          ext.l     D0
00005804  0C80 0000 9911          cmp.l     #111,D0
00005808  006F      
0000580A  6700 00D8 9912          beq       doprint_27
0000580E  6E34      9913          bgt.s     doprint_33
00005810  0C80 0000 9914          cmp.l     #100,D0
00005814  0064      
00005816  6700 0054 9915          beq       doprint_24
0000581A  6E1C      9916          bgt.s     doprint_34
0000581C  0C80 0000 9917          cmp.l     #99,D0
00005820  0063      
00005822  6700 0130 9918          beq       doprint_30
00005826  6E00 0174 9919          bgt       doprint_22
0000582A  0C80 0000 9920          cmp.l     #88,D0
0000582E  0058      
00005830  6700 00EA 9921          beq       doprint_28
00005834  6000 0166 9922          bra       doprint_22
                    9923   doprint_34:
00005838  0C80 0000 9924          cmp.l     #105,D0
0000583C  0069      
0000583E  672C      9925          beq.s     doprint_24
00005840  6000 015A 9926          bra       doprint_22
                    9927   doprint_33:
00005844  0C80 0000 9928          cmp.l     #117,D0
00005848  0075      
0000584A  6700 0060 9929          beq       doprint_26
0000584E  6E0E      9930          bgt.s     doprint_35
00005850  0C80 0000 9931          cmp.l     #115,D0
00005854  0073      
00005856  6700 0124 9932          beq       doprint_31
0000585A  6000 0140 9933          bra       doprint_22
                    9934   doprint_35:
0000585E  0C80 0000 9935          cmp.l     #120,D0
00005862  0078      
00005864  6700 00B6 9936          beq       doprint_28
00005868  6000 0132 9937          bra       doprint_22
                    9938   doprint_24:
0000586C  4A2E FFD3 9939          tst.b     -45(A6)
00005870  671C      9940          beq.s     doprint_36
00005872  4878 000A 9941          pea       10
00005876  2F03      9942          move.l    D3,-(A7)
00005878  206E 0010 9943          move.l    16(A6),A0
0000587C  58AE 0010 9944          addq.l    #4,16(A6)
00005880  2F10      9945          move.l    (A0),-(A7)
00005882  4EB9 0000 9946          jsr       _ltoa
00005886  5D64      
00005888  DEFC 000C 9947          add.w     #12,A7
0000588C  601A      9948          bra.s     doprint_37
                    9949   doprint_36:
0000588E  4878 000A 9950          pea       10
00005892  2F03      9951          move.l    D3,-(A7)
00005894  206E 0010 9952          move.l    16(A6),A0
00005898  58AE 0010 9953          addq.l    #4,16(A6)
0000589C  2F10      9954          move.l    (A0),-(A7)
0000589E  4EB9 0000 9955          jsr       _ltoa
000058A2  5D64      
000058A4  DEFC 000C 9956          add.w     #12,A7
                    9957   doprint_37:
000058A8  6000 0100 9958          bra       doprint_23
                    9959   doprint_26:
000058AC  4A2E FFD3 9960          tst.b     -45(A6)
000058B0  6718      9961          beq.s     doprint_38
000058B2  4878 000A 9962          pea       10
000058B6  2F03      9963          move.l    D3,-(A7)
000058B8  206E 0010 9964          move.l    16(A6),A0
000058BC  58AE 0010 9965          addq.l    #4,16(A6)
000058C0  2F10      9966          move.l    (A0),-(A7)
000058C2  4E94      9967          jsr       (A4)
000058C4  DEFC 000C 9968          add.w     #12,A7
000058C8  6016      9969          bra.s     doprint_39
                    9970   doprint_38:
000058CA  4878 000A 9971          pea       10
000058CE  2F03      9972          move.l    D3,-(A7)
000058D0  206E 0010 9973          move.l    16(A6),A0
000058D4  58AE 0010 9974          addq.l    #4,16(A6)
000058D8  2F10      9975          move.l    (A0),-(A7)
000058DA  4E94      9976          jsr       (A4)
000058DC  DEFC 000C 9977          add.w     #12,A7
                    9978   doprint_39:
000058E0  6000 00C8 9979          bra       doprint_23
                    9980   doprint_27:
000058E4  4A2E FFD3 9981          tst.b     -45(A6)
000058E8  6718      9982          beq.s     doprint_40
000058EA  4878 0008 9983          pea       8
000058EE  2F03      9984          move.l    D3,-(A7)
000058F0  206E 0010 9985          move.l    16(A6),A0
000058F4  58AE 0010 9986          addq.l    #4,16(A6)
000058F8  2F10      9987          move.l    (A0),-(A7)
000058FA  4E94      9988          jsr       (A4)
000058FC  DEFC 000C 9989          add.w     #12,A7
00005900  6016      9990          bra.s     doprint_41
                    9991   doprint_40:
00005902  4878 0008 9992          pea       8
00005906  2F03      9993          move.l    D3,-(A7)
00005908  206E 0010 9994          move.l    16(A6),A0
0000590C  58AE 0010 9995          addq.l    #4,16(A6)
00005910  2F10      9996          move.l    (A0),-(A7)
00005912  4E94      9997          jsr       (A4)
00005914  DEFC 000C 9998          add.w     #12,A7
                    9999   doprint_41:
00005918  6000 0090 10000          bra       doprint_23
                    10001   doprint_28:
0000591C  4A2E FFD3 10002          tst.b     -45(A6)
00005920  6718      10003          beq.s     doprint_42
00005922  4878 0010 10004          pea       16
00005926  2F03      10005          move.l    D3,-(A7)
00005928  206E 0010 10006          move.l    16(A6),A0
0000592C  58AE 0010 10007          addq.l    #4,16(A6)
00005930  2F10      10008          move.l    (A0),-(A7)
00005932  4E94      10009          jsr       (A4)
00005934  DEFC 000C 10010          add.w     #12,A7
00005938  6016      10011          bra.s     doprint_43
                    10012   doprint_42:
0000593A  4878 0010 10013          pea       16
0000593E  2F03      10014          move.l    D3,-(A7)
00005940  206E 0010 10015          move.l    16(A6),A0
00005944  58AE 0010 10016          addq.l    #4,16(A6)
00005948  2F10      10017          move.l    (A0),-(A7)
0000594A  4E94      10018          jsr       (A4)
0000594C  DEFC 000C 10019          add.w     #12,A7
                    10020   doprint_43:
00005950  6000 0058 10021          bra       doprint_23
                    10022   doprint_30:
00005954  206E 0010 10023          move.l    16(A6),A0
00005958  58AE 0010 10024          addq.l    #4,16(A6)
0000595C  2010      10025          move.l    (A0),D0
0000595E  2042      10026          move.l    D2,A0
00005960  5282      10027          addq.l    #1,D2
00005962  1080      10028          move.b    D0,(A0)
00005964  2042      10029          move.l    D2,A0
00005966  4210      10030          clr.b     (A0)
00005968  200D      10031          move.l    A5,D0
0000596A  6704      10032          beq.s     doprint_44
0000596C  200D      10033          move.l    A5,D0
0000596E  6006      10034          bra.s     doprint_45
                    10035   doprint_44:
00005970  7001      10036          moveq     #1,D0
00005972  4880      10037          ext.w     D0
00005974  48C0      10038          ext.l     D0
                    10039   doprint_45:
00005976  2A00      10040          move.l    D0,D5
00005978  6000 0030 10041          bra       doprint_23
                    10042   doprint_31:
0000597C  206E 0010 10043          move.l    16(A6),A0
00005980  58AE 0010 10044          addq.l    #4,16(A6)
00005984  2610      10045          move.l    (A0),D3
00005986  0C85 FFFF 10046          cmp.l     #-1,D5
0000598A  FFFF      
0000598C  660C      10047          bne.s     doprint_46
0000598E  2F03      10048          move.l    D3,-(A7)
00005990  4EB9 0000 10049          jsr       _strlen
00005994  5EEA      
00005996  584F      10050          addq.w    #4,A7
00005998  2A00      10051          move.l    D0,D5
                    10052   doprint_46:
0000599A  600E      10053          bra.s     doprint_23
                    10054   doprint_22:
0000599C  206E 000C 10055          move.l    12(A6),A0
000059A0  2242      10056          move.l    D2,A1
000059A2  5282      10057          addq.l    #1,D2
000059A4  1290      10058          move.b    (A0),(A1)
000059A6  2042      10059          move.l    D2,A0
000059A8  4210      10060          clr.b     (A0)
                    10061   doprint_23:
000059AA  2F03      10062          move.l    D3,-(A7)
000059AC  4EB9 0000 10063          jsr       _strlen
000059B0  5EEA      
000059B2  584F      10064          addq.w    #4,A7
000059B4  1800      10065          move.b    D0,D4
000059B6  206E 000C 10066          move.l    12(A6),A0
000059BA  1010      10067          move.b    (A0),D0
000059BC  0C00 0073 10068          cmp.b     #115,D0
000059C0  661C      10069          bne.s     doprint_48
000059C2  0C85 0000 10070          cmp.l     #0,D5
000059C6  0000      
000059C8  6D14      10071          blt.s     doprint_48
000059CA  4884      10072          ext.w     D4
000059CC  48C4      10073          ext.l     D4
000059CE  B885      10074          cmp.l     D5,D4
000059D0  6F04      10075          ble.s     doprint_50
000059D2  2005      10076          move.l    D5,D0
000059D4  6006      10077          bra.s     doprint_51
                    10078   doprint_50:
000059D6  1004      10079          move.b    D4,D0
000059D8  4880      10080          ext.w     D0
000059DA  48C0      10081          ext.l     D0
                    10082   doprint_51:
000059DC  1800      10083          move.b    D0,D4
                    10084   doprint_48:
000059DE  206E 000C 10085          move.l    12(A6),A0
000059E2  1010      10086          move.b    (A0),D0
000059E4  0C00 0058 10087          cmp.b     #88,D0
000059E8  6600 0026 10088          bne       doprint_56
000059EC  41EE FFDC 10089          lea       -36(A6),A0
000059F0  2408      10090          move.l    A0,D2
                    10091   doprint_54:
000059F2  2042      10092          move.l    D2,A0
000059F4  4A10      10093          tst.b     (A0)
000059F6  6718      10094          beq.s     doprint_56
000059F8  2042      10095          move.l    D2,A0
000059FA  1210      10096          move.b    (A0),D1
000059FC  4881      10097          ext.w     D1
000059FE  48C1      10098          ext.l     D1
00005A00  2F01      10099          move.l    D1,-(A7)
00005A02  4EB8 55CE 10100          jsr       _toupper
00005A06  584F      10101          addq.w    #4,A7
00005A08  2042      10102          move.l    D2,A0
00005A0A  1080      10103          move.b    D0,(A0)
00005A0C  5282      10104          addq.l    #1,D2
00005A0E  60E2      10105          bra       doprint_54
                    10106   doprint_56:
00005A10  7E00      10107          moveq     #0,D7
00005A12  41EE FFD4 10108          lea       -44(A6),A0
00005A16  2408      10109          move.l    A0,D2
00005A18  206E 000C 10110          move.l    12(A6),A0
00005A1C  1010      10111          move.b    (A0),D0
00005A1E  0C00 0064 10112          cmp.b     #100,D0
00005A22  670E      10113          beq.s     doprint_59
00005A24  206E 000C 10114          move.l    12(A6),A0
00005A28  1010      10115          move.b    (A0),D0
00005A2A  0C00 0069 10116          cmp.b     #105,D0
00005A2E  6600 0068 10117          bne       doprint_65
                    10118   doprint_59:
00005A32  102E FFCE 10119          move.b    -50(A6),D0
00005A36  4880      10120          ext.w     D0
00005A38  48C0      10121          ext.l     D0
00005A3A  4A80      10122          tst.l     D0
00005A3C  660C      10123          bne.s     doprint_62
00005A3E  2043      10124          move.l    D3,A0
00005A40  1010      10125          move.b    (A0),D0
00005A42  0C00 002D 10126          cmp.b     #45,D0
00005A46  6600 0028 10127          bne       doprint_60
                    10128   doprint_62:
00005A4A  2043      10129          move.l    D3,A0
00005A4C  1010      10130          move.b    (A0),D0
00005A4E  0C00 002D 10131          cmp.b     #45,D0
00005A52  660E      10132          bne.s     doprint_63
00005A54  2043      10133          move.l    D3,A0
00005A56  5283      10134          addq.l    #1,D3
00005A58  2242      10135          move.l    D2,A1
00005A5A  5282      10136          addq.l    #1,D2
00005A5C  1290      10137          move.b    (A0),(A1)
00005A5E  5304      10138          subq.b    #1,D4
00005A60  6008      10139          bra.s     doprint_64
                    10140   doprint_63:
00005A62  2042      10141          move.l    D2,A0
00005A64  5282      10142          addq.l    #1,D2
00005A66  10BC 002B 10143          move.b    #43,(A0)
                    10144   doprint_64:
00005A6A  5287      10145          addq.l    #1,D7
00005A6C  6000 002A 10146          bra       doprint_65
                    10147   doprint_60:
00005A70  4A2E FFCF 10148          tst.b     -49(A6)
00005A74  6722      10149          beq.s     doprint_65
00005A76  2043      10150          move.l    D3,A0
00005A78  1010      10151          move.b    (A0),D0
00005A7A  0C00 002D 10152          cmp.b     #45,D0
00005A7E  660E      10153          bne.s     doprint_67
00005A80  2043      10154          move.l    D3,A0
00005A82  5283      10155          addq.l    #1,D3
00005A84  2242      10156          move.l    D2,A1
00005A86  5282      10157          addq.l    #1,D2
00005A88  1290      10158          move.b    (A0),(A1)
00005A8A  5304      10159          subq.b    #1,D4
00005A8C  6008      10160          bra.s     doprint_68
                    10161   doprint_67:
00005A8E  2042      10162          move.l    D2,A0
00005A90  5282      10163          addq.l    #1,D2
00005A92  10BC 0020 10164          move.b    #32,(A0)
                    10165   doprint_68:
00005A96  5287      10166          addq.l    #1,D7
                    10167   doprint_65:
00005A98  4A2E FFD0 10168          tst.b     -48(A6)
00005A9C  6700 005A 10169          beq       doprint_77
00005AA0  206E 000C 10170          move.l    12(A6),A0
00005AA4  1010      10171          move.b    (A0),D0
00005AA6  4880      10172          ext.w     D0
00005AA8  48C0      10173          ext.l     D0
00005AAA  0C80 0000 10174          cmp.l     #111,D0
00005AAE  006F      
00005AB0  671A      10175          beq.s     doprint_73
00005AB2  6E0C      10176          bgt.s     doprint_76
00005AB4  0C80 0000 10177          cmp.l     #88,D0
00005AB8  0058      
00005ABA  6710      10178          beq.s     doprint_73
00005ABC  6000 003A 10179          bra       doprint_77
                    10180   doprint_76:
00005AC0  0C80 0000 10181          cmp.l     #120,D0
00005AC4  0078      
00005AC6  6704      10182          beq.s     doprint_73
00005AC8  6000 002E 10183          bra       doprint_77
                    10184   doprint_73:
00005ACC  2042      10185          move.l    D2,A0
00005ACE  5282      10186          addq.l    #1,D2
00005AD0  10BC 0030 10187          move.b    #48,(A0)
00005AD4  5287      10188          addq.l    #1,D7
00005AD6  206E 000C 10189          move.l    12(A6),A0
00005ADA  1010      10190          move.b    (A0),D0
00005ADC  0C00 0078 10191          cmp.b     #120,D0
00005AE0  670C      10192          beq.s     doprint_79
00005AE2  206E 000C 10193          move.l    12(A6),A0
00005AE6  1010      10194          move.b    (A0),D0
00005AE8  0C00 0058 10195          cmp.b     #88,D0
00005AEC  660A      10196          bne.s     doprint_77
                    10197   doprint_79:
00005AEE  2042      10198          move.l    D2,A0
00005AF0  5282      10199          addq.l    #1,D2
00005AF2  10BC 0078 10200          move.b    #120,(A0)
00005AF6  5287      10201          addq.l    #1,D7
                    10202   doprint_77:
00005AF8  2042      10203          move.l    D2,A0
00005AFA  4210      10204          clr.b     (A0)
00005AFC  206E 000C 10205          move.l    12(A6),A0
00005B00  1010      10206          move.b    (A0),D0
00005B02  4880      10207          ext.w     D0
00005B04  48C0      10208          ext.l     D0
00005B06  0C80 0000 10209          cmp.l     #105,D0
00005B0A  0069      
00005B0C  6700 0076 10210          beq       doprint_82
00005B10  6E42      10211          bgt.s     doprint_93
00005B12  0C80 0000 10212          cmp.l     #99,D0
00005B16  0063      
00005B18  6700 0084 10213          beq       doprint_96
00005B1C  6E1C      10214          bgt.s     doprint_94
00005B1E  0C80 0000 10215          cmp.l     #88,D0
00005B22  0058      
00005B24  6700 005E 10216          beq       doprint_82
00005B28  6E00 0184 10217          bgt       doprint_80
00005B2C  0C80 0000 10218          cmp.l     #69,D0
00005B30  0045      
00005B32  6700 0050 10219          beq       doprint_82
00005B36  6000 0176 10220          bra       doprint_80
                    10221   doprint_94:
00005B3A  0C80 0000 10222          cmp.l     #101,D0
00005B3E  0065      
00005B40  6700 0042 10223          beq       doprint_82
00005B44  6E00 0168 10224          bgt       doprint_80
00005B48  0C80 0000 10225          cmp.l     #100,D0
00005B4C  0064      
00005B4E  6734      10226          beq.s     doprint_82
00005B50  6000 015C 10227          bra       doprint_80
                    10228   doprint_93:
00005B54  0C80 0000 10229          cmp.l     #117,D0
00005B58  0075      
00005B5A  6728      10230          beq.s     doprint_82
00005B5C  6E1A      10231          bgt.s     doprint_95
00005B5E  0C80 0000 10232          cmp.l     #115,D0
00005B62  0073      
00005B64  6700 0038 10233          beq       doprint_96
00005B68  6E00 0144 10234          bgt       doprint_80
00005B6C  0C80 0000 10235          cmp.l     #111,D0
00005B70  006F      
00005B72  6710      10236          beq.s     doprint_82
00005B74  6000 0138 10237          bra       doprint_80
                    10238   doprint_95:
00005B78  0C80 0000 10239          cmp.l     #120,D0
00005B7C  0078      
00005B7E  6704      10240          beq.s     doprint_82
00005B80  6000 012C 10241          bra       doprint_80
                    10242   doprint_82:
00005B84  4A2E FFD2 10243          tst.b     -46(A6)
00005B88  6714      10244          beq.s     doprint_96
00005B8A  4A2E FFCD 10245          tst.b     -51(A6)
00005B8E  660E      10246          bne.s     doprint_96
00005B90  200D      10247          move.l    A5,D0
00005B92  9087      10248          sub.l     D7,D0
00005B94  4884      10249          ext.w     D4
00005B96  48C4      10250          ext.l     D4
00005B98  9084      10251          sub.l     D4,D0
00005B9A  2D40 FFFC 10252          move.l    D0,-4(A6)
                    10253   doprint_96:
00005B9E  202E FFFC 10254          move.l    -4(A6),D0
00005BA2  0C80 0000 10255          cmp.l     #0,D0
00005BA6  0000      
00005BA8  6C04      10256          bge.s     doprint_98
00005BAA  42AE FFFC 10257          clr.l     -4(A6)
                    10258   doprint_98:
00005BAE  4A2E FFCD 10259          tst.b     -51(A6)
00005BB2  6600 0030 10260          bne       doprint_104
00005BB6  1004      10261          move.b    D4,D0
00005BB8  4880      10262          ext.w     D0
00005BBA  48C0      10263          ext.l     D0
00005BBC  D0AE FFFC 10264          add.l     -4(A6),D0
00005BC0  D087      10265          add.l     D7,D0
00005BC2  1D40 FFD1 10266          move.b    D0,-47(A6)
                    10267   doprint_102:
00005BC6  102E FFD1 10268          move.b    -47(A6),D0
00005BCA  4880      10269          ext.w     D0
00005BCC  48C0      10270          ext.l     D0
00005BCE  220D      10271          move.l    A5,D1
00005BD0  534D      10272          subq.w    #1,A5
00005BD2  B081      10273          cmp.l     D1,D0
00005BD4  6C0E      10274          bge.s     doprint_104
00005BD6  4878 0020 10275          pea       32
00005BDA  2F0A      10276          move.l    A2,-(A7)
00005BDC  4E93      10277          jsr       (A3)
00005BDE  504F      10278          addq.w    #8,A7
00005BE0  5286      10279          addq.l    #1,D6
00005BE2  60E2      10280          bra       doprint_102
                    10281   doprint_104:
00005BE4  41EE FFD4 10282          lea       -44(A6),A0
00005BE8  2408      10283          move.l    A0,D2
                    10284   doprint_105:
00005BEA  2042      10285          move.l    D2,A0
00005BEC  4A10      10286          tst.b     (A0)
00005BEE  6716      10287          beq.s     doprint_107
00005BF0  2042      10288          move.l    D2,A0
00005BF2  5282      10289          addq.l    #1,D2
00005BF4  1210      10290          move.b    (A0),D1
00005BF6  4881      10291          ext.w     D1
00005BF8  48C1      10292          ext.l     D1
00005BFA  2F01      10293          move.l    D1,-(A7)
00005BFC  2F0A      10294          move.l    A2,-(A7)
00005BFE  4E93      10295          jsr       (A3)
00005C00  504F      10296          addq.w    #8,A7
00005C02  5286      10297          addq.l    #1,D6
00005C04  60E4      10298          bra       doprint_105
                    10299   doprint_107:
00005C06  202E FFFC 10300          move.l    -4(A6),D0
00005C0A  1D40 FFD1 10301          move.b    D0,-47(A6)
                    10302   doprint_108:
00005C0E  102E FFD1 10303          move.b    -47(A6),D0
00005C12  532E FFD1 10304          subq.b    #1,-47(A6)
00005C16  4A00      10305          tst.b     D0
00005C18  670E      10306          beq.s     doprint_110
00005C1A  4878 0030 10307          pea       48
00005C1E  2F0A      10308          move.l    A2,-(A7)
00005C20  4E93      10309          jsr       (A3)
00005C22  504F      10310          addq.w    #8,A7
00005C24  5286      10311          addq.l    #1,D6
00005C26  60E6      10312          bra       doprint_108
                    10313   doprint_110:
00005C28  2043      10314          move.l    D3,A0
00005C2A  4A10      10315          tst.b     (A0)
00005C2C  6700 0048 10316          beq       doprint_113
00005C30  206E 000C 10317          move.l    12(A6),A0
00005C34  1010      10318          move.b    (A0),D0
00005C36  4880      10319          ext.w     D0
00005C38  48C0      10320          ext.l     D0
00005C3A  0C80 0000 10321          cmp.l     #115,D0
00005C3E  0073      
00005C40  670C      10322          beq.s     doprint_116
00005C42  6E18      10323          bgt.s     doprint_119
00005C44  0C80 0000 10324          cmp.l     #99,D0
00005C48  0063      
00005C4A  6702      10325          beq.s     doprint_116
00005C4C  600E      10326          bra.s     doprint_119
                    10327   doprint_116:
00005C4E  2005      10328          move.l    D5,D0
00005C50  5385      10329          subq.l    #1,D5
00005C52  0C80 0000 10330          cmp.l     #0,D0
00005C56  0000      
00005C58  6E02      10331          bgt.s     doprint_119
00005C5A  6016      10332          bra.s     doprint_115
                    10333   doprint_119:
00005C5C  2043      10334          move.l    D3,A0
00005C5E  5283      10335          addq.l    #1,D3
00005C60  1210      10336          move.b    (A0),D1
00005C62  4881      10337          ext.w     D1
00005C64  48C1      10338          ext.l     D1
00005C66  2F01      10339          move.l    D1,-(A7)
00005C68  2F0A      10340          move.l    A2,-(A7)
00005C6A  4E93      10341          jsr       (A3)
00005C6C  504F      10342          addq.w    #8,A7
00005C6E  5286      10343          addq.l    #1,D6
00005C70  6002      10344          bra.s     doprint_112
                    10345   doprint_115:
00005C72  6002      10346          bra.s     doprint_113
                    10347   doprint_112:
00005C74  60B2      10348          bra       doprint_110
                    10349   doprint_113:
00005C76  4A2E FFCD 10350          tst.b     -51(A6)
00005C7A  6700 0030 10351          beq       doprint_125
00005C7E  1004      10352          move.b    D4,D0
00005C80  4880      10353          ext.w     D0
00005C82  48C0      10354          ext.l     D0
00005C84  D0AE FFFC 10355          add.l     -4(A6),D0
00005C88  D087      10356          add.l     D7,D0
00005C8A  1D40 FFD1 10357          move.b    D0,-47(A6)
                    10358   doprint_123:
00005C8E  102E FFD1 10359          move.b    -47(A6),D0
00005C92  4880      10360          ext.w     D0
00005C94  48C0      10361          ext.l     D0
00005C96  220D      10362          move.l    A5,D1
00005C98  534D      10363          subq.w    #1,A5
00005C9A  B081      10364          cmp.l     D1,D0
00005C9C  6C0E      10365          bge.s     doprint_125
00005C9E  4878 0020 10366          pea       32
00005CA2  2F0A      10367          move.l    A2,-(A7)
00005CA4  4E93      10368          jsr       (A3)
00005CA6  504F      10369          addq.w    #8,A7
00005CA8  5386      10370          subq.l    #1,D6
00005CAA  60E2      10371          bra       doprint_123
                    10372   doprint_125:
00005CAC  6014      10373          bra.s     doprint_81
                    10374   doprint_80:
00005CAE  206E 000C 10375          move.l    12(A6),A0
00005CB2  1210      10376          move.b    (A0),D1
00005CB4  4881      10377          ext.w     D1
00005CB6  48C1      10378          ext.l     D1
00005CB8  2F01      10379          move.l    D1,-(A7)
00005CBA  2F0A      10380          move.l    A2,-(A7)
00005CBC  4E93      10381          jsr       (A3)
00005CBE  504F      10382          addq.w    #8,A7
00005CC0  5286      10383          addq.l    #1,D6
                    10384   doprint_81:
00005CC2  52AE 000C 10385          addq.l    #1,12(A6)
                    10386   doprint_2:
00005CC6  6000 FA10 10387          bra       doprint_1
                    10388   doprint_3:
00005CCA  4A92      10389          tst.l     (A2)
00005CCC  6710      10390          beq.s     doprint_126
00005CCE  4201      10391          clr.b     D1
00005CD0  C2BC 0000 10392          and.l     #255,D1
00005CD4  00FF      
00005CD6  2F01      10393          move.l    D1,-(A7)
00005CD8  2F0A      10394          move.l    A2,-(A7)
00005CDA  4E93      10395          jsr       (A3)
00005CDC  504F      10396          addq.w    #8,A7
                    10397   doprint_126:
00005CDE  2006      10398          move.l    D6,D0
00005CE0  4CDF 3CFC 10399          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005CE4  4E5E      10400          unlk      A6
00005CE6  4E75      10401          rts
                    10402   @itoa_convert:
00005CE8  4E56 0000 10403          link      A6,#0
00005CEC  48E7 3C00 10404          movem.l   D2/D3/D4/D5,-(A7)
00005CF0  242E 0008 10405          move.l    8(A6),D2
00005CF4  262E 0010 10406          move.l    16(A6),D3
00005CF8  2A2E 000C 10407          move.l    12(A6),D5
00005CFC  2F05      10408          move.l    D5,-(A7)
00005CFE  2F03      10409          move.l    D3,-(A7)
00005D00  4EB8 5428 10410          jsr       ULDIV
00005D04  202F 0004 10411          move.l    4(A7),D0
00005D08  504F      10412          addq.w    #8,A7
00005D0A  2800      10413          move.l    D0,D4
00005D0C  BA83      10414          cmp.l     D3,D5
00005D0E  651C      10415          blo.s     @itoa_convert_1
00005D10  2F03      10416          move.l    D3,-(A7)
00005D12  2F05      10417          move.l    D5,-(A7)
00005D14  2F03      10418          move.l    D3,-(A7)
00005D16  4EB8 5428 10419          jsr       ULDIV
00005D1A  2217      10420          move.l    (A7),D1
00005D1C  504F      10421          addq.w    #8,A7
00005D1E  2F01      10422          move.l    D1,-(A7)
00005D20  2F02      10423          move.l    D2,-(A7)
00005D22  4EB8 5CE8 10424          jsr       @itoa_convert
00005D26  DEFC 000C 10425          add.w     #12,A7
00005D2A  2400      10426          move.l    D0,D2
                    10427   @itoa_convert_1:
00005D2C  0C84 0000 10428          cmp.l     #9,D4
00005D30  0009      
00005D32  6E0E      10429          bgt.s     @itoa_convert_3
00005D34  2004      10430          move.l    D4,D0
00005D36  7230      10431          moveq     #48,D1
00005D38  C2BC 0000 10432          and.l     #255,D1
00005D3C  00FF      
00005D3E  D081      10433          add.l     D1,D0
00005D40  6012      10434          bra.s     @itoa_convert_4
                    10435   @itoa_convert_3:
00005D42  2004      10436          move.l    D4,D0
00005D44  7261      10437          moveq     #97,D1
00005D46  C2BC 0000 10438          and.l     #255,D1
00005D4A  00FF      
00005D4C  D081      10439          add.l     D1,D0
00005D4E  0480 0000 10440          sub.l     #10,D0
00005D52  000A      
                    10441   @itoa_convert_4:
00005D54  2042      10442          move.l    D2,A0
00005D56  1080      10443          move.b    D0,(A0)
00005D58  2002      10444          move.l    D2,D0
00005D5A  5280      10445          addq.l    #1,D0
00005D5C  4CDF 003C 10446          movem.l   (A7)+,D2/D3/D4/D5
00005D60  4E5E      10447          unlk      A6
00005D62  4E75      10448          rts
                    10449   _ltoa:
00005D64  4E56 0000 10450          link      A6,#0
00005D68  48E7 3C00 10451          movem.l   D2/D3/D4/D5,-(A7)
00005D6C  242E 0008 10452          move.l    8(A6),D2
00005D70  262E 000C 10453          move.l    12(A6),D3
00005D74  2A2E 0010 10454          move.l    16(A6),D5
00005D78  2803      10455          move.l    D3,D4
00005D7A  0C85 0000 10456          cmp.l     #2,D5
00005D7E  0002      
00005D80  6D08      10457          blt.s     ltoa_3
00005D82  0C85 0000 10458          cmp.l     #36,D5
00005D86  0024      
00005D88  6F06      10459          ble.s     ltoa_1
                    10460   ltoa_3:
00005D8A  2003      10461          move.l    D3,D0
00005D8C  6000 0052 10462          bra       ltoa_4
                    10463   ltoa_1:
00005D90  0C85 0000 10464          cmp.l     #10,D5
00005D94  000A      
00005D96  6600 0032 10465          bne       ltoa_5
00005D9A  0C82 0000 10466          cmp.l     #0,D2
00005D9E  0000      
00005DA0  6C28      10467          bge.s     ltoa_5
00005DA2  2002      10468          move.l    D2,D0
00005DA4  4480      10469          neg.l     D0
00005DA6  2400      10470          move.l    D0,D2
00005DA8  0C82 0000 10471          cmp.l     #0,D2
00005DAC  0000      
00005DAE  6C12      10472          bge.s     ltoa_7
00005DB0  4879 0000 10473          pea       @itoa_1.L
00005DB4  7558      
00005DB6  2F03      10474          move.l    D3,-(A7)
00005DB8  4EB8 5418 10475          jsr       _strcpy
00005DBC  504F      10476          addq.w    #8,A7
00005DBE  2003      10477          move.l    D3,D0
00005DC0  601E      10478          bra.s     ltoa_4
                    10479   ltoa_7:
00005DC2  2044      10480          move.l    D4,A0
00005DC4  5284      10481          addq.l    #1,D4
00005DC6  10BC 002D 10482          move.b    #45,(A0)
                    10483   ltoa_5:
00005DCA  2F05      10484          move.l    D5,-(A7)
00005DCC  2F02      10485          move.l    D2,-(A7)
00005DCE  2F04      10486          move.l    D4,-(A7)
00005DD0  4EB8 5CE8 10487          jsr       @itoa_convert
00005DD4  DEFC 000C 10488          add.w     #12,A7
00005DD8  2800      10489          move.l    D0,D4
00005DDA  2044      10490          move.l    D4,A0
00005DDC  4210      10491          clr.b     (A0)
00005DDE  2003      10492          move.l    D3,D0
                    10493   ltoa_4:
00005DE0  4CDF 003C 10494          movem.l   (A7)+,D2/D3/D4/D5
00005DE4  4E5E      10495          unlk      A6
00005DE6  4E75      10496          rts
                    10497   _ultoa:
00005DE8  4E56 0000 10498          link      A6,#0
00005DEC  48E7 3800 10499          movem.l   D2/D3/D4,-(A7)
00005DF0  262E 0010 10500          move.l    16(A6),D3
00005DF4  282E 000C 10501          move.l    12(A6),D4
00005DF8  2404      10502          move.l    D4,D2
00005DFA  0C83 0000 10503          cmp.l     #2,D3
00005DFE  0002      
00005E00  6D08      10504          blt.s     ultoa_3
00005E02  0C83 0000 10505          cmp.l     #36,D3
00005E06  0024      
00005E08  6F04      10506          ble.s     ultoa_1
                    10507   ultoa_3:
00005E0A  2004      10508          move.l    D4,D0
00005E0C  6018      10509          bra.s     ultoa_4
                    10510   ultoa_1:
00005E0E  2F03      10511          move.l    D3,-(A7)
00005E10  2F2E 0008 10512          move.l    8(A6),-(A7)
00005E14  2F02      10513          move.l    D2,-(A7)
00005E16  4EB8 5CE8 10514          jsr       @itoa_convert
00005E1A  DEFC 000C 10515          add.w     #12,A7
00005E1E  2400      10516          move.l    D0,D2
00005E20  2042      10517          move.l    D2,A0
00005E22  4210      10518          clr.b     (A0)
00005E24  2004      10519          move.l    D4,D0
                    10520   ultoa_4:
00005E26  4CDF 001C 10521          movem.l   (A7)+,D2/D3/D4
00005E2A  4E5E      10522          unlk      A6
00005E2C  4E75      10523          rts
                    10524   _itoa:
00005E2E  4E56 0000 10525          link      A6,#0
00005E32  2F2E 0010 10526          move.l    16(A6),-(A7)
00005E36  2F2E 000C 10527          move.l    12(A6),-(A7)
00005E3A  2F2E 0008 10528          move.l    8(A6),-(A7)
00005E3E  4EB8 5D64 10529          jsr       _ltoa
00005E42  DEFC 000C 10530          add.w     #12,A7
00005E46  4E5E      10531          unlk      A6
00005E48  4E75      10532          rts
                    10533   ULMUL:
00005E4A  4E56 0000 10534          link    A6,#0
00005E4E  48E7 C000 10535          movem.l D0/D1,-(A7)
00005E52  222E 0008 10536          move.l  8(A6),D1
00005E56  202E 000C 10537          move.l  12(A6),D0
00005E5A  602C      10538          bra.s   lmul_3
                    10539   LMUL:
00005E5C  4E56 0000 10540          link    A6,#0
00005E60  48E7 C000 10541          movem.l D0/D1,-(A7)
00005E64  222E 0008 10542          move.l  8(A6),D1
00005E68  202E 000C 10543          move.l  12(A6),D0
00005E6C  4A80      10544          tst.l   D0
00005E6E  6A0A      10545          bpl.s   lmul_1
00005E70  4480      10546          neg.l   D0
00005E72  4A81      10547          tst.l   D1
00005E74  6A0A      10548          bpl.s   lmul_2
00005E76  4481      10549          neg.l   D1
00005E78  600E      10550          bra.s   lmul_3
                    10551   lmul_1:
00005E7A  4A81      10552          tst.l   D1
00005E7C  6A0A      10553          bpl.s   lmul_3
00005E7E  4481      10554          neg.l   D1
                    10555   lmul_2:
00005E80  6114      10556          bsr.s   domul
00005E82  4481      10557          neg.l   D1
00005E84  4080      10558          negx.l  D0
00005E86  6002      10559          bra.s   lmul_4
                    10560   lmul_3:
00005E88  610C      10561          bsr.s   domul
                    10562   lmul_4:
00005E8A  2D41 0008 10563          move.l  D1,8(A6)
00005E8E  4CDF 0003 10564          movem.l (A7)+,D0/D1
00005E92  4E5E      10565          unlk    A6
00005E94  4E75      10566          rts
                    10567   domul:
00005E96  0C81 0000 10568          cmpi.l  #$FFFF,D1
00005E9A  FFFF      
00005E9C  620C      10569          bhi.s   domul_1
00005E9E  0C80 0000 10570          cmpi.l  #$FFFF,D0
00005EA2  FFFF      
00005EA4  620E      10571          bhi.s   domul_2
00005EA6  C2C0      10572          mulu    D0,D1
00005EA8  4E75      10573          rts
                    10574   domul_1:
00005EAA  0C80 0000 10575          cmpi.l  #$FFFF,D0
00005EAE  FFFF      
00005EB0  6218      10576          bhi.s   domul_4
00005EB2  6002      10577          bra.s   domul_3
                    10578   domul_2
00005EB4  C141      10579          exg     D0,D1
                    10580   domul_3:
00005EB6  2F02      10581          move.l  D2,-(A7)
00005EB8  2401      10582          move.l  D1,D2
00005EBA  4842      10583          swap    D2
00005EBC  C2C0      10584          mulu    D0,D1
00005EBE  C4C0      10585          mulu    D0,D2
00005EC0  4842      10586          swap    D2
00005EC2  4242      10587          clr.w   D2
00005EC4  D282      10588          add.l   D2,D1
00005EC6  241F      10589          move.l  (A7)+,D2
00005EC8  4E75      10590          rts
                    10591   domul_4:
00005ECA  48E7 3000 10592          movem.l D2/D3,-(A7)
00005ECE  2401      10593          move.l  D1,D2
00005ED0  2601      10594          move.l  D1,D3
00005ED2  C2C0      10595          mulu    D0,D1
00005ED4  4842      10596          swap    D2
00005ED6  C4C0      10597          mulu    D0,D2
00005ED8  4840      10598          swap    D0
00005EDA  C6C0      10599          mulu    D0,D3
00005EDC  D483      10600          add.l   D3,D2
00005EDE  4842      10601          swap    D2
00005EE0  4242      10602          clr.w   D2
00005EE2  D282      10603          add.l   D2,D1
00005EE4  4CDF 000C 10604          movem.l (A7)+,D2/D3
00005EE8  4E75      10605          rts
                    10606   _strlen:
00005EEA  206F 0004 10607          move.l    (4,A7),A0
00005EEE  2248      10608          move.l    A0,A1
                    10609   strlen_1:
00005EF0  4A19      10610          tst.b     (A1)+
00005EF2  66FC      10611          bne       strlen_1
00005EF4  2009      10612          move.l    A1,D0
00005EF6  9088      10613          sub.l     A0,D0
00005EF8  5380      10614          subq.l    #1,D0
00005EFA  4E75      10615          rts
                    10616          section   const
                    10617   
                    10618   @m68kde~1_1:
00005EFC  0D0A 00   10619          dc.b      13,10,0
                    10620   @m68kde~1_2:
00005F00  0D53 7769 10621          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00005F04  7463 6865 
00005F08  7320 5357 
00005F0C  5B        
00005F0D  372D 305D 10622          dc.b      55,45,48,93,32,61,32,0
00005F11  203D 2000 
                    10623   @m68kde~1_3:
00005F16  3000      10624          dc.b      48,0
                    10625   @m68kde~1_4:
00005F18  3100      10626          dc.b      49,0
                    10627   @m68kde~1_5:
00005F1A  0D0A 456E 10628          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00005F1E  7465 7220 
00005F22  5374 6172 
00005F26  74        
00005F27  2041 6464 10629          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005F2B  7265 7373 
00005F2F  3A20 00   
                    10630   @m68kde~1_6:
00005F32  0D0A 3C45 10631          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
00005F36  5343 3E20 
00005F3A  3D20 4162 
00005F3E  6F72      
00005F40  742C 2053 10632          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
00005F44  5041 4345 
00005F48  2074 6F20 
00005F4C  436F      
00005F4E  6E74 696E 10633          dc.b      110,116,105,110,117,101,0
00005F52  7565 00   
                    10634   @m68kde~1_7:
00005F56  0D0A 2530 10635          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00005F5A  3858 2020 
00005F5E  2530 3458 
00005F62  2020 20   
00005F65  2020 2020 10636          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
00005F69  2020 2020 
00005F6D  2020 2020 
00005F71  2020 20   
00005F74  2020 2020 10637          dc.b      32,32,32,32,32,32,37,115,0
00005F78  2020 2573 
00005F7C  00        
                    10638   @m68kde~1_8:
00005F7E  0D0A 2530 10639          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005F82  3858 2020 
00005F86  2530 3458 
00005F8A  2025 30   
00005F8D  3458 2020 10640          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
00005F91  2020 2020 
00005F95  2020 2020 
00005F99  2020 20   
00005F9C  2020 2020 10641          dc.b      32,32,32,32,32,32,37,115,0
00005FA0  2020 2573 
00005FA4  00        
                    10642   @m68kde~1_9:
00005FA6  0D0A 2530 10643          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005FAA  3858 2020 
00005FAE  2530 3458 
00005FB2  2025 30   
00005FB5  3458 2025 10644          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
00005FB9  3034 5820 
00005FBD  2020 2020 
00005FC1  2020 20   
00005FC4  2020 2020 10645          dc.b      32,32,32,32,32,32,37,115,0
00005FC8  2020 2573 
00005FCC  00        
                    10646   @m68kde~1_10:
00005FCE  0D0A 2530 10647          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005FD2  3858 2020 
00005FD6  2530 3458 
00005FDA  2025 30   
00005FDD  3458 2025 10648          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
00005FE1  3034 5820 
00005FE5  2530 3458 
00005FE9  2020 20   
00005FEC  2020 2020 10649          dc.b      32,32,32,32,32,32,37,115,0
00005FF0  2020 2573 
00005FF4  00        
                    10650   @m68kde~1_11:
00005FF6  0D0A 2530 10651          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005FFA  3858 2020 
00005FFE  2530 3458 
00006002  2025 30   
00006005  3458 2025 10652          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
00006009  3034 5820 
0000600D  2530 3458 
00006011  2025 30   
00006014  3458 2020 10653          dc.b      52,88,32,32,32,32,37,115,0
00006018  2020 2573 
0000601C  00        
                    10654   @m68kde~1_12:
0000601E  0D0A 4475 10655          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00006022  6D70 204D 
00006026  656D 6F72 
0000602A  79        
0000602B  2042 6C6F 10656          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
0000602F  636B 3A20 
00006033  3C45 5343 
00006037  3E20      
00006039  746F 2041 10657          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
0000603D  626F 7274 
00006041  2C20 3C53 
00006045  50        
00006046  4143 453E 10658          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
0000604A  2074 6F20 
0000604E  436F 6E74 
00006052  69        
00006053  6E75 6500 10659          dc.b      110,117,101,0
                    10660   @m68kde~1_13:
00006058  0D0A 2530 10661          dc.b      13,10,37,48,56,120,32,0
0000605C  3878 2000 
                    10662   @m68kde~1_14:
00006060  2530 3258 10663          dc.b      37,48,50,88,0
00006064  00        
                    10664   @m68kde~1_15:
00006066  2020 00   10665          dc.b      32,32,0
                    10666   @m68kde~1_16:
0000606A  0D0A 4669 10667          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000606E  6C6C 204D 
00006072  656D 6F72 
00006076  79        
00006077  2042 6C6F 10668          dc.b      32,66,108,111,99,107,0
0000607B  636B 00   
                    10669   @m68kde~1_17:
0000607E  0D0A 456E 10670          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00006082  7465 7220 
00006086  456E 6420 
0000608A  41        
0000608B  6464 7265 10671          dc.b      100,100,114,101,115,115,58,32,0
0000608F  7373 3A20 
00006093  00        
                    10672   @m68kde~1_18:
00006094  0D0A 456E 10673          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00006098  7465 7220 
0000609C  4669 6C6C 
000060A0  20        
000060A1  4461 7461 10674          dc.b      68,97,116,97,58,32,0
000060A5  3A20 00   
                    10675   @m68kde~1_19:
000060A8  0D0A 4669 10676          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000060AC  6C6C 696E 
000060B0  6720 4164 
000060B4  64        
000060B5  7265 7373 10677          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000060B9  6573 205B 
000060BD  2425 3038 
000060C1  58        
000060C2  202D 2024 10678          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000060C6  2530 3858 
000060CA  5D20 7769 
000060CE  7468      
000060D0  2024 2530 10679          dc.b      32,36,37,48,50,88,0
000060D4  3258 00   
                    10680   @m68kde~1_20:
000060D8  0D0A 5573 10681          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000060DC  6520 4879 
000060E0  7065 7254 
000060E4  65        
000060E5  726D 696E 10682          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000060E9  616C 2074 
000060ED  6F20 5365 
000060F1  6E64 2054 10683          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000060F5  6578 7420 
000060F9  4669 6C65 
000060FD  2028 2E68 10684          dc.b      32,40,46,104,101,120,41,13,10,0
00006101  6578 290D 
00006105  0A00      
                    10685   @m68kde~1_21:
00006108  0D0A 4C6F 10686          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000610C  6164 2046 
00006110  6169 6C65 
00006114  64        
00006115  2061 7420 10687          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00006119  4164 6472 
0000611D  6573 7320 
00006121  3D        
00006122  205B 2425 10688          dc.b      32,91,36,37,48,56,88,93,13,10,0
00006126  3038 585D 
0000612A  0D0A 00   
                    10689   @m68kde~1_22:
0000612E  0D0A 5375 10690          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00006132  6363 6573 
00006136  733A 2044 
0000613A  6F        
0000613B  776E 6C6F 10691          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000613F  6164 6564 
00006143  2025 6420 
00006147  6279 7465 10692          dc.b      98,121,116,101,115,13,10,0
0000614B  730D 0A00 
                    10693   @m68kde~1_23:
00006150  0D0A 4578 10694          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00006154  616D 696E 
00006158  6520 616E 
0000615C  64        
0000615D  2043 6861 10695          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00006161  6E67 6520 
00006165  4D65 6D6F 
00006169  72        
0000616A  7900      10696          dc.b      121,0
                    10697   @m68kde~1_24:
0000616C  0D0A 3C45 10698          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00006170  5343 3E20 
00006174  746F 2053 
00006178  746F      
0000617A  702C 203C 10699          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000617E  5350 4143 
00006182  453E 2074 
00006186  6F20      
00006188  4164 7661 10700          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000618C  6E63 652C 
00006190  2027 2D27 
00006194  2074      
00006196  6F20 476F 10701          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
0000619A  2042 6163 
0000619E  6B2C 203C 
000061A2  4441      
000061A4  5441 3E20 10702          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000061A8  746F 2063 
000061AC  6861 6E67 
000061B0  65        
000061B1  00        10703          dc.b      0
                    10704   @m68kde~1_25:
000061B2  0D0A 456E 10705          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000061B6  7465 7220 
000061BA  4164 6472 
000061BE  65        
000061BF  7373 3A20 10706          dc.b      115,115,58,32,0
000061C3  00        
                    10707   @m68kde~1_26:
000061C4  0D0A 5B25 10708          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000061C8  3038 785D 
000061CC  203A 2025 
000061D0  3032 78   
000061D3  2020 00   10709          dc.b      32,32,0
                    10710   @m68kde~1_27:
000061D6  0D0A 5761 10711          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000061DA  726E 696E 
000061DE  6720 4368 
000061E2  61        
000061E3  6E67 6520 10712          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000061E7  4661 696C 
000061EB  6564 3A20 
000061EF  57        
000061F0  726F 7465 10713          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000061F4  205B 2530 
000061F8  3278 5D2C 
000061FC  20        
000061FD  5265 6164 10714          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00006201  205B 2530 
00006205  3278 5D00 
                    10715   @m68kde~1_28:
0000620A  0D0A 4C6F 10716          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
0000620E  6164 696E 
00006212  6720 5072 
00006216  6F        
00006217  6772 616D 10717          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
0000621B  2046 726F 
0000621F  6D20 5350 
00006223  49        
00006224  2046 6C61 10718          dc.b      32,70,108,97,115,104,46,46,46,46,0
00006228  7368 2E2E 
0000622C  2E2E 00   
                    10719   @m68kde~1_29:
00006230  2425 3038 10720          dc.b      36,37,48,56,88,32,32,0
00006234  5820 2000 
                    10721   @m68kde~1_30:
00006238  2000      10722          dc.b      32,0
                    10723   @m68kde~1_31:
0000623A  2E00      10724          dc.b      46,0
                    10725   @m68kde~1_32:
0000623C  2563 00   10726          dc.b      37,99,0
                    10727   @m68kde~1_33:
00006240  00        10728          dc.b      0
                    10729   @m68kde~1_34:
00006242  0D0A 0D0A 10730          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00006246  2044 3020 
0000624A  3D20 2425 
0000624E  3038 58   
00006251  2020 4130 10731          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00006255  203D 2024 
00006259  2530 3858 
0000625D  00        
                    10732   @m68kde~1_35:
0000625E  0D0A 2044 10733          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00006262  3120 3D20 
00006266  2425 3038 
0000626A  5820 20   
0000626D  4131 203D 10734          dc.b      65,49,32,61,32,36,37,48,56,88,0
00006271  2024 2530 
00006275  3858 00   
                    10735   @m68kde~1_36:
00006278  0D0A 2044 10736          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
0000627C  3220 3D20 
00006280  2425 3038 
00006284  5820 20   
00006287  4132 203D 10737          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000628B  2024 2530 
0000628F  3858 00   
                    10738   @m68kde~1_37:
00006292  0D0A 2044 10739          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00006296  3320 3D20 
0000629A  2425 3038 
0000629E  5820 20   
000062A1  4133 203D 10740          dc.b      65,51,32,61,32,36,37,48,56,88,0
000062A5  2024 2530 
000062A9  3858 00   
                    10741   @m68kde~1_38:
000062AC  0D0A 2044 10742          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000062B0  3420 3D20 
000062B4  2425 3038 
000062B8  5820 20   
000062BB  4134 203D 10743          dc.b      65,52,32,61,32,36,37,48,56,88,0
000062BF  2024 2530 
000062C3  3858 00   
                    10744   @m68kde~1_39:
000062C6  0D0A 2044 10745          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000062CA  3520 3D20 
000062CE  2425 3038 
000062D2  5820 20   
000062D5  4135 203D 10746          dc.b      65,53,32,61,32,36,37,48,56,88,0
000062D9  2024 2530 
000062DD  3858 00   
                    10747   @m68kde~1_40:
000062E0  0D0A 2044 10748          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000062E4  3620 3D20 
000062E8  2425 3038 
000062EC  5820 20   
000062EF  4136 203D 10749          dc.b      65,54,32,61,32,36,37,48,56,88,0
000062F3  2024 2530 
000062F7  3858 00   
                    10750   @m68kde~1_41:
000062FA  0D0A 2044 10751          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000062FE  3720 3D20 
00006302  2425 3038 
00006306  5820 20   
00006309  4137 203D 10752          dc.b      65,55,32,61,32,36,37,48,56,88,0
0000630D  2024 2530 
00006311  3858 00   
                    10753   @m68kde~1_42:
00006314  0D0A 0D0A 10754          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00006318  5553 5020 
0000631C  3D20 2425 
00006320  3038 58   
00006323  2020 2841 10755          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00006327  3729 2055 
0000632B  7365 7220 
0000632F  5350      
00006331  00        10756          dc.b      0
                    10757   @m68kde~1_43:
00006332  0D0A 5353 10758          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00006336  5020 3D20 
0000633A  2425 3038 
0000633E  5820 20   
00006341  2841 3729 10759          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00006345  2053 7570 
00006349  6572 7669 
0000634D  73        
0000634E  6F72 2053 10760          dc.b      111,114,32,83,80,0
00006352  5000      
                    10761   @m68kde~1_44:
00006354  0D0A 2053 10762          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00006358  5220 3D20 
0000635C  2425 3034 
00006360  5820 20   
00006363  2000      10763          dc.b      32,0
                    10764   @m68kde~1_45:
00006366  2020 205B 10765          dc.b      32,32,32,91,0
0000636A  00        
                    10766   @m68kde~1_46:
0000636C  0D0A 2050 10767          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00006370  4320 3D20 
00006374  2425 3038 
00006378  5820 20   
0000637B  00        10768          dc.b      0
                    10769   @m68kde~1_47:
0000637C  2573 00   10770          dc.b      37,115,0
                    10771   @m68kde~1_48:
00006380  5B42 5245 10772          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
00006384  414B 504F 
00006388  494E 545D 
0000638C  00        
                    10773   @m68kde~1_49:
0000638E  0D0A 5750 10774          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00006392  2564 203D 
00006396  2025 7300 
                    10775   @m68kde~1_50:
0000639A  0D0A 0D0A 10776          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000639E  0D0A 0D0A 
000063A2  0D0A 0D0A 
000063A6  5369 6E   
000063A9  676C 6520 10777          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000063AD  5374 6570 
000063B1  2020 3A5B 
000063B5  4F        
000063B6  4E5D 00   10778          dc.b      78,93,0
                    10779   @m68kde~1_51:
000063BA  0D0A 4272 10780          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000063BE  6561 6B20 
000063C2  506F 696E 
000063C6  74        
000063C7  7320 3A5B 10781          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000063CB  4469 7361 
000063CF  626C 6564 
000063D3  5D        
000063D4  00        10782          dc.b      0
                    10783   @m68kde~1_52:
000063D6  0D0A 5072 10784          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000063DA  6573 7320 
000063DE  3C53 5041 
000063E2  4345      
000063E4  3E20 746F 10785          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000063E8  2045 7865 
000063EC  6375 7465 
000063F0  20        
000063F1  4E65 7874 10786          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000063F5  2049 6E73 
000063F9  7472 7563 
000063FD  7469 6F6E 10787          dc.b      116,105,111,110,0
00006401  00        
                    10788   @m68kde~1_53:
00006402  0D0A 5072 10789          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006406  6573 7320 
0000640A  3C45 5343 
0000640E  3E20      
00006410  746F 2052 10790          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00006414  6573 756D 
00006418  6520 5072 
0000641C  6F67 7261 10791          dc.b      111,103,114,97,109,0
00006420  6D00      
                    10792   @m68kde~1_54:
00006422  0D0A 496C 10793          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00006426  6C65 6761 
0000642A  6C20 4461 
0000642E  74        
0000642F  6120 5265 10794          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00006433  6769 7374 
00006437  6572 203A 
0000643B  20        
0000643C  5573 6520 10795          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00006440  4430 2D44 
00006444  372E 2E2E 
00006448  2E2E      
0000644A  0D0A 00   10796          dc.b      13,10,0
                    10797   @m68kde~1_55:
0000644E  0D0A 4425 10798          dc.b      13,10,68,37,99,32,61,32,0
00006452  6320 3D20 
00006456  00        
                    10799   @m68kde~1_56:
00006458  0D0A 496C 10800          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
0000645C  6C65 6761 
00006460  6C20 4164 
00006464  64        
00006465  7265 7373 10801          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00006469  2052 6567 
0000646D  6973 7465 
00006471  7220 3A20 10802          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00006475  5573 6520 
00006479  4130 2D41 
0000647D  372E      
0000647F  2E2E 2E2E 10803          dc.b      46,46,46,46,13,10,0
00006483  0D0A 00   
                    10804   @m68kde~1_57:
00006486  0D0A 4125 10805          dc.b      13,10,65,37,99,32,61,32,0
0000648A  6320 3D20 
0000648E  00        
                    10806   @m68kde~1_58:
00006490  0D0A 5573 10807          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00006494  6572 2053 
00006498  5020 3D20 
0000649C  00        
                    10808   @m68kde~1_59:
0000649E  0D0A 496C 10809          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000064A2  6C65 6761 
000064A6  6C20 5265 
000064AA  67        
000064AB  6973 7465 10810          dc.b      105,115,116,101,114,46,46,46,46,0
000064AF  722E 2E2E 
000064B3  2E00      
                    10811   @m68kde~1_60:
000064B6  0D0A 5379 10812          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000064BA  7374 656D 
000064BE  2053 5020 
000064C2  3D        
000064C3  2000      10813          dc.b      32,0
                    10814   @m68kde~1_61:
000064C6  0D0A 5043 10815          dc.b      13,10,80,67,32,61,32,0
000064CA  203D 2000 
                    10816   @m68kde~1_62:
000064CE  0D0A 5352 10817          dc.b      13,10,83,82,32,61,32,0
000064D2  203D 2000 
                    10818   @m68kde~1_63:
000064D6  0D0A 496C 10819          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000064DA  6C65 6761 
000064DE  6C20 5265 
000064E2  67        
000064E3  6973 7465 10820          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000064E7  723A 2055 
000064EB  7365 2041 
000064EF  30        
000064F0  2D41 372C 10821          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000064F4  2044 302D 
000064F8  4437 2C20 
000064FC  5353 50   
000064FF  2C20 5553 10822          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00006503  502C 2050 
00006507  4320 6F72 
0000650B  2053      
0000650D  520D 0A00 10823          dc.b      82,13,10,0
                    10824   @m68kde~1_64:
00006512  0D0A 0D0A 10825          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00006516  4E75 6D20 
0000651A  2020 2020 
0000651E  4164      
00006520  6472 6573 10826          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00006524  7320 2020 
00006528  2020 2049 
0000652C  6E        
0000652D  7374 7275 10827          dc.b      115,116,114,117,99,116,105,111,110,0
00006531  6374 696F 
00006535  6E00      
                    10828   @m68kde~1_65:
00006538  0D0A 2D2D 10829          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000653C  2D20 2020 
00006540  2020 2D2D 
00006544  2D2D 2D   
00006547  2D2D 2D2D 10830          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
0000654B  2020 2020 
0000654F  2D2D 2D2D 
00006553  2D2D 2D   
00006556  2D2D 2D2D 10831          dc.b      45,45,45,45,0
0000655A  00        
                    10832   @m68kde~1_66:
0000655C  0D0A 4E6F 10833          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00006560  2042 7265 
00006564  616B 506F 
00006568  69        
00006569  6E74 7320 10834          dc.b      110,116,115,32,83,101,116,0
0000656D  5365 7400 
                    10835   @m68kde~1_67:
00006572  0D0A 2533 10836          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00006576  6420 2020 
0000657A  2020 2425 
0000657E  3038 78   
00006581  00        10837          dc.b      0
                    10838   @m68kde~1_68:
00006582  2020 2020 10839          dc.b      32,32,32,32,37,115,0
00006586  2573 00   
                    10840   @m68kde~1_69:
0000658A  0D0A 4E75 10841          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
0000658E  6D20 2020 
00006592  2020 4164 
00006596  6472      
00006598  6573 7300 10842          dc.b      101,115,115,0
                    10843   @m68kde~1_70:
0000659C  0D0A 2D2D 10844          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000065A0  2D20 2020 
000065A4  2020 2D2D 
000065A8  2D2D 2D   
000065AB  2D2D 2D2D 10845          dc.b      45,45,45,45,0
000065AF  00        
                    10846   @m68kde~1_71:
000065B0  0D0A 4E6F 10847          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000065B4  2057 6174 
000065B8  6368 506F 
000065BC  69        
000065BD  6E74 7320 10848          dc.b      110,116,115,32,83,101,116,0
000065C1  5365 7400 
                    10849   @m68kde~1_72:
000065C6  0D0A 456E 10850          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000065CA  7465 7220 
000065CE  4272 6561 
000065D2  6B        
000065D3  2050 6F69 10851          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000065D7  6E74 204E 
000065DB  756D 6265 
000065DF  72        
000065E0  3A20 00   10852          dc.b      58,32,0
                    10853   @m68kde~1_73:
000065E4  0D0A 496C 10854          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000065E8  6C65 6761 
000065EC  6C20 5261 
000065F0  6E        
000065F1  6765 203A 10855          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000065F5  2055 7365 
000065F9  2030 202D 
000065FD  2037      
000065FF  00        10856          dc.b      0
                    10857   @m68kde~1_74:
00006600  0D0A 4272 10858          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006604  6561 6B20 
00006608  506F 696E 
0000660C  74        
0000660D  2043 6C65 10859          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006611  6172 6564 
00006615  2E2E 2E2E 
00006619  2E        
0000661A  0D0A 00   10860          dc.b      13,10,0
                    10861   @m68kde~1_75:
0000661E  0D0A 4272 10862          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006622  6561 6B20 
00006626  506F 696E 
0000662A  74        
0000662B  2077 6173 10863          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
0000662F  6E27 7420 
00006633  5365 742E 
00006637  2E        
00006638  2E2E 2E00 10864          dc.b      46,46,46,0
                    10865   @m68kde~1_76:
0000663C  0D0A 456E 10866          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00006640  7465 7220 
00006644  5761 7463 
00006648  68        
00006649  2050 6F69 10867          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000664D  6E74 204E 
00006651  756D 6265 
00006655  72        
00006656  3A20 00   10868          dc.b      58,32,0
                    10869   @m68kde~1_77:
0000665A  0D0A 5761 10870          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000665E  7463 6820 
00006662  506F 696E 
00006666  74        
00006667  2043 6C65 10871          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000666B  6172 6564 
0000666F  2E2E 2E2E 
00006673  2E        
00006674  0D0A 00   10872          dc.b      13,10,0
                    10873   @m68kde~1_78:
00006678  0D0A 5761 10874          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000667C  7463 6820 
00006680  506F 696E 
00006684  74        
00006685  2057 6173 10875          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00006689  206E 6F74 
0000668D  2053 6574 
00006691  2E        
00006692  2E2E 2E2E 10876          dc.b      46,46,46,46,0
00006696  00        
                    10877   @m68kde~1_79:
00006698  0D0A 4E6F 10878          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
0000669C  2046 5245 
000066A0  4520 4272 
000066A4  6561      
000066A6  6B20 506F 10879          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000066AA  696E 7473 
000066AE  2E2E 2E2E 
000066B2  2E        
000066B3  00        10880          dc.b      0
                    10881   @m68kde~1_80:
000066B4  0D0A 4272 10882          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000066B8  6561 6B20 
000066BC  506F 696E 
000066C0  74        
000066C1  2041 6464 10883          dc.b      32,65,100,100,114,101,115,115,58,32,0
000066C5  7265 7373 
000066C9  3A20 00   
                    10884   @m68kde~1_81:
000066CC  0D0A 4572 10885          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000066D0  726F 7220 
000066D4  3A20 4272 
000066D8  65        
000066D9  616B 2050 10886          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000066DD  6F69 6E74 
000066E1  7320 4341 
000066E5  4E        
000066E6  4E4F 5420 10887          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000066EA  6265 2073 
000066EE  6574 2061 
000066F2  74        
000066F3  204F 4444 10888          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000066F7  2061 6464 
000066FB  7265 7373 
000066FF  65        
00006700  7300      10889          dc.b      115,0
                    10890   @m68kde~1_82:
00006702  0D0A 4572 10891          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006706  726F 7220 
0000670A  3A20 4272 
0000670E  65        
0000670F  616B 2050 10892          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006713  6F69 6E74 
00006717  7320 4341 
0000671B  4E        
0000671C  4E4F 5420 10893          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00006720  6265 2073 
00006724  6574 2066 
00006728  6F        
00006729  7220 524F 10894          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000672D  4D20 696E 
00006731  2052 616E 
00006735  67        
00006736  6520 3A20 10895          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
0000673A  5B24 302D 
0000673E  2430 3030 
00006742  3037 46   
00006745  4646 5D00 10896          dc.b      70,70,93,0
                    10897   @m68kde~1_83:
0000674A  0D0A 4572 10898          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
0000674E  726F 723A 
00006752  2042 7265 
00006756  61        
00006757  6B20 506F 10899          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
0000675B  696E 7420 
0000675F  416C 7265 
00006763  6164 7920 10900          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00006767  4578 6973 
0000676B  7473 2061 
0000676F  74        
00006770  2041 6464 10901          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00006774  7265 7373 
00006778  203A 2025 
0000677C  30        
0000677D  3878 0D0A 10902          dc.b      56,120,13,10,0
00006781  00        
                    10903   @m68kde~1_84:
00006782  0D0A 4272 10904          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006786  6561 6B20 
0000678A  506F 696E 
0000678E  74        
0000678F  2053 6574 10905          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006793  2061 7420 
00006797  4164 6472 
0000679B  65        
0000679C  7373 3A20 10906          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
000067A0  5B24 2530 
000067A4  3878 5D2C 
000067A8  2049      
000067AA  6E73 7472 10907          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
000067AE  7563 7469 
000067B2  6F6E 203D 
000067B6  2025 7300 10908          dc.b      32,37,115,0
                    10909   @m68kde~1_85:
000067BA  0D0A 4E6F 10910          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000067BE  2046 5245 
000067C2  4520 5761 
000067C6  7463      
000067C8  6820 506F 10911          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000067CC  696E 7473 
000067D0  2E2E 2E2E 
000067D4  2E        
000067D5  00        10912          dc.b      0
                    10913   @m68kde~1_86:
000067D6  0D0A 5761 10914          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000067DA  7463 6820 
000067DE  506F 696E 
000067E2  74        
000067E3  2041 6464 10915          dc.b      32,65,100,100,114,101,115,115,58,32,0
000067E7  7265 7373 
000067EB  3A20 00   
                    10916   @m68kde~1_87:
000067EE  0D0A 4572 10917          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000067F2  726F 723A 
000067F6  2057 6174 
000067FA  63        
000067FB  6820 506F 10918          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000067FF  696E 7420 
00006803  416C 7265 
00006807  6164 7920 10919          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
0000680B  5365 7420 
0000680F  6174 2041 
00006813  64        
00006814  6472 6573 10920          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00006818  7320 3A20 
0000681C  2530 3878 
00006820  0D        
00006821  0A00      10921          dc.b      10,0
                    10922   @m68kde~1_88:
00006824  0D0A 5761 10923          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006828  7463 6820 
0000682C  506F 696E 
00006830  74        
00006831  2053 6574 10924          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006835  2061 7420 
00006839  4164 6472 
0000683D  65        
0000683E  7373 3A20 10925          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00006842  5B24 2530 
00006846  3878 5D00 
                    10926   @m68kde~1_89:
0000684A  0D0A 0D0A 10927          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
0000684E  0D0A 0D0A 
00006852  4042 5245 
00006856  414B 50   
00006859  4F49 4E54 10928          dc.b      79,73,78,84,0
0000685D  00        
                    10929   @m68kde~1_90:
0000685E  0D0A 5369 10930          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006862  6E67 6C65 
00006866  2053 7465 
0000686A  70        
0000686B  203A 205B 10931          dc.b      32,58,32,91,79,78,93,0
0000686F  4F4E 5D00 
                    10932   @m68kde~1_91:
00006874  0D0A 4272 10933          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00006878  6561 6B50 
0000687C  6F69 6E74 
00006880  73        
00006881  203A 205B 10934          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00006885  456E 6162 
00006889  6C65 645D 
0000688D  00        
                    10935   @m68kde~1_92:
0000688E  0D0A 5072 10936          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006892  6573 7320 
00006896  3C45 5343 
0000689A  3E20      
0000689C  746F 2052 10937          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000068A0  6573 756D 
000068A4  6520 5573 
000068A8  6572 2050 10938          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
000068AC  726F 6772 
000068B0  616D 0D0A 
000068B4  00        
                    10939   @m68kde~1_93:
000068B6  0D0A 556E 10940          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000068BA  6B6E 6F77 
000068BE  6E20 436F 
000068C2  6D        
000068C3  6D61 6E64 10941          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000068C7  2E2E 2E2E 
000068CB  2E0D 0A00 
                    10942   @m68kde~1_94:
000068D0  0D0A 5072 10943          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000068D4  6F67 7261 
000068D8  6D20 456E 
000068DC  64        
000068DD  6564 2028 10944          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000068E1  5452 4150 
000068E5  2023 3135 
000068E9  292E      
000068EB  2E2E 2E00 10945          dc.b      46,46,46,0
                    10946   @m68kde~1_95:
000068F0  0D0A 4B69 10947          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000068F4  6C6C 2041 
000068F8  6C6C 2042 
000068FC  72        
000068FD  6561 6B20 10948          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00006901  506F 696E 
00006905  7473 2E2E 
00006909  2E        
0000690A  2879 2F6E 10949          dc.b      40,121,47,110,41,63,0
0000690E  293F 00   
                    10950   @m68kde~1_96:
00006912  0D0A 4B69 10951          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00006916  6C6C 2041 
0000691A  6C6C 2057 
0000691E  61        
0000691F  7463 6820 10952          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00006923  506F 696E 
00006927  7473 2E2E 
0000692B  2E        
0000692C  2879 2F6E 10953          dc.b      40,121,47,110,41,63,0
00006930  293F 00   
                    10954   @m68kde~1_97:
00006934  0D0A 2D2D 10955          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00006938  2D2D 2D2D 
0000693C  2D2D 2D2D 
00006940  2D2D 2D   
00006943  2D2D 2D2D 10956          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006947  2D2D 2D2D 
0000694B  2D2D 2D2D 
0000694F  2D2D 2D   
00006952  2D2D 2D2D 10957          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006956  2D2D 2D2D 
0000695A  2D2D 2D2D 
0000695E  2D2D 2D   
00006961  2D2D 2D2D 10958          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006965  2D2D 2D2D 
00006969  2D2D 2D2D 
0000696D  2D2D 2D   
00006970  2D2D 2D2D 10959          dc.b      45,45,45,45,45,45,0
00006974  2D2D 00   
                    10960   @m68kde~1_98:
00006978  0D0A 2020 10961          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
0000697C  4465 6275 
00006980  6767 6572 
00006984  20        
00006985  436F 6D6D 10962          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00006989  616E 6420 
0000698D  5375 6D6D 
00006991  6172 7900 10963          dc.b      97,114,121,0
                    10964   @m68kde~1_99:
00006996  0D0A 2020 10965          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
0000699A  2E28 7265 
0000699E  6729 2020 
000069A2  2020      
000069A4  2020 202D 10966          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000069A8  2043 6861 
000069AC  6E67 6520 
000069B0  5265      
000069B2  6769 7374 10967          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000069B6  6572 733A 
000069BA  2065 2E67 
000069BE  2041 302D 10968          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
000069C2  4137 2C44 
000069C6  302D 4437 
000069CA  2C50 43   
000069CD  2C53 5350 10969          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
000069D1  2C55 5350 
000069D5  2C53 5200 
                    10970   @m68kde~1_100:
000069DA  0D0A 2020 10971          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000069DE  4244 2F42 
000069E2  532F 4243 
000069E6  2F42 4B   
000069E9  2020 2D20 10972          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000069ED  4272 6561 
000069F1  6B20 506F 
000069F5  69        
000069F6  6E74 3A20 10973          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000069FA  4469 7370 
000069FE  6C61 792F 
00006A02  53        
00006A03  6574 2F43 10974          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00006A07  6C65 6172 
00006A0B  2F4B 696C 
00006A0F  6C        
00006A10  00        10975          dc.b      0
                    10976   @m68kde~1_101:
00006A12  0D0A 2020 10977          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00006A16  4320 2020 
00006A1A  2020 2020 
00006A1E  2020 20   
00006A21  2020 2D20 10978          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00006A25  436F 7079 
00006A29  2050 726F 
00006A2D  67        
00006A2E  7261 6D20 10979          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00006A32  6672 6F6D 
00006A36  2046 6C61 
00006A3A  73        
00006A3B  6820 746F 10980          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00006A3F  204D 6169 
00006A43  6E20 4D65 
00006A47  6D        
00006A48  6F72 7900 10981          dc.b      111,114,121,0
                    10982   @m68kde~1_102:
00006A4C  0D0A 2020 10983          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
00006A50  4449 2020 
00006A54  2020 2020 
00006A58  2020 20   
00006A5B  2020 2D20 10984          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00006A5F  4469 7361 
00006A63  7373 656D 
00006A67  62        
00006A68  6C65 2050 10985          dc.b      108,101,32,80,114,111,103,114,97,109,0
00006A6C  726F 6772 
00006A70  616D 00   
                    10986   @m68kde~1_103:
00006A74  0D0A 2020 10987          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00006A78  4455 2020 
00006A7C  2020 2020 
00006A80  2020 20   
00006A83  2020 2D20 10988          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00006A87  4475 6D70 
00006A8B  204D 656D 
00006A8F  6F        
00006A90  7279 2043 10989          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00006A94  6F6E 7465 
00006A98  6E74 7320 
00006A9C  746F 2053 10990          dc.b      116,111,32,83,99,114,101,101,110,0
00006AA0  6372 6565 
00006AA4  6E00      
                    10991   @m68kde~1_104:
00006AA6  0D0A 2020 10992          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00006AAA  4520 2020 
00006AAE  2020 2020 
00006AB2  2020 20   
00006AB5  2020 2D20 10993          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00006AB9  456E 7465 
00006ABD  7220 5374 
00006AC1  72        
00006AC2  696E 6720 10994          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00006AC6  696E 746F 
00006ACA  204D 656D 
00006ACE  6F72 7900 10995          dc.b      111,114,121,0
                    10996   @m68kde~1_105:
00006AD2  0D0A 2020 10997          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00006AD6  4620 2020 
00006ADA  2020 2020 
00006ADE  2020 20   
00006AE1  2020 2D20 10998          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00006AE5  4669 6C6C 
00006AE9  204D 656D 
00006AED  6F        
00006AEE  7279 2077 10999          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00006AF2  6974 6820 
00006AF6  4461 7461 
00006AFA  00        
                    11000   @m68kde~1_106:
00006AFC  0D0A 2020 11001          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00006B00  4720 2020 
00006B04  2020 2020 
00006B08  2020 20   
00006B0B  2020 2D20 11002          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00006B0F  476F 2050 
00006B13  726F 6772 
00006B17  61        
00006B18  6D20 5374 11003          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00006B1C  6172 7469 
00006B20  6E67 2061 
00006B24  74        
00006B25  2041 6464 11004          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00006B29  7265 7373 
00006B2D  3A20 2425 
00006B31  30        
00006B32  3858 00   11005          dc.b      56,88,0
                    11006   @m68kde~1_107:
00006B36  0D0A 2020 11007          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00006B3A  4C20 2020 
00006B3E  2020 2020 
00006B42  2020 20   
00006B45  2020 2D20 11008          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00006B49  4C6F 6164 
00006B4D  2050 726F 
00006B51  67        
00006B52  7261 6D20 11009          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00006B56  282E 4845 
00006B5A  5820 6669 
00006B5E  6C        
00006B5F  6529 2066 11010          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00006B63  726F 6D20 
00006B67  4C61 7074 
00006B6B  6F        
00006B6C  7000      11011          dc.b      112,0
                    11012   @m68kde~1_108:
00006B6E  0D0A 2020 11013          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00006B72  4D20 2020 
00006B76  2020 2020 
00006B7A  2020 20   
00006B7D  2020 2D20 11014          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00006B81  4D65 6D6F 
00006B85  7279 2045 
00006B89  78        
00006B8A  616D 696E 11015          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00006B8E  6520 616E 
00006B92  6420 4368 
00006B96  61        
00006B97  6E67 6500 11016          dc.b      110,103,101,0
                    11017   @m68kde~1_109:
00006B9C  0D0A 2020 11018          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00006BA0  5020 2020 
00006BA4  2020 2020 
00006BA8  2020 20   
00006BAB  2020 2D20 11019          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00006BAF  5072 6F67 
00006BB3  7261 6D20 
00006BB7  46        
00006BB8  6C61 7368 11020          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00006BBC  204D 656D 
00006BC0  6F72 7920 
00006BC4  7769 7468 11021          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00006BC8  2055 7365 
00006BCC  7220 5072 
00006BD0  6F67 7261 11022          dc.b      111,103,114,97,109,0
00006BD4  6D00      
                    11023   @m68kde~1_110:
00006BD6  0D0A 2020 11024          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00006BDA  5220 2020 
00006BDE  2020 2020 
00006BE2  2020 20   
00006BE5  2020 2D20 11025          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00006BE9  4469 7370 
00006BED  6C61 7920 
00006BF1  36        
00006BF2  3830 3030 11026          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00006BF6  2052 6567 
00006BFA  6973 7465 
00006BFE  72        
00006BFF  7300      11027          dc.b      115,0
                    11028   @m68kde~1_111:
00006C02  0D0A 2020 11029          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00006C06  5320 2020 
00006C0A  2020 2020 
00006C0E  2020 20   
00006C11  2020 2D20 11030          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00006C15  546F 6767 
00006C19  6C65 204F 
00006C1D  4E        
00006C1E  2F4F 4646 11031          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00006C22  2053 696E 
00006C26  676C 6520 
00006C2A  53        
00006C2B  7465 7020 11032          dc.b      116,101,112,32,77,111,100,101,0
00006C2F  4D6F 6465 
00006C33  00        
                    11033   @m68kde~1_112:
00006C34  0D0A 2020 11034          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00006C38  544D 2020 
00006C3C  2020 2020 
00006C40  2020 20   
00006C43  2020 2D20 11035          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00006C47  5465 7374 
00006C4B  204D 656D 
00006C4F  6F        
00006C50  7279 00   11036          dc.b      114,121,0
                    11037   @m68kde~1_113:
00006C54  0D0A 2020 11038          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00006C58  5453 2020 
00006C5C  2020 2020 
00006C60  2020 20   
00006C63  2020 2D20 11039          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00006C67  5465 7374 
00006C6B  2053 7769 
00006C6F  74        
00006C70  6368 6573 11040          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00006C74  3A20 5357 
00006C78  372D 3000 
                    11041   @m68kde~1_114:
00006C7C  0D0A 2020 11042          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00006C80  5444 2020 
00006C84  2020 2020 
00006C88  2020 20   
00006C8B  2020 2D20 11043          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00006C8F  5465 7374 
00006C93  2044 6973 
00006C97  70        
00006C98  6C61 7973 11044          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00006C9C  3A20 4C45 
00006CA0  4473 2061 
00006CA4  6E        
00006CA5  6420 372D 11045          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00006CA9  5365 676D 
00006CAD  656E 7400 
                    11046   @m68kde~1_115:
00006CB2  0D0A 2020 11047          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00006CB6  5744 2F57 
00006CBA  532F 5743 
00006CBE  2F57 4B   
00006CC1  2020 2D20 11048          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00006CC5  5761 7463 
00006CC9  6820 506F 
00006CCD  696E      
00006CCF  743A 2044 11049          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00006CD3  6973 706C 
00006CD7  6179 2F53 
00006CDB  65        
00006CDC  742F 436C 11050          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00006CE0  6561 722F 
00006CE4  4B69 6C6C 
00006CE8  00        
                    11051   @m68kde~1_116:
00006CEA  0D0A 2300 11052          dc.b      13,10,35,0
                    11053   @m68kde~1_117:
00006CEE  0D0A 5072 11054          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00006CF2  6F67 7261 
00006CF6  6D20 5275 
00006CFA  6E        
00006CFB  6E69 6E67 11055          dc.b      110,105,110,103,46,46,46,46,46,0
00006CFF  2E2E 2E2E 
00006D03  2E00      
                    11056   @m68kde~1_118:
00006D06  0D0A 5072 11057          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00006D0A  6573 7320 
00006D0E  3C52 4553 
00006D12  4554      
00006D14  3E20 6275 11058          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00006D18  7474 6F6E 
00006D1C  203C 4B65 
00006D20  79        
00006D21  303E 206F 11059          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00006D25  6E20 4445 
00006D29  3120 746F 
00006D2D  2073      
00006D2F  746F 7000 11060          dc.b      116,111,112,0
                    11061   @m68kde~1_119:
00006D34  0D0A 4572 11062          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00006D38  726F 723A 
00006D3C  2050 7265 
00006D40  73        
00006D41  7320 2747 11063          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00006D45  2720 6669 
00006D49  7273 7420 
00006D4D  74        
00006D4E  6F20 7374 11064          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00006D52  6172 7420 
00006D56  7072 6F67 
00006D5A  7261 6D00 11065          dc.b      114,97,109,0
                    11066   @m68kde~1_120:
00006D5E  0D0A 5369 11067          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006D62  6E67 6C65 
00006D66  2053 7465 
00006D6A  70        
00006D6B  2020 3A5B 11068          dc.b      32,32,58,91,79,78,93,0
00006D6F  4F4E 5D00 
                    11069   @m68kde~1_121:
00006D74  0D0A 5072 11070          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00006D78  6573 7320 
00006D7C  2747 2720 
00006D80  74        
00006D81  6F20 5472 11071          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00006D85  6163 6520 
00006D89  5072 6F67 
00006D8D  72        
00006D8E  616D 2066 11072          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00006D92  726F 6D20 
00006D96  6164 6472 
00006D9A  6573 7320 11073          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00006D9E  2425 582E 
00006DA2  2E2E 2E2E 
00006DA6  00        
                    11074   @m68kde~1_122:
00006DA8  0D0A 5075 11075          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00006DAC  7368 203C 
00006DB0  5245 5345 
00006DB4  5420      
00006DB6  4275 7474 11076          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00006DBA  6F6E 3E20 
00006DBE  746F 2053 
00006DC2  74        
00006DC3  6F70 2E2E 11077          dc.b      111,112,46,46,46,46,46,0
00006DC7  2E2E 2E00 
                    11078   @m68kde~1_123:
00006DCC  0D0A 5369 11079          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006DD0  6E67 6C65 
00006DD4  2053 7465 
00006DD8  70        
00006DD9  203A 205B 11080          dc.b      32,58,32,91,79,70,70,93,0
00006DDD  4F46 465D 
00006DE1  00        
                    11081   @m68kde~1_124:
00006DE2  0D0A 4272 11082          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006DE6  6561 6B20 
00006DEA  506F 696E 
00006DEE  74        
00006DEF  7320 3A5B 11083          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00006DF3  456E 6162 
00006DF7  6C65 645D 
00006DFB  00        
                    11084   @m68kde~1_125:
00006DFC  0D0A 5072 11085          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006E00  6573 7320 
00006E04  3C45 5343 
00006E08  3E20      
00006E0A  746F 2052 11086          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006E0E  6573 756D 
00006E12  6520 5573 
00006E16  6572 2050 11087          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00006E1A  726F 6772 
00006E1E  616D 2E2E 
00006E22  2E        
00006E23  2E2E 00   11088          dc.b      46,46,0
                    11089   @m68kde~1_126:
00006E26  0D0A 5369 11090          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006E2A  6E67 6C65 
00006E2E  2053 7465 
00006E32  70        
00006E33  2020 3A5B 11091          dc.b      32,32,58,91,79,70,70,93,0
00006E37  4F46 465D 
00006E3B  00        
                    11092   @m68kde~1_127:
00006E3C  0D0A 0D0A 11093          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00006E40  5072 6F67 
00006E44  7261 6D20 
00006E48  41        
00006E49  424F 5254 11094          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00006E4D  2021 2121 
00006E51  2121 210D 
00006E55  0A00      
                    11095   @m68kde~1_128:
00006E58  2573 0D0A 11096          dc.b      37,115,13,10,0
00006E5C  00        
                    11097   @m68kde~1_129:
00006E5E  0D0A 0D0A 11098          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00006E62  5072 6F67 
00006E66  7261 6D20 
00006E6A  41        
00006E6B  424F 5254 11099          dc.b      66,79,82,84,32,33,33,33,33,33,0
00006E6F  2021 2121 
00006E73  2121 00   
                    11100   @m68kde~1_130:
00006E76  0D0A 556E 11101          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00006E7A  6861 6E64 
00006E7E  6C65 6420 
00006E82  49        
00006E83  6E74 6572 11102          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00006E87  7275 7074 
00006E8B  3A20 4952 
00006E8F  5125 6420 11103          dc.b      81,37,100,32,33,33,33,33,33,0
00006E93  2121 2121 
00006E97  2100      
                    11104   @m68kde~1_131:
00006E9A  4144 4452 11105          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00006E9E  4553 5320 
00006EA2  4552 524F 
00006EA6  523A 20   
00006EA9  3136 206F 11106          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00006EAD  7220 3332 
00006EB1  2042 6974 
00006EB5  2054      
00006EB7  7261 6E73 11107          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00006EBB  6665 7220 
00006EBF  746F 2F66 
00006EC3  726F 6D20 11108          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00006EC7  616E 204F 
00006ECB  4444 2041 
00006ECF  64        
00006ED0  6472 6573 11109          dc.b      100,114,101,115,115,46,46,46,46,0
00006ED4  732E 2E2E 
00006ED8  2E00      
                    11110   @m68kde~1_132:
00006EDA  556E 6861 11111          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00006EDE  6E64 6C65 
00006EE2  6420 5472 
00006EE6  6170 2021 11112          dc.b      97,112,32,33,33,33,33,33,0
00006EEA  2121 2121 
00006EEE  00        
                    11113   @m68kde~1_133:
00006EF0  4255 5320 11114          dc.b      66,85,83,32,69,114,114,111,114,33,0
00006EF4  4572 726F 
00006EF8  7221 00   
                    11115   @m68kde~1_134:
00006EFC  4144 4452 11116          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00006F00  4553 5320 
00006F04  4572 726F 
00006F08  7221      
00006F0A  00        11117          dc.b      0
                    11118   @m68kde~1_135:
00006F0C  494C 4C45 11119          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00006F10  4741 4C20 
00006F14  494E 5354 
00006F18  5255 43   
00006F1B  5449 4F4E 11120          dc.b      84,73,79,78,0
00006F1F  00        
                    11121   @m68kde~1_136:
00006F20  4449 5649 11122          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00006F24  4445 2042 
00006F28  5920 5A45 
00006F2C  524F 00   
                    11123   @m68kde~1_137:
00006F30  2743 484B 11124          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00006F34  2720 494E 
00006F38  5354 5255 
00006F3C  4354 49   
00006F3F  4F4E 00   11125          dc.b      79,78,0
                    11126   @m68kde~1_138:
00006F42  5452 4150 11127          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00006F46  5620 494E 
00006F4A  5354 5255 
00006F4E  4354 49   
00006F51  4F4E 00   11128          dc.b      79,78,0
                    11129   @m68kde~1_139:
00006F54  5052 4956 11130          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00006F58  494C 4547 
00006F5C  4520 5649 
00006F60  4F4C 41   
00006F63  5449 4F4E 11131          dc.b      84,73,79,78,0
00006F67  00        
                    11132   @m68kde~1_140:
00006F68  554E 494E 11133          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00006F6C  4954 4941 
00006F70  4C49 5345 
00006F74  4420 49   
00006F77  5251 00   11134          dc.b      82,81,0
                    11135   @m68kde~1_141:
00006F7A  5350 5552 11136          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00006F7E  494F 5553 
00006F82  2049 5251 
00006F86  00        
                    11137   @m68kde~1_142:
00006F88  0D0A 5374 11138          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00006F8C  6172 7420 
00006F90  4164 6472 
00006F94  65        
00006F95  7373 2069 11139          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00006F99  6E20 4D65 
00006F9D  6D6F 7279 
00006FA1  3A20 00   11140          dc.b      58,32,0
                    11141   @m68kde~1_143:
00006FA4  0D0A 456E 11142          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00006FA8  7465 7220 
00006FAC  5374 7269 
00006FB0  6E        
00006FB1  6720 2845 11143          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00006FB5  5343 2074 
00006FB9  6F20 656E 
00006FBD  64        
00006FBE  2920 3A00 11144          dc.b      41,32,58,0
                    11145   @m68kde~1_144:
00006FC2  5065 7266 11146          dc.b      80,101,114,102,111,114,109,105,110,103,32,77
00006FC6  6F72 6D69 
00006FCA  6E67 204D 
00006FCE  656D 6F72 11147          dc.b      101,109,111,114,121,32,84,101,115,116,33,0
00006FD2  7920 5465 
00006FD6  7374 2100 
                    11148   @m68kde~1_145:
00006FDA  0D0A 5374 11149          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00006FDE  6172 7420 
00006FE2  4164 6472 
00006FE6  65        
00006FE7  7373 3A20 11150          dc.b      115,115,58,32,0
00006FEB  00        
                    11151   @m68kde~1_146:
00006FEC  0D0A 456E 11152          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
00006FF0  6420 4164 
00006FF4  6472 6573 
00006FF8  73        
00006FF9  3A20 00   11153          dc.b      58,32,0
                    11154   @m68kde~1_147:
00006FFC  0D0A 4D65 11155          dc.b      13,10,77,101,109,111,114,121,32,84,101,115,116
00007000  6D6F 7279 
00007004  2054 6573 
00007008  74        
00007009  2046 6169 11156          dc.b      32,70,97,105,108,101,100,33,0
0000700D  6C65 6421 
00007011  00        
                    11157   @m68kde~1_148:
00007012  0D0A 4164 11158          dc.b      13,10,65,100,100,114,101,115,115,32,61,32,37
00007016  6472 6573 
0000701A  7320 3D20 
0000701E  25        
0000701F  7500      11159          dc.b      117,0
                    11160   @m68kde~1_149:
00007022  0D0A 4461 11161          dc.b      13,10,68,97,116,97,32,87,114,105,116,116,101
00007026  7461 2057 
0000702A  7269 7474 
0000702E  65        
0000702F  6E20 746F 11162          dc.b      110,32,116,111,32,97,100,100,114,101,115,115
00007033  2061 6464 
00007037  7265 7373 
0000703B  203D 2025 11163          dc.b      32,61,32,37,117,0
0000703F  7500      
                    11164   @m68kde~1_150:
00007042  0D0A 4461 11165          dc.b      13,10,68,97,116,97,32,102,111,117,110,100,32
00007046  7461 2066 
0000704A  6F75 6E64 
0000704E  20        
0000704F  696E 2061 11166          dc.b      105,110,32,97,100,100,114,101,115,115,32,61
00007053  6464 7265 
00007057  7373 203D 
0000705B  2025 7500 11167          dc.b      32,37,117,0
                    11168   @m68kde~1_151:
00007060  4D65 6D6F 11169          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
00007064  7279 2054 
00007068  6573 7420 
0000706C  4661 696C 11170          dc.b      70,97,105,108,101,100,33,0
00007070  6564 2100 
                    11171   @m68kde~1_152:
00007074  0D0A 4D65 11172          dc.b      13,10,77,101,109,111,114,121,32,84,101,115,116
00007078  6D6F 7279 
0000707C  2054 6573 
00007080  74        
00007081  2053 7563 11173          dc.b      32,83,117,99,99,101,115,115,102,117,108,0
00007085  6365 7373 
00007089  6675 6C00 
                    11174   @m68kde~1_153:
0000708E  4D65 6D6F 11175          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
00007092  7279 2054 
00007096  6573 7420 
0000709A  5375 6363 11176          dc.b      83,117,99,99,101,115,115,102,117,108,33,0
0000709E  6573 7366 
000070A2  756C 2100 
                    11177   @m68kde~1_154:
000070A6  4445 312D 11178          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000070AA  3638 6B20 
000070AE  4275 6720 
000070B2  5631      
000070B4  2E37 3700 11179          dc.b      46,55,55,0
                    11180   @m68kde~1_155:
000070B8  436F 7079 11181          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000070BC  7269 6768 
000070C0  7420 2843 
000070C4  2920 504A 11182          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000070C8  2044 6176 
000070CC  6965 7320 
000070D0  3230      
000070D2  3136 00   11183          dc.b      49,54,0
                    11184   @m68kde~1_156:
000070D6  4D6F 6861 11185          dc.b      77,111,104,97,109,101,100,32,65,98,111,117,101
000070DA  6D65 6420 
000070DE  4162 6F75 
000070E2  65        
000070E3  6C6D 6167 11186          dc.b      108,109,97,103,100,0
000070E7  6400      
                    11187   @m68kde~1_157:
000070EA  5374 6420 11188          dc.b      83,116,100,32,35,58,32,51,56,53,56,53,49,52
000070EE  233A 2033 
000070F2  3835 3835 
000070F6  3134      
000070F8  3800      11189          dc.b      56,0
                    11190   @m68kde~1_158:
000070FA  0D0A 5275 11191          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000070FE  6E6E 696E 
00007102  672E 2E2E 
00007106  2E        
00007107  2E00      11192          dc.b      46,0
                    11193   @m68kde~1_159:
0000710A  5275 6E6E 11194          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000710E  696E 672E 
00007112  2E2E 2E2E 
00007116  00        
                    11195   @m68kde~1_160:
00007118  0D0A 2573 11196          dc.b      13,10,37,115,0
0000711C  00        
                    11197   @m68kde~1_161:
0000711E  2E42 2000 11198          dc.b      46,66,32,0
                    11199   @m68kde~1_162:
00007122  2E57 2000 11200          dc.b      46,87,32,0
                    11201   @m68kde~1_163:
00007126  2E4C 2000 11202          dc.b      46,76,32,0
                    11203   @m68kde~1_164:
0000712A  2324 2558 11204          dc.b      35,36,37,88,0
0000712E  00        
                    11205   @m68kde~1_165:
00007130  2800      11206          dc.b      40,0
                    11207   @m68kde~1_166:
00007132  2900      11208          dc.b      41,0
                    11209   @m68kde~1_167:
00007134  292B 00   11210          dc.b      41,43,0
                    11211   @m68kde~1_168:
00007138  2D28 00   11212          dc.b      45,40,0
                    11213   @m68kde~1_169:
0000713C  2564 2841 11214          dc.b      37,100,40,65,37,100,41,0
00007140  2564 2900 
                    11215   @m68kde~1_170:
00007144  2564 2841 11216          dc.b      37,100,40,65,37,100,44,0
00007148  2564 2C00 
                    11217   @m68kde~1_171:
0000714C  4400      11218          dc.b      68,0
                    11219   @m68kde~1_172:
0000714E  4100      11220          dc.b      65,0
                    11221   @m68kde~1_173:
00007150  2564 00   11222          dc.b      37,100,0
                    11223   @m68kde~1_174:
00007154  2E57 2900 11224          dc.b      46,87,41,0
                    11225   @m68kde~1_175:
00007158  2E4C 2900 11226          dc.b      46,76,41,0
                    11227   @m68kde~1_176:
0000715C  2425 5800 11228          dc.b      36,37,88,0
                    11229   @m68kde~1_177:
00007160  2564 2850 11230          dc.b      37,100,40,80,67,41,0
00007164  4329 00   
                    11231   @m68kde~1_178:
00007168  2564 2850 11232          dc.b      37,100,40,80,67,44,0
0000716C  432C 00   
                    11233   @m68kde~1_179:
00007170  2C00      11234          dc.b      44,0
                    11235   @m68kde~1_180:
00007172  4343 00   11236          dc.b      67,67,0
                    11237   @m68kde~1_181:
00007176  4353 00   11238          dc.b      67,83,0
                    11239   @m68kde~1_182:
0000717A  4551 00   11240          dc.b      69,81,0
                    11241   @m68kde~1_183:
0000717E  4745 00   11242          dc.b      71,69,0
                    11243   @m68kde~1_184:
00007182  4754 00   11244          dc.b      71,84,0
                    11245   @m68kde~1_185:
00007186  4849 00   11246          dc.b      72,73,0
                    11247   @m68kde~1_186:
0000718A  4C45 00   11248          dc.b      76,69,0
                    11249   @m68kde~1_187:
0000718E  4C53 00   11250          dc.b      76,83,0
                    11251   @m68kde~1_188:
00007192  4C54 00   11252          dc.b      76,84,0
                    11253   @m68kde~1_189:
00007196  4D49 00   11254          dc.b      77,73,0
                    11255   @m68kde~1_190:
0000719A  4E45 00   11256          dc.b      78,69,0
                    11257   @m68kde~1_191:
0000719E  504C 00   11258          dc.b      80,76,0
                    11259   @m68kde~1_192:
000071A2  5653 00   11260          dc.b      86,83,0
                    11261   @m68kde~1_193:
000071A6  5643 00   11262          dc.b      86,67,0
                    11263   @m68kde~1_194:
000071AA  5241 00   11264          dc.b      82,65,0
                    11265   @m68kde~1_195:
000071AE  5352 00   11266          dc.b      83,82,0
                    11267   @m68kde~1_196:
000071B2  556E 6B6E 11268          dc.b      85,110,107,110,111,119,110,0
000071B6  6F77 6E00 
                    11269   @m68kde~1_197:
000071BA  4142 4344 11270          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
000071BE  2044 2564 
000071C2  2C44 2564 
000071C6  00        
                    11271   @m68kde~1_198:
000071C8  4142 4344 11272          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
000071CC  202D 2841 
000071D0  2564 292C 
000071D4  2D28 41   
000071D7  2564 2900 11273          dc.b      37,100,41,0
                    11274   @m68kde~1_199:
000071DC  4144 4441 11275          dc.b      65,68,68,65,46,87,32,0
000071E0  2E57 2000 
                    11276   @m68kde~1_200:
000071E4  4144 4441 11277          dc.b      65,68,68,65,46,76,32,0
000071E8  2E4C 2000 
                    11278   @m68kde~1_201:
000071EC  2C41 2558 11279          dc.b      44,65,37,88,0
000071F0  00        
                    11280   @m68kde~1_202:
000071F2  4144 4400 11281          dc.b      65,68,68,0
                    11282   @m68kde~1_203:
000071F6  4144 4449 11283          dc.b      65,68,68,73,0
000071FA  00        
                    11284   @m68kde~1_204:
000071FC  414E 4449 11285          dc.b      65,78,68,73,0
00007200  00        
                    11286   @m68kde~1_205:
00007202  434D 5049 11287          dc.b      67,77,80,73,0
00007206  00        
                    11288   @m68kde~1_206:
00007208  454F 5249 11289          dc.b      69,79,82,73,0
0000720C  00        
                    11290   @m68kde~1_207:
0000720E  4F52 4900 11291          dc.b      79,82,73,0
                    11292   @m68kde~1_208:
00007212  5355 4249 11293          dc.b      83,85,66,73,0
00007216  00        
                    11294   @m68kde~1_209:
00007218  414E 4449 11295          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
0000721C  2023 2425 
00007220  582C 5352 
00007224  00        
                    11296   @m68kde~1_210:
00007226  4144 4451 11297          dc.b      65,68,68,81,0
0000722A  00        
                    11298   @m68kde~1_211:
0000722C  2325 3158 11299          dc.b      35,37,49,88,44,0
00007230  2C00      
                    11300   @m68kde~1_212:
00007232  4144 4458 11301          dc.b      65,68,68,88,0
00007236  00        
                    11302   @m68kde~1_213:
00007238  4425 582C 11303          dc.b      68,37,88,44,68,37,88,0
0000723C  4425 5800 
                    11304   @m68kde~1_214:
00007240  2D28 4125 11305          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
00007244  5829 2C2D 
00007248  2841 2558 
0000724C  2900      
                    11306   @m68kde~1_215:
0000724E  414E 4400 11307          dc.b      65,78,68,0
                    11308   @m68kde~1_216:
00007252  414E 4449 11309          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
00007256  2023 2425 
0000725A  3258 2C43 
0000725E  4352 00   
                    11310   @m68kde~1_217:
00007262  4153 4C00 11311          dc.b      65,83,76,0
                    11312   @m68kde~1_218:
00007266  4153 5200 11313          dc.b      65,83,82,0
                    11314   @m68kde~1_219:
0000726A  4C53 4C00 11315          dc.b      76,83,76,0
                    11316   @m68kde~1_220:
0000726E  4C53 5200 11317          dc.b      76,83,82,0
                    11318   @m68kde~1_221:
00007272  524F 4C00 11319          dc.b      82,79,76,0
                    11320   @m68kde~1_222:
00007276  524F 5200 11321          dc.b      82,79,82,0
                    11322   @m68kde~1_223:
0000727A  524F 584C 11323          dc.b      82,79,88,76,0
0000727E  00        
                    11324   @m68kde~1_224:
00007280  524F 5852 11325          dc.b      82,79,88,82,0
00007284  00        
                    11326   @m68kde~1_225:
00007286  2324 2558 11327          dc.b      35,36,37,88,44,68,37,88,0
0000728A  2C44 2558 
0000728E  00        
                    11328   @m68kde~1_226:
00007290  4200      11329          dc.b      66,0
                    11330   @m68kde~1_227:
00007292  4243 4847 11331          dc.b      66,67,72,71,32,0
00007296  2000      
                    11332   @m68kde~1_228:
00007298  4425 642C 11333          dc.b      68,37,100,44,0
0000729C  00        
                    11334   @m68kde~1_229:
0000729E  2324 2558 11335          dc.b      35,36,37,88,44,0
000072A2  2C00      
                    11336   @m68kde~1_230:
000072A4  4243 4C52 11337          dc.b      66,67,76,82,32,0
000072A8  2000      
                    11338   @m68kde~1_231:
000072AA  4253 4554 11339          dc.b      66,83,69,84,32,0
000072AE  2000      
                    11340   @m68kde~1_232:
000072B0  4254 5354 11341          dc.b      66,84,83,84,32,0
000072B4  2000      
                    11342   @m68kde~1_233:
000072B6  4348 4B20 11343          dc.b      67,72,75,32,0
000072BA  00        
                    11344   @m68kde~1_234:
000072BC  2C44 2564 11345          dc.b      44,68,37,100,0
000072C0  00        
                    11346   @m68kde~1_235:
000072C2  434C 5200 11347          dc.b      67,76,82,0
                    11348   @m68kde~1_236:
000072C6  434D 5041 11349          dc.b      67,77,80,65,46,87,32,0
000072CA  2E57 2000 
                    11350   @m68kde~1_237:
000072CE  434D 5041 11351          dc.b      67,77,80,65,46,76,32,0
000072D2  2E4C 2000 
                    11352   @m68kde~1_238:
000072D6  2C41 2564 11353          dc.b      44,65,37,100,0
000072DA  00        
                    11354   @m68kde~1_239:
000072DC  434D 5000 11355          dc.b      67,77,80,0
                    11356   @m68kde~1_240:
000072E0  434D 504D 11357          dc.b      67,77,80,77,0
000072E4  00        
                    11358   @m68kde~1_241:
000072E6  2841 2564 11359          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
000072EA  292B 2C28 
000072EE  4125 6429 
000072F2  2B00      
                    11360   @m68kde~1_242:
000072F4  4442 00   11361          dc.b      68,66,0
                    11362   @m68kde~1_243:
000072F8  4425 642C 11363          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
000072FC  252B 6428 
00007300  5043 2920 
00007304  746F      
00007306  2041 6464 11364          dc.b      32,65,100,100,114,58,36,37,88,0
0000730A  723A 2425 
0000730E  5800      
                    11365   @m68kde~1_244:
00007310  4449 5653 11366          dc.b      68,73,86,83,32,0
00007314  2000      
                    11367   @m68kde~1_245:
00007316  4449 5655 11368          dc.b      68,73,86,85,32,0
0000731A  2000      
                    11369   @m68kde~1_246:
0000731C  454F 5200 11370          dc.b      69,79,82,0
                    11371   @m68kde~1_247:
00007320  454F 5249 11372          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
00007324  2023 2425 
00007328  3258 2C43 
0000732C  4352 00   
                    11373   @m68kde~1_248:
00007330  454F 5249 11374          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
00007334  2023 2425 
00007338  582C 5352 
0000733C  00        
                    11375   @m68kde~1_249:
0000733E  4558 4720 11376          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
00007342  4425 642C 
00007346  4425 6400 
                    11377   @m68kde~1_250:
0000734A  4558 4720 11378          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
0000734E  4125 642C 
00007352  4125 6400 
                    11379   @m68kde~1_251:
00007356  4558 4720 11380          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
0000735A  4425 642C 
0000735E  4125 6400 
                    11381   @m68kde~1_252:
00007362  4558 5400 11382          dc.b      69,88,84,0
                    11383   @m68kde~1_253:
00007366  494C 4C45 11384          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
0000736A  4741 4C20 
0000736E  2824 3441 
00007372  4643 29   
00007375  00        11385          dc.b      0
                    11386   @m68kde~1_254:
00007376  4A4D 5020 11387          dc.b      74,77,80,32,0
0000737A  00        
                    11388   @m68kde~1_255:
0000737C  4A53 5220 11389          dc.b      74,83,82,32,0
00007380  00        
                    11390   @m68kde~1_256:
00007382  4C45 4120 11391          dc.b      76,69,65,32,0
00007386  00        
                    11392   @m68kde~1_257:
00007388  4C49 4E4B 11393          dc.b      76,73,78,75,32,0
0000738C  2000      
                    11394   @m68kde~1_258:
0000738E  4125 642C 11395          dc.b      65,37,100,44,35,37,100,0
00007392  2325 6400 
                    11396   @m68kde~1_259:
00007396  4D4F 5645 11397          dc.b      77,79,86,69,46,66,32,0
0000739A  2E42 2000 
                    11398   @m68kde~1_260:
0000739E  4D4F 5645 11399          dc.b      77,79,86,69,46,76,32,0
000073A2  2E4C 2000 
                    11400   @m68kde~1_261:
000073A6  4D4F 5645 11401          dc.b      77,79,86,69,46,87,32,0
000073AA  2E57 2000 
                    11402   @m68kde~1_262:
000073AE  4D4F 5645 11403          dc.b      77,79,86,69,32,0
000073B2  2000      
                    11404   @m68kde~1_263:
000073B4  2C43 4352 11405          dc.b      44,67,67,82,0
000073B8  00        
                    11406   @m68kde~1_264:
000073BA  4D4F 5645 11407          dc.b      77,79,86,69,32,83,82,44,0
000073BE  2053 522C 
000073C2  00        
                    11408   @m68kde~1_265:
000073C4  2C53 5200 11409          dc.b      44,83,82,0
                    11410   @m68kde~1_266:
000073C8  4D4F 5645 11411          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
000073CC  2055 5350 
000073D0  2C41 2564 
000073D4  00        
                    11412   @m68kde~1_267:
000073D6  4D4F 5645 11413          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
000073DA  2041 2564 
000073DE  2C55 5350 
000073E2  00        
                    11414   @m68kde~1_268:
000073E4  4D4F 5645 11415          dc.b      77,79,86,69,77,0
000073E8  4D00      
                    11416   @m68kde~1_269:
000073EA  4425 6400 11417          dc.b      68,37,100,0
                    11418   @m68kde~1_270:
000073EE  2F44 2564 11419          dc.b      47,68,37,100,0
000073F2  00        
                    11420   @m68kde~1_271:
000073F4  4125 6400 11421          dc.b      65,37,100,0
                    11422   @m68kde~1_272:
000073F8  2F41 2564 11423          dc.b      47,65,37,100,0
000073FC  00        
                    11424   @m68kde~1_273:
000073FE  4D4F 5645 11425          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
00007402  502E 5720 
00007406  2425 5828 
0000740A  4125 64   
0000740D  292C 4425 11426          dc.b      41,44,68,37,100,0
00007411  6400      
                    11427   @m68kde~1_274:
00007414  4D4F 5645 11428          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
00007418  502E 4C20 
0000741C  2425 5828 
00007420  4125 64   
00007423  292C 4425 11429          dc.b      41,44,68,37,100,0
00007427  6400      
                    11430   @m68kde~1_275:
0000742A  4D4F 5645 11431          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
0000742E  502E 5720 
00007432  4425 642C 
00007436  2425 58   
00007439  2841 2564 11432          dc.b      40,65,37,100,41,0
0000743D  2900      
                    11433   @m68kde~1_276:
00007440  4D4F 5645 11434          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
00007444  502E 4C20 
00007448  4425 642C 
0000744C  2425 58   
0000744F  2841 2564 11435          dc.b      40,65,37,100,41,0
00007453  2900      
                    11436   @m68kde~1_277:
00007456  4D4F 5645 11437          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
0000745A  5120 2324 
0000745E  2558 2C44 
00007462  2564 00   
                    11438   @m68kde~1_278:
00007466  4D55 4C53 11439          dc.b      77,85,76,83,32,0
0000746A  2000      
                    11440   @m68kde~1_279:
0000746C  4D55 4C55 11441          dc.b      77,85,76,85,32,0
00007470  2000      
                    11442   @m68kde~1_280:
00007472  4E42 4344 11443          dc.b      78,66,67,68,32,0
00007476  2000      
                    11444   @m68kde~1_281:
00007478  4E45 4700 11445          dc.b      78,69,71,0
                    11446   @m68kde~1_282:
0000747C  4E45 4758 11447          dc.b      78,69,71,88,0
00007480  00        
                    11448   @m68kde~1_283:
00007482  4E4F 5000 11449          dc.b      78,79,80,0
                    11450   @m68kde~1_284:
00007486  4E4F 5400 11451          dc.b      78,79,84,0
                    11452   @m68kde~1_285:
0000748A  4F52 00   11453          dc.b      79,82,0
                    11454   @m68kde~1_286:
0000748E  4F52 4920 11455          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
00007492  2324 2532 
00007496  582C 4343 
0000749A  5200      
                    11456   @m68kde~1_287:
0000749C  4F52 4920 11457          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
000074A0  2023 2425 
000074A4  582C 5352 
000074A8  00        
                    11458   @m68kde~1_288:
000074AA  5045 4120 11459          dc.b      80,69,65,32,0
000074AE  00        
                    11460   @m68kde~1_289:
000074B0  5245 5345 11461          dc.b      82,69,83,69,84,0
000074B4  5400      
                    11462   @m68kde~1_290:
000074B6  5254 4500 11463          dc.b      82,84,69,0
                    11464   @m68kde~1_291:
000074BA  5254 5200 11465          dc.b      82,84,82,0
                    11466   @m68kde~1_292:
000074BE  5254 5300 11467          dc.b      82,84,83,0
                    11468   @m68kde~1_293:
000074C2  5354 4F50 11469          dc.b      83,84,79,80,32,35,36,37,88,0
000074C6  2023 2425 
000074CA  5800      
                    11470   @m68kde~1_294:
000074CC  5342 4344 11471          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
000074D0  2044 2564 
000074D4  2C44 2564 
000074D8  00        
                    11472   @m68kde~1_295:
000074DA  5342 4344 11473          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
000074DE  202D 2841 
000074E2  2564 292C 
000074E6  2D28 41   
000074E9  2564 2900 11474          dc.b      37,100,41,0
                    11475   @m68kde~1_296:
000074EE  5300      11476          dc.b      83,0
                    11477   @m68kde~1_297:
000074F0  5355 4241 11478          dc.b      83,85,66,65,46,87,32,0
000074F4  2E57 2000 
                    11479   @m68kde~1_298:
000074F8  5355 4241 11480          dc.b      83,85,66,65,46,76,32,0
000074FC  2E4C 2000 
                    11481   @m68kde~1_299:
00007500  5355 4200 11482          dc.b      83,85,66,0
                    11483   @m68kde~1_300:
00007504  5355 4251 11484          dc.b      83,85,66,81,0
00007508  00        
                    11485   @m68kde~1_301:
0000750A  5355 4258 11486          dc.b      83,85,66,88,0
0000750E  00        
                    11487   @m68kde~1_302:
00007510  4425 3158 11488          dc.b      68,37,49,88,44,68,37,49,88,0
00007514  2C44 2531 
00007518  5800      
                    11489   @m68kde~1_303:
0000751A  2D28 4125 11490          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
0000751E  3158 292C 
00007522  2D28 4125 
00007526  3158 29   
00007529  00        11491          dc.b      0
                    11492   @m68kde~1_304:
0000752A  5357 4150 11493          dc.b      83,87,65,80,32,68,37,100,0
0000752E  2044 2564 
00007532  00        
                    11494   @m68kde~1_305:
00007534  5441 5320 11495          dc.b      84,65,83,32,0
00007538  00        
                    11496   @m68kde~1_306:
0000753A  5452 4150 11497          dc.b      84,82,65,80,32,35,37,100,0
0000753E  2023 2564 
00007542  00        
                    11498   @m68kde~1_307:
00007544  5452 4150 11499          dc.b      84,82,65,80,86,0
00007548  5600      
                    11500   @m68kde~1_308:
0000754A  5453 5400 11501          dc.b      84,83,84,0
                    11502   @m68kde~1_309:
0000754E  554E 4C4B 11503          dc.b      85,78,76,75,32,65,37,100,0
00007552  2041 2564 
00007556  00        
                    11504   @itoa_1:
00007558  2D32 3134 11505          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0000755C  3734 3833 
00007560  3634 3800 
                    11506   __ctype:
00007564  0040 4040 11507          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00007568  4040 4040 
0000756C  4040 5050 
00007570  5050 50   
00007573  4040 4040 11508          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00007577  4040 4040 
0000757B  4040 4040 
0000757F  4040 40   
00007582  4040 40D0 11509          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00007586  A0A0 A0A0 
0000758A  A0A0 A0A0 
0000758E  A0A0 A0A0 11510          dc.b      160,160,160,160,160,160,160,140,140,140,140
00007592  A0A0 A08C 
00007596  8C8C 8C   
00007599  8C8C 8C8C 11511          dc.b      140,140,140,140,140,140,160,160,160,160,160
0000759D  8C8C A0A0 
000075A1  A0A0 A0   
000075A4  A0A0 8A8A 11512          dc.b      160,160,138,138,138,138,138,138,130,130,130
000075A8  8A8A 8A8A 
000075AC  8282 82   
000075AF  8282 8282 11513          dc.b      130,130,130,130,130,130,130,130,130,130,130
000075B3  8282 8282 
000075B7  8282 82   
000075BA  8282 8282 11514          dc.b      130,130,130,130,130,130,160,160,160,160,160
000075BE  8282 A0A0 
000075C2  A0A0 A0   
000075C5  A089 8989 11515          dc.b      160,137,137,137,137,137,137,129,129,129,129
000075C9  8989 8981 
000075CD  8181 81   
000075D0  8181 8181 11516          dc.b      129,129,129,129,129,129,129,129,129,129,129
000075D4  8181 8181 
000075D8  8181 81   
000075DB  8181 8181 11517          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
000075DF  81A0 A0A0 
000075E3  A040 0000 
000075E7  00        
000075E8  0000 0000 11518          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000075EC  0000 0000 
000075F0  0000 0000 
000075F4  0000 0000 
000075F8  0000 0000 
000075FC  0000      
000075FE  0000 0000 11519          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007602  0000 0000 
00007606  0000 0000 
0000760A  0000 0000 
0000760E  0000 0000 
00007612  0000      
00007614  0000 0000 11520          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007618  0000 0000 
0000761C  0000 0000 
00007620  0000 0000 
00007624  0000 0000 
00007628  0000      
0000762A  0000 0000 11521          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000762E  0000 0000 
00007632  0000 0000 
00007636  0000 0000 
0000763A  0000 0000 
0000763E  0000      
00007640  0000 0000 11522          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007644  0000 0000 
00007648  0000 0000 
0000764C  0000 0000 
00007650  0000 0000 
00007654  0000      
00007656  0000 0000 11523          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000765A  0000 0000 
0000765E  0000 0000 
00007662  0000 00   
                    11524          section   data
00007666            11525                   align
          0000 7666 11526   DataStart       equ       *
                    11527   
                    11528   *********************************************************************************************************
                    11529   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    11530   * to ram as part of the CStart routine in this file
                    11531   *********************************************************************************************************
                    11532   
                    11533          section   bss
00007666            11534                   align
          0000 7666 11535   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    11536   
                    11537   *********************************************************************************************************
                    11538   * Section for Uninitialised Data held in ROM as constants
                    11539   *********************************************************************************************************
                    11540   
08030000            11541                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0000 11542   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    11543   
                    11544   
08030000            11545   bss             org       bss
                    11546   
                    11547   *********************************************************************************************************
                    11548   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    11549   * install the exception handler using the C function InstallExceptionHandler()
                    11550   *********************************************************************************************************
                    11551   
                    11552   
                    11553   
08030000            11554   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            11555   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            11556   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            11557   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            11558   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            11559   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            11560   VCheck           ds.l    1      ditto
0803001C            11561   VTrapV           ds.l    1      ditto
08030020            11562   VPrivilege       ds.l    1      ditto
08030024            11563   VTrace           ds.l    1
08030028            11564   VLine1010emul    ds.l    1
0803002C            11565   VLine1111emul    ds.l    1
08030030            11566   VUnassigned1     ds.l    1
08030034            11567   VUnassigned2     ds.l    1
08030038            11568   VUnassigned3     ds.l    1
0803003C            11569   VUninit_IRQ      ds.l    1
08030040            11570   VUnassigned4     ds.l    1
08030044            11571   VUnassigned5     ds.l    1
08030048            11572   VUnassigned6     ds.l    1
0803004C            11573   VUnassigned7     ds.l    1
08030050            11574   VUnassigned8     ds.l    1
08030054            11575   VUnassigned9     ds.l    1
08030058            11576   VUnassigned10    ds.l    1
0803005C            11577   VUnassigned11    ds.l    1
08030060            11578   VSpuriousIRQ     ds.l    1
                    11579   
                    11580   * Interrupt handlers Vector 25-31
08030064            11581   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            11582   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            11583   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            11584   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            11585   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            11586   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            11587   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11588   
                    11589   * Trap Handler vectors 32-47
08030080            11590   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            11591   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            11592   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            11593   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            11594   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            11595   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            11596   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            11597   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            11598   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            11599   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            11600   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            11601   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            11602   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            11603   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            11604   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            11605   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11606   
                    11607   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    11608   
                    11609   ***********************************************************************************************************
                    11610   * Other Variables
                    11611   ***********************************************************************************************************
                    11612   *__DebugA5       ds.l    1
                    11613   *__UserA5        ds.l    1
                    11614   
                    11615   ***********************************************************************************************************
080300C0            11616   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            11617   __allocp:       ds.l    0       ; start of allocation units
080300C4            11618   __heap:         ds.l    0       ; pointers for malloc functions
                    11619   
                    11620   *__himem:       ds.l    himem            ; highest memory location + 1
                    11621   *__stklen:      ds.l    stklen           ; default stack size
                    11622   
                    11623   *********************************************************************************************************
                    11624   * Section for Heap
                    11625   *********************************************************************************************************
                    11626   
                    11627   _i:
080300C4            11628          ds.b      4
                    11629   _x:
080300C8            11630          ds.b      4
                    11631   _y:
080300CC            11632          ds.b      4
                    11633   _z:
080300D0            11634          ds.b      4
                    11635   _PortA_Count:
080300D4            11636          ds.b      4
                    11637   _Trace:
080300D8            11638          ds.b      4
                    11639   _GoFlag:
080300DC            11640          ds.b      4
                    11641   _Echo:
080300E0            11642          ds.b      4
                    11643   _d0:
080300E4            11644          ds.b      4
                    11645   _d1:
080300E8            11646          ds.b      4
                    11647   _d2:
080300EC            11648          ds.b      4
                    11649   _d3:
080300F0            11650          ds.b      4
                    11651   _d4:
080300F4            11652          ds.b      4
                    11653   _d5:
080300F8            11654          ds.b      4
                    11655   _d6:
080300FC            11656          ds.b      4
                    11657   _d7:
08030100            11658          ds.b      4
                    11659   _a0:
08030104            11660          ds.b      4
                    11661   _a1:
08030108            11662          ds.b      4
                    11663   _a2:
0803010C            11664          ds.b      4
                    11665   _a3:
08030110            11666          ds.b      4
                    11667   _a4:
08030114            11668          ds.b      4
                    11669   _a5:
08030118            11670          ds.b      4
                    11671   _a6:
0803011C            11672          ds.b      4
                    11673   _PC:
08030120            11674          ds.b      4
                    11675   _SSP:
08030124            11676          ds.b      4
                    11677   _USP:
08030128            11678          ds.b      4
                    11679   _SR:
0803012C            11680          ds.b      2
                    11681   _BreakPointAddress:
0803012E            11682          ds.b      32
                    11683   _BreakPointInstruction:
0803014E            11684          ds.b      16
                    11685   _BreakPointSetOrCleared:
0803015E            11686          ds.b      32
                    11687   _InstructionSize:
0803017E            11688          ds.b      4
                    11689   _WatchPointAddress:
08030182            11690          ds.b      32
                    11691   _WatchPointSetOrCleared:
080301A2            11692          ds.b      32
                    11693   _WatchPointString:
080301C2            11694          ds.b      800
                    11695   _Instruction:
080304E2            11696          ds.b      100
                    11697   _TempString:
08030546            11698          ds.b      100
                    11699          section   heap
080305AA            11700                   align
          0803 05AA 11701   bssEnd          equ *                   end of storage space for unitialised variables
                    11702   *                                       we have to copy all initialised variable from rom to here at startup
          0803 05AA 11703   heap   equ       *
080305AA            11704                    align
          0000 0000

Assembly errors: 0
