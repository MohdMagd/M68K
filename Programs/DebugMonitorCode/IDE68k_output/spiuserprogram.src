       section   code
**********************************************************************************************************
* CSTART.ASM  -  C startup-code
*
*          Initialises the system prior to running the users main() program
*
*          1) Sets up the user program stack pointer
*          2) Switches to User mode in the 68000
*          3) Enables All Interrupts 1-7 on 68000
*          4) Copies all initialised C program variables from Rom to Ram prior to running main()
*
**********************************************************************************************************
                align


**********************************************************************************************************
* The Following ORG Statement marks the address of the start of the this CStart Program
*
* The debug Monitor and Flash Load and Program routines assume your program lives here
**********************************************************************************************************
                org       $08000000
start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode

******************************************************************************************
* Set unitialised global variables to 0 at startup
******************************************************************************************
mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
                move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
                beq       go_main               if no data to copy go straight to program
Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
                subq.l    #1,d0
                bne       Zeroinit

*******************************************************************************************
* last minute initialisation before calling main
*******************************************************************************************

                move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
                clr.l     __allocp               used by malloc() in C
                move.l    #heap,__heap           pointer to free memory
go_main         jsr       _main
                bra       start

; C:\CYGWIN64\HOME\SABAS\M68K\PROGRAMS\DEBUGMONITORCODE\USERPROGRAM FILES\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
; #include <stdio.h>
; // #include <string.h>
; // #include <ctype.h>
; /*********************************************************************************************
; **  RS232 port addresses
; *********************************************************************************************/
; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
; /*************************************************************
; ** SPI Controller registers
; **************************************************************/
; // SPI Registers
; #define SPI_Control         (*(volatile unsigned char *)(0x00408020))
; #define SPI_Status          (*(volatile unsigned char *)(0x00408022))
; #define SPI_Data            (*(volatile unsigned char *)(0x00408024))
; #define SPI_Ext             (*(volatile unsigned char *)(0x00408026))
; #define SPI_CS              (*(volatile unsigned char *)(0x00408028))
; // these two macros enable or disable the flash memory chip enable off SSN_O[7..0]
; // in this case we assume there is only 1 device connected to SSN_O[0] so we can
; // write hex FE to the SPI_CS to enable it (the enable on the flash chip is active low)
; // and write FF to disable it
; #define   Enable_SPI_CS()             SPI_CS = 0xFE
; #define   Disable_SPI_CS()            SPI_CS = 0xFF 
; /*******************************************************************************************
; ** Function Prototypes
; *******************************************************************************************/
; int sprintf(char *out, const char *format, ...) ;
; int TestForSPITransmitDataComplete(void);
; void SPI_Init(void);
; void WaitForSPITransmitComplete(void);
; void WriteEnable(void);
; void WriteSPIChar(unsigned char c);
; unsigned char ReadSPIChar(void);
; void WaitWriteCommandCompletion(void);
; void DisableBlockProtect(void);
; int _getch( void )
; {
__getch:
       link      A6,#-4
; char c ;
; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
_getch_1:
       move.b    4194368,D0
       and.b     #1,D0
       cmp.b     #1,D0
       beq.s     _getch_3
       bra       _getch_1
_getch_3:
; ;
; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
       move.b    4194370,D0
       and.l     #255,D0
       and.l     #127,D0
       unlk      A6
       rts
; }
; int _putch( int c)
; {
__putch:
       link      A6,#0
; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
_putch_1:
       move.b    4194368,D0
       and.b     #2,D0
       cmp.b     #2,D0
       beq.s     _putch_3
       bra       _putch_1
_putch_3:
; ;
; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
       move.l    8(A6),D0
       and.l     #127,D0
       move.b    D0,4194370
; return c ;                                              // putchar() expects the character to be returned
       move.l    8(A6),D0
       unlk      A6
       rts
; }
; /******************************************************************************************
; ** The following code is for the SPI controller
; *******************************************************************************************/
; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
; // this can be used in a polling algorithm to know when the controller is busy or idle.
; int TestForSPITransmitDataComplete(void)
; {
_TestForSPITransmitDataComplete:
; /* if register SPIF bit set, return true, otherwise wait*/
; while ((SPI_Status & 128) >> 7 != 1);
TestForSPITransmitDataComplete_1:
       move.b    4227106,D0
       and.w     #255,D0
       and.w     #128,D0
       asr.w     #7,D0
       cmp.w     #1,D0
       beq.s     TestForSPITransmitDataComplete_3
       bra       TestForSPITransmitDataComplete_1
TestForSPITransmitDataComplete_3:
; return 1;
       moveq     #1,D0
       rts
; }
; /************************************************************************************
; ** initialises the SPI controller chip to set speed, interrupt capability etc.
; ************************************************************************************/
; void SPI_Init(void)
; {
_SPI_Init:
; //TODO
; //
; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
; // Don't forget to call this routine from main() before you do anything else with SPI
; //
; // Here are some settings we want to create
; //
; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
; SPI_Control = 0x53; // 8'b01X10011, X = don't Care (Use 0)
       move.b    #83,4227104
; // Ext Reg         - in conjunction with control reg sets speed to above and also sets interrupt flag after every completed transfer (each byte)
; SPI_Ext = 0;        //8'b00XXXX00
       clr.b     4227110
; // SPI_CS Reg      - disable all connected SPI chips via their CS signals
; SPI_CS = Disable_SPI_CS();
       move.b    #255,4227112
       move.b    #255,4227112
; // Status Reg      - clear any write collision and interrupt on transmit complete flag
; SPI_Status = 0xC0;  // 8'b11XX0000, X = don't Care (Use 0)
       move.b    #192,4227106
       rts
; }
; /************************************************************************************
; ** return ONLY when the SPI controller has finished transmitting a byte
; ************************************************************************************/
; void WaitForSPITransmitComplete(void)
; {
_WaitForSPITransmitComplete:
; // poll the status register SPIF bit looking for completion of transmission
; TestForSPITransmitDataComplete();
       jsr       _TestForSPITransmitDataComplete
; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
; // in case they were set
; SPI_Status = 0xC0; //  (8'b11000000, X = don't Care (Use 0))
       move.b    #192,4227106
       rts
; }
; /************************************************************************************
; ** Disable Write Protect to allow writing access to chip
; ************************************************************************************/
; void WriteEnable(void){
_WriteEnable:
       link      A6,#-4
; unsigned char x;
; // Enable Chip Select
; Enable_SPI_CS();
       move.b    #254,4227112
; // Send Write Command to Chip
; SPI_Data = 6;
       move.b    #6,4227108
; WaitForSPITransmitComplete();
       jsr       _WaitForSPITransmitComplete
; x = SPI_Data;
       move.b    4227108,-1(A6)
; // Disable Chip Select
; Disable_SPI_CS();
       move.b    #255,4227112
       unlk      A6
       rts
; }
; /************************************************************************************
; ** Disable Write Protect to allow writing access to chip
; ************************************************************************************/
; void DisableBlockProtect(void){
_DisableBlockProtect:
       link      A6,#-4
; unsigned char x;
; Enable_SPI_CS();
       move.b    #254,4227112
; // Send Write To status Register Command to Chip
; SPI_Data = 1;
       move.b    #1,4227108
; WaitForSPITransmitComplete();
       jsr       _WaitForSPITransmitComplete
; x = SPI_Data;
       move.b    4227108,-1(A6)
; // Send Write To status Register Command to Chip
; SPI_Data = 2;   // 8'b00000010
       move.b    #2,4227108
; WaitForSPITransmitComplete();
       jsr       _WaitForSPITransmitComplete
; x = SPI_Data;   
       move.b    4227108,-1(A6)
; Disable_SPI_CS(); 
       move.b    #255,4227112
       unlk      A6
       rts
; }
; /************************************************************************************
; ** Wait for Write Command Completion
; ************************************************************************************/
; void WaitWriteCommandCompletion(void){
_WaitWriteCommandCompletion:
       move.l    D2,-(A7)
; unsigned char x;
; // Enable Chip Select
; Enable_SPI_CS();
       move.b    #254,4227112
; // Send Write Command to Chip
; SPI_Data = 5;
       move.b    #5,4227108
; WaitForSPITransmitComplete();
       jsr       _WaitForSPITransmitComplete
; x = SPI_Data;
       move.b    4227108,D2
; while(1){
WaitWriteCommandCompletion_1:
; SPI_Data = 0xFF;
       move.b    #255,4227108
; WaitForSPITransmitComplete();
       jsr       _WaitForSPITransmitComplete
; x = SPI_Data;
       move.b    4227108,D2
; if ((x & 1) != 1)
       move.b    D2,D0
       and.b     #1,D0
       cmp.b     #1,D0
       beq.s     WaitWriteCommandCompletion_4
; break;
       bra.s     WaitWriteCommandCompletion_3
WaitWriteCommandCompletion_4:
       bra       WaitWriteCommandCompletion_1
WaitWriteCommandCompletion_3:
; }
; // Disable Chip Select
; Disable_SPI_CS();
       move.b    #255,4227112
       move.l    (A7)+,D2
       rts
; }
; /************************************************************************************
; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
; ** given back by SPI device at the same time (removes the read byte from the FIFO)
; ************************************************************************************/
; void WriteSPIChar(unsigned char c)
; {
_WriteSPIChar:
       link      A6,#-4
       movem.l   D2/A2,-(A7)
       lea       _WaitForSPITransmitComplete.L,A2
; unsigned char x;
; unsigned char addr1, addr2, addr3;
; addr1 = addr2 = addr3 = 6;
       move.b    #6,-1(A6)
       move.b    #6,-2(A6)
       move.b    #6,-3(A6)
; printf("\r\nc = %u \n", c);
       move.b    11(A6),D1
       and.l     #255,D1
       move.l    D1,-(A7)
       pea       @m68kus~1_1.L
       jsr       _printf
       addq.w    #8,A7
; DisableBlockProtect();
       jsr       _DisableBlockProtect
; WriteEnable();
       jsr       _WriteEnable
; // Enable Chip Select
; Enable_SPI_CS();
       move.b    #254,4227112
; // Send Write Command to Chip
; SPI_Data = 2;
       move.b    #2,4227108
; WaitForSPITransmitComplete();
       jsr       (A2)
; x = SPI_Data;
       move.b    4227108,D2
; // Send 24-bit Address that we stored c in
; SPI_Data = addr1; // 24-bit address - 1st Byte
       move.b    -3(A6),4227108
; WaitForSPITransmitComplete();
       jsr       (A2)
; x = SPI_Data;
       move.b    4227108,D2
; SPI_Data = addr2; // 24-bit address - 2nd Byte
       move.b    -2(A6),4227108
; WaitForSPITransmitComplete();
       jsr       (A2)
; x = SPI_Data;
       move.b    4227108,D2
; SPI_Data = addr3; // 24-bit address - 3rd Byte
       move.b    -1(A6),4227108
; WaitForSPITransmitComplete();
       jsr       (A2)
; x = SPI_Data;
       move.b    4227108,D2
; // Payload Data
; SPI_Data = c;
       move.b    11(A6),4227108
; WaitForSPITransmitComplete();
       jsr       (A2)
; x = SPI_Data;
       move.b    4227108,D2
; //  Disable Chip Select
; Disable_SPI_CS();
       move.b    #255,4227112
; // Poll Chip Status register for write completion
; WaitWriteCommandCompletion();
       jsr       _WaitWriteCommandCompletion
       movem.l   (A7)+,D2/A2
       unlk      A6
       rts
; }
; /************************************************************************************
; ** Read contents of SPI flash chip from address 0
; ************************************************************************************/
; unsigned char ReadSPIChar(void){
_ReadSPIChar:
       link      A6,#-4
       movem.l   D2/D3/A2,-(A7)
       lea       _WaitForSPITransmitComplete.L,A2
; unsigned char x;
; unsigned char read_byte;
; unsigned char addr1, addr2, addr3;
; addr1 = addr2 = addr3 = 6;
       move.b    #6,-1(A6)
       move.b    #6,-2(A6)
       move.b    #6,-3(A6)
; // Enable Chip Select
; Enable_SPI_CS();
       move.b    #254,4227112
; // Send Read Command to Chip
; SPI_Data = 3;
       move.b    #3,4227108
; WaitForSPITransmitComplete();
       jsr       (A2)
; x = SPI_Data;
       move.b    4227108,D2
; // Send 24-bit Address that we stored c in
; // 24-bit address - 1st Byte
; SPI_Data = addr1;
       move.b    -3(A6),4227108
; WaitForSPITransmitComplete();
       jsr       (A2)
; x = SPI_Data;
       move.b    4227108,D2
; // 24-bit address - 2nd Byte
; SPI_Data = addr2;
       move.b    -2(A6),4227108
; WaitForSPITransmitComplete();
       jsr       (A2)
; x = SPI_Data;
       move.b    4227108,D2
; // 24-bit address - 3rd Byte
; SPI_Data = addr3;
       move.b    -1(A6),4227108
; WaitForSPITransmitComplete();
       jsr       (A2)
; x = SPI_Data;
       move.b    4227108,D2
; // Send Dummy Data to purge c out of read FIFO
; SPI_Data = 0xF0;
       move.b    #240,4227108
; WaitForSPITransmitComplete();
       jsr       (A2)
; read_byte = SPI_Data;	// store data from read FIFO into temporary variable
       move.b    4227108,D3
; //  Disable Chip Select
; Disable_SPI_CS();
       move.b    #255,4227112
; printf("Read back Data (as u-char) = %u \n", read_byte);
       and.l     #255,D3
       move.l    D3,-(A7)
       pea       @m68kus~1_2.L
       jsr       _printf
       addq.w    #8,A7
; return read_byte;
       move.b    D3,D0
       movem.l   (A7)+,D2/D3/A2
       unlk      A6
       rts
; // return the received data from Flash chip 
; }
; /************************************************************************************
; ** Erase Chip Contents in SPI flash chip
; ************************************************************************************/
; void ChipErase(void){
_ChipErase:
       link      A6,#-4
; unsigned char x;
; DisableBlockProtect();
       jsr       _DisableBlockProtect
; WriteEnable();
       jsr       _WriteEnable
; Enable_SPI_CS();
       move.b    #254,4227112
; // Send Dummy Data to purge c out of read FIFO
; SPI_Data = 199;
       move.b    #199,4227108
; WaitForSPITransmitComplete();
       jsr       _WaitForSPITransmitComplete
; x = SPI_Data;
       move.b    4227108,-1(A6)
; Disable_SPI_CS();
       move.b    #255,4227112
; WaitWriteCommandCompletion();
       jsr       _WaitWriteCommandCompletion
; printf("Chip Erased!");
       pea       @m68kus~1_3.L
       jsr       _printf
       addq.w    #4,A7
       unlk      A6
       rts
; }
; /******************************************************************************************************************************
; * Start of user program
; ******************************************************************************************************************************/
; void main()
; {
_main:
       link      A6,#-4
; int test_byte;
; scanflush() ;                       // flush any text that may have been typed ahead
       jsr       _scanflush
; printf("\r\nHello CPEN 412 Student\r\n") ;
       pea       @m68kus~1_4.L
       jsr       _printf
       addq.w    #4,A7
; SPI_Init();
       jsr       _SPI_Init
; ChipErase();
       jsr       _ChipErase
; WriteSPIChar('t');
       pea       116
       jsr       _WriteSPIChar
       addq.w    #4,A7
; test_byte = ReadSPIChar();
       jsr       _ReadSPIChar
       and.l     #255,D0
       move.l    D0,-4(A6)
; while(1);
main_1:
       bra       main_1
; // programs should NOT exit as there is nothing to Exit TO !!!!!!
; // There is no OS - just press the reset button to end program and call debug
; }
@doscan_read:
       link      A6,#-4
       move.l    A2,-(A7)
       lea       @doscan_lpbuf.L,A2
       tst.l     8(A6)
       beq       @doscan_read_1
       move.l    8(A6),A0
       addq.l    #4,8(A6)
       move.l    (A0),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,-4(A6)
       clr.b     D1
       and.l     #255,D1
       cmp.l     D1,D0
       beq.s     @doscan_read_3
       move.l    -4(A6),D0
       bra.s     @doscan_read_4
@doscan_read_3:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
@doscan_read_4:
       bra       @doscan_read_5
@doscan_read_1:
       move.l    (A2),A0
       move.b    (A0),D0
       bne.s     @doscan_read_6
       pea       @doscan_buf.L
       jsr       _gets
       addq.w    #4,A7
       move.l    D0,(A2)
       pea       @doscan_1.L
       pea       @doscan_buf.L
       jsr       _strcat
       addq.w    #8,A7
@doscan_read_6:
       move.l    (A2),A0
       addq.l    #1,(A2)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
@doscan_read_5:
       move.l    (A7)+,A2
       unlk      A6
       rts
@doscan_putback:
       link      A6,#0
       movem.l   D2/D3,-(A7)
       move.l    12(A6),D2
       move.l    8(A6),D3
       beq.s     @doscan_putback_1
       cmp.l     #-1,D2
       beq.s     @doscan_putback_3
       subq.l    #4,D3
       move.l    D3,A0
       move.l    (A0),A0
       move.b    D2,(A0)
       bra.s     @doscan_putback_4
@doscan_putback_3:
       move.l    D3,A0
       subq.l    #1,(A0)
@doscan_putback_4:
       bra.s     @doscan_putback_6
@doscan_putback_1:
       lea       @doscan_buf.L,A0
       move.l    A0,D0
       cmp.l     @doscan_lpbuf.L,D0
       bne.s     @doscan_putback_5
       clr.b     @doscan_buf.L
       move.l    D2,-(A7)
       jsr       _ungetch
       addq.w    #4,A7
       bra.s     @doscan_putback_6
@doscan_putback_5:
       subq.l    #1,@doscan_lpbuf.L
       move.l    @doscan_lpbuf.L,A0
       move.b    D2,(A0)
@doscan_putback_6:
       move.l    D2,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
@doscan_space:
       link      A6,#0
       move.l    D2,-(A7)
@doscan_space_1:
       move.l    8(A6),-(A7)
       jsr       @doscan_read
       addq.w    #4,A7
       move.l    D0,D2
       move.l    12(A6),A0
       addq.l    #1,(A0)
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #16,D0
       bne       @doscan_space_1
       move.l    D2,D0
       move.l    (A7)+,D2
       unlk      A6
       rts
@doscan_select:
       link      A6,#0
       movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
       move.l    12(A6),D3
       move.l    24(A6),D6
       move.l    20(A6),D7
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #94,D0
       bne.s     @doscan_select_1
       move.w    #1,A2
       addq.l    #1,D3
       bra.s     @doscan_select_2
@doscan_select_1:
       move.w    #0,A2
@doscan_select_2:
       move.l    16(A6),D0
       subq.l    #1,16(A6)
       tst.l     D0
       beq       @doscan_select_5
       move.l    8(A6),-(A7)
       jsr       @doscan_read
       addq.w    #4,A7
       move.l    D0,D4
       cmp.l     #-1,D4
       bne.s     @doscan_select_6
       bra       @doscan_select_5
@doscan_select_6:
       move.l    28(A6),A0
       addq.l    #1,(A0)
       clr.l     D5
       clr.l     D2
@doscan_select_8:
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #93,D0
       beq       @doscan_select_10
       tst.l     D2
       beq.s     @doscan_select_11
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #93,D0
       bne.s     @doscan_select_11
       bra       @doscan_select_10
@doscan_select_11:
       tst.l     D2
       beq       @doscan_select_15
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #45,D0
       bne       @doscan_select_15
       move.l    D3,A0
       move.l    D2,D0
       subq.l    #1,D0
       move.l    D3,A1
       move.l    D2,D1
       addq.l    #1,D1
       move.l    D0,-(A7)
       move.b    0(A0,D0.L),D0
       cmp.b     0(A1,D1.L),D0
       bge       @doscan_select_15
       move.l    (A7)+,D0
       move.l    D3,A0
       move.l    D2,D0
       subq.l    #1,D0
       move.b    0(A0,D0.L),D0
       ext.w     D0
       ext.l     D0
       cmp.l     D0,D4
       blt.s     @doscan_select_17
       move.l    D3,A0
       move.l    D2,D0
       addq.l    #1,D0
       move.b    0(A0,D0.L),D0
       ext.w     D0
       ext.l     D0
       cmp.l     D0,D4
       bgt.s     @doscan_select_17
       bra.s     @doscan_select_10
@doscan_select_17:
       addq.l    #1,D2
       bra.s     @doscan_select_19
@doscan_select_15:
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       ext.w     D0
       ext.l     D0
       cmp.l     D0,D4
       bne.s     @doscan_select_19
       bra.s     @doscan_select_10
@doscan_select_19:
       addq.l    #1,D2
       bra       @doscan_select_8
@doscan_select_10:
       tst.l     D2
       beq.s     @doscan_select_23
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #93,D0
       beq.s     @doscan_select_21
@doscan_select_23:
       moveq     #1,D5
@doscan_select_21:
       move.l    A2,D0
       beq.s     @doscan_select_24
       tst.l     D5
       bne.s     @doscan_select_26
       tst.l     D7
       bne.s     @doscan_select_28
       move.l    D6,A0
       addq.l    #1,D6
       move.b    D4,(A0)
@doscan_select_28:
       bra.s     @doscan_select_4
@doscan_select_26:
       bra.s     @doscan_select_5
@doscan_select_24:
       tst.l     D5
       beq.s     @doscan_select_30
       tst.l     D7
       bne.s     @doscan_select_32
       move.l    D6,A0
       addq.l    #1,D6
       move.b    D4,(A0)
@doscan_select_32:
       bra.s     @doscan_select_4
@doscan_select_30:
       bra.s     @doscan_select_5
@doscan_select_4:
       bra       @doscan_select_2
@doscan_select_5:
       cmp.l     #-1,D4
       beq.s     @doscan_select_34
       move.l    D4,-(A7)
       move.l    8(A6),-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       move.l    28(A6),A0
       subq.l    #1,(A0)
@doscan_select_34:
       tst.l     D7
       bne.s     @doscan_select_36
       move.l    D6,A0
       clr.b     (A0)
@doscan_select_36:
       addq.l    #1,D3
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #93,D0
       beq.s     @doscan_select_40
       bra       @doscan_select_36
@doscan_select_40:
       addq.l    #1,D3
       move.l    D3,D0
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
       unlk      A6
       rts
_scanflush:
       lea       @doscan_buf.L,A0
       move.l    A0,@doscan_lpbuf.L
       clr.b     @doscan_buf.L
       pea       -1
       jsr       _ungetch
       addq.w    #4,A7
       rts
_doscan:
       link      A6,#-120
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       @doscan_read.L,A3
       tst.l     8(A6)
       beq.s     doscan_1
       lea       8(A6),A0
       bra.s     doscan_2
doscan_1:
       clr.b     D0
       ext.w     D0
       ext.l     D0
       move.l    D0,A0
doscan_2:
       move.l    A0,D5
       clr.l     -28(A6)
       clr.l     D4
doscan_3:
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       clr.b     D1
       and.l     #255,D1
       cmp.l     D1,D0
       beq       doscan_5
       clr.l     D6
       move.w    #0,A4
       cmp.l     #32,D3
       beq.s     doscan_8
       cmp.l     #9,D3
       beq.s     doscan_8
       cmp.l     #10,D3
       bne       doscan_6
doscan_8:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       cmp.l     #-1,D2
       bne.s     doscan_11
       tst.l     D4
       beq.s     doscan_13
       move.l    D4,D0
       bra.s     doscan_14
doscan_13:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_14:
       bra       doscan_15
doscan_11:
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #16,D0
       bne       doscan_8
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       bra       doscan_141
doscan_6:
       cmp.l     #37,D3
       bne       doscan_129
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       clr.l     -20(A6)
       clr.l     D6
       clr.l     -24(A6)
       move.w    #32767,A2
       cmp.l     #42,D3
       bne.s     doscan_18
       moveq     #1,D6
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
doscan_18:
       move.l    D3,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq       doscan_24
       move.l    D3,D0
       sub.l     #48,D0
       move.l    D0,A2
doscan_22:
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq.s     doscan_24
       move.l    A2,-(A7)
       pea       10
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D3,D1
       sub.l     #48,D1
       add.l     D1,D0
       move.l    D0,A2
       bra       doscan_22
doscan_24:
       cmp.l     #108,D3
       beq.s     doscan_27
       cmp.l     #76,D3
       bne.s     doscan_25
doscan_27:
       move.l    #1,-24(A6)
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       bra.s     doscan_28
doscan_25:
       cmp.l     #104,D3
       bne.s     doscan_28
       move.l    #1,-20(A6)
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
doscan_28:
       cmp.l     #91,D3
       bne       doscan_30
       tst.l     D6
       bne.s     doscan_32
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_32:
       pea       -28(A6)
       move.l    D7,-(A7)
       move.l    D6,-(A7)
       move.l    A2,-(A7)
       move.l    12(A6),-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_select
       add.w     #24,A7
       move.l    D0,12(A6)
       tst.l     D6
       bne.s     doscan_34
       addq.l    #1,D4
doscan_34:
       bra       doscan_141
doscan_30:
       cmp.l     #110,D3
       bne.s     doscan_36
       tst.l     D6
       bne.s     doscan_38
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
       move.l    D7,A0
       move.l    -28(A6),(A0)
       addq.l    #1,D4
doscan_38:
       bra       doscan_141
doscan_36:
       cmp.l     #115,D3
       bne       doscan_40
       pea       -28(A6)
       move.l    D5,-(A7)
       jsr       @doscan_space
       addq.w    #8,A7
       move.l    D0,D2
       tst.l     D6
       bne.s     doscan_42
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_42:
       addq.l    #1,-28(A6)
doscan_44:
       move.l    A2,D0
       subq.w    #1,A2
       tst.l     D0
       beq       doscan_46
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #16,D0
       bne.s     doscan_47
       moveq     #1,D0
       bra.s     doscan_48
doscan_47:
       clr.l     D0
doscan_48:
       and.l     #255,D0
       beq.s     doscan_46
       cmp.l     #-1,D2
       beq.s     doscan_46
       move.w    #1,A4
       tst.l     D6
       bne.s     doscan_49
       move.l    D7,A0
       addq.l    #1,D7
       move.b    D2,(A0)
doscan_49:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       bra       doscan_44
doscan_46:
       tst.l     D6
       bne.s     doscan_53
       move.l    D7,A0
       clr.b     (A0)
       move.l    A4,D0
       beq.s     doscan_53
       addq.l    #1,D4
doscan_53:
       cmp.l     #-1,D2
       beq.s     doscan_57
       tst.l     D6
       bne.s     doscan_55
       move.l    A4,D0
       bne.s     doscan_55
doscan_57:
       tst.l     D4
       beq.s     doscan_58
       move.l    D4,D0
       bra.s     doscan_61
doscan_58:
       cmp.l     #-1,D2
       bne.s     doscan_60
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
       bra.s     doscan_61
doscan_60:
       move.l    D4,D0
doscan_61:
       bra       doscan_15
doscan_55:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       bra       doscan_141
doscan_40:
       cmp.l     #99,D3
       bne       doscan_62
       tst.l     D6
       bne.s     doscan_64
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_64:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       move.l    A2,D0
       cmp.l     #32767,D0
       bne.s     doscan_66
       move.w    #1,A2
doscan_66:
       cmp.l     #-1,D2
       bne.s     doscan_68
       tst.l     D6
       bne.s     doscan_68
       subq.l    #1,D4
doscan_68:
       move.l    A2,D0
       subq.w    #1,A2
       tst.l     D0
       beq.s     doscan_72
       cmp.l     #-1,D2
       beq.s     doscan_72
       tst.l     D6
       bne.s     doscan_73
       move.l    D7,A0
       addq.l    #1,D7
       move.b    D2,(A0)
doscan_73:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       bra       doscan_68
doscan_72:
       cmp.l     #-1,D2
       bne.s     doscan_75
       tst.l     D4
       beq.s     doscan_77
       move.l    D4,D0
       bra.s     doscan_78
doscan_77:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_78:
       bra       doscan_15
doscan_75:
       tst.l     D6
       bne.s     doscan_79
       addq.l    #1,D4
doscan_79:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       bra       doscan_141
doscan_62:
       cmp.l     #105,D3
       bne       doscan_84
       pea       -28(A6)
       move.l    D5,-(A7)
       jsr       @doscan_space
       addq.w    #8,A7
       move.l    D0,D2
       cmp.l     #48,D2
       bne       doscan_83
       move.w    #1,A4
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       move.l    D2,-(A7)
       jsr       _tolower
       addq.w    #4,A7
       cmp.l     #120,D0
       bne.s     doscan_85
       moveq     #120,D3
       bra.s     doscan_86
doscan_85:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       moveq     #111,D3
doscan_86:
       addq.l    #1,-28(A6)
       bra.s     doscan_84
doscan_83:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       moveq     #100,D3
doscan_84:
       cmp.l     #100,D3
       beq.s     doscan_89
       cmp.l     #117,D3
       beq.s     doscan_89
       cmp.l     #120,D3
       beq.s     doscan_89
       cmp.l     #111,D3
       bne       doscan_87
doscan_89:
       pea       -28(A6)
       move.l    D5,-(A7)
       jsr       @doscan_space
       addq.w    #8,A7
       move.l    D0,D2
       move.l    #10,-4(A6)
       cmp.l     #120,D3
       bne.s     doscan_90
       move.l    #16,-4(A6)
doscan_90:
       cmp.l     #111,D3
       bne.s     doscan_92
       move.l    #8,-4(A6)
doscan_92:
       tst.l     D6
       bne.s     doscan_94
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_94:
       clr.l     -32(A6)
       addq.l    #1,-28(A6)
       cmp.l     #117,D3
       beq.s     doscan_96
       cmp.l     #45,D2
       bne.s     doscan_96
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       move.l    #1,-32(A6)
       move.w    #1,A4
doscan_96:
       move.w    #0,A5
       cmp.l     #-1,D2
       bne.s     doscan_98
       tst.l     D4
       beq.s     doscan_100
       move.l    D4,D0
       bra.s     doscan_101
doscan_100:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_101:
       bra       doscan_15
doscan_98:
       move.l    A2,D0
       subq.w    #1,A2
       tst.l     D0
       beq       doscan_104
       cmp.l     #120,D3
       bne.s     doscan_106
       move.l    D2,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       cmp.l     #65,D0
       blt.s     doscan_106
       move.l    D2,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       cmp.l     #70,D0
       ble.s     doscan_105
doscan_106:
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       and.l     #255,D0
       beq       doscan_104
doscan_105:
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       bne.s     doscan_107
       move.l    D2,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       sub.l     #65,D0
       add.l     #10,D0
       add.l     #48,D0
       move.l    D0,D2
doscan_107:
       move.l    A5,-(A7)
       move.l    -4(A6),-(A7)
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       add.l     D2,D0
       sub.l     #48,D0
       move.l    D0,A5
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       move.w    #1,A4
       bra       doscan_98
doscan_104:
       cmp.l     #-1,D2
       beq.s     doscan_109
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       subq.l    #1,-28(A6)
       move.l    A4,D0
       bne.s     doscan_111
       move.l    D4,D0
       bra       doscan_15
doscan_111:
       bra.s     doscan_113
doscan_109:
       move.l    A4,D0
       bne.s     doscan_113
       tst.l     D4
       beq.s     doscan_115
       move.l    D4,D0
       bra.s     doscan_116
doscan_115:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_116:
       bra       doscan_15
doscan_113:
       tst.l     -32(A6)
       beq.s     doscan_117
       move.l    A5,D0
       neg.l     D0
       move.l    D0,A5
doscan_117:
       tst.l     D6
       bne.s     doscan_119
       tst.l     -24(A6)
       beq.s     doscan_121
       move.l    D7,A0
       move.l    A5,(A0)
       bra.s     doscan_124
doscan_121:
       tst.l     -20(A6)
       beq.s     doscan_123
       move.l    D7,A0
       move.w    A5,(A0)
       bra.s     doscan_124
doscan_123:
       move.l    D7,A0
       move.l    A5,(A0)
doscan_124:
       addq.l    #1,D4
doscan_119:
       cmp.l     #-1,D2
       bne.s     doscan_125
       tst.l     D4
       beq.s     doscan_127
       move.l    D4,D0
       bra.s     doscan_128
doscan_127:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_128:
       bra       doscan_15
doscan_125:
       bra       doscan_141
doscan_87:
       cmp.l     #37,D3
       bne       doscan_129
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       cmp.l     #-1,D2
       bne.s     doscan_131
       tst.l     D4
       beq.s     doscan_133
       move.l    D4,D0
       bra.s     doscan_134
doscan_133:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_134:
       bra       doscan_15
doscan_131:
       addq.l    #1,-28(A6)
       cmp.l     D3,D2
       beq.s     doscan_135
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       subq.l    #1,-28(A6)
       move.l    D4,D0
       bra       doscan_15
doscan_135:
       bra       doscan_141
doscan_129:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       cmp.l     #-1,D2
       bne.s     doscan_137
       tst.l     D4
       beq.s     doscan_139
       move.l    D4,D0
       bra.s     doscan_140
doscan_139:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_140:
       bra.s     doscan_15
doscan_137:
       cmp.l     D3,D2
       beq.s     doscan_141
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       subq.l    #1,-28(A6)
       move.l    D4,D0
       bra.s     doscan_15
doscan_141:
       bra       doscan_3
doscan_5:
       move.l    D4,D0
doscan_15:
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
_printf:
       link      A6,#-4
       move.l    D2,-(A7)
       lea       8(A6),A0
       addq.w    #4,A0
       move.l    A0,D2
       move.l    D2,-(A7)
       move.l    8(A6),-(A7)
       clr.l     -(A7)
       jsr       _doprint
       add.w     #12,A7
       move.l    D0,-4(A6)
       clr.l     D2
       move.l    -4(A6),D0
       move.l    (A7)+,D2
       unlk      A6
       rts
ULMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   lmul_3
LMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   lmul_1
       neg.l   D0
       tst.l   D1
       bpl.s   lmul_2
       neg.l   D1
       bra.s   lmul_3
lmul_1:
       tst.l   D1
       bpl.s   lmul_3
       neg.l   D1
lmul_2:
       bsr.s   domul
       neg.l   D1
       negx.l  D0
       bra.s   lmul_4
lmul_3:
       bsr.s   domul
lmul_4:
       move.l  D1,8(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
domul:
       cmpi.l  #$FFFF,D1
       bhi.s   domul_1
       cmpi.l  #$FFFF,D0
       bhi.s   domul_2
       mulu    D0,D1
       rts
domul_1:
       cmpi.l  #$FFFF,D0
       bhi.s   domul_4
       bra.s   domul_3
domul_2
       exg     D0,D1
domul_3:
       move.l  D2,-(A7)
       move.l  D1,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       move.l  (A7)+,D2
       rts
domul_4:
       movem.l D2/D3,-(A7)
       move.l  D1,D2
       move.l  D1,D3
       mulu    D0,D1
       swap    D2
       mulu    D0,D2
       swap    D0
       mulu    D0,D3
       add.l   D3,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       movem.l (A7)+,D2/D3
       rts
_gets:
       link      A6,#0
       movem.l   D2/D3/D4/A2,-(A7)
       lea       _putch.L,A2
       move.l    8(A6),D4
       move.l    D4,D2
gets_1:
       jsr       _getch
       move.l    D0,D3
       cmp.l     #10,D0
       beq       gets_3
       cmp.l     #8,D3
       beq.s     gets_4
       move.l    D2,A0
       addq.l    #1,D2
       move.b    D3,(A0)
       ext.w     D3
       ext.l     D3
       move.l    D3,-(A7)
       jsr       (A2)
       addq.w    #4,A7
       bra.s     gets_6
gets_4:
       cmp.l     D4,D2
       bls.s     gets_6
       pea       8
       jsr       (A2)
       addq.w    #4,A7
       pea       32
       jsr       (A2)
       addq.w    #4,A7
       pea       8
       jsr       (A2)
       addq.w    #4,A7
       subq.l    #1,D2
gets_6:
       bra       gets_1
gets_3:
       pea       10
       jsr       (A2)
       addq.w    #4,A7
       move.l    D2,A0
       clr.b     (A0)
       move.l    D4,D0
       movem.l   (A7)+,D2/D3/D4/A2
       unlk      A6
       rts
_tolower:
       move.l    4(A7),D0
       cmp.l     #'A',D0
       blt.s     tolower_1
       cmp.l     #'Z',D0
       bgt.s     tolower_1
       add.l     #$20,D0
tolower_1:
       rts
_strcat:
       move.l    (4,A7),A0
       move.l    (8,A7),A1
       move.l    A0,D0
strcat_1:
       tst.b     (A0)+
       bne.s     strcat_1
       subq.l    #1,A0
strcat_2:
       move.b    (A1)+,(A0)+
       bne.s     strcat_2
       rts
_toupper:
       move.l    4(A7),D0
       cmp.l     #'a',D0
       blt.s     toupper_1
       cmp.l     #'z',D0
       bgt.s     toupper_1
       sub.l     #$20,D0
toupper_1:
       rts
_ungetch:
       link      A6,#0
       move.l    8(A6),__ungetbuf.L
       move.l    8(A6),D0
       unlk      A6
       rts
@doprint_copy:
       link      A6,#0
       move.l    8(A6),A0
       tst.l     (A0)
       beq.s     @doprint_copy_1
       move.l    12(A6),D0
       move.l    8(A6),A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    D0,(A1)
       bra.s     @doprint_copy_2
@doprint_copy_1:
       move.l    12(A6),-(A7)
       jsr       _putch
       addq.w    #4,A7
@doprint_copy_2:
       unlk      A6
       rts
@doprint_getval:
       link      A6,#0
       movem.l   D2/D3,-(A7)
       move.l    8(A6),D3
       clr.l     D2
       move.l    D3,A0
       move.l    (A0),A0
       move.b    (A0),D0
       cmp.b     #42,D0
       bne.s     @doprint_getval_1
       move.l    12(A6),A0
       move.l    (A0),A1
       addq.l    #4,(A0)
       move.l    (A1),D2
       move.l    D3,A0
       addq.l    #1,(A0)
       bra       @doprint_getval_5
@doprint_getval_1:
       moveq     #1,D0
       move.l    D3,A0
       move.l    (A0),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq.s     @doprint_getval_5
       move.l    D2,-(A7)
       pea       10
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D3,A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    (A1),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       sub.l     #48,D0
       move.l    D0,D2
       bra       @doprint_getval_1
@doprint_getval_5:
       move.l    D2,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
_doprint:
       link      A6,#-52
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       8(A6),A2
       lea       @doprint_copy.L,A3
       lea       _ultoa.L,A4
       clr.l     D6
doprint_1:
       move.l    12(A6),A0
       tst.b     (A0)
       beq       doprint_3
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #37,D0
       beq.s     doprint_4
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_2
doprint_4:
       addq.l    #1,12(A6)
       clr.b     -45(A6)
       clr.b     -46(A6)
       clr.b     -48(A6)
       clr.b     -49(A6)
       clr.b     -50(A6)
       clr.b     -51(A6)
       clr.l     -4(A6)
       moveq     #-1,D5
       lea       -36(A6),A0
       move.l    A0,D3
       move.l    A0,D2
doprint_6:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #43,D0
       beq.s     doprint_12
       bgt.s     doprint_15
       cmp.l     #35,D0
       beq       doprint_14
       bgt       doprint_9
       cmp.l     #32,D0
       beq.s     doprint_13
       bra.s     doprint_9
doprint_15:
       cmp.l     #45,D0
       beq.s     doprint_11
       bra.s     doprint_9
doprint_11:
       move.b    #1,-51(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_12:
       move.b    #1,-50(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_13:
       move.b    #1,-49(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_14:
       move.b    #1,-48(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_9:
       bra.s     doprint_8
doprint_7:
       bra       doprint_6
doprint_8:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #48,D0
       bne.s     doprint_16
       addq.l    #1,12(A6)
       move.b    #1,-46(A6)
doprint_16:
       pea       16(A6)
       pea       12(A6)
       jsr       @doprint_getval
       addq.w    #8,A7
       move.l    D0,A5
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #46,D0
       bne.s     doprint_18
       addq.l    #1,12(A6)
       pea       16(A6)
       pea       12(A6)
       jsr       @doprint_getval
       addq.w    #8,A7
       move.l    D0,D5
doprint_18:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #108,D0
       bne.s     doprint_20
       addq.l    #1,12(A6)
       move.b    #1,-45(A6)
doprint_20:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq       doprint_27
       bgt.s     doprint_33
       cmp.l     #100,D0
       beq       doprint_24
       bgt.s     doprint_34
       cmp.l     #99,D0
       beq       doprint_30
       bgt       doprint_22
       cmp.l     #88,D0
       beq       doprint_28
       bra       doprint_22
doprint_34:
       cmp.l     #105,D0
       beq.s     doprint_24
       bra       doprint_22
doprint_33:
       cmp.l     #117,D0
       beq       doprint_26
       bgt.s     doprint_35
       cmp.l     #115,D0
       beq       doprint_31
       bra       doprint_22
doprint_35:
       cmp.l     #120,D0
       beq       doprint_28
       bra       doprint_22
doprint_24:
       tst.b     -45(A6)
       beq.s     doprint_36
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       _ltoa
       add.w     #12,A7
       bra.s     doprint_37
doprint_36:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       _ltoa
       add.w     #12,A7
doprint_37:
       bra       doprint_23
doprint_26:
       tst.b     -45(A6)
       beq.s     doprint_38
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_39
doprint_38:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_39:
       bra       doprint_23
doprint_27:
       tst.b     -45(A6)
       beq.s     doprint_40
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_41
doprint_40:
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_41:
       bra       doprint_23
doprint_28:
       tst.b     -45(A6)
       beq.s     doprint_42
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_43
doprint_42:
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_43:
       bra       doprint_23
doprint_30:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D0
       move.l    D2,A0
       addq.l    #1,D2
       move.b    D0,(A0)
       move.l    D2,A0
       clr.b     (A0)
       move.l    A5,D0
       beq.s     doprint_44
       move.l    A5,D0
       bra.s     doprint_45
doprint_44:
       moveq     #1,D0
       ext.w     D0
       ext.l     D0
doprint_45:
       move.l    D0,D5
       bra       doprint_23
doprint_31:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D3
       cmp.l     #-1,D5
       bne.s     doprint_46
       move.l    D3,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D5
doprint_46:
       bra.s     doprint_23
doprint_22:
       move.l    12(A6),A0
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       move.l    D2,A0
       clr.b     (A0)
doprint_23:
       move.l    D3,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.b    D0,D4
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #115,D0
       bne.s     doprint_48
       cmp.l     #0,D5
       blt.s     doprint_48
       ext.w     D4
       ext.l     D4
       cmp.l     D5,D4
       ble.s     doprint_50
       move.l    D5,D0
       bra.s     doprint_51
doprint_50:
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
doprint_51:
       move.b    D0,D4
doprint_48:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #88,D0
       bne       doprint_56
       lea       -36(A6),A0
       move.l    A0,D2
doprint_54:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     doprint_56
       move.l    D2,A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       move.l    D2,A0
       move.b    D0,(A0)
       addq.l    #1,D2
       bra       doprint_54
doprint_56:
       moveq     #0,D7
       lea       -44(A6),A0
       move.l    A0,D2
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #100,D0
       beq.s     doprint_59
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #105,D0
       bne       doprint_65
doprint_59:
       move.b    -50(A6),D0
       ext.w     D0
       ext.l     D0
       tst.l     D0
       bne.s     doprint_62
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne       doprint_60
doprint_62:
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne.s     doprint_63
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     doprint_64
doprint_63:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #43,(A0)
doprint_64:
       addq.l    #1,D7
       bra       doprint_65
doprint_60:
       tst.b     -49(A6)
       beq.s     doprint_65
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne.s     doprint_67
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     doprint_68
doprint_67:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #32,(A0)
doprint_68:
       addq.l    #1,D7
doprint_65:
       tst.b     -48(A6)
       beq       doprint_77
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq.s     doprint_73
       bgt.s     doprint_76
       cmp.l     #88,D0
       beq.s     doprint_73
       bra       doprint_77
doprint_76:
       cmp.l     #120,D0
       beq.s     doprint_73
       bra       doprint_77
doprint_73:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #48,(A0)
       addq.l    #1,D7
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #120,D0
       beq.s     doprint_79
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #88,D0
       bne.s     doprint_77
doprint_79:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #120,(A0)
       addq.l    #1,D7
doprint_77:
       move.l    D2,A0
       clr.b     (A0)
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #105,D0
       beq       doprint_82
       bgt.s     doprint_93
       cmp.l     #99,D0
       beq       doprint_96
       bgt.s     doprint_94
       cmp.l     #88,D0
       beq       doprint_82
       bgt       doprint_80
       cmp.l     #69,D0
       beq       doprint_82
       bra       doprint_80
doprint_94:
       cmp.l     #101,D0
       beq       doprint_82
       bgt       doprint_80
       cmp.l     #100,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_93:
       cmp.l     #117,D0
       beq.s     doprint_82
       bgt.s     doprint_95
       cmp.l     #115,D0
       beq       doprint_96
       bgt       doprint_80
       cmp.l     #111,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_95:
       cmp.l     #120,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_82:
       tst.b     -46(A6)
       beq.s     doprint_96
       tst.b     -51(A6)
       bne.s     doprint_96
       move.l    A5,D0
       sub.l     D7,D0
       ext.w     D4
       ext.l     D4
       sub.l     D4,D0
       move.l    D0,-4(A6)
doprint_96:
       move.l    -4(A6),D0
       cmp.l     #0,D0
       bge.s     doprint_98
       clr.l     -4(A6)
doprint_98:
       tst.b     -51(A6)
       bne       doprint_104
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
doprint_102:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     doprint_104
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_102
doprint_104:
       lea       -44(A6),A0
       move.l    A0,D2
doprint_105:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     doprint_107
       move.l    D2,A0
       addq.l    #1,D2
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_105
doprint_107:
       move.l    -4(A6),D0
       move.b    D0,-47(A6)
doprint_108:
       move.b    -47(A6),D0
       subq.b    #1,-47(A6)
       tst.b     D0
       beq.s     doprint_110
       pea       48
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_108
doprint_110:
       move.l    D3,A0
       tst.b     (A0)
       beq       doprint_113
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #115,D0
       beq.s     doprint_116
       bgt.s     doprint_119
       cmp.l     #99,D0
       beq.s     doprint_116
       bra.s     doprint_119
doprint_116:
       move.l    D5,D0
       subq.l    #1,D5
       cmp.l     #0,D0
       bgt.s     doprint_119
       bra.s     doprint_115
doprint_119:
       move.l    D3,A0
       addq.l    #1,D3
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra.s     doprint_112
doprint_115:
       bra.s     doprint_113
doprint_112:
       bra       doprint_110
doprint_113:
       tst.b     -51(A6)
       beq       doprint_125
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
doprint_123:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     doprint_125
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       subq.l    #1,D6
       bra       doprint_123
doprint_125:
       bra.s     doprint_81
doprint_80:
       move.l    12(A6),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
doprint_81:
       addq.l    #1,12(A6)
doprint_2:
       bra       doprint_1
doprint_3:
       tst.l     (A2)
       beq.s     doprint_126
       clr.b     D1
       and.l     #255,D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
doprint_126:
       move.l    D6,D0
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
_putch:
       link      A6,#0
       move.l    D2,-(A7)
       move.l    8(A6),D2
       cmp.l     #10,D2
       bne.s     putch_1
       pea       13
       jsr       __putch
       addq.w    #4,A7
putch_1:
       move.l    D2,-(A7)
       jsr       __putch
       addq.w    #4,A7
       move.l    D2,D0
       move.l    (A7)+,D2
       unlk      A6
       rts
_getch:
       move.l    D2,-(A7)
       move.l    __ungetbuf.L,D2
       move.l    __ungetbuf.L,D0
       cmp.l     #-1,D0
       beq.s     getch_1
       move.l    #-1,__ungetbuf.L
       bra.s     getch_3
getch_1:
       jsr       __getch
       move.l    D0,D2
       cmp.l     #13,D0
       bne.s     getch_3
       moveq     #10,D2
getch_3:
       move.l    D2,D0
       move.l    (A7)+,D2
       rts
@itoa_convert:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    16(A6),D3
       move.l    12(A6),D5
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D4
       cmp.l     D3,D5
       blo.s     @itoa_convert_1
       move.l    D3,-(A7)
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       jsr       ULDIV
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    D1,-(A7)
       move.l    D2,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
@itoa_convert_1:
       cmp.l     #9,D4
       bgt.s     @itoa_convert_3
       move.l    D4,D0
       moveq     #48,D1
       and.l     #255,D1
       add.l     D1,D0
       bra.s     @itoa_convert_4
@itoa_convert_3:
       move.l    D4,D0
       moveq     #97,D1
       and.l     #255,D1
       add.l     D1,D0
       sub.l     #10,D0
@itoa_convert_4:
       move.l    D2,A0
       move.b    D0,(A0)
       move.l    D2,D0
       addq.l    #1,D0
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ltoa:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    12(A6),D3
       move.l    16(A6),D5
       move.l    D3,D4
       cmp.l     #2,D5
       blt.s     ltoa_3
       cmp.l     #36,D5
       ble.s     ltoa_1
ltoa_3:
       move.l    D3,D0
       bra       ltoa_4
ltoa_1:
       cmp.l     #10,D5
       bne       ltoa_5
       cmp.l     #0,D2
       bge.s     ltoa_5
       move.l    D2,D0
       neg.l     D0
       move.l    D0,D2
       cmp.l     #0,D2
       bge.s     ltoa_7
       pea       @itoa_1.L
       move.l    D3,-(A7)
       jsr       _strcpy
       addq.w    #8,A7
       move.l    D3,D0
       bra.s     ltoa_4
ltoa_7:
       move.l    D4,A0
       addq.l    #1,D4
       move.b    #45,(A0)
ltoa_5:
       move.l    D5,-(A7)
       move.l    D2,-(A7)
       move.l    D4,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D4
       move.l    D4,A0
       clr.b     (A0)
       move.l    D3,D0
ltoa_4:
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ultoa:
       link      A6,#0
       movem.l   D2/D3/D4,-(A7)
       move.l    16(A6),D3
       move.l    12(A6),D4
       move.l    D4,D2
       cmp.l     #2,D3
       blt.s     ultoa_3
       cmp.l     #36,D3
       ble.s     ultoa_1
ultoa_3:
       move.l    D4,D0
       bra.s     ultoa_4
ultoa_1:
       move.l    D3,-(A7)
       move.l    8(A6),-(A7)
       move.l    D2,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
       move.l    D2,A0
       clr.b     (A0)
       move.l    D4,D0
ultoa_4:
       movem.l   (A7)+,D2/D3/D4
       unlk      A6
       rts
_itoa:
       link      A6,#0
       move.l    16(A6),-(A7)
       move.l    12(A6),-(A7)
       move.l    8(A6),-(A7)
       jsr       _ltoa
       add.w     #12,A7
       unlk      A6
       rts
_strlen:
       move.l    (4,A7),A0
       move.l    A0,A1
strlen_1:
       tst.b     (A1)+
       bne       strlen_1
       move.l    A1,D0
       sub.l     A0,D0
       subq.l    #1,D0
       rts
_strcpy:
       move.l    (4,A7),A0
       move.l    (8,A7),A1
       move.l    A0,D0
strcpy_1:
       move.b    (A1)+,(A0)+
       bne.s     strcpy_1
       rts
ULDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   ldiv_3
LDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   ldiv_1
       neg.l   D0
       tst.l   D1
       bpl.s   ldiv_2
       neg.l   D1
       bsr.s   dodiv
       neg.l   D1
       bra.s   ldiv_4
ldiv_1:
       tst.l   D1
       bpl.s   ldiv_3
       neg.l   D1
       bsr.s   dodiv
       neg.l   D0
       bra.s   ldiv_4
ldiv_2:
       bsr.s   dodiv
       neg.l   D0
       neg.l   D1
       bra.s   ldiv_4
ldiv_3:
       bsr.s   dodiv
ldiv_4:
       move.l  D0,8(A6)
       move.l  D1,12(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
dodiv:
       cmpi.l  #$FFFF,D1
       bhi.s   dodiv_2
       cmpi.l  #$FFFF,D0
       bhi.s   dodiv_1
       divu    D1,D0
       move.l  D0,D1
       clr.w   D1
       swap    D1
       andi.l  #$FFFF,D0
       rts
dodiv_1:
       movem.w D0/D2,-(A7)
       clr.w   D0
       swap    D0
       divu    D1,D0
       move.w  D0,D2
       move.w  (A7)+,D0
       divu    D1,D0
       swap    D0
       clr.l   D1
       move.w  D0,D1
       move.w  D2,D0
       swap    D0
       move.w  (A7)+,D2
       rts
dodiv_2:
       movem.l D2/D3/D4,-(A7)
       move.l  D1,D2
       clr.w   D2
       swap    D2
       addq.l  #1,D2
       move.l  D0,D3
       move.l  D1,D4
       move.l  D2,D1
       bsr.s   dodiv_1
       move.l  D4,D1
       divu    D2,D1
       divu    D1,D0
       andi.l  #$FFFF,D0
dodiv_3:
       move.l  D4,D1
       move.l  D4,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       add.l   D2,D1
       sub.l   D3,D1
       bhi.s   dodiv_4
       neg.l   D1
       cmp.l   D1,D4
       bhi.s   dodiv_5
       addq.l  #1,D0
       bra.s   dodiv_3
dodiv_4:
       subq.l  #1,D0
       bra.s   dodiv_3
dodiv_5:
       movem.l (A7)+,D2/D3/D4
       rts
       section   const
                align


@m68kus~1_1:
       dc.b      13,10,99,32,61,32,37,117,32,10,0
@m68kus~1_2:
       dc.b      82,101,97,100,32,98,97,99,107,32,68,97,116,97
       dc.b      32,40,97,115,32,117,45,99,104,97,114,41,32,61
       dc.b      32,37,117,32,10,0
@m68kus~1_3:
       dc.b      67,104,105,112,32,69,114,97,115,101,100,33,0
@m68kus~1_4:
       dc.b      13,10,72,101,108,108,111,32,67,80,69,78,32,52
       dc.b      49,50,32,83,116,117,100,101,110,116,13,10,0
@doscan_1:
       dc.b      10,0
__ctype:
       dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
       dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
       dc.b      64,64,64,208,160,160,160,160,160,160,160,160
       dc.b      160,160,160,160,160,160,160,140,140,140,140
       dc.b      140,140,140,140,140,140,160,160,160,160,160
       dc.b      160,160,138,138,138,138,138,138,130,130,130
       dc.b      130,130,130,130,130,130,130,130,130,130,130
       dc.b      130,130,130,130,130,130,160,160,160,160,160
       dc.b      160,137,137,137,137,137,137,129,129,129,129
       dc.b      129,129,129,129,129,129,129,129,129,129,129
       dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
@itoa_1:
       dc.b      45,50,49,52,55,52,56,51,54,52,56,0
       section   data
                align

*********************************************************************************************************************************************************
* Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
********************************************************************************************************************************************************

DataStart       equ       *
__ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
__allocp:       ds.l      1                    start of free memory block list
__heap:         ds.l      1                    begin of free memory


@doscan_lpbuf:
       dc.l      @doscan_buf
       section   bss
                align

DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
*********************************************************************************************************
BssStart       equ       *

@doscan_buf:
       ds.b      80
       section   heap
               align

BssEnd         equ       *
BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for Heap
*********************************************************************************************************

heap           equ       *
               align
