680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 29 Mar 2019      Time: 13:30:28          Source: C:\M68K\PROGRAMS\DEBUGMONITORCODE\IDE68K_OUTPUT\CANBUS.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  10F0      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  0000      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  10E4      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  10E8      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  10F0 0800 
08000034  10EC      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  047A      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; C:\M68K\PROGRAMS\DEBUGMONITORCODE\CANBUS\CANBUS CONTROLLER ROUTINES.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; /*********************************************************************************************
                      47   ; **  RS232 port addresses
                      48   ; *********************************************************************************************/
                      49   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                      50   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                      51   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                      52   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                      53   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                      54   ; /*********************************************************************************************
                      55   ; ** These addresses and definitions were taken from Appendix 7 of the Can Controller
                      56   ; ** application note and adapted for the 68k assignment
                      57   ; *********************************************************************************************/
                      58   ; /*
                      59   ; ** definition for the SJA1000 registers and bits based on 68k address map areas
                      60   ; ** assume the addresses for the 2 can controllers given in the assignment
                      61   ; **
                      62   ; ** Registers are defined in terms of the following Macro for each Can controller,
                      63   ; ** where (i) represents an registers number
                      64   ; */
                      65   ; #define CAN0_CONTROLLER(i) (*(volatile unsigned char *)(0x00500000 + (i << 1)))
                      66   ; #define CAN1_CONTROLLER(i) (*(volatile unsigned char *)(0x00500200 + (i << 1)))
                      67   ; /* Can 0 register definitions */
                      68   ; #define Can0_ModeControlReg      CAN0_CONTROLLER(0)
                      69   ; #define Can0_CommandReg          CAN0_CONTROLLER(1)
                      70   ; #define Can0_StatusReg           CAN0_CONTROLLER(2)
                      71   ; #define Can0_InterruptReg        CAN0_CONTROLLER(3)
                      72   ; #define Can0_InterruptEnReg      CAN0_CONTROLLER(4) /* PeliCAN mode */
                      73   ; #define Can0_BusTiming0Reg       CAN0_CONTROLLER(6)
                      74   ; #define Can0_BusTiming1Reg       CAN0_CONTROLLER(7)
                      75   ; #define Can0_OutControlReg       CAN0_CONTROLLER(8)
                      76   ; /* address definitions of Other Registers */
                      77   ; #define Can0_ArbLostCapReg       CAN0_CONTROLLER(11)
                      78   ; #define Can0_ErrCodeCapReg       CAN0_CONTROLLER(12)
                      79   ; #define Can0_ErrWarnLimitReg     CAN0_CONTROLLER(13)
                      80   ; #define Can0_RxErrCountReg       CAN0_CONTROLLER(14)
                      81   ; #define Can0_TxErrCountReg       CAN0_CONTROLLER(15)
                      82   ; #define Can0_RxMsgCountReg       CAN0_CONTROLLER(29)
                      83   ; #define Can0_RxBufStartAdr       CAN0_CONTROLLER(30)
                      84   ; #define Can0_ClockDivideReg      CAN0_CONTROLLER(31)
                      85   ; /* address definitions of Acceptance Code & Mask Registers - RESET MODE */
                      86   ; #define Can0_AcceptCode0Reg      CAN0_CONTROLLER(16)
                      87   ; #define Can0_AcceptCode1Reg      CAN0_CONTROLLER(17)
                      88   ; #define Can0_AcceptCode2Reg      CAN0_CONTROLLER(18)
                      89   ; #define Can0_AcceptCode3Reg      CAN0_CONTROLLER(19)
                      90   ; #define Can0_AcceptMask0Reg      CAN0_CONTROLLER(20)
                      91   ; #define Can0_AcceptMask1Reg      CAN0_CONTROLLER(21)
                      92   ; #define Can0_AcceptMask2Reg      CAN0_CONTROLLER(22)
                      93   ; #define Can0_AcceptMask3Reg      CAN0_CONTROLLER(23)
                      94   ; /* address definitions Rx Buffer - OPERATING MODE - Read only register*/
                      95   ; #define Can0_RxFrameInfo         CAN0_CONTROLLER(16)
                      96   ; #define Can0_RxBuffer1           CAN0_CONTROLLER(17)
                      97   ; #define Can0_RxBuffer2           CAN0_CONTROLLER(18)
                      98   ; #define Can0_RxBuffer3           CAN0_CONTROLLER(19)
                      99   ; #define Can0_RxBuffer4           CAN0_CONTROLLER(20)
                     100   ; #define Can0_RxBuffer5           CAN0_CONTROLLER(21)
                     101   ; #define Can0_RxBuffer6           CAN0_CONTROLLER(22)
                     102   ; #define Can0_RxBuffer7           CAN0_CONTROLLER(23)
                     103   ; #define Can0_RxBuffer8           CAN0_CONTROLLER(24)
                     104   ; #define Can0_RxBuffer9           CAN0_CONTROLLER(25)
                     105   ; #define Can0_RxBuffer10          CAN0_CONTROLLER(26)
                     106   ; #define Can0_RxBuffer11          CAN0_CONTROLLER(27)
                     107   ; #define Can0_RxBuffer12          CAN0_CONTROLLER(28)
                     108   ; /* address definitions of the Tx-Buffer - OPERATING MODE - Write only register */
                     109   ; #define Can0_TxFrameInfo         CAN0_CONTROLLER(16)
                     110   ; #define Can0_TxBuffer1           CAN0_CONTROLLER(17)
                     111   ; #define Can0_TxBuffer2           CAN0_CONTROLLER(18)
                     112   ; #define Can0_TxBuffer3           CAN0_CONTROLLER(19)
                     113   ; #define Can0_TxBuffer4           CAN0_CONTROLLER(20)
                     114   ; #define Can0_TxBuffer5           CAN0_CONTROLLER(21)
                     115   ; #define Can0_TxBuffer6           CAN0_CONTROLLER(22)
                     116   ; #define Can0_TxBuffer7           CAN0_CONTROLLER(23)
                     117   ; #define Can0_TxBuffer8           CAN0_CONTROLLER(24)
                     118   ; #define Can0_TxBuffer9           CAN0_CONTROLLER(25)
                     119   ; #define Can0_TxBuffer10          CAN0_CONTROLLER(26)
                     120   ; #define Can0_TxBuffer11          CAN0_CONTROLLER(27)
                     121   ; #define Can0_TxBuffer12          CAN0_CONTROLLER(28)
                     122   ; /* read only addresses */
                     123   ; #define Can0_TxFrameInfoRd       CAN0_CONTROLLER(96)
                     124   ; #define Can0_TxBufferRd1         CAN0_CONTROLLER(97)
                     125   ; #define Can0_TxBufferRd2         CAN0_CONTROLLER(98)
                     126   ; #define Can0_TxBufferRd3         CAN0_CONTROLLER(99)
                     127   ; #define Can0_TxBufferRd4         CAN0_CONTROLLER(100)
                     128   ; #define Can0_TxBufferRd5         CAN0_CONTROLLER(101)
                     129   ; #define Can0_TxBufferRd6         CAN0_CONTROLLER(102)
                     130   ; #define Can0_TxBufferRd7         CAN0_CONTROLLER(103)
                     131   ; #define Can0_TxBufferRd8         CAN0_CONTROLLER(104)
                     132   ; #define Can0_TxBufferRd9         CAN0_CONTROLLER(105)
                     133   ; #define Can0_TxBufferRd10        CAN0_CONTROLLER(106)
                     134   ; #define Can0_TxBufferRd11        CAN0_CONTROLLER(107)
                     135   ; #define Can0_TxBufferRd12        CAN0_CONTROLLER(108)
                     136   ; /* CAN1 Controller register definitions */
                     137   ; #define Can1_ModeControlReg      CAN1_CONTROLLER(0)
                     138   ; #define Can1_CommandReg          CAN1_CONTROLLER(1)
                     139   ; #define Can1_StatusReg           CAN1_CONTROLLER(2)
                     140   ; #define Can1_InterruptReg        CAN1_CONTROLLER(3)
                     141   ; #define Can1_InterruptEnReg      CAN1_CONTROLLER(4) /* PeliCAN mode */
                     142   ; #define Can1_BusTiming0Reg       CAN1_CONTROLLER(6)
                     143   ; #define Can1_BusTiming1Reg       CAN1_CONTROLLER(7)
                     144   ; #define Can1_OutControlReg       CAN1_CONTROLLER(8)
                     145   ; /* address definitions of Other Registers */
                     146   ; #define Can1_ArbLostCapReg       CAN1_CONTROLLER(11)
                     147   ; #define Can1_ErrCodeCapReg       CAN1_CONTROLLER(12)
                     148   ; #define Can1_ErrWarnLimitReg     CAN1_CONTROLLER(13)
                     149   ; #define Can1_RxErrCountReg       CAN1_CONTROLLER(14)
                     150   ; #define Can1_TxErrCountReg       CAN1_CONTROLLER(15)
                     151   ; #define Can1_RxMsgCountReg       CAN1_CONTROLLER(29)
                     152   ; #define Can1_RxBufStartAdr       CAN1_CONTROLLER(30)
                     153   ; #define Can1_ClockDivideReg      CAN1_CONTROLLER(31)
                     154   ; /* address definitions of Acceptance Code & Mask Registers - RESET MODE */
                     155   ; #define Can1_AcceptCode0Reg      CAN1_CONTROLLER(16)
                     156   ; #define Can1_AcceptCode1Reg      CAN1_CONTROLLER(17)
                     157   ; #define Can1_AcceptCode2Reg      CAN1_CONTROLLER(18)
                     158   ; #define Can1_AcceptCode3Reg      CAN1_CONTROLLER(19)
                     159   ; #define Can1_AcceptMask0Reg      CAN1_CONTROLLER(20)
                     160   ; #define Can1_AcceptMask1Reg      CAN1_CONTROLLER(21)
                     161   ; #define Can1_AcceptMask2Reg      CAN1_CONTROLLER(22)
                     162   ; #define Can1_AcceptMask3Reg      CAN1_CONTROLLER(23)
                     163   ; /* address definitions Rx Buffer - OPERATING MODE - Read only register*/
                     164   ; #define Can1_RxFrameInfo         CAN1_CONTROLLER(16)
                     165   ; #define Can1_RxBuffer1           CAN1_CONTROLLER(17)
                     166   ; #define Can1_RxBuffer2           CAN1_CONTROLLER(18)
                     167   ; #define Can1_RxBuffer3           CAN1_CONTROLLER(19)
                     168   ; #define Can1_RxBuffer4           CAN1_CONTROLLER(20)
                     169   ; #define Can1_RxBuffer5           CAN1_CONTROLLER(21)
                     170   ; #define Can1_RxBuffer6           CAN1_CONTROLLER(22)
                     171   ; #define Can1_RxBuffer7           CAN1_CONTROLLER(23)
                     172   ; #define Can1_RxBuffer8           CAN1_CONTROLLER(24)
                     173   ; #define Can1_RxBuffer9           CAN1_CONTROLLER(25)
                     174   ; #define Can1_RxBuffer10          CAN1_CONTROLLER(26)
                     175   ; #define Can1_RxBuffer11          CAN1_CONTROLLER(27)
                     176   ; #define Can1_RxBuffer12          CAN1_CONTROLLER(28)
                     177   ; /* address definitions of the Tx-Buffer - OPERATING MODE - Write only register */
                     178   ; #define Can1_TxFrameInfo         CAN1_CONTROLLER(16)
                     179   ; #define Can1_TxBuffer1           CAN1_CONTROLLER(17)
                     180   ; #define Can1_TxBuffer2           CAN1_CONTROLLER(18)
                     181   ; #define Can1_TxBuffer3           CAN1_CONTROLLER(19)
                     182   ; #define Can1_TxBuffer4           CAN1_CONTROLLER(20)
                     183   ; #define Can1_TxBuffer5           CAN1_CONTROLLER(21)
                     184   ; #define Can1_TxBuffer6           CAN1_CONTROLLER(22)
                     185   ; #define Can1_TxBuffer7           CAN1_CONTROLLER(23)
                     186   ; #define Can1_TxBuffer8           CAN1_CONTROLLER(24)
                     187   ; #define Can1_TxBuffer9           CAN1_CONTROLLER(25)
                     188   ; #define Can1_TxBuffer10          CAN1_CONTROLLER(26)
                     189   ; #define Can1_TxBuffer11          CAN1_CONTROLLER(27)
                     190   ; #define Can1_TxBuffer12          CAN1_CONTROLLER(28)
                     191   ; /* read only addresses */
                     192   ; #define Can1_TxFrameInfoRd       CAN1_CONTROLLER(96)
                     193   ; #define Can1_TxBufferRd1         CAN1_CONTROLLER(97)
                     194   ; #define Can1_TxBufferRd2         CAN1_CONTROLLER(98)
                     195   ; #define Can1_TxBufferRd3         CAN1_CONTROLLER(99)
                     196   ; #define Can1_TxBufferRd4         CAN1_CONTROLLER(100)
                     197   ; #define Can1_TxBufferRd5         CAN1_CONTROLLER(101)
                     198   ; #define Can1_TxBufferRd6         CAN1_CONTROLLER(102)
                     199   ; #define Can1_TxBufferRd7         CAN1_CONTROLLER(103)
                     200   ; #define Can1_TxBufferRd8         CAN1_CONTROLLER(104)
                     201   ; #define Can1_TxBufferRd9         CAN1_CONTROLLER(105)
                     202   ; #define Can1_TxBufferRd10        CAN1_CONTROLLER(106)
                     203   ; #define Can1_TxBufferRd11        CAN1_CONTROLLER(107)
                     204   ; #define Can1_TxBufferRd12        CAN1_CONTROLLER(108)
                     205   ; /* bit definitions for the Mode & Control Register */
                     206   ; #define RM_RR_Bit 0x01 /* reset mode (request) bit */
                     207   ; #define LOM_Bit 0x02 /* listen only mode bit */
                     208   ; #define STM_Bit 0x04 /* self test mode bit */
                     209   ; #define AFM_Bit 0x08 /* acceptance filter mode bit */
                     210   ; #define SM_Bit  0x10 /* enter sleep mode bit */
                     211   ; /* bit definitions for the Interrupt Enable & Control Register */
                     212   ; #define RIE_Bit 0x01 /* receive interrupt enable bit */
                     213   ; #define TIE_Bit 0x02 /* transmit interrupt enable bit */
                     214   ; #define EIE_Bit 0x04 /* error warning interrupt enable bit */
                     215   ; #define DOIE_Bit 0x08 /* data overrun interrupt enable bit */
                     216   ; #define WUIE_Bit 0x10 /* wake-up interrupt enable bit */
                     217   ; #define EPIE_Bit 0x20 /* error passive interrupt enable bit */
                     218   ; #define ALIE_Bit 0x40 /* arbitration lost interr. enable bit*/
                     219   ; #define BEIE_Bit 0x80 /* bus error interrupt enable bit */
                     220   ; /* bit definitions for the Command Register */
                     221   ; #define TR_Bit 0x01 /* transmission request bit */
                     222   ; #define AT_Bit 0x02 /* abort transmission bit */
                     223   ; #define RRB_Bit 0x04 /* release receive buffer bit */
                     224   ; #define CDO_Bit 0x08 /* clear data overrun bit */
                     225   ; #define SRR_Bit 0x10 /* self reception request bit */
                     226   ; /* bit definitions for the Status Register */
                     227   ; #define RBS_Bit 0x01 /* receive buffer status bit */
                     228   ; #define DOS_Bit 0x02 /* data overrun status bit */
                     229   ; #define TBS_Bit 0x04 /* transmit buffer status bit */
                     230   ; #define TCS_Bit 0x08 /* transmission complete status bit */
                     231   ; #define RS_Bit 0x10 /* receive status bit */
                     232   ; #define TS_Bit 0x20 /* transmit status bit */
                     233   ; #define ES_Bit 0x40 /* error status bit */
                     234   ; #define BS_Bit 0x80 /* bus status bit */
                     235   ; /* bit definitions for the Interrupt Register */
                     236   ; #define RI_Bit 0x01 /* receive interrupt bit */
                     237   ; #define TI_Bit 0x02 /* transmit interrupt bit */
                     238   ; #define EI_Bit 0x04 /* error warning interrupt bit */
                     239   ; #define DOI_Bit 0x08 /* data overrun interrupt bit */
                     240   ; #define WUI_Bit 0x10 /* wake-up interrupt bit */
                     241   ; #define EPI_Bit 0x20 /* error passive interrupt bit */
                     242   ; #define ALI_Bit 0x40 /* arbitration lost interrupt bit */
                     243   ; #define BEI_Bit 0x80 /* bus error interrupt bit */
                     244   ; /* bit definitions for the Bus Timing Registers */
                     245   ; #define SAM_Bit 0x80                        /* sample mode bit 1 == the bus is sampled 3 times, 0 == the bus is sampled once */
                     246   ; /* bit definitions for the Output Control Register OCMODE1, OCMODE0 */
                     247   ; #define BiPhaseMode 0x00 /* bi-phase output mode */
                     248   ; #define NormalMode 0x02 /* normal output mode */
                     249   ; #define ClkOutMode 0x03 /* clock output mode */
                     250   ; /* output pin configuration for TX1 */
                     251   ; #define OCPOL1_Bit 0x20 /* output polarity control bit */
                     252   ; #define Tx1Float 0x00 /* configured as float */
                     253   ; #define Tx1PullDn 0x40 /* configured as pull-down */
                     254   ; #define Tx1PullUp 0x80 /* configured as pull-up */
                     255   ; #define Tx1PshPull 0xC0 /* configured as push/pull */
                     256   ; /* output pin configuration for TX0 */
                     257   ; #define OCPOL0_Bit 0x04 /* output polarity control bit */
                     258   ; #define Tx0Float 0x00 /* configured as float */
                     259   ; #define Tx0PullDn 0x08 /* configured as pull-down */
                     260   ; #define Tx0PullUp 0x10 /* configured as pull-up */
                     261   ; #define Tx0PshPull 0x18 /* configured as push/pull */
                     262   ; /* bit definitions for the Clock Divider Register */
                     263   ; #define DivBy1 0x07 /* CLKOUT = oscillator frequency */
                     264   ; #define DivBy2 0x00 /* CLKOUT = 1/2 oscillator frequency */
                     265   ; #define ClkOff_Bit 0x08 /* clock off bit, control of the CLK OUT pin */
                     266   ; #define RXINTEN_Bit 0x20 /* pin TX1 used for receive interrupt */
                     267   ; #define CBP_Bit 0x40 /* CAN comparator bypass control bit */
                     268   ; #define CANMode_Bit 0x80 /* CAN mode definition bit */
                     269   ; /*- definition of used constants ---------------------------------------*/
                     270   ; #define YES 1
                     271   ; #define NO 0
                     272   ; #define ENABLE 1
                     273   ; #define DISABLE 0
                     274   ; #define ENABLE_N 0
                     275   ; #define DISABLE_N 1
                     276   ; #define INTLEVELACT 0
                     277   ; #define INTEDGEACT 1
                     278   ; #define PRIORITY_LOW 0
                     279   ; #define PRIORITY_HIGH 1
                     280   ; /* default (reset) value for register content, clear register */
                     281   ; #define ClrByte 0x00
                     282   ; /* constant: clear Interrupt Enable Register */
                     283   ; #define ClrIntEnSJA ClrByte
                     284   ; /* definitions for the acceptance code and mask register */
                     285   ; #define DontCare 0xFF
                     286   ; /*  bus timing values for
                     287   ; **  bit-rate : 100 kBit/s
                     288   ; **  oscillator frequency : 25 MHz, 1 sample per bit, 0 tolerance %
                     289   ; **  maximum tolerated propagation delay : 4450 ns
                     290   ; **  minimum requested propagation delay : 500 ns
                     291   ; **
                     292   ; **  https://www.kvaser.com/support/calculators/bit-timing-calculator/
                     293   ; **  T1 	T2 	BTQ 	SP% 	SJW 	BIT RATE 	ERR% 	BTR0 	BTR1
                     294   ; **  17	8	25	    68	     1	      100	    0	      04	7f
                     295   ; */
                     296   ; #define SJW 1
                     297   ; #define Presc 10
                     298   ; #define TSEG1 16
                     299   ; #define TSEG2 8
                     300   ; // initialisation for Can controller 0
                     301   ; void Init_CanBus_Controller0(void)
                     302   ; {
                     303   _Init_CanBus_Controller0:
                     304   ; // TODO - put your Canbus initialisation code for CanController 0 here
                     305   ; // See section 4.2.1 in the application note for details (PELICAN MODE)
                     306   ; // Can0_InterruptReg = DISABLE; /* disable all interrupts */
                     307   ; /* set reset mode/request (Note: after power-on SJA1000 is in BasicCAN mode)*/
                     308   ; while(Can0_ModeControlReg & RM_RR_Bit == ClrByte){
                     309   ; // Set Request reset mode (other bits remain unchanged)
                     310   ; Can0_ModeControlReg = Can0_ModeControlReg | RM_RR_Bit;
                     311   ; }
                     312   ; // Configure Clock Divider Register
                     313   ; Can0_ClockDivideReg = CANMode_Bit | CBP_Bit | DivBy1;
0800003E  13FC 00C7  314          move.b    #199,5242942
08000042  0050 003E 
                     315   ; // Disable Can Interrupts
                     316   ; Can0_InterruptEnReg = ClrIntEnSJA;
08000046  4239 0050  317          clr.b     5242888
0800004A  0008      
                     318   ; // Define Acceptance Code
                     319   ; Can0_AcceptCode0Reg = ClrByte;
0800004C  4239 0050  320          clr.b     5242912
08000050  0020      
                     321   ; Can0_AcceptCode1Reg = ClrByte;
08000052  4239 0050  322          clr.b     5242914
08000056  0022      
                     323   ; Can0_AcceptCode2Reg = ClrByte;
08000058  4239 0050  324          clr.b     5242916
0800005C  0024      
                     325   ; Can0_AcceptCode3Reg = ClrByte;
0800005E  4239 0050  326          clr.b     5242918
08000062  0026      
                     327   ; // Define Mask
                     328   ; Can0_AcceptMask0Reg = DontCare;
08000064  13FC 00FF  329          move.b    #255,5242920
08000068  0050 0028 
                     330   ; Can0_AcceptMask1Reg = DontCare;
0800006C  13FC 00FF  331          move.b    #255,5242922
08000070  0050 002A 
                     332   ; Can0_AcceptMask2Reg = DontCare;
08000074  13FC 00FF  333          move.b    #255,5242924
08000078  0050 002C 
                     334   ; Can0_AcceptMask3Reg = DontCare;
0800007C  13FC 00FF  335          move.b    #255,5242926
08000080  0050 002E 
                     336   ; Can0_TxErrCountReg = ClrByte;
08000084  4239 0050  337          clr.b     5242910
08000088  001E      
                     338   ; Can0_RxErrCountReg = ClrByte;
0800008A  4239 0050  339          clr.b     5242908
0800008E  001C      
                     340   ; // Configure Bus Timing
                     341   ; // Bit-rate = 100 kBit/s @ 25 MHz, bus is sample once
                     342   ; Can0_BusTiming0Reg = 0x04; // SJW | Presc;
08000090  13FC 0004  343          move.b    #4,5242892
08000094  0050 000C 
                     344   ; Can0_BusTiming1Reg = 0x7f; // TSEG2 | TSEG1;
08000098  13FC 007F  345          move.b    #127,5242894
0800009C  0050 000E 
                     346   ; // Configure CAN outputs: float on TX1, Push/Pull on TX0, normal output mode
                     347   ; Can0_OutControlReg = Tx1Float | Tx0PshPull | NormalMode;
080000A0  13FC 001A  348          move.b    #26,5242896
080000A4  0050 0010 
                     349   ; /* leave the reset mode/request i.e. switch to operating mode, 
                     350   ; the interrupts of the S87C654 are enabled but not the CAN interrupts of the SJA1000,
                     351   ; which can be done separately for the different tasks in a system */
                     352   ; /* clear Reset Mode bit, select dual Acceptance Filter Mode,
                     353   ; switch off Self Test Mode and Listen Only Mode, clear Sleep Mode (wake up) */
                     354   ; do /* wait until RM_RR_Bit is cleared */
                     355   Init_CanBus_Controller0_4:
                     356   ; {
                     357   ; Can0_ModeControlReg = ClrByte;
080000A8  4239 0050  358          clr.b     5242880
080000AC  0000      
080000AE  1039 0050  359          move.b    5242880,D0
080000B2  0000      
080000B4  C03C 0001  360          and.b     #1,D0
080000B8  66EE       361          bne       Init_CanBus_Controller0_4
                     362   ; } while((Can0_ModeControlReg & RM_RR_Bit ) != ClrByte);
                     363   ; Can0_CommandReg = RRB_Bit | CDO_Bit;    
080000BA  13FC 000C  364          move.b    #12,5242882
080000BE  0050 0002 
080000C2  4E75       365          rts
                     366   ; }
                     367   ; // initialisation for Can controller 1
                     368   ; void Init_CanBus_Controller1(void)
                     369   ; {
                     370   _Init_CanBus_Controller1:
                     371   ; // TODO - put your Canbus initialisation code for CanController 1 here
                     372   ; // See section 4.2.1 in the application note for details (PELICAN MODE)
                     373   ; // Can1_InterruptReg = DISABLE; /* disable all interrupts */
                     374   ; /* set reset mode/request (Note: after power-on SJA1000 is in BasicCAN mode)*/
                     375   ; while(Can1_ModeControlReg & RM_RR_Bit == ClrByte){
                     376   ; // Set Request reset mode (other bits remain unchanged)
                     377   ; Can1_ModeControlReg = Can1_ModeControlReg | RM_RR_Bit;
                     378   ; }
                     379   ; // Configure Clock Divider Register
                     380   ; Can1_ClockDivideReg = CANMode_Bit | CBP_Bit | DivBy1;
080000C4  13FC 00C7  381          move.b    #199,5243454
080000C8  0050 023E 
                     382   ; // Disable Can Interrupts
                     383   ; Can1_InterruptEnReg = ClrIntEnSJA;
080000CC  4239 0050  384          clr.b     5243400
080000D0  0208      
                     385   ; // Define Acceptance Code and Mask
                     386   ; Can1_AcceptCode0Reg = ClrByte;
080000D2  4239 0050  387          clr.b     5243424
080000D6  0220      
                     388   ; Can1_AcceptCode1Reg = ClrByte;
080000D8  4239 0050  389          clr.b     5243426
080000DC  0222      
                     390   ; Can1_AcceptCode2Reg = ClrByte;
080000DE  4239 0050  391          clr.b     5243428
080000E2  0224      
                     392   ; Can1_AcceptCode3Reg = ClrByte;
080000E4  4239 0050  393          clr.b     5243430
080000E8  0226      
                     394   ; Can1_AcceptMask0Reg = DontCare;
080000EA  13FC 00FF  395          move.b    #255,5243432
080000EE  0050 0228 
                     396   ; Can1_AcceptMask1Reg = DontCare;
080000F2  13FC 00FF  397          move.b    #255,5243434
080000F6  0050 022A 
                     398   ; Can1_AcceptMask2Reg = DontCare;
080000FA  13FC 00FF  399          move.b    #255,5243436
080000FE  0050 022C 
                     400   ; Can1_AcceptMask3Reg = DontCare;
08000102  13FC 00FF  401          move.b    #255,5243438
08000106  0050 022E 
                     402   ; Can1_TxErrCountReg = ClrByte;
0800010A  4239 0050  403          clr.b     5243422
0800010E  021E      
                     404   ; Can1_RxErrCountReg = ClrByte;
08000110  4239 0050  405          clr.b     5243420
08000114  021C      
                     406   ; // Configure Bus Timing
                     407   ; // Bit-rate = 100 kBit/s @ 25 MHz, bus is sample once
                     408   ; Can1_BusTiming0Reg = 0x04; // SJW | Presc;
08000116  13FC 0004  409          move.b    #4,5243404
0800011A  0050 020C 
                     410   ; Can1_BusTiming1Reg = 0x7f; // TSEG2 | TSEG1;
0800011E  13FC 007F  411          move.b    #127,5243406
08000122  0050 020E 
                     412   ; // Configure CAN outputs: float on TX1, Push/Pull on TX0, normal output mode
                     413   ; Can1_OutControlReg = Tx1Float | Tx0PshPull | NormalMode;
08000126  13FC 001A  414          move.b    #26,5243408
0800012A  0050 0210 
                     415   ; /* leave the reset mode/request i.e. switch to operating mode, 
                     416   ; the interrupts of the S87C654 are enabled but not the CAN interrupts of the SJA1000,
                     417   ; which can be done separately for the different tasks in a system */
                     418   ; /* clear Reset Mode bit, select dual Acceptance Filter Mode,
                     419   ; switch off Self Test Mode and Listen Only Mode, clear Sleep Mode (wake up) */
                     420   ; do /* wait until RM_RR_Bit is cleared */
                     421   Init_CanBus_Controller1_4:
                     422   ; {
                     423   ; Can1_ModeControlReg = ClrByte;
0800012E  4239 0050  424          clr.b     5243392
08000132  0200      
08000134  1039 0050  425          move.b    5243392,D0
08000138  0200      
0800013A  C03C 0001  426          and.b     #1,D0
0800013E  66EE       427          bne       Init_CanBus_Controller1_4
                     428   ; } while((Can1_ModeControlReg & RM_RR_Bit ) != ClrByte);
                     429   ; Can1_CommandReg = RRB_Bit | CDO_Bit;
08000140  13FC 000C  430          move.b    #12,5243394
08000144  0050 0202 
08000148  4E75       431          rts
                     432   ; /* disable all interrupts */
                     433   ; // Can0_InterruptReg = ClrIntEnSJA;
                     434   ; // Can0_InterruptEnReg = ClrIntEnSJA;
                     435   ; }
                     436   ; // Transmit for sending a message via Can controller 0
                     437   ; void CanBus0_Transmit(void)
                     438   ; {
                     439   _CanBus0_Transmit:
0800014A  2F02       440          move.l    D2,-(A7)
                     441   ; // TODO - put your Canbus transmit code for CanController 0 here
                     442   ; // See section 4.2.2 in the application note for details (PELICAN MODE)
                     443   ; unsigned int nodeAddress = 0x0355;
0800014C  243C 0000  444          move.l    #853,D2
08000150  0355      
                     445   ; /* wait until the Transmit Buffer is released */
                     446   ; while((Can0_StatusReg & TBS_Bit ) != TBS_Bit);
                     447   CanBus0_Transmit_1:
08000152  1039 0050  448          move.b    5242884,D0
08000156  0004      
08000158  C03C 0004  449          and.b     #4,D0
0800015C  0C00 0004  450          cmp.b     #4,D0
08000160  6702       451          beq.s     CanBus0_Transmit_3
08000162  60EE       452          bra       CanBus0_Transmit_1
                     453   CanBus0_Transmit_3:
                     454   ; /* Transmit Buffer is released, a message may be written into the buffer */
                     455   ; /* in this example a Standard Frame message shall be transmitted */
                     456   ; Can0_TxFrameInfo = 0x04; /* SFF (data), DLC=8 */
08000164  13FC 0004  457          move.b    #4,5242912
08000168  0050 0020 
                     458   ; Can0_TxBuffer1 = (nodeAddress >> 3); /* ID1 = A0, (0000 0000) */
0800016C  2002       459          move.l    D2,D0
0800016E  E688       460          lsr.l     #3,D0
08000170  13C0 0050  461          move.b    D0,5242914
08000174  0022      
                     462   ; Can0_TxBuffer2 =  (nodeAddress << 5); /* ID2 = A1, (0010 0000) */
08000176  2002       463          move.l    D2,D0
08000178  EB88       464          lsl.l     #5,D0
0800017A  13C0 0050  465          move.b    D0,5242916
0800017E  0024      
                     466   ; Can0_TxBuffer3 = 0x51; /* data1 = DE */
08000180  13FC 0051  467          move.b    #81,5242918
08000184  0050 0026 
                     468   ; Can0_TxBuffer4 = 0x52; /* data2 = ED */
08000188  13FC 0052  469          move.b    #82,5242920
0800018C  0050 0028 
                     470   ; Can0_TxBuffer5 = 0x53; /* data3 = BE */
08000190  13FC 0053  471          move.b    #83,5242922
08000194  0050 002A 
                     472   ; Can0_TxBuffer6 = 0x54; /* data4 = EF */
08000198  13FC 0054  473          move.b    #84,5242924
0800019C  0050 002C 
                     474   ; Can0_TxBuffer7 = 0x55; /* data5 = DE */
080001A0  13FC 0055  475          move.b    #85,5242926
080001A4  0050 002E 
                     476   ; Can0_TxBuffer8 = 0x56; /* data6 = AD */
080001A8  13FC 0056  477          move.b    #86,5242928
080001AC  0050 0030 
                     478   ; Can0_TxBuffer9 = 0x57; /* data7 = BE */
080001B0  13FC 0057  479          move.b    #87,5242930
080001B4  0050 0032 
                     480   ; Can0_TxBuffer10 = 0x58; /* data8 = EF */
080001B8  13FC 0058  481          move.b    #88,5242932
080001BC  0050 0034 
                     482   ; printf("Can0 StatusReg = 0x%X\r\n", Can0_StatusReg);
080001C0  1239 0050  483          move.b    5242884,D1
080001C4  0004      
080001C6  C2BC 0000  484          and.l     #255,D1
080001CA  00FF      
080001CC  2F01       485          move.l    D1,-(A7)
080001CE  4879 0800  486          pea       @canbus~1_1.L
080001D2  0EE6      
080001D4  4EB9 0800  487          jsr       _printf
080001D8  0522      
080001DA  504F       488          addq.w    #8,A7
                     489   ; printf("Can1 StatusReg = 0x%X\r\n", Can1_StatusReg);
080001DC  1239 0050  490          move.b    5243396,D1
080001E0  0204      
080001E2  C2BC 0000  491          and.l     #255,D1
080001E6  00FF      
080001E8  2F01       492          move.l    D1,-(A7)
080001EA  4879 0800  493          pea       @canbus~1_2.L
080001EE  0EFE      
080001F0  4EB9 0800  494          jsr       _printf
080001F4  0522      
080001F6  504F       495          addq.w    #8,A7
                     496   ; /* Start the transmission */
                     497   ; Can0_CommandReg = TR_Bit ; /* Set Transmission Request bit */
080001F8  13FC 0001  498          move.b    #1,5242882
080001FC  0050 0002 
08000200  241F       499          move.l    (A7)+,D2
08000202  4E75       500          rts
                     501   ; }
                     502   ; // Transmit for sending a message via Can controller 1
                     503   ; void CanBus1_Transmit(void)
                     504   ; {
                     505   _CanBus1_Transmit:
08000204  4E56 FFFC  506          link      A6,#-4
                     507   ; // TODO - put your Canbus transmit code for CanController 1 here
                     508   ; // See section 4.2.2 in the application note for details (PELICAN MODE)
                     509   ; int Node_Address = 0x355;
08000208  2D7C 0000  510          move.l    #853,-4(A6)
0800020C  0355 FFFC 
                     511   ; /* wait until the Transmit Buffer is released */
                     512   ; while((Can1_StatusReg & TBS_Bit ) != TBS_Bit);
                     513   CanBus1_Transmit_1:
08000210  1039 0050  514          move.b    5243396,D0
08000214  0204      
08000216  C03C 0004  515          and.b     #4,D0
0800021A  0C00 0004  516          cmp.b     #4,D0
0800021E  6702       517          beq.s     CanBus1_Transmit_3
08000220  60EE       518          bra       CanBus1_Transmit_1
                     519   CanBus1_Transmit_3:
                     520   ; /* Transmit Buffer is released, a message may be written into the buffer */
                     521   ; /* in this example a Standard Frame message shall be transmitted */
                     522   ; Can1_TxFrameInfo = 0x08; /* SFF (data), DLC=8 */
08000222  13FC 0008  523          move.b    #8,5243424
08000226  0050 0220 
                     524   ; Can1_TxBuffer1 = 0x00; /* ID1 = A0, (0000 0000) */
0800022A  4239 0050  525          clr.b     5243426
0800022E  0222      
                     526   ; Can1_TxBuffer2 = 0x20; /* ID2 = A1, (0010 0000) */
08000230  13FC 0020  527          move.b    #32,5243428
08000234  0050 0224 
                     528   ; Can1_TxBuffer3 = 0x51; /* data1 = DE */
08000238  13FC 0051  529          move.b    #81,5243430
0800023C  0050 0226 
                     530   ; Can1_TxBuffer4 = 0x52; /* data2 = ED */
08000240  13FC 0052  531          move.b    #82,5243432
08000244  0050 0228 
                     532   ; Can1_TxBuffer5 = 0x53; /* data3 = BE */
08000248  13FC 0053  533          move.b    #83,5243434
0800024C  0050 022A 
                     534   ; Can1_TxBuffer6 = 0x54; /* data4 = EF */
08000250  13FC 0054  535          move.b    #84,5243436
08000254  0050 022C 
                     536   ; Can1_TxBuffer7 = 0x55; /* data5 = DE */
08000258  13FC 0055  537          move.b    #85,5243438
0800025C  0050 022E 
                     538   ; Can1_TxBuffer8 = 0x56; /* data6 = AD */
08000260  13FC 0056  539          move.b    #86,5243440
08000264  0050 0230 
                     540   ; Can1_TxBuffer9 = 0x57; /* data7 = BE */
08000268  13FC 0057  541          move.b    #87,5243442
0800026C  0050 0232 
                     542   ; Can1_TxBuffer10 = 0x58; /* data8 = EF */
08000270  13FC 0058  543          move.b    #88,5243444
08000274  0050 0234 
                     544   ; /* Start the transmission */
                     545   ; Can1_CommandReg = TR_Bit ; /* Set Transmission Request bit */
08000278  13FC 0001  546          move.b    #1,5243394
0800027C  0050 0202 
08000280  4E5E       547          unlk      A6
08000282  4E75       548          rts
                     549   ; }
                     550   ; // Receive for reading a received message via Can controller 0
                     551   ; void CanBus0_Receive(void)
                     552   ; {
                     553   _CanBus0_Receive:
08000284  4E56 FFFC  554          link      A6,#-4
                     555   ; // TODO - put your Canbus receive code for CanController 0 here
                     556   ; // See section 4.2.4 in the application note for details (PELICAN MODE)
                     557   ; char recievedByte;
                     558   ; while((Can0_StatusReg & RBS_Bit) != RBS_Bit){
                     559   CanBus0_Receive_1:
08000288  1039 0050  560          move.b    5242884,D0
0800028C  0004      
0800028E  C03C 0001  561          and.b     #1,D0
08000292  0C00 0001  562          cmp.b     #1,D0
08000296  671E       563          beq.s     CanBus0_Receive_3
                     564   ; printf("Can0_StatusReg = 0x%X\r\n", Can0_StatusReg);
08000298  1239 0050  565          move.b    5242884,D1
0800029C  0004      
0800029E  C2BC 0000  566          and.l     #255,D1
080002A2  00FF      
080002A4  2F01       567          move.l    D1,-(A7)
080002A6  4879 0800  568          pea       @canbus~1_3.L
080002AA  0F16      
080002AC  4EB9 0800  569          jsr       _printf
080002B0  0522      
080002B2  504F       570          addq.w    #8,A7
080002B4  60D2       571          bra       CanBus0_Receive_1
                     572   CanBus0_Receive_3:
                     573   ; };
                     574   ; recievedByte = Can0_RxBuffer1;
080002B6  1D79 0050  575          move.b    5242914,-1(A6)
080002BA  0022 FFFF 
                     576   ; Can0_CommandReg = RRB_Bit;
080002BE  13FC 0004  577          move.b    #4,5242882
080002C2  0050 0002 
                     578   ; printf("\r\n Recieved Byte @ CanBus0 = %d\r\n", recievedByte);
080002C6  122E FFFF  579          move.b    -1(A6),D1
080002CA  4881       580          ext.w     D1
080002CC  48C1       581          ext.l     D1
080002CE  2F01       582          move.l    D1,-(A7)
080002D0  4879 0800  583          pea       @canbus~1_4.L
080002D4  0F2E      
080002D6  4EB9 0800  584          jsr       _printf
080002DA  0522      
080002DC  504F       585          addq.w    #8,A7
080002DE  4E5E       586          unlk      A6
080002E0  4E75       587          rts
                     588   ; }
                     589   ; // Receive for reading a received message via Can controller 1
                     590   ; void CanBus1_Receive(void)
                     591   ; {
                     592   _CanBus1_Receive:
080002E2  4E56 FFFC  593          link      A6,#-4
080002E6  2F0A       594          move.l    A2,-(A7)
080002E8  45F9 0800  595          lea       _printf.L,A2
080002EC  0522      
                     596   ; // TODO - put your Canbus receive code for CanController 1 here
                     597   ; // See section 4.2.4 in the application note for details (PELICAN MODE)
                     598   ; char recievedByte;
                     599   ; while((Can1_StatusReg & RBS_Bit) != RBS_Bit){
                     600   CanBus1_Receive_1:
080002EE  1039 0050  601          move.b    5243396,D0
080002F2  0204      
080002F4  C03C 0001  602          and.b     #1,D0
080002F8  0C00 0001  603          cmp.b     #1,D0
080002FC  6732       604          beq.s     CanBus1_Receive_3
                     605   ; printf("Can0_StatusReg = 0x%X\r\n", Can0_StatusReg);
080002FE  1239 0050  606          move.b    5242884,D1
08000302  0004      
08000304  C2BC 0000  607          and.l     #255,D1
08000308  00FF      
0800030A  2F01       608          move.l    D1,-(A7)
0800030C  4879 0800  609          pea       @canbus~1_3.L
08000310  0F16      
08000312  4E92       610          jsr       (A2)
08000314  504F       611          addq.w    #8,A7
                     612   ; printf("Can1_StatusReg = 0x%X\r\n", Can1_StatusReg);
08000316  1239 0050  613          move.b    5243396,D1
0800031A  0204      
0800031C  C2BC 0000  614          and.l     #255,D1
08000320  00FF      
08000322  2F01       615          move.l    D1,-(A7)
08000324  4879 0800  616          pea       @canbus~1_5.L
08000328  0F50      
0800032A  4E92       617          jsr       (A2)
0800032C  504F       618          addq.w    #8,A7
0800032E  60BE       619          bra       CanBus1_Receive_1
                     620   CanBus1_Receive_3:
                     621   ; };
                     622   ; recievedByte = Can1_RxBuffer1;
08000330  1D79 0050  623          move.b    5243426,-1(A6)
08000334  0222 FFFF 
                     624   ; Can1_CommandReg = RRB_Bit;
08000338  13FC 0004  625          move.b    #4,5243394
0800033C  0050 0202 
                     626   ; printf("\r\n Recieved Byte @ CanBus1 = %d\r\n", recievedByte);
08000340  122E FFFF  627          move.b    -1(A6),D1
08000344  4881       628          ext.w     D1
08000346  48C1       629          ext.l     D1
08000348  2F01       630          move.l    D1,-(A7)
0800034A  4879 0800  631          pea       @canbus~1_6.L
0800034E  0F68      
08000350  4E92       632          jsr       (A2)
08000352  504F       633          addq.w    #8,A7
08000354  245F       634          move.l    (A7)+,A2
08000356  4E5E       635          unlk      A6
08000358  4E75       636          rts
                     637   ; }
                     638   ; void delay(int seconds)
                     639   ; {   // this function needs to be finetuned for the specific microprocessor
                     640   _delay:
0800035A  4E56 FFF4  641          link      A6,#-12
0800035E  48E7 3800  642          movem.l   D2/D3/D4,-(A7)
                     643   ; int i, j, k;
                     644   ; int wait_loop0 = 10000;
08000362  2D7C 0000  645          move.l    #10000,-8(A6)
08000366  2710 FFF8 
                     646   ; int wait_loop1 = 6000;
0800036A  2D7C 0000  647          move.l    #6000,-4(A6)
0800036E  1770 FFFC 
                     648   ; for(i = 0; i < seconds; i++)
08000372  4284       649          clr.l     D4
                     650   delay_1:
08000374  B8AE 0008  651          cmp.l     8(A6),D4
08000378  6C00 0048  652          bge       delay_3
                     653   ; {
                     654   ; for(j = 0; j < wait_loop0; j++)
0800037C  4283       655          clr.l     D3
                     656   delay_4:
0800037E  B6AE FFF8  657          cmp.l     -8(A6),D3
08000382  6C00 003A  658          bge       delay_6
                     659   ; {
                     660   ; for(k = 0; k < wait_loop1; k++)
08000386  4282       661          clr.l     D2
                     662   delay_7:
08000388  B4AE FFFC  663          cmp.l     -4(A6),D2
0800038C  6C2C       664          bge.s     delay_9
                     665   ; {   // waste function, volatile makes sure it is not being optimized out by compiler
                     666   ; int volatile t = 120 * j * i + k;
0800038E  2F03       667          move.l    D3,-(A7)
08000390  4878 0078  668          pea       120
08000394  4EB9 0800  669          jsr       LMUL
08000398  0494      
0800039A  2017       670          move.l    (A7),D0
0800039C  504F       671          addq.w    #8,A7
0800039E  2F00       672          move.l    D0,-(A7)
080003A0  2F04       673          move.l    D4,-(A7)
080003A2  4EB9 0800  674          jsr       LMUL
080003A6  0494      
080003A8  2017       675          move.l    (A7),D0
080003AA  504F       676          addq.w    #8,A7
080003AC  D082       677          add.l     D2,D0
080003AE  2D40 FFF4  678          move.l    D0,-12(A6)
                     679   ; t = t + 5;
080003B2  5AAE FFF4  680          addq.l    #5,-12(A6)
080003B6  5282       681          addq.l    #1,D2
080003B8  60CE       682          bra       delay_7
                     683   delay_9:
080003BA  5283       684          addq.l    #1,D3
080003BC  60C0       685          bra       delay_4
                     686   delay_6:
080003BE  5284       687          addq.l    #1,D4
080003C0  60B2       688          bra       delay_1
                     689   delay_3:
080003C2  4CDF 001C  690          movem.l   (A7)+,D2/D3/D4
080003C6  4E5E       691          unlk      A6
080003C8  4E75       692          rts
                     693   ; }
                     694   ; }
                     695   ; }
                     696   ; }
                     697   ; void CanBusTest(void)
                     698   ; {
                     699   _CanBusTest:
080003CA  2F0A       700          move.l    A2,-(A7)
080003CC  45F9 0800  701          lea       _printf.L,A2
080003D0  0522      
                     702   ; // initialise the two Can controllers
                     703   ; Init_CanBus_Controller0();
080003D2  4EB9 0800  704          jsr       _Init_CanBus_Controller0
080003D6  003E      
                     705   ; Init_CanBus_Controller1();
080003D8  4EB9 0800  706          jsr       _Init_CanBus_Controller1
080003DC  00C4      
                     707   ; printf("\r\n\r\n---- CANBUS Test ----\r\n") ;
080003DE  4879 0800  708          pea       @canbus~1_7.L
080003E2  0F8A      
080003E4  4E92       709          jsr       (A2)
080003E6  584F       710          addq.w    #4,A7
                     711   ; // simple application to alternately transmit and receive messages from each of two nodes
                     712   ; // while(1)
                     713   ; // {
                     714   ; // delay(1);                    // write a routine to delay say 1/2 second so we don't flood the network with messages too quickly
                     715   ; printf("Hellooo!!\r\n");
080003E8  4879 0800  716          pea       @canbus~1_8.L
080003EC  0FA6      
080003EE  4E92       717          jsr       (A2)
080003F0  584F       718          addq.w    #4,A7
                     719   ; CanBus0_Transmit() ;       // transmit a message via Controller 0
080003F2  4EB9 0800  720          jsr       _CanBus0_Transmit
080003F6  014A      
                     721   ; printf("I am here 1 \r\n");
080003F8  4879 0800  722          pea       @canbus~1_9.L
080003FC  0FB2      
080003FE  4E92       723          jsr       (A2)
08000400  584F       724          addq.w    #4,A7
                     725   ; CanBus1_Receive() ;        // receive a message via Controller 1 (and display it)
08000402  4EB9 0800  726          jsr       _CanBus1_Receive
08000406  02E2      
                     727   ; printf("I am here 2 \r\n");
08000408  4879 0800  728          pea       @canbus~1_10.L
0800040C  0FC2      
0800040E  4E92       729          jsr       (A2)
08000410  584F       730          addq.w    #4,A7
                     731   ; printf("\r\n") ;
08000412  4879 0800  732          pea       @canbus~1_11.L
08000416  0FD2      
08000418  4E92       733          jsr       (A2)
0800041A  584F       734          addq.w    #4,A7
0800041C  245F       735          move.l    (A7)+,A2
0800041E  4E75       736          rts
                     737   ; // delay(1);                    // write a routine to delay say 1/2 second so we don't flood the network with messages too quickly
                     738   ; // CanBus1_Transmit() ;        // transmit a message via Controller 1
                     739   ; // printf("I am here 3 \r\n");
                     740   ; // CanBus0_Receive() ;         // receive a message via Controller 0 (and display it)
                     741   ; // printf("I am here 4 \r\n");
                     742   ; // printf("\r\n") ;
                     743   ; // }
                     744   ; }
                     745   ; int _getch( void )
                     746   ; {
                     747   __getch:
08000420  4E56 FFFC  748          link      A6,#-4
                     749   ; char c ;
                     750   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     751   _getch_1:
08000424  1039 0040  752          move.b    4194368,D0
08000428  0040      
0800042A  C03C 0001  753          and.b     #1,D0
0800042E  0C00 0001  754          cmp.b     #1,D0
08000432  6702       755          beq.s     _getch_3
08000434  60EE       756          bra       _getch_1
                     757   _getch_3:
                     758   ; ;
                     759   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
08000436  1039 0040  760          move.b    4194370,D0
0800043A  0042      
0800043C  C0BC 0000  761          and.l     #255,D0
08000440  00FF      
08000442  C0BC 0000  762          and.l     #127,D0
08000446  007F      
08000448  4E5E       763          unlk      A6
0800044A  4E75       764          rts
                     765   ; }
                     766   ; int _putch( int c)
                     767   ; {
                     768   __putch:
0800044C  4E56 0000  769          link      A6,#0
                     770   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     771   _putch_1:
08000450  1039 0040  772          move.b    4194368,D0
08000454  0040      
08000456  C03C 0002  773          and.b     #2,D0
0800045A  0C00 0002  774          cmp.b     #2,D0
0800045E  6702       775          beq.s     _putch_3
08000460  60EE       776          bra       _putch_1
                     777   _putch_3:
                     778   ; ;
                     779   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
08000462  202E 0008  780          move.l    8(A6),D0
08000466  C0BC 0000  781          and.l     #127,D0
0800046A  007F      
0800046C  13C0 0040  782          move.b    D0,4194370
08000470  0042      
                     783   ; return c ;                                              // putchar() expects the character to be returned
08000472  202E 0008  784          move.l    8(A6),D0
08000476  4E5E       785          unlk      A6
08000478  4E75       786          rts
                     787   ; }
                     788   ; void main(void){
                     789   _main:
                     790   ; CanBusTest();
0800047A  4EB9 0800  791          jsr       _CanBusTest
0800047E  03CA      
                     792   ; while(1);
                     793   main_1:
08000480  60FE       794          bra       main_1
                     795   ; }
                     796   ULMUL:
08000482  4E56 0000  797          link    A6,#0
08000486  48E7 C000  798          movem.l D0/D1,-(A7)
0800048A  222E 0008  799          move.l  8(A6),D1
0800048E  202E 000C  800          move.l  12(A6),D0
08000492  602C       801          bra.s   lmul_3
                     802   LMUL:
08000494  4E56 0000  803          link    A6,#0
08000498  48E7 C000  804          movem.l D0/D1,-(A7)
0800049C  222E 0008  805          move.l  8(A6),D1
080004A0  202E 000C  806          move.l  12(A6),D0
080004A4  4A80       807          tst.l   D0
080004A6  6A0A       808          bpl.s   lmul_1
080004A8  4480       809          neg.l   D0
080004AA  4A81       810          tst.l   D1
080004AC  6A0A       811          bpl.s   lmul_2
080004AE  4481       812          neg.l   D1
080004B0  600E       813          bra.s   lmul_3
                     814   lmul_1:
080004B2  4A81       815          tst.l   D1
080004B4  6A0A       816          bpl.s   lmul_3
080004B6  4481       817          neg.l   D1
                     818   lmul_2:
080004B8  6114       819          bsr.s   domul
080004BA  4481       820          neg.l   D1
080004BC  4080       821          negx.l  D0
080004BE  6002       822          bra.s   lmul_4
                     823   lmul_3:
080004C0  610C       824          bsr.s   domul
                     825   lmul_4:
080004C2  2D41 0008  826          move.l  D1,8(A6)
080004C6  4CDF 0003  827          movem.l (A7)+,D0/D1
080004CA  4E5E       828          unlk    A6
080004CC  4E75       829          rts
                     830   domul:
080004CE  0C81 0000  831          cmpi.l  #$FFFF,D1
080004D2  FFFF      
080004D4  620C       832          bhi.s   domul_1
080004D6  0C80 0000  833          cmpi.l  #$FFFF,D0
080004DA  FFFF      
080004DC  620E       834          bhi.s   domul_2
080004DE  C2C0       835          mulu    D0,D1
080004E0  4E75       836          rts
                     837   domul_1:
080004E2  0C80 0000  838          cmpi.l  #$FFFF,D0
080004E6  FFFF      
080004E8  6218       839          bhi.s   domul_4
080004EA  6002       840          bra.s   domul_3
                     841   domul_2
080004EC  C141       842          exg     D0,D1
                     843   domul_3:
080004EE  2F02       844          move.l  D2,-(A7)
080004F0  2401       845          move.l  D1,D2
080004F2  4842       846          swap    D2
080004F4  C2C0       847          mulu    D0,D1
080004F6  C4C0       848          mulu    D0,D2
080004F8  4842       849          swap    D2
080004FA  4242       850          clr.w   D2
080004FC  D282       851          add.l   D2,D1
080004FE  241F       852          move.l  (A7)+,D2
08000500  4E75       853          rts
                     854   domul_4:
08000502  48E7 3000  855          movem.l D2/D3,-(A7)
08000506  2401       856          move.l  D1,D2
08000508  2601       857          move.l  D1,D3
0800050A  C2C0       858          mulu    D0,D1
0800050C  4842       859          swap    D2
0800050E  C4C0       860          mulu    D0,D2
08000510  4840       861          swap    D0
08000512  C6C0       862          mulu    D0,D3
08000514  D483       863          add.l   D3,D2
08000516  4842       864          swap    D2
08000518  4242       865          clr.w   D2
0800051A  D282       866          add.l   D2,D1
0800051C  4CDF 000C  867          movem.l (A7)+,D2/D3
08000520  4E75       868          rts
                     869   _printf:
08000522  4E56 FFFC  870          link      A6,#-4
08000526  2F02       871          move.l    D2,-(A7)
08000528  41EE 0008  872          lea       8(A6),A0
0800052C  5848       873          addq.w    #4,A0
0800052E  2408       874          move.l    A0,D2
08000530  2F02       875          move.l    D2,-(A7)
08000532  2F2E 0008  876          move.l    8(A6),-(A7)
08000536  42A7       877          clr.l     -(A7)
08000538  4EB9 0800  878          jsr       _doprint
0800053C  05FA      
0800053E  DEFC 000C  879          add.w     #12,A7
08000542  2D40 FFFC  880          move.l    D0,-4(A6)
08000546  4282       881          clr.l     D2
08000548  202E FFFC  882          move.l    -4(A6),D0
0800054C  241F       883          move.l    (A7)+,D2
0800054E  4E5E       884          unlk      A6
08000550  4E75       885          rts
                     886   @doprint_copy:
08000552  4E56 0000  887          link      A6,#0
08000556  206E 0008  888          move.l    8(A6),A0
0800055A  4A90       889          tst.l     (A0)
0800055C  6710       890          beq.s     @doprint_copy_1
0800055E  202E 000C  891          move.l    12(A6),D0
08000562  206E 0008  892          move.l    8(A6),A0
08000566  2250       893          move.l    (A0),A1
08000568  5290       894          addq.l    #1,(A0)
0800056A  1280       895          move.b    D0,(A1)
0800056C  600C       896          bra.s     @doprint_copy_2
                     897   @doprint_copy_1:
0800056E  2F2E 000C  898          move.l    12(A6),-(A7)
08000572  4EB9 0800  899          jsr       _putch
08000576  0DAC      
08000578  584F       900          addq.w    #4,A7
                     901   @doprint_copy_2:
0800057A  4E5E       902          unlk      A6
0800057C  4E75       903          rts
                     904   @doprint_getval:
0800057E  4E56 0000  905          link      A6,#0
08000582  48E7 3000  906          movem.l   D2/D3,-(A7)
08000586  262E 0008  907          move.l    8(A6),D3
0800058A  4282       908          clr.l     D2
0800058C  2043       909          move.l    D3,A0
0800058E  2050       910          move.l    (A0),A0
08000590  1010       911          move.b    (A0),D0
08000592  0C00 002A  912          cmp.b     #42,D0
08000596  6612       913          bne.s     @doprint_getval_1
08000598  206E 000C  914          move.l    12(A6),A0
0800059C  2250       915          move.l    (A0),A1
0800059E  5890       916          addq.l    #4,(A0)
080005A0  2411       917          move.l    (A1),D2
080005A2  2043       918          move.l    D3,A0
080005A4  5290       919          addq.l    #1,(A0)
080005A6  6000 0048  920          bra       @doprint_getval_5
                     921   @doprint_getval_1:
080005AA  7001       922          moveq     #1,D0
080005AC  2043       923          move.l    D3,A0
080005AE  2050       924          move.l    (A0),A0
080005B0  1210       925          move.b    (A0),D1
080005B2  4881       926          ext.w     D1
080005B4  48C1       927          ext.l     D1
080005B6  D081       928          add.l     D1,D0
080005B8  41F9 0800  929          lea       __ctype.L,A0
080005BC  0FE2      
080005BE  1030 0800  930          move.b    0(A0,D0.L),D0
080005C2  C03C 0004  931          and.b     #4,D0
080005C6  6728       932          beq.s     @doprint_getval_5
080005C8  2F02       933          move.l    D2,-(A7)
080005CA  4878 000A  934          pea       10
080005CE  4EB9 0800  935          jsr       LMUL
080005D2  0494      
080005D4  2017       936          move.l    (A7),D0
080005D6  504F       937          addq.w    #8,A7
080005D8  2043       938          move.l    D3,A0
080005DA  2250       939          move.l    (A0),A1
080005DC  5290       940          addq.l    #1,(A0)
080005DE  1211       941          move.b    (A1),D1
080005E0  4881       942          ext.w     D1
080005E2  48C1       943          ext.l     D1
080005E4  D081       944          add.l     D1,D0
080005E6  0480 0000  945          sub.l     #48,D0
080005EA  0030      
080005EC  2400       946          move.l    D0,D2
080005EE  60BA       947          bra       @doprint_getval_1
                     948   @doprint_getval_5:
080005F0  2002       949          move.l    D2,D0
080005F2  4CDF 000C  950          movem.l   (A7)+,D2/D3
080005F6  4E5E       951          unlk      A6
080005F8  4E75       952          rts
                     953   _doprint:
080005FA  4E56 FFCC  954          link      A6,#-52
080005FE  48E7 3F3C  955          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
08000602  45EE 0008  956          lea       8(A6),A2
08000606  47F9 0800  957          lea       @doprint_copy.L,A3
0800060A  0552      
0800060C  49F9 0800  958          lea       _ultoa.L,A4
08000610  0D34      
08000612  4286       959          clr.l     D6
                     960   doprint_1:
08000614  206E 000C  961          move.l    12(A6),A0
08000618  4A10       962          tst.b     (A0)
0800061A  6700 05F0  963          beq       doprint_3
0800061E  206E 000C  964          move.l    12(A6),A0
08000622  1010       965          move.b    (A0),D0
08000624  0C00 0025  966          cmp.b     #37,D0
08000628  671C       967          beq.s     doprint_4
0800062A  206E 000C  968          move.l    12(A6),A0
0800062E  52AE 000C  969          addq.l    #1,12(A6)
08000632  1210       970          move.b    (A0),D1
08000634  4881       971          ext.w     D1
08000636  48C1       972          ext.l     D1
08000638  2F01       973          move.l    D1,-(A7)
0800063A  2F0A       974          move.l    A2,-(A7)
0800063C  4E93       975          jsr       (A3)
0800063E  504F       976          addq.w    #8,A7
08000640  5286       977          addq.l    #1,D6
08000642  6000 05C4  978          bra       doprint_2
                     979   doprint_4:
08000646  52AE 000C  980          addq.l    #1,12(A6)
0800064A  422E FFD3  981          clr.b     -45(A6)
0800064E  422E FFD2  982          clr.b     -46(A6)
08000652  422E FFD0  983          clr.b     -48(A6)
08000656  422E FFCF  984          clr.b     -49(A6)
0800065A  422E FFCE  985          clr.b     -50(A6)
0800065E  422E FFCD  986          clr.b     -51(A6)
08000662  42AE FFFC  987          clr.l     -4(A6)
08000666  7AFF       988          moveq     #-1,D5
08000668  41EE FFDC  989          lea       -36(A6),A0
0800066C  2608       990          move.l    A0,D3
0800066E  2408       991          move.l    A0,D2
                     992   doprint_6:
08000670  206E 000C  993          move.l    12(A6),A0
08000674  1010       994          move.b    (A0),D0
08000676  4880       995          ext.w     D0
08000678  48C0       996          ext.l     D0
0800067A  0C80 0000  997          cmp.l     #43,D0
0800067E  002B      
08000680  6730       998          beq.s     doprint_12
08000682  6E18       999          bgt.s     doprint_15
08000684  0C80 0000 1000          cmp.l     #35,D0
08000688  0023      
0800068A  6700 003E 1001          beq       doprint_14
0800068E  6E00 0046 1002          bgt       doprint_9
08000692  0C80 0000 1003          cmp.l     #32,D0
08000696  0020      
08000698  6724      1004          beq.s     doprint_13
0800069A  603A      1005          bra.s     doprint_9
                    1006   doprint_15:
0800069C  0C80 0000 1007          cmp.l     #45,D0
080006A0  002D      
080006A2  6702      1008          beq.s     doprint_11
080006A4  6030      1009          bra.s     doprint_9
                    1010   doprint_11:
080006A6  1D7C 0001 1011          move.b    #1,-51(A6)
080006AA  FFCD      
080006AC  52AE 000C 1012          addq.l    #1,12(A6)
080006B0  6026      1013          bra.s     doprint_7
                    1014   doprint_12:
080006B2  1D7C 0001 1015          move.b    #1,-50(A6)
080006B6  FFCE      
080006B8  52AE 000C 1016          addq.l    #1,12(A6)
080006BC  601A      1017          bra.s     doprint_7
                    1018   doprint_13:
080006BE  1D7C 0001 1019          move.b    #1,-49(A6)
080006C2  FFCF      
080006C4  52AE 000C 1020          addq.l    #1,12(A6)
080006C8  600E      1021          bra.s     doprint_7
                    1022   doprint_14:
080006CA  1D7C 0001 1023          move.b    #1,-48(A6)
080006CE  FFD0      
080006D0  52AE 000C 1024          addq.l    #1,12(A6)
080006D4  6002      1025          bra.s     doprint_7
                    1026   doprint_9:
080006D6  6002      1027          bra.s     doprint_8
                    1028   doprint_7:
080006D8  6096      1029          bra       doprint_6
                    1030   doprint_8:
080006DA  206E 000C 1031          move.l    12(A6),A0
080006DE  1010      1032          move.b    (A0),D0
080006E0  0C00 0030 1033          cmp.b     #48,D0
080006E4  660A      1034          bne.s     doprint_16
080006E6  52AE 000C 1035          addq.l    #1,12(A6)
080006EA  1D7C 0001 1036          move.b    #1,-46(A6)
080006EE  FFD2      
                    1037   doprint_16:
080006F0  486E 0010 1038          pea       16(A6)
080006F4  486E 000C 1039          pea       12(A6)
080006F8  4EB9 0800 1040          jsr       @doprint_getval
080006FC  057E      
080006FE  504F      1041          addq.w    #8,A7
08000700  2A40      1042          move.l    D0,A5
08000702  206E 000C 1043          move.l    12(A6),A0
08000706  1010      1044          move.b    (A0),D0
08000708  0C00 002E 1045          cmp.b     #46,D0
0800070C  6616      1046          bne.s     doprint_18
0800070E  52AE 000C 1047          addq.l    #1,12(A6)
08000712  486E 0010 1048          pea       16(A6)
08000716  486E 000C 1049          pea       12(A6)
0800071A  4EB9 0800 1050          jsr       @doprint_getval
0800071E  057E      
08000720  504F      1051          addq.w    #8,A7
08000722  2A00      1052          move.l    D0,D5
                    1053   doprint_18:
08000724  206E 000C 1054          move.l    12(A6),A0
08000728  1010      1055          move.b    (A0),D0
0800072A  0C00 006C 1056          cmp.b     #108,D0
0800072E  660A      1057          bne.s     doprint_20
08000730  52AE 000C 1058          addq.l    #1,12(A6)
08000734  1D7C 0001 1059          move.b    #1,-45(A6)
08000738  FFD3      
                    1060   doprint_20:
0800073A  206E 000C 1061          move.l    12(A6),A0
0800073E  1010      1062          move.b    (A0),D0
08000740  4880      1063          ext.w     D0
08000742  48C0      1064          ext.l     D0
08000744  0C80 0000 1065          cmp.l     #111,D0
08000748  006F      
0800074A  6700 00D8 1066          beq       doprint_27
0800074E  6E34      1067          bgt.s     doprint_33
08000750  0C80 0000 1068          cmp.l     #100,D0
08000754  0064      
08000756  6700 0054 1069          beq       doprint_24
0800075A  6E1C      1070          bgt.s     doprint_34
0800075C  0C80 0000 1071          cmp.l     #99,D0
08000760  0063      
08000762  6700 0130 1072          beq       doprint_30
08000766  6E00 0174 1073          bgt       doprint_22
0800076A  0C80 0000 1074          cmp.l     #88,D0
0800076E  0058      
08000770  6700 00EA 1075          beq       doprint_28
08000774  6000 0166 1076          bra       doprint_22
                    1077   doprint_34:
08000778  0C80 0000 1078          cmp.l     #105,D0
0800077C  0069      
0800077E  672C      1079          beq.s     doprint_24
08000780  6000 015A 1080          bra       doprint_22
                    1081   doprint_33:
08000784  0C80 0000 1082          cmp.l     #117,D0
08000788  0075      
0800078A  6700 0060 1083          beq       doprint_26
0800078E  6E0E      1084          bgt.s     doprint_35
08000790  0C80 0000 1085          cmp.l     #115,D0
08000794  0073      
08000796  6700 0124 1086          beq       doprint_31
0800079A  6000 0140 1087          bra       doprint_22
                    1088   doprint_35:
0800079E  0C80 0000 1089          cmp.l     #120,D0
080007A2  0078      
080007A4  6700 00B6 1090          beq       doprint_28
080007A8  6000 0132 1091          bra       doprint_22
                    1092   doprint_24:
080007AC  4A2E FFD3 1093          tst.b     -45(A6)
080007B0  671C      1094          beq.s     doprint_36
080007B2  4878 000A 1095          pea       10
080007B6  2F03      1096          move.l    D3,-(A7)
080007B8  206E 0010 1097          move.l    16(A6),A0
080007BC  58AE 0010 1098          addq.l    #4,16(A6)
080007C0  2F10      1099          move.l    (A0),-(A7)
080007C2  4EB9 0800 1100          jsr       _ltoa
080007C6  0CAC      
080007C8  DEFC 000C 1101          add.w     #12,A7
080007CC  601A      1102          bra.s     doprint_37
                    1103   doprint_36:
080007CE  4878 000A 1104          pea       10
080007D2  2F03      1105          move.l    D3,-(A7)
080007D4  206E 0010 1106          move.l    16(A6),A0
080007D8  58AE 0010 1107          addq.l    #4,16(A6)
080007DC  2F10      1108          move.l    (A0),-(A7)
080007DE  4EB9 0800 1109          jsr       _ltoa
080007E2  0CAC      
080007E4  DEFC 000C 1110          add.w     #12,A7
                    1111   doprint_37:
080007E8  6000 0100 1112          bra       doprint_23
                    1113   doprint_26:
080007EC  4A2E FFD3 1114          tst.b     -45(A6)
080007F0  6718      1115          beq.s     doprint_38
080007F2  4878 000A 1116          pea       10
080007F6  2F03      1117          move.l    D3,-(A7)
080007F8  206E 0010 1118          move.l    16(A6),A0
080007FC  58AE 0010 1119          addq.l    #4,16(A6)
08000800  2F10      1120          move.l    (A0),-(A7)
08000802  4E94      1121          jsr       (A4)
08000804  DEFC 000C 1122          add.w     #12,A7
08000808  6016      1123          bra.s     doprint_39
                    1124   doprint_38:
0800080A  4878 000A 1125          pea       10
0800080E  2F03      1126          move.l    D3,-(A7)
08000810  206E 0010 1127          move.l    16(A6),A0
08000814  58AE 0010 1128          addq.l    #4,16(A6)
08000818  2F10      1129          move.l    (A0),-(A7)
0800081A  4E94      1130          jsr       (A4)
0800081C  DEFC 000C 1131          add.w     #12,A7
                    1132   doprint_39:
08000820  6000 00C8 1133          bra       doprint_23
                    1134   doprint_27:
08000824  4A2E FFD3 1135          tst.b     -45(A6)
08000828  6718      1136          beq.s     doprint_40
0800082A  4878 0008 1137          pea       8
0800082E  2F03      1138          move.l    D3,-(A7)
08000830  206E 0010 1139          move.l    16(A6),A0
08000834  58AE 0010 1140          addq.l    #4,16(A6)
08000838  2F10      1141          move.l    (A0),-(A7)
0800083A  4E94      1142          jsr       (A4)
0800083C  DEFC 000C 1143          add.w     #12,A7
08000840  6016      1144          bra.s     doprint_41
                    1145   doprint_40:
08000842  4878 0008 1146          pea       8
08000846  2F03      1147          move.l    D3,-(A7)
08000848  206E 0010 1148          move.l    16(A6),A0
0800084C  58AE 0010 1149          addq.l    #4,16(A6)
08000850  2F10      1150          move.l    (A0),-(A7)
08000852  4E94      1151          jsr       (A4)
08000854  DEFC 000C 1152          add.w     #12,A7
                    1153   doprint_41:
08000858  6000 0090 1154          bra       doprint_23
                    1155   doprint_28:
0800085C  4A2E FFD3 1156          tst.b     -45(A6)
08000860  6718      1157          beq.s     doprint_42
08000862  4878 0010 1158          pea       16
08000866  2F03      1159          move.l    D3,-(A7)
08000868  206E 0010 1160          move.l    16(A6),A0
0800086C  58AE 0010 1161          addq.l    #4,16(A6)
08000870  2F10      1162          move.l    (A0),-(A7)
08000872  4E94      1163          jsr       (A4)
08000874  DEFC 000C 1164          add.w     #12,A7
08000878  6016      1165          bra.s     doprint_43
                    1166   doprint_42:
0800087A  4878 0010 1167          pea       16
0800087E  2F03      1168          move.l    D3,-(A7)
08000880  206E 0010 1169          move.l    16(A6),A0
08000884  58AE 0010 1170          addq.l    #4,16(A6)
08000888  2F10      1171          move.l    (A0),-(A7)
0800088A  4E94      1172          jsr       (A4)
0800088C  DEFC 000C 1173          add.w     #12,A7
                    1174   doprint_43:
08000890  6000 0058 1175          bra       doprint_23
                    1176   doprint_30:
08000894  206E 0010 1177          move.l    16(A6),A0
08000898  58AE 0010 1178          addq.l    #4,16(A6)
0800089C  2010      1179          move.l    (A0),D0
0800089E  2042      1180          move.l    D2,A0
080008A0  5282      1181          addq.l    #1,D2
080008A2  1080      1182          move.b    D0,(A0)
080008A4  2042      1183          move.l    D2,A0
080008A6  4210      1184          clr.b     (A0)
080008A8  200D      1185          move.l    A5,D0
080008AA  6704      1186          beq.s     doprint_44
080008AC  200D      1187          move.l    A5,D0
080008AE  6006      1188          bra.s     doprint_45
                    1189   doprint_44:
080008B0  7001      1190          moveq     #1,D0
080008B2  4880      1191          ext.w     D0
080008B4  48C0      1192          ext.l     D0
                    1193   doprint_45:
080008B6  2A00      1194          move.l    D0,D5
080008B8  6000 0030 1195          bra       doprint_23
                    1196   doprint_31:
080008BC  206E 0010 1197          move.l    16(A6),A0
080008C0  58AE 0010 1198          addq.l    #4,16(A6)
080008C4  2610      1199          move.l    (A0),D3
080008C6  0C85 FFFF 1200          cmp.l     #-1,D5
080008CA  FFFF      
080008CC  660C      1201          bne.s     doprint_46
080008CE  2F03      1202          move.l    D3,-(A7)
080008D0  4EB9 0800 1203          jsr       _strlen
080008D4  0D9A      
080008D6  584F      1204          addq.w    #4,A7
080008D8  2A00      1205          move.l    D0,D5
                    1206   doprint_46:
080008DA  600E      1207          bra.s     doprint_23
                    1208   doprint_22:
080008DC  206E 000C 1209          move.l    12(A6),A0
080008E0  2242      1210          move.l    D2,A1
080008E2  5282      1211          addq.l    #1,D2
080008E4  1290      1212          move.b    (A0),(A1)
080008E6  2042      1213          move.l    D2,A0
080008E8  4210      1214          clr.b     (A0)
                    1215   doprint_23:
080008EA  2F03      1216          move.l    D3,-(A7)
080008EC  4EB9 0800 1217          jsr       _strlen
080008F0  0D9A      
080008F2  584F      1218          addq.w    #4,A7
080008F4  1800      1219          move.b    D0,D4
080008F6  206E 000C 1220          move.l    12(A6),A0
080008FA  1010      1221          move.b    (A0),D0
080008FC  0C00 0073 1222          cmp.b     #115,D0
08000900  661C      1223          bne.s     doprint_48
08000902  0C85 0000 1224          cmp.l     #0,D5
08000906  0000      
08000908  6D14      1225          blt.s     doprint_48
0800090A  4884      1226          ext.w     D4
0800090C  48C4      1227          ext.l     D4
0800090E  B885      1228          cmp.l     D5,D4
08000910  6F04      1229          ble.s     doprint_50
08000912  2005      1230          move.l    D5,D0
08000914  6006      1231          bra.s     doprint_51
                    1232   doprint_50:
08000916  1004      1233          move.b    D4,D0
08000918  4880      1234          ext.w     D0
0800091A  48C0      1235          ext.l     D0
                    1236   doprint_51:
0800091C  1800      1237          move.b    D0,D4
                    1238   doprint_48:
0800091E  206E 000C 1239          move.l    12(A6),A0
08000922  1010      1240          move.b    (A0),D0
08000924  0C00 0058 1241          cmp.b     #88,D0
08000928  6600 0028 1242          bne       doprint_56
0800092C  41EE FFDC 1243          lea       -36(A6),A0
08000930  2408      1244          move.l    A0,D2
                    1245   doprint_54:
08000932  2042      1246          move.l    D2,A0
08000934  4A10      1247          tst.b     (A0)
08000936  671A      1248          beq.s     doprint_56
08000938  2042      1249          move.l    D2,A0
0800093A  1210      1250          move.b    (A0),D1
0800093C  4881      1251          ext.w     D1
0800093E  48C1      1252          ext.l     D1
08000940  2F01      1253          move.l    D1,-(A7)
08000942  4EB9 0800 1254          jsr       _toupper
08000946  0DDC      
08000948  584F      1255          addq.w    #4,A7
0800094A  2042      1256          move.l    D2,A0
0800094C  1080      1257          move.b    D0,(A0)
0800094E  5282      1258          addq.l    #1,D2
08000950  60E0      1259          bra       doprint_54
                    1260   doprint_56:
08000952  7E00      1261          moveq     #0,D7
08000954  41EE FFD4 1262          lea       -44(A6),A0
08000958  2408      1263          move.l    A0,D2
0800095A  206E 000C 1264          move.l    12(A6),A0
0800095E  1010      1265          move.b    (A0),D0
08000960  0C00 0064 1266          cmp.b     #100,D0
08000964  670E      1267          beq.s     doprint_59
08000966  206E 000C 1268          move.l    12(A6),A0
0800096A  1010      1269          move.b    (A0),D0
0800096C  0C00 0069 1270          cmp.b     #105,D0
08000970  6600 0068 1271          bne       doprint_65
                    1272   doprint_59:
08000974  102E FFCE 1273          move.b    -50(A6),D0
08000978  4880      1274          ext.w     D0
0800097A  48C0      1275          ext.l     D0
0800097C  4A80      1276          tst.l     D0
0800097E  660C      1277          bne.s     doprint_62
08000980  2043      1278          move.l    D3,A0
08000982  1010      1279          move.b    (A0),D0
08000984  0C00 002D 1280          cmp.b     #45,D0
08000988  6600 0028 1281          bne       doprint_60
                    1282   doprint_62:
0800098C  2043      1283          move.l    D3,A0
0800098E  1010      1284          move.b    (A0),D0
08000990  0C00 002D 1285          cmp.b     #45,D0
08000994  660E      1286          bne.s     doprint_63
08000996  2043      1287          move.l    D3,A0
08000998  5283      1288          addq.l    #1,D3
0800099A  2242      1289          move.l    D2,A1
0800099C  5282      1290          addq.l    #1,D2
0800099E  1290      1291          move.b    (A0),(A1)
080009A0  5304      1292          subq.b    #1,D4
080009A2  6008      1293          bra.s     doprint_64
                    1294   doprint_63:
080009A4  2042      1295          move.l    D2,A0
080009A6  5282      1296          addq.l    #1,D2
080009A8  10BC 002B 1297          move.b    #43,(A0)
                    1298   doprint_64:
080009AC  5287      1299          addq.l    #1,D7
080009AE  6000 002A 1300          bra       doprint_65
                    1301   doprint_60:
080009B2  4A2E FFCF 1302          tst.b     -49(A6)
080009B6  6722      1303          beq.s     doprint_65
080009B8  2043      1304          move.l    D3,A0
080009BA  1010      1305          move.b    (A0),D0
080009BC  0C00 002D 1306          cmp.b     #45,D0
080009C0  660E      1307          bne.s     doprint_67
080009C2  2043      1308          move.l    D3,A0
080009C4  5283      1309          addq.l    #1,D3
080009C6  2242      1310          move.l    D2,A1
080009C8  5282      1311          addq.l    #1,D2
080009CA  1290      1312          move.b    (A0),(A1)
080009CC  5304      1313          subq.b    #1,D4
080009CE  6008      1314          bra.s     doprint_68
                    1315   doprint_67:
080009D0  2042      1316          move.l    D2,A0
080009D2  5282      1317          addq.l    #1,D2
080009D4  10BC 0020 1318          move.b    #32,(A0)
                    1319   doprint_68:
080009D8  5287      1320          addq.l    #1,D7
                    1321   doprint_65:
080009DA  4A2E FFD0 1322          tst.b     -48(A6)
080009DE  6700 005A 1323          beq       doprint_77
080009E2  206E 000C 1324          move.l    12(A6),A0
080009E6  1010      1325          move.b    (A0),D0
080009E8  4880      1326          ext.w     D0
080009EA  48C0      1327          ext.l     D0
080009EC  0C80 0000 1328          cmp.l     #111,D0
080009F0  006F      
080009F2  671A      1329          beq.s     doprint_73
080009F4  6E0C      1330          bgt.s     doprint_76
080009F6  0C80 0000 1331          cmp.l     #88,D0
080009FA  0058      
080009FC  6710      1332          beq.s     doprint_73
080009FE  6000 003A 1333          bra       doprint_77
                    1334   doprint_76:
08000A02  0C80 0000 1335          cmp.l     #120,D0
08000A06  0078      
08000A08  6704      1336          beq.s     doprint_73
08000A0A  6000 002E 1337          bra       doprint_77
                    1338   doprint_73:
08000A0E  2042      1339          move.l    D2,A0
08000A10  5282      1340          addq.l    #1,D2
08000A12  10BC 0030 1341          move.b    #48,(A0)
08000A16  5287      1342          addq.l    #1,D7
08000A18  206E 000C 1343          move.l    12(A6),A0
08000A1C  1010      1344          move.b    (A0),D0
08000A1E  0C00 0078 1345          cmp.b     #120,D0
08000A22  670C      1346          beq.s     doprint_79
08000A24  206E 000C 1347          move.l    12(A6),A0
08000A28  1010      1348          move.b    (A0),D0
08000A2A  0C00 0058 1349          cmp.b     #88,D0
08000A2E  660A      1350          bne.s     doprint_77
                    1351   doprint_79:
08000A30  2042      1352          move.l    D2,A0
08000A32  5282      1353          addq.l    #1,D2
08000A34  10BC 0078 1354          move.b    #120,(A0)
08000A38  5287      1355          addq.l    #1,D7
                    1356   doprint_77:
08000A3A  2042      1357          move.l    D2,A0
08000A3C  4210      1358          clr.b     (A0)
08000A3E  206E 000C 1359          move.l    12(A6),A0
08000A42  1010      1360          move.b    (A0),D0
08000A44  4880      1361          ext.w     D0
08000A46  48C0      1362          ext.l     D0
08000A48  0C80 0000 1363          cmp.l     #105,D0
08000A4C  0069      
08000A4E  6700 0076 1364          beq       doprint_82
08000A52  6E42      1365          bgt.s     doprint_93
08000A54  0C80 0000 1366          cmp.l     #99,D0
08000A58  0063      
08000A5A  6700 0084 1367          beq       doprint_96
08000A5E  6E1C      1368          bgt.s     doprint_94
08000A60  0C80 0000 1369          cmp.l     #88,D0
08000A64  0058      
08000A66  6700 005E 1370          beq       doprint_82
08000A6A  6E00 0184 1371          bgt       doprint_80
08000A6E  0C80 0000 1372          cmp.l     #69,D0
08000A72  0045      
08000A74  6700 0050 1373          beq       doprint_82
08000A78  6000 0176 1374          bra       doprint_80
                    1375   doprint_94:
08000A7C  0C80 0000 1376          cmp.l     #101,D0
08000A80  0065      
08000A82  6700 0042 1377          beq       doprint_82
08000A86  6E00 0168 1378          bgt       doprint_80
08000A8A  0C80 0000 1379          cmp.l     #100,D0
08000A8E  0064      
08000A90  6734      1380          beq.s     doprint_82
08000A92  6000 015C 1381          bra       doprint_80
                    1382   doprint_93:
08000A96  0C80 0000 1383          cmp.l     #117,D0
08000A9A  0075      
08000A9C  6728      1384          beq.s     doprint_82
08000A9E  6E1A      1385          bgt.s     doprint_95
08000AA0  0C80 0000 1386          cmp.l     #115,D0
08000AA4  0073      
08000AA6  6700 0038 1387          beq       doprint_96
08000AAA  6E00 0144 1388          bgt       doprint_80
08000AAE  0C80 0000 1389          cmp.l     #111,D0
08000AB2  006F      
08000AB4  6710      1390          beq.s     doprint_82
08000AB6  6000 0138 1391          bra       doprint_80
                    1392   doprint_95:
08000ABA  0C80 0000 1393          cmp.l     #120,D0
08000ABE  0078      
08000AC0  6704      1394          beq.s     doprint_82
08000AC2  6000 012C 1395          bra       doprint_80
                    1396   doprint_82:
08000AC6  4A2E FFD2 1397          tst.b     -46(A6)
08000ACA  6714      1398          beq.s     doprint_96
08000ACC  4A2E FFCD 1399          tst.b     -51(A6)
08000AD0  660E      1400          bne.s     doprint_96
08000AD2  200D      1401          move.l    A5,D0
08000AD4  9087      1402          sub.l     D7,D0
08000AD6  4884      1403          ext.w     D4
08000AD8  48C4      1404          ext.l     D4
08000ADA  9084      1405          sub.l     D4,D0
08000ADC  2D40 FFFC 1406          move.l    D0,-4(A6)
                    1407   doprint_96:
08000AE0  202E FFFC 1408          move.l    -4(A6),D0
08000AE4  0C80 0000 1409          cmp.l     #0,D0
08000AE8  0000      
08000AEA  6C04      1410          bge.s     doprint_98
08000AEC  42AE FFFC 1411          clr.l     -4(A6)
                    1412   doprint_98:
08000AF0  4A2E FFCD 1413          tst.b     -51(A6)
08000AF4  6600 0030 1414          bne       doprint_104
08000AF8  1004      1415          move.b    D4,D0
08000AFA  4880      1416          ext.w     D0
08000AFC  48C0      1417          ext.l     D0
08000AFE  D0AE FFFC 1418          add.l     -4(A6),D0
08000B02  D087      1419          add.l     D7,D0
08000B04  1D40 FFD1 1420          move.b    D0,-47(A6)
                    1421   doprint_102:
08000B08  102E FFD1 1422          move.b    -47(A6),D0
08000B0C  4880      1423          ext.w     D0
08000B0E  48C0      1424          ext.l     D0
08000B10  220D      1425          move.l    A5,D1
08000B12  534D      1426          subq.w    #1,A5
08000B14  B081      1427          cmp.l     D1,D0
08000B16  6C0E      1428          bge.s     doprint_104
08000B18  4878 0020 1429          pea       32
08000B1C  2F0A      1430          move.l    A2,-(A7)
08000B1E  4E93      1431          jsr       (A3)
08000B20  504F      1432          addq.w    #8,A7
08000B22  5286      1433          addq.l    #1,D6
08000B24  60E2      1434          bra       doprint_102
                    1435   doprint_104:
08000B26  41EE FFD4 1436          lea       -44(A6),A0
08000B2A  2408      1437          move.l    A0,D2
                    1438   doprint_105:
08000B2C  2042      1439          move.l    D2,A0
08000B2E  4A10      1440          tst.b     (A0)
08000B30  6716      1441          beq.s     doprint_107
08000B32  2042      1442          move.l    D2,A0
08000B34  5282      1443          addq.l    #1,D2
08000B36  1210      1444          move.b    (A0),D1
08000B38  4881      1445          ext.w     D1
08000B3A  48C1      1446          ext.l     D1
08000B3C  2F01      1447          move.l    D1,-(A7)
08000B3E  2F0A      1448          move.l    A2,-(A7)
08000B40  4E93      1449          jsr       (A3)
08000B42  504F      1450          addq.w    #8,A7
08000B44  5286      1451          addq.l    #1,D6
08000B46  60E4      1452          bra       doprint_105
                    1453   doprint_107:
08000B48  202E FFFC 1454          move.l    -4(A6),D0
08000B4C  1D40 FFD1 1455          move.b    D0,-47(A6)
                    1456   doprint_108:
08000B50  102E FFD1 1457          move.b    -47(A6),D0
08000B54  532E FFD1 1458          subq.b    #1,-47(A6)
08000B58  4A00      1459          tst.b     D0
08000B5A  670E      1460          beq.s     doprint_110
08000B5C  4878 0030 1461          pea       48
08000B60  2F0A      1462          move.l    A2,-(A7)
08000B62  4E93      1463          jsr       (A3)
08000B64  504F      1464          addq.w    #8,A7
08000B66  5286      1465          addq.l    #1,D6
08000B68  60E6      1466          bra       doprint_108
                    1467   doprint_110:
08000B6A  2043      1468          move.l    D3,A0
08000B6C  4A10      1469          tst.b     (A0)
08000B6E  6700 0048 1470          beq       doprint_113
08000B72  206E 000C 1471          move.l    12(A6),A0
08000B76  1010      1472          move.b    (A0),D0
08000B78  4880      1473          ext.w     D0
08000B7A  48C0      1474          ext.l     D0
08000B7C  0C80 0000 1475          cmp.l     #115,D0
08000B80  0073      
08000B82  670C      1476          beq.s     doprint_116
08000B84  6E18      1477          bgt.s     doprint_119
08000B86  0C80 0000 1478          cmp.l     #99,D0
08000B8A  0063      
08000B8C  6702      1479          beq.s     doprint_116
08000B8E  600E      1480          bra.s     doprint_119
                    1481   doprint_116:
08000B90  2005      1482          move.l    D5,D0
08000B92  5385      1483          subq.l    #1,D5
08000B94  0C80 0000 1484          cmp.l     #0,D0
08000B98  0000      
08000B9A  6E02      1485          bgt.s     doprint_119
08000B9C  6016      1486          bra.s     doprint_115
                    1487   doprint_119:
08000B9E  2043      1488          move.l    D3,A0
08000BA0  5283      1489          addq.l    #1,D3
08000BA2  1210      1490          move.b    (A0),D1
08000BA4  4881      1491          ext.w     D1
08000BA6  48C1      1492          ext.l     D1
08000BA8  2F01      1493          move.l    D1,-(A7)
08000BAA  2F0A      1494          move.l    A2,-(A7)
08000BAC  4E93      1495          jsr       (A3)
08000BAE  504F      1496          addq.w    #8,A7
08000BB0  5286      1497          addq.l    #1,D6
08000BB2  6002      1498          bra.s     doprint_112
                    1499   doprint_115:
08000BB4  6002      1500          bra.s     doprint_113
                    1501   doprint_112:
08000BB6  60B2      1502          bra       doprint_110
                    1503   doprint_113:
08000BB8  4A2E FFCD 1504          tst.b     -51(A6)
08000BBC  6700 0030 1505          beq       doprint_125
08000BC0  1004      1506          move.b    D4,D0
08000BC2  4880      1507          ext.w     D0
08000BC4  48C0      1508          ext.l     D0
08000BC6  D0AE FFFC 1509          add.l     -4(A6),D0
08000BCA  D087      1510          add.l     D7,D0
08000BCC  1D40 FFD1 1511          move.b    D0,-47(A6)
                    1512   doprint_123:
08000BD0  102E FFD1 1513          move.b    -47(A6),D0
08000BD4  4880      1514          ext.w     D0
08000BD6  48C0      1515          ext.l     D0
08000BD8  220D      1516          move.l    A5,D1
08000BDA  534D      1517          subq.w    #1,A5
08000BDC  B081      1518          cmp.l     D1,D0
08000BDE  6C0E      1519          bge.s     doprint_125
08000BE0  4878 0020 1520          pea       32
08000BE4  2F0A      1521          move.l    A2,-(A7)
08000BE6  4E93      1522          jsr       (A3)
08000BE8  504F      1523          addq.w    #8,A7
08000BEA  5386      1524          subq.l    #1,D6
08000BEC  60E2      1525          bra       doprint_123
                    1526   doprint_125:
08000BEE  6014      1527          bra.s     doprint_81
                    1528   doprint_80:
08000BF0  206E 000C 1529          move.l    12(A6),A0
08000BF4  1210      1530          move.b    (A0),D1
08000BF6  4881      1531          ext.w     D1
08000BF8  48C1      1532          ext.l     D1
08000BFA  2F01      1533          move.l    D1,-(A7)
08000BFC  2F0A      1534          move.l    A2,-(A7)
08000BFE  4E93      1535          jsr       (A3)
08000C00  504F      1536          addq.w    #8,A7
08000C02  5286      1537          addq.l    #1,D6
                    1538   doprint_81:
08000C04  52AE 000C 1539          addq.l    #1,12(A6)
                    1540   doprint_2:
08000C08  6000 FA0A 1541          bra       doprint_1
                    1542   doprint_3:
08000C0C  4A92      1543          tst.l     (A2)
08000C0E  6710      1544          beq.s     doprint_126
08000C10  4201      1545          clr.b     D1
08000C12  C2BC 0000 1546          and.l     #255,D1
08000C16  00FF      
08000C18  2F01      1547          move.l    D1,-(A7)
08000C1A  2F0A      1548          move.l    A2,-(A7)
08000C1C  4E93      1549          jsr       (A3)
08000C1E  504F      1550          addq.w    #8,A7
                    1551   doprint_126:
08000C20  2006      1552          move.l    D6,D0
08000C22  4CDF 3CFC 1553          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08000C26  4E5E      1554          unlk      A6
08000C28  4E75      1555          rts
                    1556   @itoa_convert:
08000C2A  4E56 0000 1557          link      A6,#0
08000C2E  48E7 3C00 1558          movem.l   D2/D3/D4/D5,-(A7)
08000C32  242E 0008 1559          move.l    8(A6),D2
08000C36  262E 0010 1560          move.l    16(A6),D3
08000C3A  2A2E 000C 1561          move.l    12(A6),D5
08000C3E  2F05      1562          move.l    D5,-(A7)
08000C40  2F03      1563          move.l    D3,-(A7)
08000C42  4EB9 0800 1564          jsr       ULDIV
08000C46  0E08      
08000C48  202F 0004 1565          move.l    4(A7),D0
08000C4C  504F      1566          addq.w    #8,A7
08000C4E  2800      1567          move.l    D0,D4
08000C50  BA83      1568          cmp.l     D3,D5
08000C52  6520      1569          blo.s     @itoa_convert_1
08000C54  2F03      1570          move.l    D3,-(A7)
08000C56  2F05      1571          move.l    D5,-(A7)
08000C58  2F03      1572          move.l    D3,-(A7)
08000C5A  4EB9 0800 1573          jsr       ULDIV
08000C5E  0E08      
08000C60  2217      1574          move.l    (A7),D1
08000C62  504F      1575          addq.w    #8,A7
08000C64  2F01      1576          move.l    D1,-(A7)
08000C66  2F02      1577          move.l    D2,-(A7)
08000C68  4EB9 0800 1578          jsr       @itoa_convert
08000C6C  0C2A      
08000C6E  DEFC 000C 1579          add.w     #12,A7
08000C72  2400      1580          move.l    D0,D2
                    1581   @itoa_convert_1:
08000C74  0C84 0000 1582          cmp.l     #9,D4
08000C78  0009      
08000C7A  6E0E      1583          bgt.s     @itoa_convert_3
08000C7C  2004      1584          move.l    D4,D0
08000C7E  7230      1585          moveq     #48,D1
08000C80  C2BC 0000 1586          and.l     #255,D1
08000C84  00FF      
08000C86  D081      1587          add.l     D1,D0
08000C88  6012      1588          bra.s     @itoa_convert_4
                    1589   @itoa_convert_3:
08000C8A  2004      1590          move.l    D4,D0
08000C8C  7261      1591          moveq     #97,D1
08000C8E  C2BC 0000 1592          and.l     #255,D1
08000C92  00FF      
08000C94  D081      1593          add.l     D1,D0
08000C96  0480 0000 1594          sub.l     #10,D0
08000C9A  000A      
                    1595   @itoa_convert_4:
08000C9C  2042      1596          move.l    D2,A0
08000C9E  1080      1597          move.b    D0,(A0)
08000CA0  2002      1598          move.l    D2,D0
08000CA2  5280      1599          addq.l    #1,D0
08000CA4  4CDF 003C 1600          movem.l   (A7)+,D2/D3/D4/D5
08000CA8  4E5E      1601          unlk      A6
08000CAA  4E75      1602          rts
                    1603   _ltoa:
08000CAC  4E56 0000 1604          link      A6,#0
08000CB0  48E7 3C00 1605          movem.l   D2/D3/D4/D5,-(A7)
08000CB4  242E 0008 1606          move.l    8(A6),D2
08000CB8  262E 000C 1607          move.l    12(A6),D3
08000CBC  2A2E 0010 1608          move.l    16(A6),D5
08000CC0  2803      1609          move.l    D3,D4
08000CC2  0C85 0000 1610          cmp.l     #2,D5
08000CC6  0002      
08000CC8  6D08      1611          blt.s     ltoa_3
08000CCA  0C85 0000 1612          cmp.l     #36,D5
08000CCE  0024      
08000CD0  6F06      1613          ble.s     ltoa_1
                    1614   ltoa_3:
08000CD2  2003      1615          move.l    D3,D0
08000CD4  6000 0056 1616          bra       ltoa_4
                    1617   ltoa_1:
08000CD8  0C85 0000 1618          cmp.l     #10,D5
08000CDC  000A      
08000CDE  6600 0034 1619          bne       ltoa_5
08000CE2  0C82 0000 1620          cmp.l     #0,D2
08000CE6  0000      
08000CE8  6C2A      1621          bge.s     ltoa_5
08000CEA  2002      1622          move.l    D2,D0
08000CEC  4480      1623          neg.l     D0
08000CEE  2400      1624          move.l    D0,D2
08000CF0  0C82 0000 1625          cmp.l     #0,D2
08000CF4  0000      
08000CF6  6C14      1626          bge.s     ltoa_7
08000CF8  4879 0800 1627          pea       @itoa_1.L
08000CFC  0FD6      
08000CFE  2F03      1628          move.l    D3,-(A7)
08000D00  4EB9 0800 1629          jsr       _strcpy
08000D04  0DF8      
08000D06  504F      1630          addq.w    #8,A7
08000D08  2003      1631          move.l    D3,D0
08000D0A  6020      1632          bra.s     ltoa_4
                    1633   ltoa_7:
08000D0C  2044      1634          move.l    D4,A0
08000D0E  5284      1635          addq.l    #1,D4
08000D10  10BC 002D 1636          move.b    #45,(A0)
                    1637   ltoa_5:
08000D14  2F05      1638          move.l    D5,-(A7)
08000D16  2F02      1639          move.l    D2,-(A7)
08000D18  2F04      1640          move.l    D4,-(A7)
08000D1A  4EB9 0800 1641          jsr       @itoa_convert
08000D1E  0C2A      
08000D20  DEFC 000C 1642          add.w     #12,A7
08000D24  2800      1643          move.l    D0,D4
08000D26  2044      1644          move.l    D4,A0
08000D28  4210      1645          clr.b     (A0)
08000D2A  2003      1646          move.l    D3,D0
                    1647   ltoa_4:
08000D2C  4CDF 003C 1648          movem.l   (A7)+,D2/D3/D4/D5
08000D30  4E5E      1649          unlk      A6
08000D32  4E75      1650          rts
                    1651   _ultoa:
08000D34  4E56 0000 1652          link      A6,#0
08000D38  48E7 3800 1653          movem.l   D2/D3/D4,-(A7)
08000D3C  262E 0010 1654          move.l    16(A6),D3
08000D40  282E 000C 1655          move.l    12(A6),D4
08000D44  2404      1656          move.l    D4,D2
08000D46  0C83 0000 1657          cmp.l     #2,D3
08000D4A  0002      
08000D4C  6D08      1658          blt.s     ultoa_3
08000D4E  0C83 0000 1659          cmp.l     #36,D3
08000D52  0024      
08000D54  6F04      1660          ble.s     ultoa_1
                    1661   ultoa_3:
08000D56  2004      1662          move.l    D4,D0
08000D58  601A      1663          bra.s     ultoa_4
                    1664   ultoa_1:
08000D5A  2F03      1665          move.l    D3,-(A7)
08000D5C  2F2E 0008 1666          move.l    8(A6),-(A7)
08000D60  2F02      1667          move.l    D2,-(A7)
08000D62  4EB9 0800 1668          jsr       @itoa_convert
08000D66  0C2A      
08000D68  DEFC 000C 1669          add.w     #12,A7
08000D6C  2400      1670          move.l    D0,D2
08000D6E  2042      1671          move.l    D2,A0
08000D70  4210      1672          clr.b     (A0)
08000D72  2004      1673          move.l    D4,D0
                    1674   ultoa_4:
08000D74  4CDF 001C 1675          movem.l   (A7)+,D2/D3/D4
08000D78  4E5E      1676          unlk      A6
08000D7A  4E75      1677          rts
                    1678   _itoa:
08000D7C  4E56 0000 1679          link      A6,#0
08000D80  2F2E 0010 1680          move.l    16(A6),-(A7)
08000D84  2F2E 000C 1681          move.l    12(A6),-(A7)
08000D88  2F2E 0008 1682          move.l    8(A6),-(A7)
08000D8C  4EB9 0800 1683          jsr       _ltoa
08000D90  0CAC      
08000D92  DEFC 000C 1684          add.w     #12,A7
08000D96  4E5E      1685          unlk      A6
08000D98  4E75      1686          rts
                    1687   _strlen:
08000D9A  206F 0004 1688          move.l    (4,A7),A0
08000D9E  2248      1689          move.l    A0,A1
                    1690   strlen_1:
08000DA0  4A19      1691          tst.b     (A1)+
08000DA2  66FC      1692          bne       strlen_1
08000DA4  2009      1693          move.l    A1,D0
08000DA6  9088      1694          sub.l     A0,D0
08000DA8  5380      1695          subq.l    #1,D0
08000DAA  4E75      1696          rts
                    1697   _putch:
08000DAC  4E56 0000 1698          link      A6,#0
08000DB0  2F02      1699          move.l    D2,-(A7)
08000DB2  242E 0008 1700          move.l    8(A6),D2
08000DB6  0C82 0000 1701          cmp.l     #10,D2
08000DBA  000A      
08000DBC  660C      1702          bne.s     putch_1
08000DBE  4878 000D 1703          pea       13
08000DC2  4EB9 0800 1704          jsr       __putch
08000DC6  044C      
08000DC8  584F      1705          addq.w    #4,A7
                    1706   putch_1:
08000DCA  2F02      1707          move.l    D2,-(A7)
08000DCC  4EB9 0800 1708          jsr       __putch
08000DD0  044C      
08000DD2  584F      1709          addq.w    #4,A7
08000DD4  2002      1710          move.l    D2,D0
08000DD6  241F      1711          move.l    (A7)+,D2
08000DD8  4E5E      1712          unlk      A6
08000DDA  4E75      1713          rts
                    1714   _toupper:
08000DDC  202F 0004 1715          move.l    4(A7),D0
08000DE0  0C80 0000 1716          cmp.l     #'a',D0
08000DE4  0061      
08000DE6  6D0E      1717          blt.s     toupper_1
08000DE8  0C80 0000 1718          cmp.l     #'z',D0
08000DEC  007A      
08000DEE  6E06      1719          bgt.s     toupper_1
08000DF0  0480 0000 1720          sub.l     #$20,D0
08000DF4  0020      
                    1721   toupper_1:
08000DF6  4E75      1722          rts
                    1723   _strcpy:
08000DF8  206F 0004 1724          move.l    (4,A7),A0
08000DFC  226F 0008 1725          move.l    (8,A7),A1
08000E00  2008      1726          move.l    A0,D0
                    1727   strcpy_1:
08000E02  10D9      1728          move.b    (A1)+,(A0)+
08000E04  66FC      1729          bne.s     strcpy_1
08000E06  4E75      1730          rts
                    1731   ULDIV:
08000E08  4E56 0000 1732          link    A6,#0
08000E0C  48E7 C000 1733          movem.l D0/D1,-(A7)
08000E10  222E 0008 1734          move.l  8(A6),D1
08000E14  202E 000C 1735          move.l  12(A6),D0
08000E18  6036      1736          bra.s   ldiv_3
                    1737   LDIV:
08000E1A  4E56 0000 1738          link    A6,#0
08000E1E  48E7 C000 1739          movem.l D0/D1,-(A7)
08000E22  222E 0008 1740          move.l  8(A6),D1
08000E26  202E 000C 1741          move.l  12(A6),D0
08000E2A  4A80      1742          tst.l   D0
08000E2C  6A0E      1743          bpl.s   ldiv_1
08000E2E  4480      1744          neg.l   D0
08000E30  4A81      1745          tst.l   D1
08000E32  6A14      1746          bpl.s   ldiv_2
08000E34  4481      1747          neg.l   D1
08000E36  612A      1748          bsr.s   dodiv
08000E38  4481      1749          neg.l   D1
08000E3A  6016      1750          bra.s   ldiv_4
                    1751   ldiv_1:
08000E3C  4A81      1752          tst.l   D1
08000E3E  6A10      1753          bpl.s   ldiv_3
08000E40  4481      1754          neg.l   D1
08000E42  611E      1755          bsr.s   dodiv
08000E44  4480      1756          neg.l   D0
08000E46  600A      1757          bra.s   ldiv_4
                    1758   ldiv_2:
08000E48  6118      1759          bsr.s   dodiv
08000E4A  4480      1760          neg.l   D0
08000E4C  4481      1761          neg.l   D1
08000E4E  6002      1762          bra.s   ldiv_4
                    1763   ldiv_3:
08000E50  6110      1764          bsr.s   dodiv
                    1765   ldiv_4:
08000E52  2D40 0008 1766          move.l  D0,8(A6)
08000E56  2D41 000C 1767          move.l  D1,12(A6)
08000E5A  4CDF 0003 1768          movem.l (A7)+,D0/D1
08000E5E  4E5E      1769          unlk    A6
08000E60  4E75      1770          rts
                    1771   dodiv:
08000E62  0C81 0000 1772          cmpi.l  #$FFFF,D1
08000E66  FFFF      
08000E68  6236      1773          bhi.s   dodiv_2
08000E6A  0C80 0000 1774          cmpi.l  #$FFFF,D0
08000E6E  FFFF      
08000E70  6210      1775          bhi.s   dodiv_1
08000E72  80C1      1776          divu    D1,D0
08000E74  2200      1777          move.l  D0,D1
08000E76  4241      1778          clr.w   D1
08000E78  4841      1779          swap    D1
08000E7A  0280 0000 1780          andi.l  #$FFFF,D0
08000E7E  FFFF      
08000E80  4E75      1781          rts
                    1782   dodiv_1:
08000E82  48A7 A000 1783          movem.w D0/D2,-(A7)
08000E86  4240      1784          clr.w   D0
08000E88  4840      1785          swap    D0
08000E8A  80C1      1786          divu    D1,D0
08000E8C  3400      1787          move.w  D0,D2
08000E8E  301F      1788          move.w  (A7)+,D0
08000E90  80C1      1789          divu    D1,D0
08000E92  4840      1790          swap    D0
08000E94  4281      1791          clr.l   D1
08000E96  3200      1792          move.w  D0,D1
08000E98  3002      1793          move.w  D2,D0
08000E9A  4840      1794          swap    D0
08000E9C  341F      1795          move.w  (A7)+,D2
08000E9E  4E75      1796          rts
                    1797   dodiv_2:
08000EA0  48E7 3800 1798          movem.l D2/D3/D4,-(A7)
08000EA4  2401      1799          move.l  D1,D2
08000EA6  4242      1800          clr.w   D2
08000EA8  4842      1801          swap    D2
08000EAA  5282      1802          addq.l  #1,D2
08000EAC  2600      1803          move.l  D0,D3
08000EAE  2801      1804          move.l  D1,D4
08000EB0  2202      1805          move.l  D2,D1
08000EB2  61CE      1806          bsr.s   dodiv_1
08000EB4  2204      1807          move.l  D4,D1
08000EB6  82C2      1808          divu    D2,D1
08000EB8  80C1      1809          divu    D1,D0
08000EBA  0280 0000 1810          andi.l  #$FFFF,D0
08000EBE  FFFF      
                    1811   dodiv_3:
08000EC0  2204      1812          move.l  D4,D1
08000EC2  2404      1813          move.l  D4,D2
08000EC4  4842      1814          swap    D2
08000EC6  C2C0      1815          mulu    D0,D1
08000EC8  C4C0      1816          mulu    D0,D2
08000ECA  4842      1817          swap    D2
08000ECC  D282      1818          add.l   D2,D1
08000ECE  9283      1819          sub.l   D3,D1
08000ED0  620A      1820          bhi.s   dodiv_4
08000ED2  4481      1821          neg.l   D1
08000ED4  B881      1822          cmp.l   D1,D4
08000ED6  6208      1823          bhi.s   dodiv_5
08000ED8  5280      1824          addq.l  #1,D0
08000EDA  60E4      1825          bra.s   dodiv_3
                    1826   dodiv_4:
08000EDC  5380      1827          subq.l  #1,D0
08000EDE  60E0      1828          bra.s   dodiv_3
                    1829   dodiv_5:
08000EE0  4CDF 001C 1830          movem.l (A7)+,D2/D3/D4
08000EE4  4E75      1831          rts
                    1832          section   const
08000EE6            1833                   align
                    1834   
                    1835   
                    1836   @canbus~1_1:
08000EE6  4361 6E30 1837          dc.b      67,97,110,48,32,83,116,97,116,117,115,82,101
08000EEA  2053 7461 
08000EEE  7475 7352 
08000EF2  65        
08000EF3  6720 3D20 1838          dc.b      103,32,61,32,48,120,37,88,13,10,0
08000EF7  3078 2558 
08000EFB  0D0A 00   
                    1839   @canbus~1_2:
08000EFE  4361 6E31 1840          dc.b      67,97,110,49,32,83,116,97,116,117,115,82,101
08000F02  2053 7461 
08000F06  7475 7352 
08000F0A  65        
08000F0B  6720 3D20 1841          dc.b      103,32,61,32,48,120,37,88,13,10,0
08000F0F  3078 2558 
08000F13  0D0A 00   
                    1842   @canbus~1_3:
08000F16  4361 6E30 1843          dc.b      67,97,110,48,95,83,116,97,116,117,115,82,101
08000F1A  5F53 7461 
08000F1E  7475 7352 
08000F22  65        
08000F23  6720 3D20 1844          dc.b      103,32,61,32,48,120,37,88,13,10,0
08000F27  3078 2558 
08000F2B  0D0A 00   
                    1845   @canbus~1_4:
08000F2E  0D0A 2052 1846          dc.b      13,10,32,82,101,99,105,101,118,101,100,32,66
08000F32  6563 6965 
08000F36  7665 6420 
08000F3A  42        
08000F3B  7974 6520 1847          dc.b      121,116,101,32,64,32,67,97,110,66,117,115,48
08000F3F  4020 4361 
08000F43  6E42 7573 
08000F47  30        
08000F48  203D 2025 1848          dc.b      32,61,32,37,100,13,10,0
08000F4C  640D 0A00 
                    1849   @canbus~1_5:
08000F50  4361 6E31 1850          dc.b      67,97,110,49,95,83,116,97,116,117,115,82,101
08000F54  5F53 7461 
08000F58  7475 7352 
08000F5C  65        
08000F5D  6720 3D20 1851          dc.b      103,32,61,32,48,120,37,88,13,10,0
08000F61  3078 2558 
08000F65  0D0A 00   
                    1852   @canbus~1_6:
08000F68  0D0A 2052 1853          dc.b      13,10,32,82,101,99,105,101,118,101,100,32,66
08000F6C  6563 6965 
08000F70  7665 6420 
08000F74  42        
08000F75  7974 6520 1854          dc.b      121,116,101,32,64,32,67,97,110,66,117,115,49
08000F79  4020 4361 
08000F7D  6E42 7573 
08000F81  31        
08000F82  203D 2025 1855          dc.b      32,61,32,37,100,13,10,0
08000F86  640D 0A00 
                    1856   @canbus~1_7:
08000F8A  0D0A 0D0A 1857          dc.b      13,10,13,10,45,45,45,45,32,67,65,78,66,85,83
08000F8E  2D2D 2D2D 
08000F92  2043 414E 
08000F96  4255 53   
08000F99  2054 6573 1858          dc.b      32,84,101,115,116,32,45,45,45,45,13,10,0
08000F9D  7420 2D2D 
08000FA1  2D2D 0D0A 
08000FA5  00        
                    1859   @canbus~1_8:
08000FA6  4865 6C6C 1860          dc.b      72,101,108,108,111,111,111,33,33,13,10,0
08000FAA  6F6F 6F21 
08000FAE  210D 0A00 
                    1861   @canbus~1_9:
08000FB2  4920 616D 1862          dc.b      73,32,97,109,32,104,101,114,101,32,49,32,13
08000FB6  2068 6572 
08000FBA  6520 3120 
08000FBE  0D        
08000FBF  0A00      1863          dc.b      10,0
                    1864   @canbus~1_10:
08000FC2  4920 616D 1865          dc.b      73,32,97,109,32,104,101,114,101,32,50,32,13
08000FC6  2068 6572 
08000FCA  6520 3220 
08000FCE  0D        
08000FCF  0A00      1866          dc.b      10,0
                    1867   @canbus~1_11:
08000FD2  0D0A 00   1868          dc.b      13,10,0
                    1869   @itoa_1:
08000FD6  2D32 3134 1870          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
08000FDA  3734 3833 
08000FDE  3634 3800 
                    1871   __ctype:
08000FE2  0040 4040 1872          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
08000FE6  4040 4040 
08000FEA  4040 5050 
08000FEE  5050 50   
08000FF1  4040 4040 1873          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
08000FF5  4040 4040 
08000FF9  4040 4040 
08000FFD  4040 40   
08001000  4040 40D0 1874          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
08001004  A0A0 A0A0 
08001008  A0A0 A0A0 
0800100C  A0A0 A0A0 1875          dc.b      160,160,160,160,160,160,160,140,140,140,140
08001010  A0A0 A08C 
08001014  8C8C 8C   
08001017  8C8C 8C8C 1876          dc.b      140,140,140,140,140,140,160,160,160,160,160
0800101B  8C8C A0A0 
0800101F  A0A0 A0   
08001022  A0A0 8A8A 1877          dc.b      160,160,138,138,138,138,138,138,130,130,130
08001026  8A8A 8A8A 
0800102A  8282 82   
0800102D  8282 8282 1878          dc.b      130,130,130,130,130,130,130,130,130,130,130
08001031  8282 8282 
08001035  8282 82   
08001038  8282 8282 1879          dc.b      130,130,130,130,130,130,160,160,160,160,160
0800103C  8282 A0A0 
08001040  A0A0 A0   
08001043  A089 8989 1880          dc.b      160,137,137,137,137,137,137,129,129,129,129
08001047  8989 8981 
0800104B  8181 81   
0800104E  8181 8181 1881          dc.b      129,129,129,129,129,129,129,129,129,129,129
08001052  8181 8181 
08001056  8181 81   
08001059  8181 8181 1882          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
0800105D  81A0 A0A0 
08001061  A040 0000 
08001065  00        
08001066  0000 0000 1883          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0800106A  0000 0000 
0800106E  0000 0000 
08001072  0000 0000 
08001076  0000 0000 
0800107A  0000      
0800107C  0000 0000 1884          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001080  0000 0000 
08001084  0000 0000 
08001088  0000 0000 
0800108C  0000 0000 
08001090  0000      
08001092  0000 0000 1885          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001096  0000 0000 
0800109A  0000 0000 
0800109E  0000 0000 
080010A2  0000 0000 
080010A6  0000      
080010A8  0000 0000 1886          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080010AC  0000 0000 
080010B0  0000 0000 
080010B4  0000 0000 
080010B8  0000 0000 
080010BC  0000      
080010BE  0000 0000 1887          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080010C2  0000 0000 
080010C6  0000 0000 
080010CA  0000 0000 
080010CE  0000 0000 
080010D2  0000      
080010D4  0000 0000 1888          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080010D8  0000 0000 
080010DC  0000 0000 
080010E0  0000 00   
                    1889          section   data
080010E4            1890                   align
                    1891   
                    1892   *********************************************************************************************************************************************************
                    1893   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    1894   ********************************************************************************************************************************************************
                    1895   
          0800 10E4 1896   DataStart       equ       *
080010E4            1897   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
080010E8            1898   __allocp:       ds.l      1                    start of free memory block list
080010EC            1899   __heap:         ds.l      1                    begin of free memory
                    1900   
                    1901   
                    1902          section   bss
080010F0            1903                   align
                    1904   
          0800 10F0 1905   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 000C 1906   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    1907   
                    1908   *********************************************************************************************************
                    1909   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    1910   *********************************************************************************************************
          0800 10F0 1911   BssStart       equ       *
                    1912   
                    1913          section   heap
080010F0            1914                  align
                    1915   
          0800 10F0 1916   BssEnd         equ       *
          0000 0000 1917   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    1918   
                    1919   *********************************************************************************************************
                    1920   * Section for Heap
                    1921   *********************************************************************************************************
                    1922   
          0800 10F0 1923   heap           equ       *
080010F0            1924                  align
          0800 0000

Assembly errors: 0
