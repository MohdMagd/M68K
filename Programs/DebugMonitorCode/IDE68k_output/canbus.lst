680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 02 Apr 2019      Time: 16:26:46          Source: C:\M68K\PROGRAMS\DEBUGMONITORCODE\IDE68K_OUTPUT\CANBUS.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  136C      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  0000      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  1360      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  1364      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  136C 0800 
08000034  1368      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  05F4      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; C:\M68K\PROGRAMS\DEBUGMONITORCODE\CANBUS\CANBUS CONTROLLER ROUTINES.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; /*********************************************************************************************
                      47   ; **  RS232 port addresses
                      48   ; *********************************************************************************************/
                      49   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                      50   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                      51   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                      52   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                      53   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                      54   ; /*********************************************************************************************
                      55   ; ** These addresses and definitions were taken from Appendix 7 of the Can Controller
                      56   ; ** application note and adapted for the 68k assignment
                      57   ; *********************************************************************************************/
                      58   ; /*
                      59   ; ** definition for the SJA1000 registers and bits based on 68k address map areas
                      60   ; ** assume the addresses for the 2 can controllers given in the assignment
                      61   ; **
                      62   ; ** Registers are defined in terms of the following Macro for each Can controller,
                      63   ; ** where (i) represents an registers number
                      64   ; */
                      65   ; #define CAN0_CONTROLLER(i) (*(volatile unsigned char *)(0x00500000 + (i << 1)))
                      66   ; #define CAN1_CONTROLLER(i) (*(volatile unsigned char *)(0x00500200 + (i << 1)))
                      67   ; /* Can 0 register definitions */
                      68   ; #define Can0_ModeControlReg      CAN0_CONTROLLER(0)
                      69   ; #define Can0_CommandReg          CAN0_CONTROLLER(1)
                      70   ; #define Can0_StatusReg           CAN0_CONTROLLER(2)
                      71   ; #define Can0_InterruptReg        CAN0_CONTROLLER(3)
                      72   ; #define Can0_InterruptEnReg      CAN0_CONTROLLER(4) /* PeliCAN mode */
                      73   ; #define Can0_BusTiming0Reg       CAN0_CONTROLLER(6)
                      74   ; #define Can0_BusTiming1Reg       CAN0_CONTROLLER(7)
                      75   ; #define Can0_OutControlReg       CAN0_CONTROLLER(8)
                      76   ; /* address definitions of Other Registers */
                      77   ; #define Can0_ArbLostCapReg       CAN0_CONTROLLER(11)
                      78   ; #define Can0_ErrCodeCapReg       CAN0_CONTROLLER(12)
                      79   ; #define Can0_ErrWarnLimitReg     CAN0_CONTROLLER(13)
                      80   ; #define Can0_RxErrCountReg       CAN0_CONTROLLER(14)
                      81   ; #define Can0_TxErrCountReg       CAN0_CONTROLLER(15)
                      82   ; #define Can0_RxMsgCountReg       CAN0_CONTROLLER(29)
                      83   ; #define Can0_RxBufStartAdr       CAN0_CONTROLLER(30)
                      84   ; #define Can0_ClockDivideReg      CAN0_CONTROLLER(31)
                      85   ; /* address definitions of Acceptance Code & Mask Registers - RESET MODE */
                      86   ; #define Can0_AcceptCode0Reg      CAN0_CONTROLLER(16)
                      87   ; #define Can0_AcceptCode1Reg      CAN0_CONTROLLER(17)
                      88   ; #define Can0_AcceptCode2Reg      CAN0_CONTROLLER(18)
                      89   ; #define Can0_AcceptCode3Reg      CAN0_CONTROLLER(19)
                      90   ; #define Can0_AcceptMask0Reg      CAN0_CONTROLLER(20)
                      91   ; #define Can0_AcceptMask1Reg      CAN0_CONTROLLER(21)
                      92   ; #define Can0_AcceptMask2Reg      CAN0_CONTROLLER(22)
                      93   ; #define Can0_AcceptMask3Reg      CAN0_CONTROLLER(23)
                      94   ; /* address definitions Rx Buffer - OPERATING MODE - Read only register*/
                      95   ; #define Can0_RxFrameInfo         CAN0_CONTROLLER(16)
                      96   ; #define Can0_RxBuffer1           CAN0_CONTROLLER(17)
                      97   ; #define Can0_RxBuffer2           CAN0_CONTROLLER(18)
                      98   ; #define Can0_RxBuffer3           CAN0_CONTROLLER(19)
                      99   ; #define Can0_RxBuffer4           CAN0_CONTROLLER(20)
                     100   ; #define Can0_RxBuffer5           CAN0_CONTROLLER(21)
                     101   ; #define Can0_RxBuffer6           CAN0_CONTROLLER(22)
                     102   ; #define Can0_RxBuffer7           CAN0_CONTROLLER(23)
                     103   ; #define Can0_RxBuffer8           CAN0_CONTROLLER(24)
                     104   ; #define Can0_RxBuffer9           CAN0_CONTROLLER(25)
                     105   ; #define Can0_RxBuffer10          CAN0_CONTROLLER(26)
                     106   ; #define Can0_RxBuffer11          CAN0_CONTROLLER(27)
                     107   ; #define Can0_RxBuffer12          CAN0_CONTROLLER(28)
                     108   ; /* address definitions of the Tx-Buffer - OPERATING MODE - Write only register */
                     109   ; #define Can0_TxFrameInfo         CAN0_CONTROLLER(16)
                     110   ; #define Can0_TxBuffer1           CAN0_CONTROLLER(17)
                     111   ; #define Can0_TxBuffer2           CAN0_CONTROLLER(18)
                     112   ; #define Can0_TxBuffer3           CAN0_CONTROLLER(19)
                     113   ; #define Can0_TxBuffer4           CAN0_CONTROLLER(20)
                     114   ; #define Can0_TxBuffer5           CAN0_CONTROLLER(21)
                     115   ; #define Can0_TxBuffer6           CAN0_CONTROLLER(22)
                     116   ; #define Can0_TxBuffer7           CAN0_CONTROLLER(23)
                     117   ; #define Can0_TxBuffer8           CAN0_CONTROLLER(24)
                     118   ; #define Can0_TxBuffer9           CAN0_CONTROLLER(25)
                     119   ; #define Can0_TxBuffer10          CAN0_CONTROLLER(26)
                     120   ; #define Can0_TxBuffer11          CAN0_CONTROLLER(27)
                     121   ; #define Can0_TxBuffer12          CAN0_CONTROLLER(28)
                     122   ; /* read only addresses */
                     123   ; #define Can0_TxFrameInfoRd       CAN0_CONTROLLER(96)
                     124   ; #define Can0_TxBufferRd1         CAN0_CONTROLLER(97)
                     125   ; #define Can0_TxBufferRd2         CAN0_CONTROLLER(98)
                     126   ; #define Can0_TxBufferRd3         CAN0_CONTROLLER(99)
                     127   ; #define Can0_TxBufferRd4         CAN0_CONTROLLER(100)
                     128   ; #define Can0_TxBufferRd5         CAN0_CONTROLLER(101)
                     129   ; #define Can0_TxBufferRd6         CAN0_CONTROLLER(102)
                     130   ; #define Can0_TxBufferRd7         CAN0_CONTROLLER(103)
                     131   ; #define Can0_TxBufferRd8         CAN0_CONTROLLER(104)
                     132   ; #define Can0_TxBufferRd9         CAN0_CONTROLLER(105)
                     133   ; #define Can0_TxBufferRd10        CAN0_CONTROLLER(106)
                     134   ; #define Can0_TxBufferRd11        CAN0_CONTROLLER(107)
                     135   ; #define Can0_TxBufferRd12        CAN0_CONTROLLER(108)
                     136   ; /* CAN1 Controller register definitions */
                     137   ; #define Can1_ModeControlReg      CAN1_CONTROLLER(0)
                     138   ; #define Can1_CommandReg          CAN1_CONTROLLER(1)
                     139   ; #define Can1_StatusReg           CAN1_CONTROLLER(2)
                     140   ; #define Can1_InterruptReg        CAN1_CONTROLLER(3)
                     141   ; #define Can1_InterruptEnReg      CAN1_CONTROLLER(4) /* PeliCAN mode */
                     142   ; #define Can1_BusTiming0Reg       CAN1_CONTROLLER(6)
                     143   ; #define Can1_BusTiming1Reg       CAN1_CONTROLLER(7)
                     144   ; #define Can1_OutControlReg       CAN1_CONTROLLER(8)
                     145   ; /* address definitions of Other Registers */
                     146   ; #define Can1_ArbLostCapReg       CAN1_CONTROLLER(11)
                     147   ; #define Can1_ErrCodeCapReg       CAN1_CONTROLLER(12)
                     148   ; #define Can1_ErrWarnLimitReg     CAN1_CONTROLLER(13)
                     149   ; #define Can1_RxErrCountReg       CAN1_CONTROLLER(14)
                     150   ; #define Can1_TxErrCountReg       CAN1_CONTROLLER(15)
                     151   ; #define Can1_RxMsgCountReg       CAN1_CONTROLLER(29)
                     152   ; #define Can1_RxBufStartAdr       CAN1_CONTROLLER(30)
                     153   ; #define Can1_ClockDivideReg      CAN1_CONTROLLER(31)
                     154   ; /* address definitions of Acceptance Code & Mask Registers - RESET MODE */
                     155   ; #define Can1_AcceptCode0Reg      CAN1_CONTROLLER(16)
                     156   ; #define Can1_AcceptCode1Reg      CAN1_CONTROLLER(17)
                     157   ; #define Can1_AcceptCode2Reg      CAN1_CONTROLLER(18)
                     158   ; #define Can1_AcceptCode3Reg      CAN1_CONTROLLER(19)
                     159   ; #define Can1_AcceptMask0Reg      CAN1_CONTROLLER(20)
                     160   ; #define Can1_AcceptMask1Reg      CAN1_CONTROLLER(21)
                     161   ; #define Can1_AcceptMask2Reg      CAN1_CONTROLLER(22)
                     162   ; #define Can1_AcceptMask3Reg      CAN1_CONTROLLER(23)
                     163   ; /* address definitions Rx Buffer - OPERATING MODE - Read only register*/
                     164   ; #define Can1_RxFrameInfo         CAN1_CONTROLLER(16)
                     165   ; #define Can1_RxBuffer1           CAN1_CONTROLLER(17)
                     166   ; #define Can1_RxBuffer2           CAN1_CONTROLLER(18)
                     167   ; #define Can1_RxBuffer3           CAN1_CONTROLLER(19)
                     168   ; #define Can1_RxBuffer4           CAN1_CONTROLLER(20)
                     169   ; #define Can1_RxBuffer5           CAN1_CONTROLLER(21)
                     170   ; #define Can1_RxBuffer6           CAN1_CONTROLLER(22)
                     171   ; #define Can1_RxBuffer7           CAN1_CONTROLLER(23)
                     172   ; #define Can1_RxBuffer8           CAN1_CONTROLLER(24)
                     173   ; #define Can1_RxBuffer9           CAN1_CONTROLLER(25)
                     174   ; #define Can1_RxBuffer10          CAN1_CONTROLLER(26)
                     175   ; #define Can1_RxBuffer11          CAN1_CONTROLLER(27)
                     176   ; #define Can1_RxBuffer12          CAN1_CONTROLLER(28)
                     177   ; /* address definitions of the Tx-Buffer - OPERATING MODE - Write only register */
                     178   ; #define Can1_TxFrameInfo         CAN1_CONTROLLER(16)
                     179   ; #define Can1_TxBuffer1           CAN1_CONTROLLER(17)
                     180   ; #define Can1_TxBuffer2           CAN1_CONTROLLER(18)
                     181   ; #define Can1_TxBuffer3           CAN1_CONTROLLER(19)
                     182   ; #define Can1_TxBuffer4           CAN1_CONTROLLER(20)
                     183   ; #define Can1_TxBuffer5           CAN1_CONTROLLER(21)
                     184   ; #define Can1_TxBuffer6           CAN1_CONTROLLER(22)
                     185   ; #define Can1_TxBuffer7           CAN1_CONTROLLER(23)
                     186   ; #define Can1_TxBuffer8           CAN1_CONTROLLER(24)
                     187   ; #define Can1_TxBuffer9           CAN1_CONTROLLER(25)
                     188   ; #define Can1_TxBuffer10          CAN1_CONTROLLER(26)
                     189   ; #define Can1_TxBuffer11          CAN1_CONTROLLER(27)
                     190   ; #define Can1_TxBuffer12          CAN1_CONTROLLER(28)
                     191   ; /* read only addresses */
                     192   ; #define Can1_TxFrameInfoRd       CAN1_CONTROLLER(96)
                     193   ; #define Can1_TxBufferRd1         CAN1_CONTROLLER(97)
                     194   ; #define Can1_TxBufferRd2         CAN1_CONTROLLER(98)
                     195   ; #define Can1_TxBufferRd3         CAN1_CONTROLLER(99)
                     196   ; #define Can1_TxBufferRd4         CAN1_CONTROLLER(100)
                     197   ; #define Can1_TxBufferRd5         CAN1_CONTROLLER(101)
                     198   ; #define Can1_TxBufferRd6         CAN1_CONTROLLER(102)
                     199   ; #define Can1_TxBufferRd7         CAN1_CONTROLLER(103)
                     200   ; #define Can1_TxBufferRd8         CAN1_CONTROLLER(104)
                     201   ; #define Can1_TxBufferRd9         CAN1_CONTROLLER(105)
                     202   ; #define Can1_TxBufferRd10        CAN1_CONTROLLER(106)
                     203   ; #define Can1_TxBufferRd11        CAN1_CONTROLLER(107)
                     204   ; #define Can1_TxBufferRd12        CAN1_CONTROLLER(108)
                     205   ; /* bit definitions for the Mode & Control Register */
                     206   ; #define RM_RR_Bit 0x01 /* reset mode (request) bit */
                     207   ; #define LOM_Bit 0x02 /* listen only mode bit */
                     208   ; #define STM_Bit 0x04 /* self test mode bit */
                     209   ; #define AFM_Bit 0x08 /* acceptance filter mode bit */
                     210   ; #define SM_Bit  0x10 /* enter sleep mode bit */
                     211   ; /* bit definitions for the Interrupt Enable & Control Register */
                     212   ; #define RIE_Bit 0x01 /* receive interrupt enable bit */
                     213   ; #define TIE_Bit 0x02 /* transmit interrupt enable bit */
                     214   ; #define EIE_Bit 0x04 /* error warning interrupt enable bit */
                     215   ; #define DOIE_Bit 0x08 /* data overrun interrupt enable bit */
                     216   ; #define WUIE_Bit 0x10 /* wake-up interrupt enable bit */
                     217   ; #define EPIE_Bit 0x20 /* error passive interrupt enable bit */
                     218   ; #define ALIE_Bit 0x40 /* arbitration lost interr. enable bit*/
                     219   ; #define BEIE_Bit 0x80 /* bus error interrupt enable bit */
                     220   ; /* bit definitions for the Command Register */
                     221   ; #define TR_Bit 0x01 /* transmission request bit */
                     222   ; #define AT_Bit 0x02 /* abort transmission bit */
                     223   ; #define RRB_Bit 0x04 /* release receive buffer bit */
                     224   ; #define CDO_Bit 0x08 /* clear data overrun bit */
                     225   ; #define SRR_Bit 0x10 /* self reception request bit */
                     226   ; /* bit definitions for the Status Register */
                     227   ; #define RBS_Bit 0x01 /* receive buffer status bit */
                     228   ; #define DOS_Bit 0x02 /* data overrun status bit */
                     229   ; #define TBS_Bit 0x04 /* transmit buffer status bit */
                     230   ; #define TCS_Bit 0x08 /* transmission complete status bit */
                     231   ; #define RS_Bit 0x10 /* receive status bit */
                     232   ; #define TS_Bit 0x20 /* transmit status bit */
                     233   ; #define ES_Bit 0x40 /* error status bit */
                     234   ; #define BS_Bit 0x80 /* bus status bit */
                     235   ; /* bit definitions for the Interrupt Register */
                     236   ; #define RI_Bit 0x01 /* receive interrupt bit */
                     237   ; #define TI_Bit 0x02 /* transmit interrupt bit */
                     238   ; #define EI_Bit 0x04 /* error warning interrupt bit */
                     239   ; #define DOI_Bit 0x08 /* data overrun interrupt bit */
                     240   ; #define WUI_Bit 0x10 /* wake-up interrupt bit */
                     241   ; #define EPI_Bit 0x20 /* error passive interrupt bit */
                     242   ; #define ALI_Bit 0x40 /* arbitration lost interrupt bit */
                     243   ; #define BEI_Bit 0x80 /* bus error interrupt bit */
                     244   ; /* bit definitions for the Bus Timing Registers */
                     245   ; #define SAM_Bit 0x80                        /* sample mode bit 1 == the bus is sampled 3 times, 0 == the bus is sampled once */
                     246   ; /* bit definitions for the Output Control Register OCMODE1, OCMODE0 */
                     247   ; #define BiPhaseMode 0x00 /* bi-phase output mode */
                     248   ; #define NormalMode 0x02 /* normal output mode */
                     249   ; #define ClkOutMode 0x03 /* clock output mode */
                     250   ; /* output pin configuration for TX1 */
                     251   ; #define OCPOL1_Bit 0x20 /* output polarity control bit */
                     252   ; #define Tx1Float 0x00 /* configured as float */
                     253   ; #define Tx1PullDn 0x40 /* configured as pull-down */
                     254   ; #define Tx1PullUp 0x80 /* configured as pull-up */
                     255   ; #define Tx1PshPull 0xC0 /* configured as push/pull */
                     256   ; /* output pin configuration for TX0 */
                     257   ; #define OCPOL0_Bit 0x04 /* output polarity control bit */
                     258   ; #define Tx0Float 0x00 /* configured as float */
                     259   ; #define Tx0PullDn 0x08 /* configured as pull-down */
                     260   ; #define Tx0PullUp 0x10 /* configured as pull-up */
                     261   ; #define Tx0PshPull 0x18 /* configured as push/pull */
                     262   ; /* bit definitions for the Clock Divider Register */
                     263   ; #define DivBy1 0x07 /* CLKOUT = oscillator frequency */
                     264   ; #define DivBy2 0x00 /* CLKOUT = 1/2 oscillator frequency */
                     265   ; #define ClkOff_Bit 0x08 /* clock off bit, control of the CLK OUT pin */
                     266   ; #define RXINTEN_Bit 0x20 /* pin TX1 used for receive interrupt */
                     267   ; #define CBP_Bit 0x40 /* CAN comparator bypass control bit */
                     268   ; #define CANMode_Bit 0x80 /* CAN mode definition bit */
                     269   ; /*- definition of used constants ---------------------------------------*/
                     270   ; #define YES 1
                     271   ; #define NO 0
                     272   ; #define ENABLE 1
                     273   ; #define DISABLE 0
                     274   ; #define ENABLE_N 0
                     275   ; #define DISABLE_N 1
                     276   ; #define INTLEVELACT 0
                     277   ; #define INTEDGEACT 1
                     278   ; #define PRIORITY_LOW 0
                     279   ; #define PRIORITY_HIGH 1
                     280   ; /* default (reset) value for register content, clear register */
                     281   ; #define ClrByte 0x00
                     282   ; /* constant: clear Interrupt Enable Register */
                     283   ; #define ClrIntEnSJA ClrByte
                     284   ; /* definitions for the acceptance code and mask register */
                     285   ; #define DontCare 0xFF
                     286   ; /*  bus timing values for
                     287   ; **  bit-rate : 100 kBit/s
                     288   ; **  oscillator frequency : 25 MHz, 1 sample per bit, 0 tolerance %
                     289   ; **  maximum tolerated propagation delay : 4450 ns
                     290   ; **  minimum requested propagation delay : 500 ns
                     291   ; **
                     292   ; **  https://www.kvaser.com/support/calculators/bit-timing-calculator/
                     293   ; **  T1 	T2 	BTQ 	SP% 	SJW 	BIT RATE 	ERR% 	BTR0 	BTR1
                     294   ; **  17	8	25	    68	     1	      100	    0	      04	7f
                     295   ; */
                     296   ; #define SJW 1
                     297   ; #define Presc 10
                     298   ; #define TSEG1 16
                     299   ; #define TSEG2 8
                     300   ; // initialisation for Can controller 0
                     301   ; void Init_CanBus_Controller0(void)
                     302   ; {
                     303   _Init_CanBus_Controller0:
                     304   ; // TODO - put your Canbus initialisation code for CanController 0 here
                     305   ; // See section 4.2.1 in the application note for details (PELICAN MODE)
                     306   ; // Can0_InterruptReg = DISABLE; /* disable all interrupts */
                     307   ; /* set reset mode/request (Note: after power-on SJA1000 is in BasicCAN mode)*/
                     308   ; while((Can0_ModeControlReg & RM_RR_Bit) == ClrByte){
                     309   Init_CanBus_Controller0_1:
0800003E  1039 0050  310          move.b    5242880,D0
08000042  0000      
08000044  C03C 0001  311          and.b     #1,D0
08000048  661E       312          bne.s     Init_CanBus_Controller0_3
                     313   ; // Set Request reset mode (other bits remain unchanged)
                     314   ; Can0_ModeControlReg = Can0_ModeControlReg | RM_RR_Bit;
0800004A  1039 0050  315          move.b    5242880,D0
0800004E  0000      
08000050  803C 0001  316          or.b      #1,D0
08000054  13C0 0050  317          move.b    D0,5242880
08000058  0000      
                     318   ; delay(1); 
0800005A  4878 0001  319          pea       1
0800005E  4EB9 0800  320          jsr       _delay
08000062  04C8      
08000064  584F       321          addq.w    #4,A7
08000066  60D6       322          bra       Init_CanBus_Controller0_1
                     323   Init_CanBus_Controller0_3:
                     324   ; }
                     325   ; // Configure Clock Divider Register
                     326   ; Can0_ClockDivideReg = CANMode_Bit | CBP_Bit | DivBy1 | ClkOff_Bit;
08000068  13FC 00CF  327          move.b    #207,5242942
0800006C  0050 003E 
                     328   ; // Disable Can Interrupts
                     329   ; Can0_InterruptEnReg = ClrIntEnSJA;
08000070  4239 0050  330          clr.b     5242888
08000074  0008      
                     331   ; // Define Acceptance Code
                     332   ; Can0_AcceptCode0Reg = ClrByte;
08000076  4239 0050  333          clr.b     5242912
0800007A  0020      
                     334   ; Can0_AcceptCode1Reg = ClrByte;
0800007C  4239 0050  335          clr.b     5242914
08000080  0022      
                     336   ; Can0_AcceptCode2Reg = ClrByte;
08000082  4239 0050  337          clr.b     5242916
08000086  0024      
                     338   ; Can0_AcceptCode3Reg = ClrByte;
08000088  4239 0050  339          clr.b     5242918
0800008C  0026      
                     340   ; // Define Mask
                     341   ; Can0_AcceptMask0Reg = DontCare;
0800008E  13FC 00FF  342          move.b    #255,5242920
08000092  0050 0028 
                     343   ; Can0_AcceptMask1Reg = DontCare;
08000096  13FC 00FF  344          move.b    #255,5242922
0800009A  0050 002A 
                     345   ; Can0_AcceptMask2Reg = DontCare;
0800009E  13FC 00FF  346          move.b    #255,5242924
080000A2  0050 002C 
                     347   ; Can0_AcceptMask3Reg = DontCare;
080000A6  13FC 00FF  348          move.b    #255,5242926
080000AA  0050 002E 
                     349   ; Can0_TxErrCountReg = ClrByte;
080000AE  4239 0050  350          clr.b     5242910
080000B2  001E      
                     351   ; Can0_RxErrCountReg = ClrByte;
080000B4  4239 0050  352          clr.b     5242908
080000B8  001C      
                     353   ; // Configure Bus Timing
                     354   ; // Bit-rate = 100 kBit/s @ 25 MHz, bus is sample once
                     355   ; Can0_BusTiming0Reg = 0x04; // SJW | Presc;
080000BA  13FC 0004  356          move.b    #4,5242892
080000BE  0050 000C 
                     357   ; Can0_BusTiming1Reg = 0x7f; // TSEG2 | TSEG1;
080000C2  13FC 007F  358          move.b    #127,5242894
080000C6  0050 000E 
                     359   ; // Configure CAN outputs: float on TX1, Push/Pull on TX0, normal output mode
                     360   ; Can0_OutControlReg = Tx1PshPull | Tx0PshPull | NormalMode;
080000CA  13FC 00DA  361          move.b    #218,5242896
080000CE  0050 0010 
                     362   ; /* leave the reset mode/request i.e. switch to operating mode, 
                     363   ; the interrupts of the S87C654 are enabled but not the CAN interrupts of the SJA1000,
                     364   ; which can be done separately for the different tasks in a system */
                     365   ; /* clear Reset Mode bit, select dual Acceptance Filter Mode,
                     366   ; switch off Self Test Mode and Listen Only Mode, clear Sleep Mode (wake up) */
                     367   ; do /* wait until RM_RR_Bit is cleared */
                     368   Init_CanBus_Controller0_4:
                     369   ; {
                     370   ; Can0_ModeControlReg = ClrByte;
080000D2  4239 0050  371          clr.b     5242880
080000D6  0000      
080000D8  1039 0050  372          move.b    5242880,D0
080000DC  0000      
080000DE  C03C 0001  373          and.b     #1,D0
080000E2  66EE       374          bne       Init_CanBus_Controller0_4
                     375   ; } while((Can0_ModeControlReg & RM_RR_Bit ) != ClrByte);
                     376   ; Can0_CommandReg = RRB_Bit | CDO_Bit;    
080000E4  13FC 000C  377          move.b    #12,5242882
080000E8  0050 0002 
080000EC  4E75       378          rts
                     379   ; }
                     380   ; // initialisation for Can controller 1
                     381   ; void Init_CanBus_Controller1(void)
                     382   ; {
                     383   _Init_CanBus_Controller1:
                     384   ; // TODO - put your Canbus initialisation code for CanController 1 here
                     385   ; // See section 4.2.1 in the application note for details (PELICAN MODE)
                     386   ; // Can1_InterruptReg = DISABLE; /* disable all interrupts */
                     387   ; /* set reset mode/request (Note: after power-on SJA1000 is in BasicCAN mode)*/
                     388   ; while((Can1_ModeControlReg & RM_RR_Bit) == ClrByte){
                     389   Init_CanBus_Controller1_1:
080000EE  1039 0050  390          move.b    5243392,D0
080000F2  0200      
080000F4  C03C 0001  391          and.b     #1,D0
080000F8  661E       392          bne.s     Init_CanBus_Controller1_3
                     393   ; // Set Request reset mode (other bits remain unchanged)
                     394   ; Can1_ModeControlReg = Can1_ModeControlReg | RM_RR_Bit;
080000FA  1039 0050  395          move.b    5243392,D0
080000FE  0200      
08000100  803C 0001  396          or.b      #1,D0
08000104  13C0 0050  397          move.b    D0,5243392
08000108  0200      
                     398   ; delay(1);
0800010A  4878 0001  399          pea       1
0800010E  4EB9 0800  400          jsr       _delay
08000112  04C8      
08000114  584F       401          addq.w    #4,A7
08000116  60D6       402          bra       Init_CanBus_Controller1_1
                     403   Init_CanBus_Controller1_3:
                     404   ; }
                     405   ; // Configure Clock Divider Register
                     406   ; Can1_ClockDivideReg = CANMode_Bit | CBP_Bit | DivBy1 | ClkOff_Bit;
08000118  13FC 00CF  407          move.b    #207,5243454
0800011C  0050 023E 
                     408   ; // Disable Can Interrupts
                     409   ; Can1_InterruptEnReg = ClrIntEnSJA;
08000120  4239 0050  410          clr.b     5243400
08000124  0208      
                     411   ; // Define Acceptance Code and Mask
                     412   ; Can1_AcceptCode0Reg = ClrByte;
08000126  4239 0050  413          clr.b     5243424
0800012A  0220      
                     414   ; Can1_AcceptCode1Reg = ClrByte;
0800012C  4239 0050  415          clr.b     5243426
08000130  0222      
                     416   ; Can1_AcceptCode2Reg = ClrByte;
08000132  4239 0050  417          clr.b     5243428
08000136  0224      
                     418   ; Can1_AcceptCode3Reg = ClrByte;
08000138  4239 0050  419          clr.b     5243430
0800013C  0226      
                     420   ; Can1_AcceptMask0Reg = DontCare;
0800013E  13FC 00FF  421          move.b    #255,5243432
08000142  0050 0228 
                     422   ; Can1_AcceptMask1Reg = DontCare;
08000146  13FC 00FF  423          move.b    #255,5243434
0800014A  0050 022A 
                     424   ; Can1_AcceptMask2Reg = DontCare;
0800014E  13FC 00FF  425          move.b    #255,5243436
08000152  0050 022C 
                     426   ; Can1_AcceptMask3Reg = DontCare;
08000156  13FC 00FF  427          move.b    #255,5243438
0800015A  0050 022E 
                     428   ; Can1_TxErrCountReg = ClrByte;
0800015E  4239 0050  429          clr.b     5243422
08000162  021E      
                     430   ; Can1_RxErrCountReg = ClrByte;
08000164  4239 0050  431          clr.b     5243420
08000168  021C      
                     432   ; // Configure Bus Timing
                     433   ; // Bit-rate = 100 kBit/s @ 25 MHz, bus is sample once
                     434   ; Can1_BusTiming0Reg = 0x04; // SJW | Presc;
0800016A  13FC 0004  435          move.b    #4,5243404
0800016E  0050 020C 
                     436   ; Can1_BusTiming1Reg = 0x7f; // TSEG2 | TSEG1;
08000172  13FC 007F  437          move.b    #127,5243406
08000176  0050 020E 
                     438   ; // Configure CAN outputs: float on TX1, Push/Pull on TX0, normal output mode
                     439   ; Can1_OutControlReg = Tx1PshPull | Tx0PshPull | NormalMode;
0800017A  13FC 00DA  440          move.b    #218,5243408
0800017E  0050 0210 
                     441   ; /* leave the reset mode/request i.e. switch to operating mode, 
                     442   ; the interrupts of the S87C654 are enabled but not the CAN interrupts of the SJA1000,
                     443   ; which can be done separately for the different tasks in a system */
                     444   ; /* clear Reset Mode bit, select dual Acceptance Filter Mode,
                     445   ; switch off Self Test Mode and Listen Only Mode, clear Sleep Mode (wake up) */
                     446   ; do /* wait until RM_RR_Bit is cleared */
                     447   Init_CanBus_Controller1_4:
                     448   ; {
                     449   ; Can1_ModeControlReg = ClrByte;
08000182  4239 0050  450          clr.b     5243392
08000186  0200      
                     451   ; delay(1);
08000188  4878 0001  452          pea       1
0800018C  4EB9 0800  453          jsr       _delay
08000190  04C8      
08000192  584F       454          addq.w    #4,A7
08000194  1039 0050  455          move.b    5243392,D0
08000198  0200      
0800019A  C03C 0001  456          and.b     #1,D0
0800019E  66E2       457          bne       Init_CanBus_Controller1_4
                     458   ; } while((Can1_ModeControlReg & RM_RR_Bit ) != ClrByte);
                     459   ; Can1_CommandReg = RRB_Bit | CDO_Bit;
080001A0  13FC 000C  460          move.b    #12,5243394
080001A4  0050 0202 
080001A8  4E75       461          rts
                     462   ; /* disable all interrupts */
                     463   ; // Can0_InterruptReg = ClrIntEnSJA;
                     464   ; // Can0_InterruptEnReg = ClrIntEnSJA;
                     465   ; }
                     466   ; // Transmit for sending a message via Can controller 0
                     467   ; void CanBus0_Transmit(void)
                     468   ; {
                     469   _CanBus0_Transmit:
080001AA  48E7 2020  470          movem.l   D2/A2,-(A7)
080001AE  45F9 0800  471          lea       _printf.L,A2
080001B2  069C      
                     472   ; // TODO - put your Canbus transmit code for CanController 0 here
                     473   ; // See section 4.2.2 in the application note for details (PELICAN MODE)
                     474   ; unsigned int nodeAddress = 0x0355;
080001B4  243C 0000  475          move.l    #853,D2
080001B8  0355      
                     476   ; /* wait until the Transmit Buffer is released */
                     477   ; while((Can0_StatusReg & TBS_Bit ) != TBS_Bit);
                     478   CanBus0_Transmit_1:
080001BA  1039 0050  479          move.b    5242884,D0
080001BE  0004      
080001C0  C03C 0004  480          and.b     #4,D0
080001C4  0C00 0004  481          cmp.b     #4,D0
080001C8  6702       482          beq.s     CanBus0_Transmit_3
080001CA  60EE       483          bra       CanBus0_Transmit_1
                     484   CanBus0_Transmit_3:
                     485   ; /* Transmit Buffer is released, a message may be written into the buffer */
                     486   ; /* in this example a Standard Frame message shall be transmitted */
                     487   ; Can0_TxFrameInfo = 0x08; /* SFF (data), DLC=8 */
080001CC  13FC 0008  488          move.b    #8,5242912
080001D0  0050 0020 
                     489   ; Can0_TxBuffer1 = (nodeAddress >> 3); /* ID1 = A0, (0000 0000) */
080001D4  2002       490          move.l    D2,D0
080001D6  E688       491          lsr.l     #3,D0
080001D8  13C0 0050  492          move.b    D0,5242914
080001DC  0022      
                     493   ; Can0_TxBuffer2 =  (nodeAddress << 5); /* ID2 = A1, (0010 0000) */
080001DE  2002       494          move.l    D2,D0
080001E0  EB88       495          lsl.l     #5,D0
080001E2  13C0 0050  496          move.b    D0,5242916
080001E6  0024      
                     497   ; Can0_TxBuffer3 = 0x51; /* data1 = 51 */
080001E8  13FC 0051  498          move.b    #81,5242918
080001EC  0050 0026 
                     499   ; Can0_TxBuffer4 = 0x52; /* data2 = 52 */
080001F0  13FC 0052  500          move.b    #82,5242920
080001F4  0050 0028 
                     501   ; Can0_TxBuffer5 = 0x53; /* data3 = 53 */
080001F8  13FC 0053  502          move.b    #83,5242922
080001FC  0050 002A 
                     503   ; Can0_TxBuffer6 = 0x54; /* data4 = 54 */
08000200  13FC 0054  504          move.b    #84,5242924
08000204  0050 002C 
                     505   ; Can0_TxBuffer7 = 0x55; /* data5 = 55 */
08000208  13FC 0055  506          move.b    #85,5242926
0800020C  0050 002E 
                     507   ; Can0_TxBuffer8 = 0x56; /* data6 = 56 */
08000210  13FC 0056  508          move.b    #86,5242928
08000214  0050 0030 
                     509   ; Can0_TxBuffer9 = 0x57; /* data7 = 57 */
08000218  13FC 0057  510          move.b    #87,5242930
0800021C  0050 0032 
                     511   ; Can0_TxBuffer10 = 0x58; /* data8 = 58 */
08000220  13FC 0058  512          move.b    #88,5242932
08000224  0050 0034 
                     513   ; printf("Can0 StatusReg = 0x%X\r\n", Can0_StatusReg);
08000228  1239 0050  514          move.b    5242884,D1
0800022C  0004      
0800022E  C2BC 0000  515          and.l     #255,D1
08000232  00FF      
08000234  2F01       516          move.l    D1,-(A7)
08000236  4879 0800  517          pea       @canbus~1_1.L
0800023A  1060      
0800023C  4E92       518          jsr       (A2)
0800023E  504F       519          addq.w    #8,A7
                     520   ; printf("Can1 StatusReg = 0x%X\r\n", Can1_StatusReg);
08000240  1239 0050  521          move.b    5243396,D1
08000244  0204      
08000246  C2BC 0000  522          and.l     #255,D1
0800024A  00FF      
0800024C  2F01       523          move.l    D1,-(A7)
0800024E  4879 0800  524          pea       @canbus~1_2.L
08000252  1078      
08000254  4E92       525          jsr       (A2)
08000256  504F       526          addq.w    #8,A7
                     527   ; printf("Can0 Control Register = 0x%X\r\n", Can0_ModeControlReg);
08000258  1239 0050  528          move.b    5242880,D1
0800025C  0000      
0800025E  C2BC 0000  529          and.l     #255,D1
08000262  00FF      
08000264  2F01       530          move.l    D1,-(A7)
08000266  4879 0800  531          pea       @canbus~1_3.L
0800026A  1090      
0800026C  4E92       532          jsr       (A2)
0800026E  504F       533          addq.w    #8,A7
                     534   ; printf("Can1 Control Register = 0x%X\r\n", Can1_ModeControlReg);
08000270  1239 0050  535          move.b    5243392,D1
08000274  0200      
08000276  C2BC 0000  536          and.l     #255,D1
0800027A  00FF      
0800027C  2F01       537          move.l    D1,-(A7)
0800027E  4879 0800  538          pea       @canbus~1_4.L
08000282  10B0      
08000284  4E92       539          jsr       (A2)
08000286  504F       540          addq.w    #8,A7
                     541   ; /* Start the transmission */
                     542   ; Can0_CommandReg = TR_Bit ; /* Set Transmission Request bit */
08000288  13FC 0001  543          move.b    #1,5242882
0800028C  0050 0002 
                     544   ; while((Can0_StatusReg & TCS_Bit) != TCS_Bit){
                     545   CanBus0_Transmit_4:
08000290  1039 0050  546          move.b    5242884,D0
08000294  0004      
08000296  C03C 0008  547          and.b     #8,D0
0800029A  0C00 0008  548          cmp.b     #8,D0
0800029E  671A       549          beq.s     CanBus0_Transmit_6
                     550   ; printf("Error Code = 0x%X \r\n", Can0_ErrCodeCapReg);
080002A0  1239 0050  551          move.b    5242904,D1
080002A4  0018      
080002A6  C2BC 0000  552          and.l     #255,D1
080002AA  00FF      
080002AC  2F01       553          move.l    D1,-(A7)
080002AE  4879 0800  554          pea       @canbus~1_5.L
080002B2  10D0      
080002B4  4E92       555          jsr       (A2)
080002B6  504F       556          addq.w    #8,A7
080002B8  60D6       557          bra       CanBus0_Transmit_4
                     558   CanBus0_Transmit_6:
                     559   ; };
                     560   ; printf("Can0 Control Register = 0x%X --Post TR--\r\n", Can0_ModeControlReg);
080002BA  1239 0050  561          move.b    5242880,D1
080002BE  0000      
080002C0  C2BC 0000  562          and.l     #255,D1
080002C4  00FF      
080002C6  2F01       563          move.l    D1,-(A7)
080002C8  4879 0800  564          pea       @canbus~1_6.L
080002CC  10E6      
080002CE  4E92       565          jsr       (A2)
080002D0  504F       566          addq.w    #8,A7
                     567   ; printf("Can1 Control Register = 0x%X --Post TR--\r\n", Can1_ModeControlReg);
080002D2  1239 0050  568          move.b    5243392,D1
080002D6  0200      
080002D8  C2BC 0000  569          and.l     #255,D1
080002DC  00FF      
080002DE  2F01       570          move.l    D1,-(A7)
080002E0  4879 0800  571          pea       @canbus~1_7.L
080002E4  1112      
080002E6  4E92       572          jsr       (A2)
080002E8  504F       573          addq.w    #8,A7
                     574   ; delay(1);
080002EA  4878 0001  575          pea       1
080002EE  4EB9 0800  576          jsr       _delay
080002F2  04C8      
080002F4  584F       577          addq.w    #4,A7
080002F6  4CDF 0404  578          movem.l   (A7)+,D2/A2
080002FA  4E75       579          rts
                     580   ; }
                     581   ; // Transmit for sending a message via Can controller 1
                     582   ; void CanBus1_Transmit(void)
                     583   ; {
                     584   _CanBus1_Transmit:
080002FC  4E56 FFFC  585          link      A6,#-4
                     586   ; // TODO - put your Canbus transmit code for CanController 1 here
                     587   ; // See section 4.2.2 in the application note for details (PELICAN MODE)
                     588   ; int Node_Address = 0x355;
08000300  2D7C 0000  589          move.l    #853,-4(A6)
08000304  0355 FFFC 
                     590   ; /* wait until the Transmit Buffer is released */
                     591   ; while((Can1_StatusReg & TBS_Bit ) != TBS_Bit);
                     592   CanBus1_Transmit_1:
08000308  1039 0050  593          move.b    5243396,D0
0800030C  0204      
0800030E  C03C 0004  594          and.b     #4,D0
08000312  0C00 0004  595          cmp.b     #4,D0
08000316  6702       596          beq.s     CanBus1_Transmit_3
08000318  60EE       597          bra       CanBus1_Transmit_1
                     598   CanBus1_Transmit_3:
                     599   ; /* Transmit Buffer is released, a message may be written into the buffer */
                     600   ; /* in this example a Standard Frame message shall be transmitted */
                     601   ; Can1_TxFrameInfo = 0x08; /* SFF (data), DLC=8 */
0800031A  13FC 0008  602          move.b    #8,5243424
0800031E  0050 0220 
                     603   ; Can1_TxBuffer1 = 0x00; /* ID1 = A0, (0000 0000) */
08000322  4239 0050  604          clr.b     5243426
08000326  0222      
                     605   ; Can1_TxBuffer2 = 0x20; /* ID2 = A1, (0010 0000) */
08000328  13FC 0020  606          move.b    #32,5243428
0800032C  0050 0224 
                     607   ; Can1_TxBuffer3 = 0x51; /* data1 = DE */
08000330  13FC 0051  608          move.b    #81,5243430
08000334  0050 0226 
                     609   ; Can1_TxBuffer4 = 0x52; /* data2 = ED */
08000338  13FC 0052  610          move.b    #82,5243432
0800033C  0050 0228 
                     611   ; Can1_TxBuffer5 = 0x53; /* data3 = BE */
08000340  13FC 0053  612          move.b    #83,5243434
08000344  0050 022A 
                     613   ; Can1_TxBuffer6 = 0x54; /* data4 = EF */
08000348  13FC 0054  614          move.b    #84,5243436
0800034C  0050 022C 
                     615   ; Can1_TxBuffer7 = 0x55; /* data5 = DE */
08000350  13FC 0055  616          move.b    #85,5243438
08000354  0050 022E 
                     617   ; Can1_TxBuffer8 = 0x56; /* data6 = AD */
08000358  13FC 0056  618          move.b    #86,5243440
0800035C  0050 0230 
                     619   ; Can1_TxBuffer9 = 0x57; /* data7 = BE */
08000360  13FC 0057  620          move.b    #87,5243442
08000364  0050 0232 
                     621   ; Can1_TxBuffer10 = 0x58; /* data8 = EF */
08000368  13FC 0058  622          move.b    #88,5243444
0800036C  0050 0234 
                     623   ; /* Start the transmission */
                     624   ; Can1_CommandReg = TR_Bit ; /* Set Transmission Request bit */
08000370  13FC 0001  625          move.b    #1,5243394
08000374  0050 0202 
                     626   ; while((Can1_StatusReg & TCS_Bit) != TCS_Bit);
                     627   CanBus1_Transmit_4:
08000378  1039 0050  628          move.b    5243396,D0
0800037C  0204      
0800037E  C03C 0008  629          and.b     #8,D0
08000382  0C00 0008  630          cmp.b     #8,D0
08000386  6702       631          beq.s     CanBus1_Transmit_6
08000388  60EE       632          bra       CanBus1_Transmit_4
                     633   CanBus1_Transmit_6:
0800038A  4E5E       634          unlk      A6
0800038C  4E75       635          rts
                     636   ; }
                     637   ; // Receive for reading a received message via Can controller 0
                     638   ; void CanBus0_Receive(void)
                     639   ; {
                     640   _CanBus0_Receive:
0800038E  4E56 FFFC  641          link      A6,#-4
08000392  2F0A       642          move.l    A2,-(A7)
08000394  45F9 0800  643          lea       _printf.L,A2
08000398  069C      
                     644   ; // TODO - put your Canbus receive code for CanController 0 here
                     645   ; // See section 4.2.4 in the application note for details (PELICAN MODE)
                     646   ; char recievedByte;
                     647   ; while((Can0_StatusReg & RBS_Bit) != RBS_Bit){
                     648   CanBus0_Receive_1:
0800039A  1039 0050  649          move.b    5242884,D0
0800039E  0004      
080003A0  C03C 0001  650          and.b     #1,D0
080003A4  0C00 0001  651          cmp.b     #1,D0
080003A8  6700 004C  652          beq       CanBus0_Receive_3
                     653   ; printf("Can0_StatusReg = 0x%X\r\n", Can0_StatusReg);
080003AC  1239 0050  654          move.b    5242884,D1
080003B0  0004      
080003B2  C2BC 0000  655          and.l     #255,D1
080003B6  00FF      
080003B8  2F01       656          move.l    D1,-(A7)
080003BA  4879 0800  657          pea       @canbus~1_8.L
080003BE  113E      
080003C0  4E92       658          jsr       (A2)
080003C2  504F       659          addq.w    #8,A7
                     660   ; printf("Can1_StatusReg = 0x%X\r\n", Can1_StatusReg);
080003C4  1239 0050  661          move.b    5243396,D1
080003C8  0204      
080003CA  C2BC 0000  662          and.l     #255,D1
080003CE  00FF      
080003D0  2F01       663          move.l    D1,-(A7)
080003D2  4879 0800  664          pea       @canbus~1_9.L
080003D6  1156      
080003D8  4E92       665          jsr       (A2)
080003DA  504F       666          addq.w    #8,A7
                     667   ; printf("RXBuffer = 0x%X\r\n", Can0_RxBuffer1);
080003DC  1239 0050  668          move.b    5242914,D1
080003E0  0022      
080003E2  C2BC 0000  669          and.l     #255,D1
080003E6  00FF      
080003E8  2F01       670          move.l    D1,-(A7)
080003EA  4879 0800  671          pea       @canbus~1_10.L
080003EE  116E      
080003F0  4E92       672          jsr       (A2)
080003F2  504F       673          addq.w    #8,A7
080003F4  60A4       674          bra       CanBus0_Receive_1
                     675   CanBus0_Receive_3:
                     676   ; };
                     677   ; recievedByte = Can0_RxBuffer1;
080003F6  1D79 0050  678          move.b    5242914,-1(A6)
080003FA  0022 FFFF 
                     679   ; Can0_CommandReg = RRB_Bit;
080003FE  13FC 0004  680          move.b    #4,5242882
08000402  0050 0002 
                     681   ; printf("\r\n Recieved Byte @ CanBus0 = %d\r\n", recievedByte);
08000406  122E FFFF  682          move.b    -1(A6),D1
0800040A  4881       683          ext.w     D1
0800040C  48C1       684          ext.l     D1
0800040E  2F01       685          move.l    D1,-(A7)
08000410  4879 0800  686          pea       @canbus~1_11.L
08000414  1180      
08000416  4E92       687          jsr       (A2)
08000418  504F       688          addq.w    #8,A7
0800041A  245F       689          move.l    (A7)+,A2
0800041C  4E5E       690          unlk      A6
0800041E  4E75       691          rts
                     692   ; }
                     693   ; // Receive for reading a received message via Can controller 1
                     694   ; void CanBus1_Receive(void)
                     695   ; {
                     696   _CanBus1_Receive:
08000420  4E56 FFFC  697          link      A6,#-4
08000424  2F0A       698          move.l    A2,-(A7)
08000426  45F9 0800  699          lea       _printf.L,A2
0800042A  069C      
                     700   ; // TODO - put your Canbus receive code for CanController 1 here
                     701   ; // See section 4.2.4 in the application note for details (PELICAN MODE)
                     702   ; char recievedByte;
                     703   ; printf("Can0 Control Register = 0x%X -- RX --\r\n", Can0_ModeControlReg);
0800042C  1239 0050  704          move.b    5242880,D1
08000430  0000      
08000432  C2BC 0000  705          and.l     #255,D1
08000436  00FF      
08000438  2F01       706          move.l    D1,-(A7)
0800043A  4879 0800  707          pea       @canbus~1_12.L
0800043E  11A2      
08000440  4E92       708          jsr       (A2)
08000442  504F       709          addq.w    #8,A7
                     710   ; printf("Can1 Control Register = 0x%X --RX--\r\n", Can1_ModeControlReg);
08000444  1239 0050  711          move.b    5243392,D1
08000448  0200      
0800044A  C2BC 0000  712          and.l     #255,D1
0800044E  00FF      
08000450  2F01       713          move.l    D1,-(A7)
08000452  4879 0800  714          pea       @canbus~1_13.L
08000456  11CA      
08000458  4E92       715          jsr       (A2)
0800045A  504F       716          addq.w    #8,A7
                     717   ; while((Can1_StatusReg & RBS_Bit) != RBS_Bit){
                     718   CanBus1_Receive_1:
0800045C  1039 0050  719          move.b    5243396,D0
08000460  0204      
08000462  C03C 0001  720          and.b     #1,D0
08000466  0C00 0001  721          cmp.b     #1,D0
0800046A  6732       722          beq.s     CanBus1_Receive_3
                     723   ; printf("Can0_StatusReg = 0x%X\r\n", Can0_StatusReg);
0800046C  1239 0050  724          move.b    5242884,D1
08000470  0004      
08000472  C2BC 0000  725          and.l     #255,D1
08000476  00FF      
08000478  2F01       726          move.l    D1,-(A7)
0800047A  4879 0800  727          pea       @canbus~1_8.L
0800047E  113E      
08000480  4E92       728          jsr       (A2)
08000482  504F       729          addq.w    #8,A7
                     730   ; printf("Can1_StatusReg = 0x%X\r\n", Can1_StatusReg);
08000484  1239 0050  731          move.b    5243396,D1
08000488  0204      
0800048A  C2BC 0000  732          and.l     #255,D1
0800048E  00FF      
08000490  2F01       733          move.l    D1,-(A7)
08000492  4879 0800  734          pea       @canbus~1_9.L
08000496  1156      
08000498  4E92       735          jsr       (A2)
0800049A  504F       736          addq.w    #8,A7
0800049C  60BE       737          bra       CanBus1_Receive_1
                     738   CanBus1_Receive_3:
                     739   ; };
                     740   ; recievedByte = Can1_RxBuffer1;
0800049E  1D79 0050  741          move.b    5243426,-1(A6)
080004A2  0222 FFFF 
                     742   ; Can1_CommandReg = RRB_Bit;
080004A6  13FC 0004  743          move.b    #4,5243394
080004AA  0050 0202 
                     744   ; printf("\r\n Recieved Byte @ CanBus1 = %d\r\n", recievedByte);
080004AE  122E FFFF  745          move.b    -1(A6),D1
080004B2  4881       746          ext.w     D1
080004B4  48C1       747          ext.l     D1
080004B6  2F01       748          move.l    D1,-(A7)
080004B8  4879 0800  749          pea       @canbus~1_14.L
080004BC  11F0      
080004BE  4E92       750          jsr       (A2)
080004C0  504F       751          addq.w    #8,A7
080004C2  245F       752          move.l    (A7)+,A2
080004C4  4E5E       753          unlk      A6
080004C6  4E75       754          rts
                     755   ; }
                     756   ; void delay(int seconds)
                     757   ; {   // this function needs to be finetuned for the specific microprocessor
                     758   _delay:
080004C8  4E56 FFF4  759          link      A6,#-12
080004CC  48E7 3800  760          movem.l   D2/D3/D4,-(A7)
                     761   ; int i, j, k;
                     762   ; int wait_loop0 = 100;
080004D0  2D7C 0000  763          move.l    #100,-8(A6)
080004D4  0064 FFF8 
                     764   ; int wait_loop1 = 100;
080004D8  2D7C 0000  765          move.l    #100,-4(A6)
080004DC  0064 FFFC 
                     766   ; for(i = 0; i < seconds; i++)
080004E0  4284       767          clr.l     D4
                     768   delay_1:
080004E2  B8AE 0008  769          cmp.l     8(A6),D4
080004E6  6C00 0048  770          bge       delay_3
                     771   ; {
                     772   ; for(j = 0; j < wait_loop0; j++)
080004EA  4283       773          clr.l     D3
                     774   delay_4:
080004EC  B6AE FFF8  775          cmp.l     -8(A6),D3
080004F0  6C00 003A  776          bge       delay_6
                     777   ; {
                     778   ; for(k = 0; k < wait_loop1; k++)
080004F4  4282       779          clr.l     D2
                     780   delay_7:
080004F6  B4AE FFFC  781          cmp.l     -4(A6),D2
080004FA  6C2C       782          bge.s     delay_9
                     783   ; {   // waste function, volatile makes sure it is not being optimized out by compiler
                     784   ; int volatile t = 120 * j * i + k;
080004FC  2F03       785          move.l    D3,-(A7)
080004FE  4878 0078  786          pea       120
08000502  4EB9 0800  787          jsr       LMUL
08000506  060E      
08000508  2017       788          move.l    (A7),D0
0800050A  504F       789          addq.w    #8,A7
0800050C  2F00       790          move.l    D0,-(A7)
0800050E  2F04       791          move.l    D4,-(A7)
08000510  4EB9 0800  792          jsr       LMUL
08000514  060E      
08000516  2017       793          move.l    (A7),D0
08000518  504F       794          addq.w    #8,A7
0800051A  D082       795          add.l     D2,D0
0800051C  2D40 FFF4  796          move.l    D0,-12(A6)
                     797   ; t = t + 5;
08000520  5AAE FFF4  798          addq.l    #5,-12(A6)
08000524  5282       799          addq.l    #1,D2
08000526  60CE       800          bra       delay_7
                     801   delay_9:
08000528  5283       802          addq.l    #1,D3
0800052A  60C0       803          bra       delay_4
                     804   delay_6:
0800052C  5284       805          addq.l    #1,D4
0800052E  60B2       806          bra       delay_1
                     807   delay_3:
08000530  4CDF 001C  808          movem.l   (A7)+,D2/D3/D4
08000534  4E5E       809          unlk      A6
08000536  4E75       810          rts
                     811   ; }
                     812   ; }
                     813   ; }
                     814   ; }
                     815   ; void CanBusTest(void)
                     816   ; {
                     817   _CanBusTest:
08000538  2F0A       818          move.l    A2,-(A7)
0800053A  45F9 0800  819          lea       _printf.L,A2
0800053E  069C      
                     820   ; // initialise the two Can controllers
                     821   ; Init_CanBus_Controller0();
08000540  4EB9 0800  822          jsr       _Init_CanBus_Controller0
08000544  003E      
                     823   ; Init_CanBus_Controller1();
08000546  4EB9 0800  824          jsr       _Init_CanBus_Controller1
0800054A  00EE      
                     825   ; printf("\r\n\r\n---- CANBUS Test ----\r\n") ;
0800054C  4879 0800  826          pea       @canbus~1_15.L
08000550  1212      
08000552  4E92       827          jsr       (A2)
08000554  584F       828          addq.w    #4,A7
                     829   ; // simple application to alternately transmit and receive messages from each of two nodes
                     830   ; while(1)
                     831   CanBusTest_1:
                     832   ; {
                     833   ; delay(1);                    // write a routine to delay say 1/2 second so we don't flood the network with messages too quickly
08000556  4878 0001  834          pea       1
0800055A  4EB9 0800  835          jsr       _delay
0800055E  04C8      
08000560  584F       836          addq.w    #4,A7
                     837   ; CanBus1_Transmit() ;        // transmit a message via Controller 1
08000562  4EB9 0800  838          jsr       _CanBus1_Transmit
08000566  02FC      
                     839   ; printf("I am here 3 \r\n");
08000568  4879 0800  840          pea       @canbus~1_16.L
0800056C  122E      
0800056E  4E92       841          jsr       (A2)
08000570  584F       842          addq.w    #4,A7
                     843   ; CanBus0_Receive() ;         // receive a message via Controller 0 (and display it)
08000572  4EB9 0800  844          jsr       _CanBus0_Receive
08000576  038E      
                     845   ; printf("I am here 4 \r\n");
08000578  4879 0800  846          pea       @canbus~1_17.L
0800057C  123E      
0800057E  4E92       847          jsr       (A2)
08000580  584F       848          addq.w    #4,A7
                     849   ; printf("\r\n") ;
08000582  4879 0800  850          pea       @canbus~1_18.L
08000586  124E      
08000588  4E92       851          jsr       (A2)
0800058A  584F       852          addq.w    #4,A7
                     853   ; delay(1);                    // write a routine to delay say 1/2 second so we don't flood the network with messages too quickly
0800058C  4878 0001  854          pea       1
08000590  4EB9 0800  855          jsr       _delay
08000594  04C8      
08000596  584F       856          addq.w    #4,A7
08000598  60BC       857          bra       CanBusTest_1
                     858   ; // printf("Hellooo!!\r\n");
                     859   ; // CanBus0_Transmit() ;       // transmit a message via Controller 0
                     860   ; // printf("I am here 1 \r\n");
                     861   ; // CanBus1_Receive() ;        // receive a message via Controller 1 (and display it)
                     862   ; // printf("I am here 2 \r\n");
                     863   ; // printf("\r\n") ;
                     864   ; }
                     865   ; }
                     866   ; int _getch( void )
                     867   ; {
                     868   __getch:
0800059A  4E56 FFFC  869          link      A6,#-4
                     870   ; char c ;
                     871   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     872   _getch_1:
0800059E  1039 0040  873          move.b    4194368,D0
080005A2  0040      
080005A4  C03C 0001  874          and.b     #1,D0
080005A8  0C00 0001  875          cmp.b     #1,D0
080005AC  6702       876          beq.s     _getch_3
080005AE  60EE       877          bra       _getch_1
                     878   _getch_3:
                     879   ; ;
                     880   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
080005B0  1039 0040  881          move.b    4194370,D0
080005B4  0042      
080005B6  C0BC 0000  882          and.l     #255,D0
080005BA  00FF      
080005BC  C0BC 0000  883          and.l     #127,D0
080005C0  007F      
080005C2  4E5E       884          unlk      A6
080005C4  4E75       885          rts
                     886   ; }
                     887   ; int _putch( int c)
                     888   ; {
                     889   __putch:
080005C6  4E56 0000  890          link      A6,#0
                     891   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     892   _putch_1:
080005CA  1039 0040  893          move.b    4194368,D0
080005CE  0040      
080005D0  C03C 0002  894          and.b     #2,D0
080005D4  0C00 0002  895          cmp.b     #2,D0
080005D8  6702       896          beq.s     _putch_3
080005DA  60EE       897          bra       _putch_1
                     898   _putch_3:
                     899   ; ;
                     900   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
080005DC  202E 0008  901          move.l    8(A6),D0
080005E0  C0BC 0000  902          and.l     #127,D0
080005E4  007F      
080005E6  13C0 0040  903          move.b    D0,4194370
080005EA  0042      
                     904   ; return c ;                                              // putchar() expects the character to be returned
080005EC  202E 0008  905          move.l    8(A6),D0
080005F0  4E5E       906          unlk      A6
080005F2  4E75       907          rts
                     908   ; }
                     909   ; void main(void){
                     910   _main:
                     911   ; CanBusTest();
080005F4  4EB9 0800  912          jsr       _CanBusTest
080005F8  0538      
                     913   ; while(1);
                     914   main_1:
080005FA  60FE       915          bra       main_1
                     916   ; }
                     917   ULMUL:
080005FC  4E56 0000  918          link    A6,#0
08000600  48E7 C000  919          movem.l D0/D1,-(A7)
08000604  222E 0008  920          move.l  8(A6),D1
08000608  202E 000C  921          move.l  12(A6),D0
0800060C  602C       922          bra.s   lmul_3
                     923   LMUL:
0800060E  4E56 0000  924          link    A6,#0
08000612  48E7 C000  925          movem.l D0/D1,-(A7)
08000616  222E 0008  926          move.l  8(A6),D1
0800061A  202E 000C  927          move.l  12(A6),D0
0800061E  4A80       928          tst.l   D0
08000620  6A0A       929          bpl.s   lmul_1
08000622  4480       930          neg.l   D0
08000624  4A81       931          tst.l   D1
08000626  6A0A       932          bpl.s   lmul_2
08000628  4481       933          neg.l   D1
0800062A  600E       934          bra.s   lmul_3
                     935   lmul_1:
0800062C  4A81       936          tst.l   D1
0800062E  6A0A       937          bpl.s   lmul_3
08000630  4481       938          neg.l   D1
                     939   lmul_2:
08000632  6114       940          bsr.s   domul
08000634  4481       941          neg.l   D1
08000636  4080       942          negx.l  D0
08000638  6002       943          bra.s   lmul_4
                     944   lmul_3:
0800063A  610C       945          bsr.s   domul
                     946   lmul_4:
0800063C  2D41 0008  947          move.l  D1,8(A6)
08000640  4CDF 0003  948          movem.l (A7)+,D0/D1
08000644  4E5E       949          unlk    A6
08000646  4E75       950          rts
                     951   domul:
08000648  0C81 0000  952          cmpi.l  #$FFFF,D1
0800064C  FFFF      
0800064E  620C       953          bhi.s   domul_1
08000650  0C80 0000  954          cmpi.l  #$FFFF,D0
08000654  FFFF      
08000656  620E       955          bhi.s   domul_2
08000658  C2C0       956          mulu    D0,D1
0800065A  4E75       957          rts
                     958   domul_1:
0800065C  0C80 0000  959          cmpi.l  #$FFFF,D0
08000660  FFFF      
08000662  6218       960          bhi.s   domul_4
08000664  6002       961          bra.s   domul_3
                     962   domul_2
08000666  C141       963          exg     D0,D1
                     964   domul_3:
08000668  2F02       965          move.l  D2,-(A7)
0800066A  2401       966          move.l  D1,D2
0800066C  4842       967          swap    D2
0800066E  C2C0       968          mulu    D0,D1
08000670  C4C0       969          mulu    D0,D2
08000672  4842       970          swap    D2
08000674  4242       971          clr.w   D2
08000676  D282       972          add.l   D2,D1
08000678  241F       973          move.l  (A7)+,D2
0800067A  4E75       974          rts
                     975   domul_4:
0800067C  48E7 3000  976          movem.l D2/D3,-(A7)
08000680  2401       977          move.l  D1,D2
08000682  2601       978          move.l  D1,D3
08000684  C2C0       979          mulu    D0,D1
08000686  4842       980          swap    D2
08000688  C4C0       981          mulu    D0,D2
0800068A  4840       982          swap    D0
0800068C  C6C0       983          mulu    D0,D3
0800068E  D483       984          add.l   D3,D2
08000690  4842       985          swap    D2
08000692  4242       986          clr.w   D2
08000694  D282       987          add.l   D2,D1
08000696  4CDF 000C  988          movem.l (A7)+,D2/D3
0800069A  4E75       989          rts
                     990   _printf:
0800069C  4E56 FFFC  991          link      A6,#-4
080006A0  2F02       992          move.l    D2,-(A7)
080006A2  41EE 0008  993          lea       8(A6),A0
080006A6  5848       994          addq.w    #4,A0
080006A8  2408       995          move.l    A0,D2
080006AA  2F02       996          move.l    D2,-(A7)
080006AC  2F2E 0008  997          move.l    8(A6),-(A7)
080006B0  42A7       998          clr.l     -(A7)
080006B2  4EB9 0800  999          jsr       _doprint
080006B6  0774      
080006B8  DEFC 000C 1000          add.w     #12,A7
080006BC  2D40 FFFC 1001          move.l    D0,-4(A6)
080006C0  4282      1002          clr.l     D2
080006C2  202E FFFC 1003          move.l    -4(A6),D0
080006C6  241F      1004          move.l    (A7)+,D2
080006C8  4E5E      1005          unlk      A6
080006CA  4E75      1006          rts
                    1007   @doprint_copy:
080006CC  4E56 0000 1008          link      A6,#0
080006D0  206E 0008 1009          move.l    8(A6),A0
080006D4  4A90      1010          tst.l     (A0)
080006D6  6710      1011          beq.s     @doprint_copy_1
080006D8  202E 000C 1012          move.l    12(A6),D0
080006DC  206E 0008 1013          move.l    8(A6),A0
080006E0  2250      1014          move.l    (A0),A1
080006E2  5290      1015          addq.l    #1,(A0)
080006E4  1280      1016          move.b    D0,(A1)
080006E6  600C      1017          bra.s     @doprint_copy_2
                    1018   @doprint_copy_1:
080006E8  2F2E 000C 1019          move.l    12(A6),-(A7)
080006EC  4EB9 0800 1020          jsr       _putch
080006F0  0F26      
080006F2  584F      1021          addq.w    #4,A7
                    1022   @doprint_copy_2:
080006F4  4E5E      1023          unlk      A6
080006F6  4E75      1024          rts
                    1025   @doprint_getval:
080006F8  4E56 0000 1026          link      A6,#0
080006FC  48E7 3000 1027          movem.l   D2/D3,-(A7)
08000700  262E 0008 1028          move.l    8(A6),D3
08000704  4282      1029          clr.l     D2
08000706  2043      1030          move.l    D3,A0
08000708  2050      1031          move.l    (A0),A0
0800070A  1010      1032          move.b    (A0),D0
0800070C  0C00 002A 1033          cmp.b     #42,D0
08000710  6612      1034          bne.s     @doprint_getval_1
08000712  206E 000C 1035          move.l    12(A6),A0
08000716  2250      1036          move.l    (A0),A1
08000718  5890      1037          addq.l    #4,(A0)
0800071A  2411      1038          move.l    (A1),D2
0800071C  2043      1039          move.l    D3,A0
0800071E  5290      1040          addq.l    #1,(A0)
08000720  6000 0048 1041          bra       @doprint_getval_5
                    1042   @doprint_getval_1:
08000724  7001      1043          moveq     #1,D0
08000726  2043      1044          move.l    D3,A0
08000728  2050      1045          move.l    (A0),A0
0800072A  1210      1046          move.b    (A0),D1
0800072C  4881      1047          ext.w     D1
0800072E  48C1      1048          ext.l     D1
08000730  D081      1049          add.l     D1,D0
08000732  41F9 0800 1050          lea       __ctype.L,A0
08000736  125E      
08000738  1030 0800 1051          move.b    0(A0,D0.L),D0
0800073C  C03C 0004 1052          and.b     #4,D0
08000740  6728      1053          beq.s     @doprint_getval_5
08000742  2F02      1054          move.l    D2,-(A7)
08000744  4878 000A 1055          pea       10
08000748  4EB9 0800 1056          jsr       LMUL
0800074C  060E      
0800074E  2017      1057          move.l    (A7),D0
08000750  504F      1058          addq.w    #8,A7
08000752  2043      1059          move.l    D3,A0
08000754  2250      1060          move.l    (A0),A1
08000756  5290      1061          addq.l    #1,(A0)
08000758  1211      1062          move.b    (A1),D1
0800075A  4881      1063          ext.w     D1
0800075C  48C1      1064          ext.l     D1
0800075E  D081      1065          add.l     D1,D0
08000760  0480 0000 1066          sub.l     #48,D0
08000764  0030      
08000766  2400      1067          move.l    D0,D2
08000768  60BA      1068          bra       @doprint_getval_1
                    1069   @doprint_getval_5:
0800076A  2002      1070          move.l    D2,D0
0800076C  4CDF 000C 1071          movem.l   (A7)+,D2/D3
08000770  4E5E      1072          unlk      A6
08000772  4E75      1073          rts
                    1074   _doprint:
08000774  4E56 FFCC 1075          link      A6,#-52
08000778  48E7 3F3C 1076          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0800077C  45EE 0008 1077          lea       8(A6),A2
08000780  47F9 0800 1078          lea       @doprint_copy.L,A3
08000784  06CC      
08000786  49F9 0800 1079          lea       _ultoa.L,A4
0800078A  0EAE      
0800078C  4286      1080          clr.l     D6
                    1081   doprint_1:
0800078E  206E 000C 1082          move.l    12(A6),A0
08000792  4A10      1083          tst.b     (A0)
08000794  6700 05F0 1084          beq       doprint_3
08000798  206E 000C 1085          move.l    12(A6),A0
0800079C  1010      1086          move.b    (A0),D0
0800079E  0C00 0025 1087          cmp.b     #37,D0
080007A2  671C      1088          beq.s     doprint_4
080007A4  206E 000C 1089          move.l    12(A6),A0
080007A8  52AE 000C 1090          addq.l    #1,12(A6)
080007AC  1210      1091          move.b    (A0),D1
080007AE  4881      1092          ext.w     D1
080007B0  48C1      1093          ext.l     D1
080007B2  2F01      1094          move.l    D1,-(A7)
080007B4  2F0A      1095          move.l    A2,-(A7)
080007B6  4E93      1096          jsr       (A3)
080007B8  504F      1097          addq.w    #8,A7
080007BA  5286      1098          addq.l    #1,D6
080007BC  6000 05C4 1099          bra       doprint_2
                    1100   doprint_4:
080007C0  52AE 000C 1101          addq.l    #1,12(A6)
080007C4  422E FFD3 1102          clr.b     -45(A6)
080007C8  422E FFD2 1103          clr.b     -46(A6)
080007CC  422E FFD0 1104          clr.b     -48(A6)
080007D0  422E FFCF 1105          clr.b     -49(A6)
080007D4  422E FFCE 1106          clr.b     -50(A6)
080007D8  422E FFCD 1107          clr.b     -51(A6)
080007DC  42AE FFFC 1108          clr.l     -4(A6)
080007E0  7AFF      1109          moveq     #-1,D5
080007E2  41EE FFDC 1110          lea       -36(A6),A0
080007E6  2608      1111          move.l    A0,D3
080007E8  2408      1112          move.l    A0,D2
                    1113   doprint_6:
080007EA  206E 000C 1114          move.l    12(A6),A0
080007EE  1010      1115          move.b    (A0),D0
080007F0  4880      1116          ext.w     D0
080007F2  48C0      1117          ext.l     D0
080007F4  0C80 0000 1118          cmp.l     #43,D0
080007F8  002B      
080007FA  6730      1119          beq.s     doprint_12
080007FC  6E18      1120          bgt.s     doprint_15
080007FE  0C80 0000 1121          cmp.l     #35,D0
08000802  0023      
08000804  6700 003E 1122          beq       doprint_14
08000808  6E00 0046 1123          bgt       doprint_9
0800080C  0C80 0000 1124          cmp.l     #32,D0
08000810  0020      
08000812  6724      1125          beq.s     doprint_13
08000814  603A      1126          bra.s     doprint_9
                    1127   doprint_15:
08000816  0C80 0000 1128          cmp.l     #45,D0
0800081A  002D      
0800081C  6702      1129          beq.s     doprint_11
0800081E  6030      1130          bra.s     doprint_9
                    1131   doprint_11:
08000820  1D7C 0001 1132          move.b    #1,-51(A6)
08000824  FFCD      
08000826  52AE 000C 1133          addq.l    #1,12(A6)
0800082A  6026      1134          bra.s     doprint_7
                    1135   doprint_12:
0800082C  1D7C 0001 1136          move.b    #1,-50(A6)
08000830  FFCE      
08000832  52AE 000C 1137          addq.l    #1,12(A6)
08000836  601A      1138          bra.s     doprint_7
                    1139   doprint_13:
08000838  1D7C 0001 1140          move.b    #1,-49(A6)
0800083C  FFCF      
0800083E  52AE 000C 1141          addq.l    #1,12(A6)
08000842  600E      1142          bra.s     doprint_7
                    1143   doprint_14:
08000844  1D7C 0001 1144          move.b    #1,-48(A6)
08000848  FFD0      
0800084A  52AE 000C 1145          addq.l    #1,12(A6)
0800084E  6002      1146          bra.s     doprint_7
                    1147   doprint_9:
08000850  6002      1148          bra.s     doprint_8
                    1149   doprint_7:
08000852  6096      1150          bra       doprint_6
                    1151   doprint_8:
08000854  206E 000C 1152          move.l    12(A6),A0
08000858  1010      1153          move.b    (A0),D0
0800085A  0C00 0030 1154          cmp.b     #48,D0
0800085E  660A      1155          bne.s     doprint_16
08000860  52AE 000C 1156          addq.l    #1,12(A6)
08000864  1D7C 0001 1157          move.b    #1,-46(A6)
08000868  FFD2      
                    1158   doprint_16:
0800086A  486E 0010 1159          pea       16(A6)
0800086E  486E 000C 1160          pea       12(A6)
08000872  4EB9 0800 1161          jsr       @doprint_getval
08000876  06F8      
08000878  504F      1162          addq.w    #8,A7
0800087A  2A40      1163          move.l    D0,A5
0800087C  206E 000C 1164          move.l    12(A6),A0
08000880  1010      1165          move.b    (A0),D0
08000882  0C00 002E 1166          cmp.b     #46,D0
08000886  6616      1167          bne.s     doprint_18
08000888  52AE 000C 1168          addq.l    #1,12(A6)
0800088C  486E 0010 1169          pea       16(A6)
08000890  486E 000C 1170          pea       12(A6)
08000894  4EB9 0800 1171          jsr       @doprint_getval
08000898  06F8      
0800089A  504F      1172          addq.w    #8,A7
0800089C  2A00      1173          move.l    D0,D5
                    1174   doprint_18:
0800089E  206E 000C 1175          move.l    12(A6),A0
080008A2  1010      1176          move.b    (A0),D0
080008A4  0C00 006C 1177          cmp.b     #108,D0
080008A8  660A      1178          bne.s     doprint_20
080008AA  52AE 000C 1179          addq.l    #1,12(A6)
080008AE  1D7C 0001 1180          move.b    #1,-45(A6)
080008B2  FFD3      
                    1181   doprint_20:
080008B4  206E 000C 1182          move.l    12(A6),A0
080008B8  1010      1183          move.b    (A0),D0
080008BA  4880      1184          ext.w     D0
080008BC  48C0      1185          ext.l     D0
080008BE  0C80 0000 1186          cmp.l     #111,D0
080008C2  006F      
080008C4  6700 00D8 1187          beq       doprint_27
080008C8  6E34      1188          bgt.s     doprint_33
080008CA  0C80 0000 1189          cmp.l     #100,D0
080008CE  0064      
080008D0  6700 0054 1190          beq       doprint_24
080008D4  6E1C      1191          bgt.s     doprint_34
080008D6  0C80 0000 1192          cmp.l     #99,D0
080008DA  0063      
080008DC  6700 0130 1193          beq       doprint_30
080008E0  6E00 0174 1194          bgt       doprint_22
080008E4  0C80 0000 1195          cmp.l     #88,D0
080008E8  0058      
080008EA  6700 00EA 1196          beq       doprint_28
080008EE  6000 0166 1197          bra       doprint_22
                    1198   doprint_34:
080008F2  0C80 0000 1199          cmp.l     #105,D0
080008F6  0069      
080008F8  672C      1200          beq.s     doprint_24
080008FA  6000 015A 1201          bra       doprint_22
                    1202   doprint_33:
080008FE  0C80 0000 1203          cmp.l     #117,D0
08000902  0075      
08000904  6700 0060 1204          beq       doprint_26
08000908  6E0E      1205          bgt.s     doprint_35
0800090A  0C80 0000 1206          cmp.l     #115,D0
0800090E  0073      
08000910  6700 0124 1207          beq       doprint_31
08000914  6000 0140 1208          bra       doprint_22
                    1209   doprint_35:
08000918  0C80 0000 1210          cmp.l     #120,D0
0800091C  0078      
0800091E  6700 00B6 1211          beq       doprint_28
08000922  6000 0132 1212          bra       doprint_22
                    1213   doprint_24:
08000926  4A2E FFD3 1214          tst.b     -45(A6)
0800092A  671C      1215          beq.s     doprint_36
0800092C  4878 000A 1216          pea       10
08000930  2F03      1217          move.l    D3,-(A7)
08000932  206E 0010 1218          move.l    16(A6),A0
08000936  58AE 0010 1219          addq.l    #4,16(A6)
0800093A  2F10      1220          move.l    (A0),-(A7)
0800093C  4EB9 0800 1221          jsr       _ltoa
08000940  0E26      
08000942  DEFC 000C 1222          add.w     #12,A7
08000946  601A      1223          bra.s     doprint_37
                    1224   doprint_36:
08000948  4878 000A 1225          pea       10
0800094C  2F03      1226          move.l    D3,-(A7)
0800094E  206E 0010 1227          move.l    16(A6),A0
08000952  58AE 0010 1228          addq.l    #4,16(A6)
08000956  2F10      1229          move.l    (A0),-(A7)
08000958  4EB9 0800 1230          jsr       _ltoa
0800095C  0E26      
0800095E  DEFC 000C 1231          add.w     #12,A7
                    1232   doprint_37:
08000962  6000 0100 1233          bra       doprint_23
                    1234   doprint_26:
08000966  4A2E FFD3 1235          tst.b     -45(A6)
0800096A  6718      1236          beq.s     doprint_38
0800096C  4878 000A 1237          pea       10
08000970  2F03      1238          move.l    D3,-(A7)
08000972  206E 0010 1239          move.l    16(A6),A0
08000976  58AE 0010 1240          addq.l    #4,16(A6)
0800097A  2F10      1241          move.l    (A0),-(A7)
0800097C  4E94      1242          jsr       (A4)
0800097E  DEFC 000C 1243          add.w     #12,A7
08000982  6016      1244          bra.s     doprint_39
                    1245   doprint_38:
08000984  4878 000A 1246          pea       10
08000988  2F03      1247          move.l    D3,-(A7)
0800098A  206E 0010 1248          move.l    16(A6),A0
0800098E  58AE 0010 1249          addq.l    #4,16(A6)
08000992  2F10      1250          move.l    (A0),-(A7)
08000994  4E94      1251          jsr       (A4)
08000996  DEFC 000C 1252          add.w     #12,A7
                    1253   doprint_39:
0800099A  6000 00C8 1254          bra       doprint_23
                    1255   doprint_27:
0800099E  4A2E FFD3 1256          tst.b     -45(A6)
080009A2  6718      1257          beq.s     doprint_40
080009A4  4878 0008 1258          pea       8
080009A8  2F03      1259          move.l    D3,-(A7)
080009AA  206E 0010 1260          move.l    16(A6),A0
080009AE  58AE 0010 1261          addq.l    #4,16(A6)
080009B2  2F10      1262          move.l    (A0),-(A7)
080009B4  4E94      1263          jsr       (A4)
080009B6  DEFC 000C 1264          add.w     #12,A7
080009BA  6016      1265          bra.s     doprint_41
                    1266   doprint_40:
080009BC  4878 0008 1267          pea       8
080009C0  2F03      1268          move.l    D3,-(A7)
080009C2  206E 0010 1269          move.l    16(A6),A0
080009C6  58AE 0010 1270          addq.l    #4,16(A6)
080009CA  2F10      1271          move.l    (A0),-(A7)
080009CC  4E94      1272          jsr       (A4)
080009CE  DEFC 000C 1273          add.w     #12,A7
                    1274   doprint_41:
080009D2  6000 0090 1275          bra       doprint_23
                    1276   doprint_28:
080009D6  4A2E FFD3 1277          tst.b     -45(A6)
080009DA  6718      1278          beq.s     doprint_42
080009DC  4878 0010 1279          pea       16
080009E0  2F03      1280          move.l    D3,-(A7)
080009E2  206E 0010 1281          move.l    16(A6),A0
080009E6  58AE 0010 1282          addq.l    #4,16(A6)
080009EA  2F10      1283          move.l    (A0),-(A7)
080009EC  4E94      1284          jsr       (A4)
080009EE  DEFC 000C 1285          add.w     #12,A7
080009F2  6016      1286          bra.s     doprint_43
                    1287   doprint_42:
080009F4  4878 0010 1288          pea       16
080009F8  2F03      1289          move.l    D3,-(A7)
080009FA  206E 0010 1290          move.l    16(A6),A0
080009FE  58AE 0010 1291          addq.l    #4,16(A6)
08000A02  2F10      1292          move.l    (A0),-(A7)
08000A04  4E94      1293          jsr       (A4)
08000A06  DEFC 000C 1294          add.w     #12,A7
                    1295   doprint_43:
08000A0A  6000 0058 1296          bra       doprint_23
                    1297   doprint_30:
08000A0E  206E 0010 1298          move.l    16(A6),A0
08000A12  58AE 0010 1299          addq.l    #4,16(A6)
08000A16  2010      1300          move.l    (A0),D0
08000A18  2042      1301          move.l    D2,A0
08000A1A  5282      1302          addq.l    #1,D2
08000A1C  1080      1303          move.b    D0,(A0)
08000A1E  2042      1304          move.l    D2,A0
08000A20  4210      1305          clr.b     (A0)
08000A22  200D      1306          move.l    A5,D0
08000A24  6704      1307          beq.s     doprint_44
08000A26  200D      1308          move.l    A5,D0
08000A28  6006      1309          bra.s     doprint_45
                    1310   doprint_44:
08000A2A  7001      1311          moveq     #1,D0
08000A2C  4880      1312          ext.w     D0
08000A2E  48C0      1313          ext.l     D0
                    1314   doprint_45:
08000A30  2A00      1315          move.l    D0,D5
08000A32  6000 0030 1316          bra       doprint_23
                    1317   doprint_31:
08000A36  206E 0010 1318          move.l    16(A6),A0
08000A3A  58AE 0010 1319          addq.l    #4,16(A6)
08000A3E  2610      1320          move.l    (A0),D3
08000A40  0C85 FFFF 1321          cmp.l     #-1,D5
08000A44  FFFF      
08000A46  660C      1322          bne.s     doprint_46
08000A48  2F03      1323          move.l    D3,-(A7)
08000A4A  4EB9 0800 1324          jsr       _strlen
08000A4E  0F14      
08000A50  584F      1325          addq.w    #4,A7
08000A52  2A00      1326          move.l    D0,D5
                    1327   doprint_46:
08000A54  600E      1328          bra.s     doprint_23
                    1329   doprint_22:
08000A56  206E 000C 1330          move.l    12(A6),A0
08000A5A  2242      1331          move.l    D2,A1
08000A5C  5282      1332          addq.l    #1,D2
08000A5E  1290      1333          move.b    (A0),(A1)
08000A60  2042      1334          move.l    D2,A0
08000A62  4210      1335          clr.b     (A0)
                    1336   doprint_23:
08000A64  2F03      1337          move.l    D3,-(A7)
08000A66  4EB9 0800 1338          jsr       _strlen
08000A6A  0F14      
08000A6C  584F      1339          addq.w    #4,A7
08000A6E  1800      1340          move.b    D0,D4
08000A70  206E 000C 1341          move.l    12(A6),A0
08000A74  1010      1342          move.b    (A0),D0
08000A76  0C00 0073 1343          cmp.b     #115,D0
08000A7A  661C      1344          bne.s     doprint_48
08000A7C  0C85 0000 1345          cmp.l     #0,D5
08000A80  0000      
08000A82  6D14      1346          blt.s     doprint_48
08000A84  4884      1347          ext.w     D4
08000A86  48C4      1348          ext.l     D4
08000A88  B885      1349          cmp.l     D5,D4
08000A8A  6F04      1350          ble.s     doprint_50
08000A8C  2005      1351          move.l    D5,D0
08000A8E  6006      1352          bra.s     doprint_51
                    1353   doprint_50:
08000A90  1004      1354          move.b    D4,D0
08000A92  4880      1355          ext.w     D0
08000A94  48C0      1356          ext.l     D0
                    1357   doprint_51:
08000A96  1800      1358          move.b    D0,D4
                    1359   doprint_48:
08000A98  206E 000C 1360          move.l    12(A6),A0
08000A9C  1010      1361          move.b    (A0),D0
08000A9E  0C00 0058 1362          cmp.b     #88,D0
08000AA2  6600 0028 1363          bne       doprint_56
08000AA6  41EE FFDC 1364          lea       -36(A6),A0
08000AAA  2408      1365          move.l    A0,D2
                    1366   doprint_54:
08000AAC  2042      1367          move.l    D2,A0
08000AAE  4A10      1368          tst.b     (A0)
08000AB0  671A      1369          beq.s     doprint_56
08000AB2  2042      1370          move.l    D2,A0
08000AB4  1210      1371          move.b    (A0),D1
08000AB6  4881      1372          ext.w     D1
08000AB8  48C1      1373          ext.l     D1
08000ABA  2F01      1374          move.l    D1,-(A7)
08000ABC  4EB9 0800 1375          jsr       _toupper
08000AC0  0F56      
08000AC2  584F      1376          addq.w    #4,A7
08000AC4  2042      1377          move.l    D2,A0
08000AC6  1080      1378          move.b    D0,(A0)
08000AC8  5282      1379          addq.l    #1,D2
08000ACA  60E0      1380          bra       doprint_54
                    1381   doprint_56:
08000ACC  7E00      1382          moveq     #0,D7
08000ACE  41EE FFD4 1383          lea       -44(A6),A0
08000AD2  2408      1384          move.l    A0,D2
08000AD4  206E 000C 1385          move.l    12(A6),A0
08000AD8  1010      1386          move.b    (A0),D0
08000ADA  0C00 0064 1387          cmp.b     #100,D0
08000ADE  670E      1388          beq.s     doprint_59
08000AE0  206E 000C 1389          move.l    12(A6),A0
08000AE4  1010      1390          move.b    (A0),D0
08000AE6  0C00 0069 1391          cmp.b     #105,D0
08000AEA  6600 0068 1392          bne       doprint_65
                    1393   doprint_59:
08000AEE  102E FFCE 1394          move.b    -50(A6),D0
08000AF2  4880      1395          ext.w     D0
08000AF4  48C0      1396          ext.l     D0
08000AF6  4A80      1397          tst.l     D0
08000AF8  660C      1398          bne.s     doprint_62
08000AFA  2043      1399          move.l    D3,A0
08000AFC  1010      1400          move.b    (A0),D0
08000AFE  0C00 002D 1401          cmp.b     #45,D0
08000B02  6600 0028 1402          bne       doprint_60
                    1403   doprint_62:
08000B06  2043      1404          move.l    D3,A0
08000B08  1010      1405          move.b    (A0),D0
08000B0A  0C00 002D 1406          cmp.b     #45,D0
08000B0E  660E      1407          bne.s     doprint_63
08000B10  2043      1408          move.l    D3,A0
08000B12  5283      1409          addq.l    #1,D3
08000B14  2242      1410          move.l    D2,A1
08000B16  5282      1411          addq.l    #1,D2
08000B18  1290      1412          move.b    (A0),(A1)
08000B1A  5304      1413          subq.b    #1,D4
08000B1C  6008      1414          bra.s     doprint_64
                    1415   doprint_63:
08000B1E  2042      1416          move.l    D2,A0
08000B20  5282      1417          addq.l    #1,D2
08000B22  10BC 002B 1418          move.b    #43,(A0)
                    1419   doprint_64:
08000B26  5287      1420          addq.l    #1,D7
08000B28  6000 002A 1421          bra       doprint_65
                    1422   doprint_60:
08000B2C  4A2E FFCF 1423          tst.b     -49(A6)
08000B30  6722      1424          beq.s     doprint_65
08000B32  2043      1425          move.l    D3,A0
08000B34  1010      1426          move.b    (A0),D0
08000B36  0C00 002D 1427          cmp.b     #45,D0
08000B3A  660E      1428          bne.s     doprint_67
08000B3C  2043      1429          move.l    D3,A0
08000B3E  5283      1430          addq.l    #1,D3
08000B40  2242      1431          move.l    D2,A1
08000B42  5282      1432          addq.l    #1,D2
08000B44  1290      1433          move.b    (A0),(A1)
08000B46  5304      1434          subq.b    #1,D4
08000B48  6008      1435          bra.s     doprint_68
                    1436   doprint_67:
08000B4A  2042      1437          move.l    D2,A0
08000B4C  5282      1438          addq.l    #1,D2
08000B4E  10BC 0020 1439          move.b    #32,(A0)
                    1440   doprint_68:
08000B52  5287      1441          addq.l    #1,D7
                    1442   doprint_65:
08000B54  4A2E FFD0 1443          tst.b     -48(A6)
08000B58  6700 005A 1444          beq       doprint_77
08000B5C  206E 000C 1445          move.l    12(A6),A0
08000B60  1010      1446          move.b    (A0),D0
08000B62  4880      1447          ext.w     D0
08000B64  48C0      1448          ext.l     D0
08000B66  0C80 0000 1449          cmp.l     #111,D0
08000B6A  006F      
08000B6C  671A      1450          beq.s     doprint_73
08000B6E  6E0C      1451          bgt.s     doprint_76
08000B70  0C80 0000 1452          cmp.l     #88,D0
08000B74  0058      
08000B76  6710      1453          beq.s     doprint_73
08000B78  6000 003A 1454          bra       doprint_77
                    1455   doprint_76:
08000B7C  0C80 0000 1456          cmp.l     #120,D0
08000B80  0078      
08000B82  6704      1457          beq.s     doprint_73
08000B84  6000 002E 1458          bra       doprint_77
                    1459   doprint_73:
08000B88  2042      1460          move.l    D2,A0
08000B8A  5282      1461          addq.l    #1,D2
08000B8C  10BC 0030 1462          move.b    #48,(A0)
08000B90  5287      1463          addq.l    #1,D7
08000B92  206E 000C 1464          move.l    12(A6),A0
08000B96  1010      1465          move.b    (A0),D0
08000B98  0C00 0078 1466          cmp.b     #120,D0
08000B9C  670C      1467          beq.s     doprint_79
08000B9E  206E 000C 1468          move.l    12(A6),A0
08000BA2  1010      1469          move.b    (A0),D0
08000BA4  0C00 0058 1470          cmp.b     #88,D0
08000BA8  660A      1471          bne.s     doprint_77
                    1472   doprint_79:
08000BAA  2042      1473          move.l    D2,A0
08000BAC  5282      1474          addq.l    #1,D2
08000BAE  10BC 0078 1475          move.b    #120,(A0)
08000BB2  5287      1476          addq.l    #1,D7
                    1477   doprint_77:
08000BB4  2042      1478          move.l    D2,A0
08000BB6  4210      1479          clr.b     (A0)
08000BB8  206E 000C 1480          move.l    12(A6),A0
08000BBC  1010      1481          move.b    (A0),D0
08000BBE  4880      1482          ext.w     D0
08000BC0  48C0      1483          ext.l     D0
08000BC2  0C80 0000 1484          cmp.l     #105,D0
08000BC6  0069      
08000BC8  6700 0076 1485          beq       doprint_82
08000BCC  6E42      1486          bgt.s     doprint_93
08000BCE  0C80 0000 1487          cmp.l     #99,D0
08000BD2  0063      
08000BD4  6700 0084 1488          beq       doprint_96
08000BD8  6E1C      1489          bgt.s     doprint_94
08000BDA  0C80 0000 1490          cmp.l     #88,D0
08000BDE  0058      
08000BE0  6700 005E 1491          beq       doprint_82
08000BE4  6E00 0184 1492          bgt       doprint_80
08000BE8  0C80 0000 1493          cmp.l     #69,D0
08000BEC  0045      
08000BEE  6700 0050 1494          beq       doprint_82
08000BF2  6000 0176 1495          bra       doprint_80
                    1496   doprint_94:
08000BF6  0C80 0000 1497          cmp.l     #101,D0
08000BFA  0065      
08000BFC  6700 0042 1498          beq       doprint_82
08000C00  6E00 0168 1499          bgt       doprint_80
08000C04  0C80 0000 1500          cmp.l     #100,D0
08000C08  0064      
08000C0A  6734      1501          beq.s     doprint_82
08000C0C  6000 015C 1502          bra       doprint_80
                    1503   doprint_93:
08000C10  0C80 0000 1504          cmp.l     #117,D0
08000C14  0075      
08000C16  6728      1505          beq.s     doprint_82
08000C18  6E1A      1506          bgt.s     doprint_95
08000C1A  0C80 0000 1507          cmp.l     #115,D0
08000C1E  0073      
08000C20  6700 0038 1508          beq       doprint_96
08000C24  6E00 0144 1509          bgt       doprint_80
08000C28  0C80 0000 1510          cmp.l     #111,D0
08000C2C  006F      
08000C2E  6710      1511          beq.s     doprint_82
08000C30  6000 0138 1512          bra       doprint_80
                    1513   doprint_95:
08000C34  0C80 0000 1514          cmp.l     #120,D0
08000C38  0078      
08000C3A  6704      1515          beq.s     doprint_82
08000C3C  6000 012C 1516          bra       doprint_80
                    1517   doprint_82:
08000C40  4A2E FFD2 1518          tst.b     -46(A6)
08000C44  6714      1519          beq.s     doprint_96
08000C46  4A2E FFCD 1520          tst.b     -51(A6)
08000C4A  660E      1521          bne.s     doprint_96
08000C4C  200D      1522          move.l    A5,D0
08000C4E  9087      1523          sub.l     D7,D0
08000C50  4884      1524          ext.w     D4
08000C52  48C4      1525          ext.l     D4
08000C54  9084      1526          sub.l     D4,D0
08000C56  2D40 FFFC 1527          move.l    D0,-4(A6)
                    1528   doprint_96:
08000C5A  202E FFFC 1529          move.l    -4(A6),D0
08000C5E  0C80 0000 1530          cmp.l     #0,D0
08000C62  0000      
08000C64  6C04      1531          bge.s     doprint_98
08000C66  42AE FFFC 1532          clr.l     -4(A6)
                    1533   doprint_98:
08000C6A  4A2E FFCD 1534          tst.b     -51(A6)
08000C6E  6600 0030 1535          bne       doprint_104
08000C72  1004      1536          move.b    D4,D0
08000C74  4880      1537          ext.w     D0
08000C76  48C0      1538          ext.l     D0
08000C78  D0AE FFFC 1539          add.l     -4(A6),D0
08000C7C  D087      1540          add.l     D7,D0
08000C7E  1D40 FFD1 1541          move.b    D0,-47(A6)
                    1542   doprint_102:
08000C82  102E FFD1 1543          move.b    -47(A6),D0
08000C86  4880      1544          ext.w     D0
08000C88  48C0      1545          ext.l     D0
08000C8A  220D      1546          move.l    A5,D1
08000C8C  534D      1547          subq.w    #1,A5
08000C8E  B081      1548          cmp.l     D1,D0
08000C90  6C0E      1549          bge.s     doprint_104
08000C92  4878 0020 1550          pea       32
08000C96  2F0A      1551          move.l    A2,-(A7)
08000C98  4E93      1552          jsr       (A3)
08000C9A  504F      1553          addq.w    #8,A7
08000C9C  5286      1554          addq.l    #1,D6
08000C9E  60E2      1555          bra       doprint_102
                    1556   doprint_104:
08000CA0  41EE FFD4 1557          lea       -44(A6),A0
08000CA4  2408      1558          move.l    A0,D2
                    1559   doprint_105:
08000CA6  2042      1560          move.l    D2,A0
08000CA8  4A10      1561          tst.b     (A0)
08000CAA  6716      1562          beq.s     doprint_107
08000CAC  2042      1563          move.l    D2,A0
08000CAE  5282      1564          addq.l    #1,D2
08000CB0  1210      1565          move.b    (A0),D1
08000CB2  4881      1566          ext.w     D1
08000CB4  48C1      1567          ext.l     D1
08000CB6  2F01      1568          move.l    D1,-(A7)
08000CB8  2F0A      1569          move.l    A2,-(A7)
08000CBA  4E93      1570          jsr       (A3)
08000CBC  504F      1571          addq.w    #8,A7
08000CBE  5286      1572          addq.l    #1,D6
08000CC0  60E4      1573          bra       doprint_105
                    1574   doprint_107:
08000CC2  202E FFFC 1575          move.l    -4(A6),D0
08000CC6  1D40 FFD1 1576          move.b    D0,-47(A6)
                    1577   doprint_108:
08000CCA  102E FFD1 1578          move.b    -47(A6),D0
08000CCE  532E FFD1 1579          subq.b    #1,-47(A6)
08000CD2  4A00      1580          tst.b     D0
08000CD4  670E      1581          beq.s     doprint_110
08000CD6  4878 0030 1582          pea       48
08000CDA  2F0A      1583          move.l    A2,-(A7)
08000CDC  4E93      1584          jsr       (A3)
08000CDE  504F      1585          addq.w    #8,A7
08000CE0  5286      1586          addq.l    #1,D6
08000CE2  60E6      1587          bra       doprint_108
                    1588   doprint_110:
08000CE4  2043      1589          move.l    D3,A0
08000CE6  4A10      1590          tst.b     (A0)
08000CE8  6700 0048 1591          beq       doprint_113
08000CEC  206E 000C 1592          move.l    12(A6),A0
08000CF0  1010      1593          move.b    (A0),D0
08000CF2  4880      1594          ext.w     D0
08000CF4  48C0      1595          ext.l     D0
08000CF6  0C80 0000 1596          cmp.l     #115,D0
08000CFA  0073      
08000CFC  670C      1597          beq.s     doprint_116
08000CFE  6E18      1598          bgt.s     doprint_119
08000D00  0C80 0000 1599          cmp.l     #99,D0
08000D04  0063      
08000D06  6702      1600          beq.s     doprint_116
08000D08  600E      1601          bra.s     doprint_119
                    1602   doprint_116:
08000D0A  2005      1603          move.l    D5,D0
08000D0C  5385      1604          subq.l    #1,D5
08000D0E  0C80 0000 1605          cmp.l     #0,D0
08000D12  0000      
08000D14  6E02      1606          bgt.s     doprint_119
08000D16  6016      1607          bra.s     doprint_115
                    1608   doprint_119:
08000D18  2043      1609          move.l    D3,A0
08000D1A  5283      1610          addq.l    #1,D3
08000D1C  1210      1611          move.b    (A0),D1
08000D1E  4881      1612          ext.w     D1
08000D20  48C1      1613          ext.l     D1
08000D22  2F01      1614          move.l    D1,-(A7)
08000D24  2F0A      1615          move.l    A2,-(A7)
08000D26  4E93      1616          jsr       (A3)
08000D28  504F      1617          addq.w    #8,A7
08000D2A  5286      1618          addq.l    #1,D6
08000D2C  6002      1619          bra.s     doprint_112
                    1620   doprint_115:
08000D2E  6002      1621          bra.s     doprint_113
                    1622   doprint_112:
08000D30  60B2      1623          bra       doprint_110
                    1624   doprint_113:
08000D32  4A2E FFCD 1625          tst.b     -51(A6)
08000D36  6700 0030 1626          beq       doprint_125
08000D3A  1004      1627          move.b    D4,D0
08000D3C  4880      1628          ext.w     D0
08000D3E  48C0      1629          ext.l     D0
08000D40  D0AE FFFC 1630          add.l     -4(A6),D0
08000D44  D087      1631          add.l     D7,D0
08000D46  1D40 FFD1 1632          move.b    D0,-47(A6)
                    1633   doprint_123:
08000D4A  102E FFD1 1634          move.b    -47(A6),D0
08000D4E  4880      1635          ext.w     D0
08000D50  48C0      1636          ext.l     D0
08000D52  220D      1637          move.l    A5,D1
08000D54  534D      1638          subq.w    #1,A5
08000D56  B081      1639          cmp.l     D1,D0
08000D58  6C0E      1640          bge.s     doprint_125
08000D5A  4878 0020 1641          pea       32
08000D5E  2F0A      1642          move.l    A2,-(A7)
08000D60  4E93      1643          jsr       (A3)
08000D62  504F      1644          addq.w    #8,A7
08000D64  5386      1645          subq.l    #1,D6
08000D66  60E2      1646          bra       doprint_123
                    1647   doprint_125:
08000D68  6014      1648          bra.s     doprint_81
                    1649   doprint_80:
08000D6A  206E 000C 1650          move.l    12(A6),A0
08000D6E  1210      1651          move.b    (A0),D1
08000D70  4881      1652          ext.w     D1
08000D72  48C1      1653          ext.l     D1
08000D74  2F01      1654          move.l    D1,-(A7)
08000D76  2F0A      1655          move.l    A2,-(A7)
08000D78  4E93      1656          jsr       (A3)
08000D7A  504F      1657          addq.w    #8,A7
08000D7C  5286      1658          addq.l    #1,D6
                    1659   doprint_81:
08000D7E  52AE 000C 1660          addq.l    #1,12(A6)
                    1661   doprint_2:
08000D82  6000 FA0A 1662          bra       doprint_1
                    1663   doprint_3:
08000D86  4A92      1664          tst.l     (A2)
08000D88  6710      1665          beq.s     doprint_126
08000D8A  4201      1666          clr.b     D1
08000D8C  C2BC 0000 1667          and.l     #255,D1
08000D90  00FF      
08000D92  2F01      1668          move.l    D1,-(A7)
08000D94  2F0A      1669          move.l    A2,-(A7)
08000D96  4E93      1670          jsr       (A3)
08000D98  504F      1671          addq.w    #8,A7
                    1672   doprint_126:
08000D9A  2006      1673          move.l    D6,D0
08000D9C  4CDF 3CFC 1674          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08000DA0  4E5E      1675          unlk      A6
08000DA2  4E75      1676          rts
                    1677   @itoa_convert:
08000DA4  4E56 0000 1678          link      A6,#0
08000DA8  48E7 3C00 1679          movem.l   D2/D3/D4/D5,-(A7)
08000DAC  242E 0008 1680          move.l    8(A6),D2
08000DB0  262E 0010 1681          move.l    16(A6),D3
08000DB4  2A2E 000C 1682          move.l    12(A6),D5
08000DB8  2F05      1683          move.l    D5,-(A7)
08000DBA  2F03      1684          move.l    D3,-(A7)
08000DBC  4EB9 0800 1685          jsr       ULDIV
08000DC0  0F82      
08000DC2  202F 0004 1686          move.l    4(A7),D0
08000DC6  504F      1687          addq.w    #8,A7
08000DC8  2800      1688          move.l    D0,D4
08000DCA  BA83      1689          cmp.l     D3,D5
08000DCC  6520      1690          blo.s     @itoa_convert_1
08000DCE  2F03      1691          move.l    D3,-(A7)
08000DD0  2F05      1692          move.l    D5,-(A7)
08000DD2  2F03      1693          move.l    D3,-(A7)
08000DD4  4EB9 0800 1694          jsr       ULDIV
08000DD8  0F82      
08000DDA  2217      1695          move.l    (A7),D1
08000DDC  504F      1696          addq.w    #8,A7
08000DDE  2F01      1697          move.l    D1,-(A7)
08000DE0  2F02      1698          move.l    D2,-(A7)
08000DE2  4EB9 0800 1699          jsr       @itoa_convert
08000DE6  0DA4      
08000DE8  DEFC 000C 1700          add.w     #12,A7
08000DEC  2400      1701          move.l    D0,D2
                    1702   @itoa_convert_1:
08000DEE  0C84 0000 1703          cmp.l     #9,D4
08000DF2  0009      
08000DF4  6E0E      1704          bgt.s     @itoa_convert_3
08000DF6  2004      1705          move.l    D4,D0
08000DF8  7230      1706          moveq     #48,D1
08000DFA  C2BC 0000 1707          and.l     #255,D1
08000DFE  00FF      
08000E00  D081      1708          add.l     D1,D0
08000E02  6012      1709          bra.s     @itoa_convert_4
                    1710   @itoa_convert_3:
08000E04  2004      1711          move.l    D4,D0
08000E06  7261      1712          moveq     #97,D1
08000E08  C2BC 0000 1713          and.l     #255,D1
08000E0C  00FF      
08000E0E  D081      1714          add.l     D1,D0
08000E10  0480 0000 1715          sub.l     #10,D0
08000E14  000A      
                    1716   @itoa_convert_4:
08000E16  2042      1717          move.l    D2,A0
08000E18  1080      1718          move.b    D0,(A0)
08000E1A  2002      1719          move.l    D2,D0
08000E1C  5280      1720          addq.l    #1,D0
08000E1E  4CDF 003C 1721          movem.l   (A7)+,D2/D3/D4/D5
08000E22  4E5E      1722          unlk      A6
08000E24  4E75      1723          rts
                    1724   _ltoa:
08000E26  4E56 0000 1725          link      A6,#0
08000E2A  48E7 3C00 1726          movem.l   D2/D3/D4/D5,-(A7)
08000E2E  242E 0008 1727          move.l    8(A6),D2
08000E32  262E 000C 1728          move.l    12(A6),D3
08000E36  2A2E 0010 1729          move.l    16(A6),D5
08000E3A  2803      1730          move.l    D3,D4
08000E3C  0C85 0000 1731          cmp.l     #2,D5
08000E40  0002      
08000E42  6D08      1732          blt.s     ltoa_3
08000E44  0C85 0000 1733          cmp.l     #36,D5
08000E48  0024      
08000E4A  6F06      1734          ble.s     ltoa_1
                    1735   ltoa_3:
08000E4C  2003      1736          move.l    D3,D0
08000E4E  6000 0056 1737          bra       ltoa_4
                    1738   ltoa_1:
08000E52  0C85 0000 1739          cmp.l     #10,D5
08000E56  000A      
08000E58  6600 0034 1740          bne       ltoa_5
08000E5C  0C82 0000 1741          cmp.l     #0,D2
08000E60  0000      
08000E62  6C2A      1742          bge.s     ltoa_5
08000E64  2002      1743          move.l    D2,D0
08000E66  4480      1744          neg.l     D0
08000E68  2400      1745          move.l    D0,D2
08000E6A  0C82 0000 1746          cmp.l     #0,D2
08000E6E  0000      
08000E70  6C14      1747          bge.s     ltoa_7
08000E72  4879 0800 1748          pea       @itoa_1.L
08000E76  1252      
08000E78  2F03      1749          move.l    D3,-(A7)
08000E7A  4EB9 0800 1750          jsr       _strcpy
08000E7E  0F72      
08000E80  504F      1751          addq.w    #8,A7
08000E82  2003      1752          move.l    D3,D0
08000E84  6020      1753          bra.s     ltoa_4
                    1754   ltoa_7:
08000E86  2044      1755          move.l    D4,A0
08000E88  5284      1756          addq.l    #1,D4
08000E8A  10BC 002D 1757          move.b    #45,(A0)
                    1758   ltoa_5:
08000E8E  2F05      1759          move.l    D5,-(A7)
08000E90  2F02      1760          move.l    D2,-(A7)
08000E92  2F04      1761          move.l    D4,-(A7)
08000E94  4EB9 0800 1762          jsr       @itoa_convert
08000E98  0DA4      
08000E9A  DEFC 000C 1763          add.w     #12,A7
08000E9E  2800      1764          move.l    D0,D4
08000EA0  2044      1765          move.l    D4,A0
08000EA2  4210      1766          clr.b     (A0)
08000EA4  2003      1767          move.l    D3,D0
                    1768   ltoa_4:
08000EA6  4CDF 003C 1769          movem.l   (A7)+,D2/D3/D4/D5
08000EAA  4E5E      1770          unlk      A6
08000EAC  4E75      1771          rts
                    1772   _ultoa:
08000EAE  4E56 0000 1773          link      A6,#0
08000EB2  48E7 3800 1774          movem.l   D2/D3/D4,-(A7)
08000EB6  262E 0010 1775          move.l    16(A6),D3
08000EBA  282E 000C 1776          move.l    12(A6),D4
08000EBE  2404      1777          move.l    D4,D2
08000EC0  0C83 0000 1778          cmp.l     #2,D3
08000EC4  0002      
08000EC6  6D08      1779          blt.s     ultoa_3
08000EC8  0C83 0000 1780          cmp.l     #36,D3
08000ECC  0024      
08000ECE  6F04      1781          ble.s     ultoa_1
                    1782   ultoa_3:
08000ED0  2004      1783          move.l    D4,D0
08000ED2  601A      1784          bra.s     ultoa_4
                    1785   ultoa_1:
08000ED4  2F03      1786          move.l    D3,-(A7)
08000ED6  2F2E 0008 1787          move.l    8(A6),-(A7)
08000EDA  2F02      1788          move.l    D2,-(A7)
08000EDC  4EB9 0800 1789          jsr       @itoa_convert
08000EE0  0DA4      
08000EE2  DEFC 000C 1790          add.w     #12,A7
08000EE6  2400      1791          move.l    D0,D2
08000EE8  2042      1792          move.l    D2,A0
08000EEA  4210      1793          clr.b     (A0)
08000EEC  2004      1794          move.l    D4,D0
                    1795   ultoa_4:
08000EEE  4CDF 001C 1796          movem.l   (A7)+,D2/D3/D4
08000EF2  4E5E      1797          unlk      A6
08000EF4  4E75      1798          rts
                    1799   _itoa:
08000EF6  4E56 0000 1800          link      A6,#0
08000EFA  2F2E 0010 1801          move.l    16(A6),-(A7)
08000EFE  2F2E 000C 1802          move.l    12(A6),-(A7)
08000F02  2F2E 0008 1803          move.l    8(A6),-(A7)
08000F06  4EB9 0800 1804          jsr       _ltoa
08000F0A  0E26      
08000F0C  DEFC 000C 1805          add.w     #12,A7
08000F10  4E5E      1806          unlk      A6
08000F12  4E75      1807          rts
                    1808   _strlen:
08000F14  206F 0004 1809          move.l    (4,A7),A0
08000F18  2248      1810          move.l    A0,A1
                    1811   strlen_1:
08000F1A  4A19      1812          tst.b     (A1)+
08000F1C  66FC      1813          bne       strlen_1
08000F1E  2009      1814          move.l    A1,D0
08000F20  9088      1815          sub.l     A0,D0
08000F22  5380      1816          subq.l    #1,D0
08000F24  4E75      1817          rts
                    1818   _putch:
08000F26  4E56 0000 1819          link      A6,#0
08000F2A  2F02      1820          move.l    D2,-(A7)
08000F2C  242E 0008 1821          move.l    8(A6),D2
08000F30  0C82 0000 1822          cmp.l     #10,D2
08000F34  000A      
08000F36  660C      1823          bne.s     putch_1
08000F38  4878 000D 1824          pea       13
08000F3C  4EB9 0800 1825          jsr       __putch
08000F40  05C6      
08000F42  584F      1826          addq.w    #4,A7
                    1827   putch_1:
08000F44  2F02      1828          move.l    D2,-(A7)
08000F46  4EB9 0800 1829          jsr       __putch
08000F4A  05C6      
08000F4C  584F      1830          addq.w    #4,A7
08000F4E  2002      1831          move.l    D2,D0
08000F50  241F      1832          move.l    (A7)+,D2
08000F52  4E5E      1833          unlk      A6
08000F54  4E75      1834          rts
                    1835   _toupper:
08000F56  202F 0004 1836          move.l    4(A7),D0
08000F5A  0C80 0000 1837          cmp.l     #'a',D0
08000F5E  0061      
08000F60  6D0E      1838          blt.s     toupper_1
08000F62  0C80 0000 1839          cmp.l     #'z',D0
08000F66  007A      
08000F68  6E06      1840          bgt.s     toupper_1
08000F6A  0480 0000 1841          sub.l     #$20,D0
08000F6E  0020      
                    1842   toupper_1:
08000F70  4E75      1843          rts
                    1844   _strcpy:
08000F72  206F 0004 1845          move.l    (4,A7),A0
08000F76  226F 0008 1846          move.l    (8,A7),A1
08000F7A  2008      1847          move.l    A0,D0
                    1848   strcpy_1:
08000F7C  10D9      1849          move.b    (A1)+,(A0)+
08000F7E  66FC      1850          bne.s     strcpy_1
08000F80  4E75      1851          rts
                    1852   ULDIV:
08000F82  4E56 0000 1853          link    A6,#0
08000F86  48E7 C000 1854          movem.l D0/D1,-(A7)
08000F8A  222E 0008 1855          move.l  8(A6),D1
08000F8E  202E 000C 1856          move.l  12(A6),D0
08000F92  6036      1857          bra.s   ldiv_3
                    1858   LDIV:
08000F94  4E56 0000 1859          link    A6,#0
08000F98  48E7 C000 1860          movem.l D0/D1,-(A7)
08000F9C  222E 0008 1861          move.l  8(A6),D1
08000FA0  202E 000C 1862          move.l  12(A6),D0
08000FA4  4A80      1863          tst.l   D0
08000FA6  6A0E      1864          bpl.s   ldiv_1
08000FA8  4480      1865          neg.l   D0
08000FAA  4A81      1866          tst.l   D1
08000FAC  6A14      1867          bpl.s   ldiv_2
08000FAE  4481      1868          neg.l   D1
08000FB0  612A      1869          bsr.s   dodiv
08000FB2  4481      1870          neg.l   D1
08000FB4  6016      1871          bra.s   ldiv_4
                    1872   ldiv_1:
08000FB6  4A81      1873          tst.l   D1
08000FB8  6A10      1874          bpl.s   ldiv_3
08000FBA  4481      1875          neg.l   D1
08000FBC  611E      1876          bsr.s   dodiv
08000FBE  4480      1877          neg.l   D0
08000FC0  600A      1878          bra.s   ldiv_4
                    1879   ldiv_2:
08000FC2  6118      1880          bsr.s   dodiv
08000FC4  4480      1881          neg.l   D0
08000FC6  4481      1882          neg.l   D1
08000FC8  6002      1883          bra.s   ldiv_4
                    1884   ldiv_3:
08000FCA  6110      1885          bsr.s   dodiv
                    1886   ldiv_4:
08000FCC  2D40 0008 1887          move.l  D0,8(A6)
08000FD0  2D41 000C 1888          move.l  D1,12(A6)
08000FD4  4CDF 0003 1889          movem.l (A7)+,D0/D1
08000FD8  4E5E      1890          unlk    A6
08000FDA  4E75      1891          rts
                    1892   dodiv:
08000FDC  0C81 0000 1893          cmpi.l  #$FFFF,D1
08000FE0  FFFF      
08000FE2  6236      1894          bhi.s   dodiv_2
08000FE4  0C80 0000 1895          cmpi.l  #$FFFF,D0
08000FE8  FFFF      
08000FEA  6210      1896          bhi.s   dodiv_1
08000FEC  80C1      1897          divu    D1,D0
08000FEE  2200      1898          move.l  D0,D1
08000FF0  4241      1899          clr.w   D1
08000FF2  4841      1900          swap    D1
08000FF4  0280 0000 1901          andi.l  #$FFFF,D0
08000FF8  FFFF      
08000FFA  4E75      1902          rts
                    1903   dodiv_1:
08000FFC  48A7 A000 1904          movem.w D0/D2,-(A7)
08001000  4240      1905          clr.w   D0
08001002  4840      1906          swap    D0
08001004  80C1      1907          divu    D1,D0
08001006  3400      1908          move.w  D0,D2
08001008  301F      1909          move.w  (A7)+,D0
0800100A  80C1      1910          divu    D1,D0
0800100C  4840      1911          swap    D0
0800100E  4281      1912          clr.l   D1
08001010  3200      1913          move.w  D0,D1
08001012  3002      1914          move.w  D2,D0
08001014  4840      1915          swap    D0
08001016  341F      1916          move.w  (A7)+,D2
08001018  4E75      1917          rts
                    1918   dodiv_2:
0800101A  48E7 3800 1919          movem.l D2/D3/D4,-(A7)
0800101E  2401      1920          move.l  D1,D2
08001020  4242      1921          clr.w   D2
08001022  4842      1922          swap    D2
08001024  5282      1923          addq.l  #1,D2
08001026  2600      1924          move.l  D0,D3
08001028  2801      1925          move.l  D1,D4
0800102A  2202      1926          move.l  D2,D1
0800102C  61CE      1927          bsr.s   dodiv_1
0800102E  2204      1928          move.l  D4,D1
08001030  82C2      1929          divu    D2,D1
08001032  80C1      1930          divu    D1,D0
08001034  0280 0000 1931          andi.l  #$FFFF,D0
08001038  FFFF      
                    1932   dodiv_3:
0800103A  2204      1933          move.l  D4,D1
0800103C  2404      1934          move.l  D4,D2
0800103E  4842      1935          swap    D2
08001040  C2C0      1936          mulu    D0,D1
08001042  C4C0      1937          mulu    D0,D2
08001044  4842      1938          swap    D2
08001046  D282      1939          add.l   D2,D1
08001048  9283      1940          sub.l   D3,D1
0800104A  620A      1941          bhi.s   dodiv_4
0800104C  4481      1942          neg.l   D1
0800104E  B881      1943          cmp.l   D1,D4
08001050  6208      1944          bhi.s   dodiv_5
08001052  5280      1945          addq.l  #1,D0
08001054  60E4      1946          bra.s   dodiv_3
                    1947   dodiv_4:
08001056  5380      1948          subq.l  #1,D0
08001058  60E0      1949          bra.s   dodiv_3
                    1950   dodiv_5:
0800105A  4CDF 001C 1951          movem.l (A7)+,D2/D3/D4
0800105E  4E75      1952          rts
                    1953          section   const
08001060            1954                   align
                    1955   
                    1956   
                    1957   @canbus~1_1:
08001060  4361 6E30 1958          dc.b      67,97,110,48,32,83,116,97,116,117,115,82,101
08001064  2053 7461 
08001068  7475 7352 
0800106C  65        
0800106D  6720 3D20 1959          dc.b      103,32,61,32,48,120,37,88,13,10,0
08001071  3078 2558 
08001075  0D0A 00   
                    1960   @canbus~1_2:
08001078  4361 6E31 1961          dc.b      67,97,110,49,32,83,116,97,116,117,115,82,101
0800107C  2053 7461 
08001080  7475 7352 
08001084  65        
08001085  6720 3D20 1962          dc.b      103,32,61,32,48,120,37,88,13,10,0
08001089  3078 2558 
0800108D  0D0A 00   
                    1963   @canbus~1_3:
08001090  4361 6E30 1964          dc.b      67,97,110,48,32,67,111,110,116,114,111,108,32
08001094  2043 6F6E 
08001098  7472 6F6C 
0800109C  20        
0800109D  5265 6769 1965          dc.b      82,101,103,105,115,116,101,114,32,61,32,48,120
080010A1  7374 6572 
080010A5  203D 2030 
080010A9  78        
080010AA  2558 0D0A 1966          dc.b      37,88,13,10,0
080010AE  00        
                    1967   @canbus~1_4:
080010B0  4361 6E31 1968          dc.b      67,97,110,49,32,67,111,110,116,114,111,108,32
080010B4  2043 6F6E 
080010B8  7472 6F6C 
080010BC  20        
080010BD  5265 6769 1969          dc.b      82,101,103,105,115,116,101,114,32,61,32,48,120
080010C1  7374 6572 
080010C5  203D 2030 
080010C9  78        
080010CA  2558 0D0A 1970          dc.b      37,88,13,10,0
080010CE  00        
                    1971   @canbus~1_5:
080010D0  4572 726F 1972          dc.b      69,114,114,111,114,32,67,111,100,101,32,61,32
080010D4  7220 436F 
080010D8  6465 203D 
080010DC  20        
080010DD  3078 2558 1973          dc.b      48,120,37,88,32,13,10,0
080010E1  200D 0A00 
                    1974   @canbus~1_6:
080010E6  4361 6E30 1975          dc.b      67,97,110,48,32,67,111,110,116,114,111,108,32
080010EA  2043 6F6E 
080010EE  7472 6F6C 
080010F2  20        
080010F3  5265 6769 1976          dc.b      82,101,103,105,115,116,101,114,32,61,32,48,120
080010F7  7374 6572 
080010FB  203D 2030 
080010FF  78        
08001100  2558 202D 1977          dc.b      37,88,32,45,45,80,111,115,116,32,84,82,45,45
08001104  2D50 6F73 
08001108  7420 5452 
0800110C  2D2D      
0800110E  0D0A 00   1978          dc.b      13,10,0
                    1979   @canbus~1_7:
08001112  4361 6E31 1980          dc.b      67,97,110,49,32,67,111,110,116,114,111,108,32
08001116  2043 6F6E 
0800111A  7472 6F6C 
0800111E  20        
0800111F  5265 6769 1981          dc.b      82,101,103,105,115,116,101,114,32,61,32,48,120
08001123  7374 6572 
08001127  203D 2030 
0800112B  78        
0800112C  2558 202D 1982          dc.b      37,88,32,45,45,80,111,115,116,32,84,82,45,45
08001130  2D50 6F73 
08001134  7420 5452 
08001138  2D2D      
0800113A  0D0A 00   1983          dc.b      13,10,0
                    1984   @canbus~1_8:
0800113E  4361 6E30 1985          dc.b      67,97,110,48,95,83,116,97,116,117,115,82,101
08001142  5F53 7461 
08001146  7475 7352 
0800114A  65        
0800114B  6720 3D20 1986          dc.b      103,32,61,32,48,120,37,88,13,10,0
0800114F  3078 2558 
08001153  0D0A 00   
                    1987   @canbus~1_9:
08001156  4361 6E31 1988          dc.b      67,97,110,49,95,83,116,97,116,117,115,82,101
0800115A  5F53 7461 
0800115E  7475 7352 
08001162  65        
08001163  6720 3D20 1989          dc.b      103,32,61,32,48,120,37,88,13,10,0
08001167  3078 2558 
0800116B  0D0A 00   
                    1990   @canbus~1_10:
0800116E  5258 4275 1991          dc.b      82,88,66,117,102,102,101,114,32,61,32,48,120
08001172  6666 6572 
08001176  203D 2030 
0800117A  78        
0800117B  2558 0D0A 1992          dc.b      37,88,13,10,0
0800117F  00        
                    1993   @canbus~1_11:
08001180  0D0A 2052 1994          dc.b      13,10,32,82,101,99,105,101,118,101,100,32,66
08001184  6563 6965 
08001188  7665 6420 
0800118C  42        
0800118D  7974 6520 1995          dc.b      121,116,101,32,64,32,67,97,110,66,117,115,48
08001191  4020 4361 
08001195  6E42 7573 
08001199  30        
0800119A  203D 2025 1996          dc.b      32,61,32,37,100,13,10,0
0800119E  640D 0A00 
                    1997   @canbus~1_12:
080011A2  4361 6E30 1998          dc.b      67,97,110,48,32,67,111,110,116,114,111,108,32
080011A6  2043 6F6E 
080011AA  7472 6F6C 
080011AE  20        
080011AF  5265 6769 1999          dc.b      82,101,103,105,115,116,101,114,32,61,32,48,120
080011B3  7374 6572 
080011B7  203D 2030 
080011BB  78        
080011BC  2558 202D 2000          dc.b      37,88,32,45,45,32,82,88,32,45,45,13,10,0
080011C0  2D20 5258 
080011C4  202D 2D0D 
080011C8  0A00      
                    2001   @canbus~1_13:
080011CA  4361 6E31 2002          dc.b      67,97,110,49,32,67,111,110,116,114,111,108,32
080011CE  2043 6F6E 
080011D2  7472 6F6C 
080011D6  20        
080011D7  5265 6769 2003          dc.b      82,101,103,105,115,116,101,114,32,61,32,48,120
080011DB  7374 6572 
080011DF  203D 2030 
080011E3  78        
080011E4  2558 202D 2004          dc.b      37,88,32,45,45,82,88,45,45,13,10,0
080011E8  2D52 582D 
080011EC  2D0D 0A00 
                    2005   @canbus~1_14:
080011F0  0D0A 2052 2006          dc.b      13,10,32,82,101,99,105,101,118,101,100,32,66
080011F4  6563 6965 
080011F8  7665 6420 
080011FC  42        
080011FD  7974 6520 2007          dc.b      121,116,101,32,64,32,67,97,110,66,117,115,49
08001201  4020 4361 
08001205  6E42 7573 
08001209  31        
0800120A  203D 2025 2008          dc.b      32,61,32,37,100,13,10,0
0800120E  640D 0A00 
                    2009   @canbus~1_15:
08001212  0D0A 0D0A 2010          dc.b      13,10,13,10,45,45,45,45,32,67,65,78,66,85,83
08001216  2D2D 2D2D 
0800121A  2043 414E 
0800121E  4255 53   
08001221  2054 6573 2011          dc.b      32,84,101,115,116,32,45,45,45,45,13,10,0
08001225  7420 2D2D 
08001229  2D2D 0D0A 
0800122D  00        
                    2012   @canbus~1_16:
0800122E  4920 616D 2013          dc.b      73,32,97,109,32,104,101,114,101,32,51,32,13
08001232  2068 6572 
08001236  6520 3320 
0800123A  0D        
0800123B  0A00      2014          dc.b      10,0
                    2015   @canbus~1_17:
0800123E  4920 616D 2016          dc.b      73,32,97,109,32,104,101,114,101,32,52,32,13
08001242  2068 6572 
08001246  6520 3420 
0800124A  0D        
0800124B  0A00      2017          dc.b      10,0
                    2018   @canbus~1_18:
0800124E  0D0A 00   2019          dc.b      13,10,0
                    2020   @itoa_1:
08001252  2D32 3134 2021          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
08001256  3734 3833 
0800125A  3634 3800 
                    2022   __ctype:
0800125E  0040 4040 2023          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
08001262  4040 4040 
08001266  4040 5050 
0800126A  5050 50   
0800126D  4040 4040 2024          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
08001271  4040 4040 
08001275  4040 4040 
08001279  4040 40   
0800127C  4040 40D0 2025          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
08001280  A0A0 A0A0 
08001284  A0A0 A0A0 
08001288  A0A0 A0A0 2026          dc.b      160,160,160,160,160,160,160,140,140,140,140
0800128C  A0A0 A08C 
08001290  8C8C 8C   
08001293  8C8C 8C8C 2027          dc.b      140,140,140,140,140,140,160,160,160,160,160
08001297  8C8C A0A0 
0800129B  A0A0 A0   
0800129E  A0A0 8A8A 2028          dc.b      160,160,138,138,138,138,138,138,130,130,130
080012A2  8A8A 8A8A 
080012A6  8282 82   
080012A9  8282 8282 2029          dc.b      130,130,130,130,130,130,130,130,130,130,130
080012AD  8282 8282 
080012B1  8282 82   
080012B4  8282 8282 2030          dc.b      130,130,130,130,130,130,160,160,160,160,160
080012B8  8282 A0A0 
080012BC  A0A0 A0   
080012BF  A089 8989 2031          dc.b      160,137,137,137,137,137,137,129,129,129,129
080012C3  8989 8981 
080012C7  8181 81   
080012CA  8181 8181 2032          dc.b      129,129,129,129,129,129,129,129,129,129,129
080012CE  8181 8181 
080012D2  8181 81   
080012D5  8181 8181 2033          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
080012D9  81A0 A0A0 
080012DD  A040 0000 
080012E1  00        
080012E2  0000 0000 2034          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080012E6  0000 0000 
080012EA  0000 0000 
080012EE  0000 0000 
080012F2  0000 0000 
080012F6  0000      
080012F8  0000 0000 2035          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080012FC  0000 0000 
08001300  0000 0000 
08001304  0000 0000 
08001308  0000 0000 
0800130C  0000      
0800130E  0000 0000 2036          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001312  0000 0000 
08001316  0000 0000 
0800131A  0000 0000 
0800131E  0000 0000 
08001322  0000      
08001324  0000 0000 2037          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001328  0000 0000 
0800132C  0000 0000 
08001330  0000 0000 
08001334  0000 0000 
08001338  0000      
0800133A  0000 0000 2038          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0800133E  0000 0000 
08001342  0000 0000 
08001346  0000 0000 
0800134A  0000 0000 
0800134E  0000      
08001350  0000 0000 2039          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001354  0000 0000 
08001358  0000 0000 
0800135C  0000 00   
                    2040          section   data
08001360            2041                   align
                    2042   
                    2043   *********************************************************************************************************************************************************
                    2044   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    2045   ********************************************************************************************************************************************************
                    2046   
          0800 1360 2047   DataStart       equ       *
08001360            2048   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
08001364            2049   __allocp:       ds.l      1                    start of free memory block list
08001368            2050   __heap:         ds.l      1                    begin of free memory
                    2051   
                    2052   
                    2053          section   bss
0800136C            2054                   align
                    2055   
          0800 136C 2056   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 000C 2057   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    2058   
                    2059   *********************************************************************************************************
                    2060   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    2061   *********************************************************************************************************
          0800 136C 2062   BssStart       equ       *
                    2063   
                    2064          section   heap
0800136C            2065                  align
                    2066   
          0800 136C 2067   BssEnd         equ       *
          0000 0000 2068   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    2069   
                    2070   *********************************************************************************************************
                    2071   * Section for Heap
                    2072   *********************************************************************************************************
                    2073   
          0800 136C 2074   heap           equ       *
0800136C            2075                  align
          0800 0000

Assembly errors: 0
