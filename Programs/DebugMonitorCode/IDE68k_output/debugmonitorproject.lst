680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 01 Mar 2019      Time: 20:46:57          Source: C:\CYGWIN64\HOME\SABAS\M68K\PROGRAMS\DEBUGMONITORCODE\IDE68K_OUTPUT\DEBUGMONITORPROJECT.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05AA 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2ED0      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2532      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\CYGWIN64\HOME\SABAS\M68K\PROGRAMS\DEBUGMONITORCODE\DEBUG MONITOR FILES\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /*************************************************************
                     478   ; ** SPI Controller registers
                     479   ; **************************************************************/
                     480   ; // SPI Registers
                     481   ; #define SPI_Control         (*(volatile unsigned char *)(0x00408020))
                     482   ; #define SPI_Status          (*(volatile unsigned char *)(0x00408022))
                     483   ; #define SPI_Data            (*(volatile unsigned char *)(0x00408024))
                     484   ; #define SPI_Ext             (*(volatile unsigned char *)(0x00408026))
                     485   ; #define SPI_CS              (*(volatile unsigned char *)(0x00408028))
                     486   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                     487   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF
                     488   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     489   ; unsigned int i, x, y, z, PortA_Count;
                     490   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     491   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     492   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     493   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     494   ; unsigned int PC, SSP, USP ;
                     495   ; unsigned short int SR;
                     496   ; // Breakpoint variables
                     497   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     498   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     499   ; unsigned int BreakPointSetOrCleared[8] ;
                     500   ; unsigned int InstructionSize ;
                     501   ; // watchpoint variables
                     502   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     503   ; unsigned int WatchPointSetOrCleared[8] ;
                     504   ; char WatchPointString[8][100] ;
                     505   ; // for disassembly of program
                     506   ; char    Instruction[100] ;
                     507   ; char    TempString[100] ;
                     508   ; /************************************************************************************
                     509   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     510   ; ************************************************************************************/
                     511   ; void Wait1ms(void)
                     512   ; {
                     513   _Wait1ms:
00000932  2F02       514          move.l    D2,-(A7)
                     515   ; long int  i ;
                     516   ; for(i = 0; i < 1000; i ++)
00000934  4282       517          clr.l     D2
                     518   Wait1ms_1:
00000936  0C82 0000  519          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       520          bge.s     Wait1ms_3
0000093E  5282       521          addq.l    #1,D2
00000940  60F4       522          bra       Wait1ms_1
                     523   Wait1ms_3:
00000942  241F       524          move.l    (A7)+,D2
00000944  4E75       525          rts
                     526   ; ;
                     527   ; }
                     528   ; /************************************************************************************
                     529   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     530   ; **************************************************************************************/
                     531   ; void Wait3ms(void)
                     532   ; {
                     533   _Wait3ms:
00000946  2F02       534          move.l    D2,-(A7)
                     535   ; int i ;
                     536   ; for(i = 0; i < 3; i++)
00000948  4282       537          clr.l     D2
                     538   Wait3ms_1:
0000094A  0C82 0000  539          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       540          bge.s     Wait3ms_3
                     541   ; Wait1ms() ;
00000952  4EB8 0932  542          jsr       _Wait1ms
00000956  5282       543          addq.l    #1,D2
00000958  60F0       544          bra       Wait3ms_1
                     545   Wait3ms_3:
0000095A  241F       546          move.l    (A7)+,D2
0000095C  4E75       547          rts
                     548   ; }
                     549   ; /*********************************************************************************************
                     550   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     551   ; *********************************************************************************************/
                     552   ; void Init_LCD(void)
                     553   ; {
                     554   _Init_LCD:
                     555   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  556          move.b    #12,4194336
00000962  0040 0020 
                     557   ; Wait3ms() ;
00000966  4EB8 0946  558          jsr       _Wait3ms
                     559   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  560          move.b    #56,4194336
0000096E  0040 0020 
                     561   ; Wait3ms() ;
00000972  4EB8 0946  562          jsr       _Wait3ms
00000976  4E75       563          rts
                     564   ; }
                     565   ; /******************************************************************************
                     566   ; *subroutine to output a single character held in d1 to the LCD display
                     567   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     568   ; *current cursor position
                     569   ; *******************************************************************************/
                     570   ; void Outchar(int c)
                     571   ; {
                     572   _Outchar:
00000978  4E56 0000  573          link      A6,#0
                     574   ; LCDdata = (char)(c);
0000097C  202E 0008  575          move.l    8(A6),D0
00000980  13C0 0040  576          move.b    D0,4194338
00000984  0022      
                     577   ; Wait1ms() ;
00000986  4EB8 0932  578          jsr       _Wait1ms
0000098A  4E5E       579          unlk      A6
0000098C  4E75       580          rts
                     581   ; }
                     582   ; /**********************************************************************************
                     583   ; *subroutine to output a message at the current cursor position of the LCD display
                     584   ; ************************************************************************************/
                     585   ; void OutMess(char *theMessage)
                     586   ; {
                     587   _OutMess:
0000098E  4E56 FFFC  588          link      A6,#-4
                     589   ; char c ;
                     590   ; while((c = *theMessage++) != (char)(0))
                     591   OutMess_1:
00000992  206E 0008  592          move.l    8(A6),A0
00000996  52AE 0008  593          addq.l    #1,8(A6)
0000099A  1D50 FFFF  594          move.b    (A0),-1(A6)
0000099E  1010       595          move.b    (A0),D0
000009A0  6712       596          beq.s     OutMess_3
                     597   ; Outchar(c) ;
000009A2  122E FFFF  598          move.b    -1(A6),D1
000009A6  4881       599          ext.w     D1
000009A8  48C1       600          ext.l     D1
000009AA  2F01       601          move.l    D1,-(A7)
000009AC  4EB8 0978  602          jsr       _Outchar
000009B0  584F       603          addq.w    #4,A7
000009B2  60DE       604          bra       OutMess_1
                     605   OutMess_3:
000009B4  4E5E       606          unlk      A6
000009B6  4E75       607          rts
                     608   ; }
                     609   ; /******************************************************************************
                     610   ; *subroutine to clear the line by issuing 24 space characters
                     611   ; *******************************************************************************/
                     612   ; void Clearln(void)
                     613   ; {
                     614   _Clearln:
000009B8  2F02       615          move.l    D2,-(A7)
                     616   ; unsigned char i ;
                     617   ; for(i = 0; i < 24; i ++)
000009BA  4202       618          clr.b     D2
                     619   Clearln_1:
000009BC  0C02 0018  620          cmp.b     #24,D2
000009C0  640E       621          bhs.s     Clearln_3
                     622   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  623          pea       32
000009C6  4EB8 0978  624          jsr       _Outchar
000009CA  584F       625          addq.w    #4,A7
000009CC  5202       626          addq.b    #1,D2
000009CE  60EC       627          bra       Clearln_1
                     628   Clearln_3:
000009D0  241F       629          move.l    (A7)+,D2
000009D2  4E75       630          rts
                     631   ; }
                     632   ; /******************************************************************************
                     633   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     634   ; *******************************************************************************/
                     635   ; void Oline0(char *theMessage)
                     636   ; {
                     637   _Oline0:
000009D4  4E56 0000  638          link      A6,#0
                     639   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  640          move.b    #128,4194336
000009DC  0040 0020 
                     641   ; Wait3ms();
000009E0  4EB8 0946  642          jsr       _Wait3ms
                     643   ; Clearln() ;
000009E4  4EB8 09B8  644          jsr       _Clearln
                     645   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  646          move.b    #128,4194336
000009EC  0040 0020 
                     647   ; Wait3ms() ;
000009F0  4EB8 0946  648          jsr       _Wait3ms
                     649   ; OutMess(theMessage) ;
000009F4  2F2E 0008  650          move.l    8(A6),-(A7)
000009F8  4EB8 098E  651          jsr       _OutMess
000009FC  584F       652          addq.w    #4,A7
000009FE  4E5E       653          unlk      A6
00000A00  4E75       654          rts
                     655   ; }
                     656   ; /******************************************************************************
                     657   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     658   ; *******************************************************************************/
                     659   ; void Oline1(char *theMessage)
                     660   ; {
                     661   _Oline1:
00000A02  4E56 0000  662          link      A6,#0
                     663   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  664          move.b    #192,4194336
00000A0A  0040 0020 
                     665   ; Wait3ms();
00000A0E  4EB8 0946  666          jsr       _Wait3ms
                     667   ; Clearln() ;
00000A12  4EB8 09B8  668          jsr       _Clearln
                     669   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  670          move.b    #192,4194336
00000A1A  0040 0020 
                     671   ; Wait3ms() ;
00000A1E  4EB8 0946  672          jsr       _Wait3ms
                     673   ; OutMess(theMessage) ;
00000A22  2F2E 0008  674          move.l    8(A6),-(A7)
00000A26  4EB8 098E  675          jsr       _OutMess
00000A2A  584F       676          addq.w    #4,A7
00000A2C  4E5E       677          unlk      A6
00000A2E  4E75       678          rts
                     679   ; }
                     680   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     681   ; {
                     682   _InstallExceptionHandler:
00000A30  4E56 FFFC  683          link      A6,#-4
                     684   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  685          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     686   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  687          move.l    -4(A6),A0
00000A40  202E 000C  688          move.l    12(A6),D0
00000A44  E588       689          lsl.l     #2,D0
00000A46  21AE 0008  690          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       691          unlk      A6
00000A4E  4E75       692          rts
                     693   ; }
                     694   ; void TestLEDS(void)
                     695   ; {
                     696   _TestLEDS:
00000A50  48E7 3000  697          movem.l   D2/D3,-(A7)
                     698   ; int delay ;
                     699   ; unsigned char count = 0 ;
00000A54  4202       700          clr.b     D2
                     701   ; while(1)    {
                     702   TestLEDS_1:
                     703   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       704          move.b    D2,D0
00000A58  E908       705          lsl.b     #4,D0
00000A5A  1202       706          move.b    D2,D1
00000A5C  C23C 000F  707          and.b     #15,D1
00000A60  D001       708          add.b     D1,D0
00000A62  13C0 0040  709          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  710          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  711          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  712          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  713          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  714          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  715          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  716          move.b    D0,4194304
00000A90  0000      
                     717   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       718          clr.l     D3
                     719   TestLEDS_4:
00000A94  0C83 0003  720          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       721          bge.s     TestLEDS_6
00000A9C  5283       722          addq.l    #1,D3
00000A9E  60F4       723          bra       TestLEDS_4
                     724   TestLEDS_6:
                     725   ; ;
                     726   ; count ++;
00000AA0  5202       727          addq.b    #1,D2
00000AA2  60B2       728          bra       TestLEDS_1
                     729   ; }
                     730   ; }
                     731   ; void SwitchTest(void)
                     732   ; {
                     733   _SwitchTest:
00000AA4  48E7 3020  734          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  735          lea       _printf.L,A2
00000AAC  5B46      
                     736   ; int i, switches = 0 ;
00000AAE  4283       737          clr.l     D3
                     738   ; printf("\r\n") ;
00000AB0  4879 0000  739          pea       @m68kde~1_1.L
00000AB4  6458      
00000AB6  4E92       740          jsr       (A2)
00000AB8  584F       741          addq.w    #4,A7
                     742   ; while(1)    {
                     743   SwitchTest_1:
                     744   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  745          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  746          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       747          lsl.l     #8,D0
00000AC8  1239 0040  748          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  749          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       750          or.l      D1,D0
00000AD6  2600       751          move.l    D0,D3
                     752   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  753          pea       @m68kde~1_2.L
00000ADC  645C      
00000ADE  4E92       754          jsr       (A2)
00000AE0  584F       755          addq.w    #4,A7
                     756   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  757          move.l    #128,D2
00000AE6  0080      
                     758   SwitchTest_4:
00000AE8  0C82 0000  759          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       760          ble.s     SwitchTest_6
                     761   ; if((switches & i) == 0)
00000AF0  2003       762          move.l    D3,D0
00000AF2  C082       763          and.l     D2,D0
00000AF4  660C       764          bne.s     SwitchTest_7
                     765   ; printf("0") ;
00000AF6  4879 0000  766          pea       @m68kde~1_3.L
00000AFA  6472      
00000AFC  4E92       767          jsr       (A2)
00000AFE  584F       768          addq.w    #4,A7
00000B00  600A       769          bra.s     SwitchTest_8
                     770   SwitchTest_7:
                     771   ; else
                     772   ; printf("1") ;
00000B02  4879 0000  773          pea       @m68kde~1_4.L
00000B06  6474      
00000B08  4E92       774          jsr       (A2)
00000B0A  584F       775          addq.w    #4,A7
                     776   SwitchTest_8:
00000B0C  E282       777          asr.l     #1,D2
00000B0E  60D8       778          bra       SwitchTest_4
                     779   SwitchTest_6:
00000B10  60A8       780          bra       SwitchTest_1
                     781   ; }
                     782   ; }
                     783   ; }
                     784   ; /*********************************************************************************************
                     785   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     786   ; *********************************************************************************************/
                     787   ; void Init_RS232(void)
                     788   ; {
                     789   _Init_RS232:
                     790   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  791          move.b    #21,4194368
00000B16  0040 0040 
                     792   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  793          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       794          rts
                     795   ; }
                     796   ; int kbhit(void)
                     797   ; {
                     798   _kbhit:
                     799   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  800          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  801          and.b     #1,D0
00000B2E  0C00 0001  802          cmp.b     #1,D0
00000B32  6604       803          bne.s     kbhit_1
                     804   ; return 1 ;
00000B34  7001       805          moveq     #1,D0
00000B36  6002       806          bra.s     kbhit_3
                     807   kbhit_1:
                     808   ; else
                     809   ; return 0 ;
00000B38  4280       810          clr.l     D0
                     811   kbhit_3:
00000B3A  4E75       812          rts
                     813   ; }
                     814   ; /*********************************************************************************************************
                     815   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     816   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     817   ; **  to allow the board to communicate with HyperTerminal Program
                     818   ; **
                     819   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     820   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     821   ; **  call _putch() also
                     822   ; *********************************************************************************************************/
                     823   ; int _putch( int c)
                     824   ; {
                     825   __putch:
00000B3C  4E56 0000  826          link      A6,#0
                     827   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     828   _putch_1:
00000B40  1039 0040  829          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  830          and.b     #2,D0
00000B4A  0C00 0002  831          cmp.b     #2,D0
00000B4E  6702       832          beq.s     _putch_3
00000B50  60EE       833          bra       _putch_1
                     834   _putch_3:
                     835   ; ;
                     836   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  837          move.l    8(A6),D0
00000B56  C03C 007F  838          and.b     #127,D0
00000B5A  13C0 0040  839          move.b    D0,4194370
00000B5E  0042      
                     840   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  841          move.l    8(A6),D0
00000B64  4E5E       842          unlk      A6
00000B66  4E75       843          rts
                     844   ; }
                     845   ; /*********************************************************************************************************
                     846   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     847   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     848   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     849   ; **
                     850   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     851   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     852   ; **  call _getch() also
                     853   ; *********************************************************************************************************/
                     854   ; int _getch( void )
                     855   ; {
                     856   __getch:
00000B68  2F02       857          move.l    D2,-(A7)
                     858   ; int c ;
                     859   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     860   _getch_1:
00000B6A  1039 0040  861          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  862          and.b     #1,D0
00000B74  0C00 0001  863          cmp.b     #1,D0
00000B78  6702       864          beq.s     _getch_3
00000B7A  60EE       865          bra       _getch_1
                     866   _getch_3:
                     867   ; ;
                     868   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  869          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  870          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  871          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       872          move.l    D0,D2
                     873   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     874   ; if(Echo)
00000B90  4AB9 0B00  875          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       876          beq.s     _getch_4
                     877   ; _putch(c);
00000B98  2F02       878          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  879          jsr       __putch
00000B9E  584F       880          addq.w    #4,A7
                     881   _getch_4:
                     882   ; return c ;
00000BA0  2002       883          move.l    D2,D0
00000BA2  241F       884          move.l    (A7)+,D2
00000BA4  4E75       885          rts
                     886   ; }
                     887   ; // flush the input stream for any unread characters
                     888   ; void FlushKeyboard(void)
                     889   ; {
                     890   _FlushKeyboard:
00000BA6  4E56 FFFC  891          link      A6,#-4
                     892   ; char c ;
                     893   ; while(1)    {
                     894   FlushKeyboard_1:
                     895   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  896          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  897          and.b     #1,D0
00000BB4  0C00 0001  898          cmp.b     #1,D0
00000BB8  6610       899          bne.s     FlushKeyboard_4
                     900   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  901          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  902          and.b     #127,D0
00000BC4  1D40 FFFF  903          move.b    D0,-1(A6)
00000BC8  6002       904          bra.s     FlushKeyboard_5
                     905   FlushKeyboard_4:
                     906   ; else
                     907   ; return ;
00000BCA  6002       908          bra.s     FlushKeyboard_6
                     909   FlushKeyboard_5:
00000BCC  60DC       910          bra       FlushKeyboard_1
                     911   FlushKeyboard_6:
00000BCE  4E5E       912          unlk      A6
00000BD0  4E75       913          rts
                     914   ; }
                     915   ; }
                     916   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     917   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     918   ; char xtod(int c)
                     919   ; {
                     920   _xtod:
00000BD2  4E56 0000  921          link      A6,#0
00000BD6  2F02       922          move.l    D2,-(A7)
00000BD8  242E 0008  923          move.l    8(A6),D2
                     924   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  925          cmp.b     #57,D2
00000BE0  6E08       926          bgt.s     xtod_1
                     927   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       928          move.b    D2,D0
00000BE4  0400 0030  929          sub.b     #48,D0
00000BE8  6014       930          bra.s     xtod_3
                     931   xtod_1:
                     932   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  933          cmp.b     #70,D2
00000BEE  6F08       934          ble.s     xtod_4
                     935   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       936          move.b    D2,D0
00000BF2  0400 0057  937          sub.b     #87,D0
00000BF6  6006       938          bra.s     xtod_3
                     939   xtod_4:
                     940   ; else
                     941   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       942          move.b    D2,D0
00000BFA  0400 0037  943          sub.b     #55,D0
                     944   xtod_3:
00000BFE  241F       945          move.l    (A7)+,D2
00000C00  4E5E       946          unlk      A6
00000C02  4E75       947          rts
                     948   ; }
                     949   ; int Get2HexDigits(char *CheckSumPtr)
                     950   ; {
                     951   _Get2HexDigits:
00000C04  4E56 0000  952          link      A6,#0
00000C08  2F02       953          move.l    D2,-(A7)
                     954   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       955          move.l    D0,-(A7)
00000C0C  4EB8 0B68  956          jsr       __getch
00000C10  2200       957          move.l    D0,D1
00000C12  201F       958          move.l    (A7)+,D0
00000C14  2F01       959          move.l    D1,-(A7)
00000C16  4EB8 0BD2  960          jsr       _xtod
00000C1A  584F       961          addq.w    #4,A7
00000C1C  C0BC 0000  962          and.l     #255,D0
00000C20  00FF      
00000C22  E980       963          asl.l     #4,D0
00000C24  2F00       964          move.l    D0,-(A7)
00000C26  2F01       965          move.l    D1,-(A7)
00000C28  4EB8 0B68  966          jsr       __getch
00000C2C  221F       967          move.l    (A7)+,D1
00000C2E  2F00       968          move.l    D0,-(A7)
00000C30  4EB8 0BD2  969          jsr       _xtod
00000C34  584F       970          addq.w    #4,A7
00000C36  2200       971          move.l    D0,D1
00000C38  201F       972          move.l    (A7)+,D0
00000C3A  C2BC 0000  973          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       974          or.l      D1,D0
00000C42  2400       975          move.l    D0,D2
                     976   ; if(CheckSumPtr)
00000C44  4AAE 0008  977          tst.l     8(A6)
00000C48  6706       978          beq.s     Get2HexDigits_1
                     979   ; *CheckSumPtr += i ;
00000C4A  206E 0008  980          move.l    8(A6),A0
00000C4E  D510       981          add.b     D2,(A0)
                     982   Get2HexDigits_1:
                     983   ; return i ;
00000C50  2002       984          move.l    D2,D0
00000C52  241F       985          move.l    (A7)+,D2
00000C54  4E5E       986          unlk      A6
00000C56  4E75       987          rts
                     988   ; }
                     989   ; int Get4HexDigits(char *CheckSumPtr)
                     990   ; {
                     991   _Get4HexDigits:
00000C58  4E56 0000  992          link      A6,#0
                     993   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  994          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  995          jsr       _Get2HexDigits
00000C64  584F       996          addq.w    #4,A7
00000C66  E180       997          asl.l     #8,D0
00000C68  2F00       998          move.l    D0,-(A7)
00000C6A  2F2E 0008  999          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04 1000          jsr       _Get2HexDigits
00000C72  584F      1001          addq.w    #4,A7
00000C74  2200      1002          move.l    D0,D1
00000C76  201F      1003          move.l    (A7)+,D0
00000C78  8081      1004          or.l      D1,D0
00000C7A  4E5E      1005          unlk      A6
00000C7C  4E75      1006          rts
                    1007   ; }
                    1008   ; int Get6HexDigits(char *CheckSumPtr)
                    1009   ; {
                    1010   _Get6HexDigits:
00000C7E  4E56 0000 1011          link      A6,#0
                    1012   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1013          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1014          jsr       _Get4HexDigits
00000C8A  584F      1015          addq.w    #4,A7
00000C8C  E180      1016          asl.l     #8,D0
00000C8E  2F00      1017          move.l    D0,-(A7)
00000C90  2F2E 0008 1018          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1019          jsr       _Get2HexDigits
00000C98  584F      1020          addq.w    #4,A7
00000C9A  2200      1021          move.l    D0,D1
00000C9C  201F      1022          move.l    (A7)+,D0
00000C9E  8081      1023          or.l      D1,D0
00000CA0  4E5E      1024          unlk      A6
00000CA2  4E75      1025          rts
                    1026   ; }
                    1027   ; int Get8HexDigits(char *CheckSumPtr)
                    1028   ; {
                    1029   _Get8HexDigits:
00000CA4  4E56 0000 1030          link      A6,#0
                    1031   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1032          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1033          jsr       _Get4HexDigits
00000CB0  584F      1034          addq.w    #4,A7
00000CB2  E180      1035          asl.l     #8,D0
00000CB4  E180      1036          asl.l     #8,D0
00000CB6  2F00      1037          move.l    D0,-(A7)
00000CB8  2F2E 0008 1038          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1039          jsr       _Get4HexDigits
00000CC0  584F      1040          addq.w    #4,A7
00000CC2  2200      1041          move.l    D0,D1
00000CC4  201F      1042          move.l    (A7)+,D0
00000CC6  8081      1043          or.l      D1,D0
00000CC8  4E5E      1044          unlk      A6
00000CCA  4E75      1045          rts
                    1046   ; }
                    1047   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1048   _strcatInstruction:
00000CCC  4E56 0000 1049          link      A6,#0
00000CD0  2F2E 0008 1050          move.l    8(A6),-(A7)
00000CD4  4879 0B00 1051          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1052          jsr       _strcat
00000CDE  5B14      
00000CE0  504F      1053          addq.w    #8,A7
00000CE2  4E5E      1054          unlk      A6
00000CE4  4E75      1055          rts
                    1056   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1057   _strcpyInstruction:
00000CE6  4E56 0000 1058          link      A6,#0
00000CEA  2F2E 0008 1059          move.l    8(A6),-(A7)
00000CEE  4879 0B00 1060          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1061          jsr       _strcpy
00000CF8  5974      
00000CFA  504F      1062          addq.w    #8,A7
00000CFC  4E5E      1063          unlk      A6
00000CFE  4E75      1064          rts
                    1065   ; void DisassembleProgram(void )
                    1066   ; {
                    1067   _DisassembleProgram:
00000D00  4E56 FFF8 1068          link      A6,#-8
00000D04  48E7 3038 1069          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0B00 1070          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1071          lea       _printf.L,A3
00000D12  5B46      
00000D14  49F9 0B00 1072          lea       _Instruction.L,A4
00000D18  04E2      
                    1073   ; char c ;
                    1074   ; int i, j ;
                    1075   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1076   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1077          pea       @m68kde~1_5.L
00000D1E  6476      
00000D20  4E93      1078          jsr       (A3)
00000D22  584F      1079          addq.w    #4,A7
                    1080   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1081          clr.l     -(A7)
00000D26  4EB8 0CA4 1082          jsr       _Get8HexDigits
00000D2A  584F      1083          addq.w    #4,A7
00000D2C  2400      1084          move.l    D0,D2
                    1085   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1086          pea       @m68kde~1_6.L
00000D32  648E      
00000D34  4E93      1087          jsr       (A3)
00000D36  584F      1088          addq.w    #4,A7
                    1089   ; while(1)    {
                    1090   DisassembleProgram_1:
                    1091   ; for(i = 0; i < 20; i ++)
00000D38  4283      1092          clr.l     D3
                    1093   DisassembleProgram_4:
00000D3A  0C83 0000 1094          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1095          bge       DisassembleProgram_6
                    1096   ; {
                    1097   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1098          move.l    #1,(A2)
00000D48  0001      
                    1099   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1100          move.l    D2,-(A7)
00000D4C  4EB9 0000 1101          jsr       _DisassembleInstruction
00000D50  3AD2      
00000D52  584F      1102          addq.w    #4,A7
                    1103   ; if(InstructionSize == 1)
00000D54  2012      1104          move.l    (A2),D0
00000D56  0C80 0000 1105          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1106          bne.s     DisassembleProgram_7
                    1107   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1108          move.l    A4,-(A7)
00000D60  2042      1109          move.l    D2,A0
00000D62  3210      1110          move.w    (A0),D1
00000D64  C2BC 0000 1111          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1112          move.l    D1,-(A7)
00000D6C  2F02      1113          move.l    D2,-(A7)
00000D6E  4879 0000 1114          pea       @m68kde~1_7.L
00000D72  64B2      
00000D74  4E93      1115          jsr       (A3)
00000D76  DEFC 0010 1116          add.w     #16,A7
00000D7A  6000 0138 1117          bra       DisassembleProgram_15
                    1118   DisassembleProgram_7:
                    1119   ; else if(InstructionSize == 2)
00000D7E  2012      1120          move.l    (A2),D0
00000D80  0C80 0000 1121          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1122          bne.s     DisassembleProgram_9
                    1123   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1124          move.l    A4,-(A7)
00000D8A  2042      1125          move.l    D2,A0
00000D8C  3228 0002 1126          move.w    2(A0),D1
00000D90  C2BC 0000 1127          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1128          move.l    D1,-(A7)
00000D98  2042      1129          move.l    D2,A0
00000D9A  3210      1130          move.w    (A0),D1
00000D9C  C2BC 0000 1131          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1132          move.l    D1,-(A7)
00000DA4  2F02      1133          move.l    D2,-(A7)
00000DA6  4879 0000 1134          pea       @m68kde~1_8.L
00000DAA  64DA      
00000DAC  4E93      1135          jsr       (A3)
00000DAE  DEFC 0014 1136          add.w     #20,A7
00000DB2  6000 0100 1137          bra       DisassembleProgram_15
                    1138   DisassembleProgram_9:
                    1139   ; else if(InstructionSize == 3)
00000DB6  2012      1140          move.l    (A2),D0
00000DB8  0C80 0000 1141          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1142          bne       DisassembleProgram_11
                    1143   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1144          move.l    A4,-(A7)
00000DC4  2042      1145          move.l    D2,A0
00000DC6  3228 0004 1146          move.w    4(A0),D1
00000DCA  C2BC 0000 1147          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1148          move.l    D1,-(A7)
00000DD2  2042      1149          move.l    D2,A0
00000DD4  3228 0002 1150          move.w    2(A0),D1
00000DD8  C2BC 0000 1151          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1152          move.l    D1,-(A7)
00000DE0  2042      1153          move.l    D2,A0
00000DE2  3210      1154          move.w    (A0),D1
00000DE4  C2BC 0000 1155          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1156          move.l    D1,-(A7)
00000DEC  2F02      1157          move.l    D2,-(A7)
00000DEE  4879 0000 1158          pea       @m68kde~1_9.L
00000DF2  6502      
00000DF4  4E93      1159          jsr       (A3)
00000DF6  DEFC 0018 1160          add.w     #24,A7
00000DFA  6000 00B8 1161          bra       DisassembleProgram_15
                    1162   DisassembleProgram_11:
                    1163   ; else if(InstructionSize == 4)
00000DFE  2012      1164          move.l    (A2),D0
00000E00  0C80 0000 1165          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1166          bne       DisassembleProgram_13
                    1167   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1168          move.l    A4,-(A7)
00000E0C  2042      1169          move.l    D2,A0
00000E0E  3228 0006 1170          move.w    6(A0),D1
00000E12  C2BC 0000 1171          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1172          move.l    D1,-(A7)
00000E1A  2042      1173          move.l    D2,A0
00000E1C  3228 0004 1174          move.w    4(A0),D1
00000E20  C2BC 0000 1175          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1176          move.l    D1,-(A7)
00000E28  2042      1177          move.l    D2,A0
00000E2A  3228 0002 1178          move.w    2(A0),D1
00000E2E  C2BC 0000 1179          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1180          move.l    D1,-(A7)
00000E36  2042      1181          move.l    D2,A0
00000E38  3210      1182          move.w    (A0),D1
00000E3A  C2BC 0000 1183          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1184          move.l    D1,-(A7)
00000E42  2F02      1185          move.l    D2,-(A7)
00000E44  4879 0000 1186          pea       @m68kde~1_10.L
00000E48  652A      
00000E4A  4E93      1187          jsr       (A3)
00000E4C  DEFC 001C 1188          add.w     #28,A7
00000E50  6000 0062 1189          bra       DisassembleProgram_15
                    1190   DisassembleProgram_13:
                    1191   ; else if(InstructionSize == 5)
00000E54  2012      1192          move.l    (A2),D0
00000E56  0C80 0000 1193          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1194          bne       DisassembleProgram_15
                    1195   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1196          move.l    A4,-(A7)
00000E62  2042      1197          move.l    D2,A0
00000E64  3228 0008 1198          move.w    8(A0),D1
00000E68  C2BC 0000 1199          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1200          move.l    D1,-(A7)
00000E70  2042      1201          move.l    D2,A0
00000E72  3228 0006 1202          move.w    6(A0),D1
00000E76  C2BC 0000 1203          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1204          move.l    D1,-(A7)
00000E7E  2042      1205          move.l    D2,A0
00000E80  3228 0004 1206          move.w    4(A0),D1
00000E84  C2BC 0000 1207          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1208          move.l    D1,-(A7)
00000E8C  2042      1209          move.l    D2,A0
00000E8E  3228 0002 1210          move.w    2(A0),D1
00000E92  C2BC 0000 1211          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1212          move.l    D1,-(A7)
00000E9A  2042      1213          move.l    D2,A0
00000E9C  3210      1214          move.w    (A0),D1
00000E9E  C2BC 0000 1215          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1216          move.l    D1,-(A7)
00000EA6  2F02      1217          move.l    D2,-(A7)
00000EA8  4879 0000 1218          pea       @m68kde~1_11.L
00000EAC  6552      
00000EAE  4E93      1219          jsr       (A3)
00000EB0  DEFC 0020 1220          add.w     #32,A7
                    1221   DisassembleProgram_15:
                    1222   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1223          move.l    (A2),D0
00000EB6  E388      1224          lsl.l     #1,D0
00000EB8  D480      1225          add.l     D0,D2
00000EBA  5283      1226          addq.l    #1,D3
00000EBC  6000 FE7C 1227          bra       DisassembleProgram_4
                    1228   DisassembleProgram_6:
                    1229   ; }
                    1230   ; c = _getch() ;
00000EC0  4EB8 0B68 1231          jsr       __getch
00000EC4  1D40 FFFB 1232          move.b    D0,-5(A6)
                    1233   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1234          move.b    -5(A6),D0
00000ECC  0C00 001B 1235          cmp.b     #27,D0
00000ED0  6602      1236          bne.s     DisassembleProgram_17
                    1237   ; return ;
00000ED2  6004      1238          bra.s     DisassembleProgram_19
                    1239   DisassembleProgram_17:
00000ED4  6000 FE62 1240          bra       DisassembleProgram_1
                    1241   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1242          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1243          unlk      A6
00000EDE  4E75      1244          rts
                    1245   ; }
                    1246   ; }
                    1247   ; void DumpMemory(void)   // simple dump memory fn
                    1248   ; {
                    1249   _DumpMemory:
00000EE0  48E7 3C30 1250          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1251          lea       _printf.L,A2
00000EE8  5B46      
00000EEA  47F9 0000 1252          lea       _putch.L,A3
00000EEE  5A62      
                    1253   ; int i, j ;
                    1254   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1255   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1256          pea       @m68kde~1_12.L
00000EF4  657A      
00000EF6  4E92      1257          jsr       (A2)
00000EF8  584F      1258          addq.w    #4,A7
                    1259   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1260          pea       @m68kde~1_5.L
00000EFE  6476      
00000F00  4E92      1261          jsr       (A2)
00000F02  584F      1262          addq.w    #4,A7
                    1263   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1264          clr.l     -(A7)
00000F06  4EB8 0CA4 1265          jsr       _Get8HexDigits
00000F0A  584F      1266          addq.w    #4,A7
00000F0C  2600      1267          move.l    D0,D3
                    1268   ; while(1)    {
                    1269   DumpMemory_1:
                    1270   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1271          clr.l     D5
                    1272   DumpMemory_4:
00000F10  0C85 0000 1273          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1274          bge       DumpMemory_6
                    1275   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1276          move.l    D3,-(A7)
00000F1C  4879 0000 1277          pea       @m68kde~1_13.L
00000F20  65B4      
00000F22  4E92      1278          jsr       (A2)
00000F24  504F      1279          addq.w    #8,A7
                    1280   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1281          clr.l     D2
                    1282   DumpMemory_7:
00000F28  0C82 0000 1283          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1284          bge.s     DumpMemory_9
                    1285   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1286          move.l    D3,A0
00000F32  1230 2800 1287          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1288          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1289          move.l    D1,-(A7)
00000F3E  4879 0000 1290          pea       @m68kde~1_14.L
00000F42  65BC      
00000F44  4E92      1291          jsr       (A2)
00000F46  504F      1292          addq.w    #8,A7
                    1293   ; putchar(' ') ;
00000F48  4878 0020 1294          pea       32
00000F4C  4E93      1295          jsr       (A3)
00000F4E  584F      1296          addq.w    #4,A7
00000F50  5282      1297          addq.l    #1,D2
00000F52  60D4      1298          bra       DumpMemory_7
                    1299   DumpMemory_9:
                    1300   ; }
                    1301   ; // now display the data as ASCII at the end
                    1302   ; printf("  ") ;
00000F54  4879 0000 1303          pea       @m68kde~1_15.L
00000F58  65C2      
00000F5A  4E92      1304          jsr       (A2)
00000F5C  584F      1305          addq.w    #4,A7
                    1306   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1307          clr.l     D2
                    1308   DumpMemory_10:
00000F60  0C82 0000 1309          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1310          bge       DumpMemory_12
                    1311   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1312          move.l    D3,A0
00000F6C  1030 2800 1313          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1314          and.b     #127,D0
00000F74  1800      1315          move.b    D0,D4
                    1316   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1317          cmp.b     #127,D4
00000F7A  6206      1318          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1319          cmp.b     #32,D4
00000F80  640A      1320          bhs.s     DumpMemory_13
                    1321   DumpMemory_15:
                    1322   ; putchar('.') ;
00000F82  4878 002E 1323          pea       46
00000F86  4E93      1324          jsr       (A3)
00000F88  584F      1325          addq.w    #4,A7
00000F8A  6012      1326          bra.s     DumpMemory_14
                    1327   DumpMemory_13:
                    1328   ; else
                    1329   ; putchar(RamPtr[j]) ;
00000F8C  2043      1330          move.l    D3,A0
00000F8E  1230 2800 1331          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1332          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1333          move.l    D1,-(A7)
00000F9A  4E93      1334          jsr       (A3)
00000F9C  584F      1335          addq.w    #4,A7
                    1336   DumpMemory_14:
00000F9E  5282      1337          addq.l    #1,D2
00000FA0  60BE      1338          bra       DumpMemory_10
                    1339   DumpMemory_12:
                    1340   ; }
                    1341   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1342          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1343          addq.l    #1,D5
00000FAA  6000 FF64 1344          bra       DumpMemory_4
                    1345   DumpMemory_6:
                    1346   ; }
                    1347   ; printf("\r\n") ;
00000FAE  4879 0000 1348          pea       @m68kde~1_1.L
00000FB2  6458      
00000FB4  4E92      1349          jsr       (A2)
00000FB6  584F      1350          addq.w    #4,A7
                    1351   ; c = _getch() ;
00000FB8  4EB8 0B68 1352          jsr       __getch
00000FBC  1800      1353          move.b    D0,D4
                    1354   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1355          cmp.b     #27,D4
00000FC2  6602      1356          bne.s     DumpMemory_16
                    1357   ; break ;
00000FC4  6004      1358          bra.s     DumpMemory_3
                    1359   DumpMemory_16:
00000FC6  6000 FF46 1360          bra       DumpMemory_1
                    1361   DumpMemory_3:
00000FCA  4CDF 0C3C 1362          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1363          rts
                    1364   ; }
                    1365   ; }
                    1366   ; void FillMemory()
                    1367   ; {
                    1368   _FillMemory:
00000FD0  48E7 3820 1369          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1370          lea       _printf.L,A2
00000FD8  5B46      
                    1371   ; char *StartRamPtr, *EndRamPtr ;
                    1372   ; unsigned char FillData ;
                    1373   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1374          pea       @m68kde~1_16.L
00000FDE  65C6      
00000FE0  4E92      1375          jsr       (A2)
00000FE2  584F      1376          addq.w    #4,A7
                    1377   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1378          pea       @m68kde~1_5.L
00000FE8  6476      
00000FEA  4E92      1379          jsr       (A2)
00000FEC  584F      1380          addq.w    #4,A7
                    1381   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1382          clr.l     -(A7)
00000FF0  4EB8 0CA4 1383          jsr       _Get8HexDigits
00000FF4  584F      1384          addq.w    #4,A7
00000FF6  2400      1385          move.l    D0,D2
                    1386   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1387          pea       @m68kde~1_17.L
00000FFC  65DA      
00000FFE  4E92      1388          jsr       (A2)
00001000  584F      1389          addq.w    #4,A7
                    1390   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1391          clr.l     -(A7)
00001004  4EB8 0CA4 1392          jsr       _Get8HexDigits
00001008  584F      1393          addq.w    #4,A7
0000100A  2800      1394          move.l    D0,D4
                    1395   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1396          pea       @m68kde~1_18.L
00001010  65F0      
00001012  4E92      1397          jsr       (A2)
00001014  584F      1398          addq.w    #4,A7
                    1399   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1400          clr.l     -(A7)
00001018  4EB8 0C04 1401          jsr       _Get2HexDigits
0000101C  584F      1402          addq.w    #4,A7
0000101E  1600      1403          move.b    D0,D3
                    1404   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1405          and.l     #255,D3
00001024  00FF      
00001026  2F03      1406          move.l    D3,-(A7)
00001028  2F04      1407          move.l    D4,-(A7)
0000102A  2F02      1408          move.l    D2,-(A7)
0000102C  4879 0000 1409          pea       @m68kde~1_19.L
00001030  6604      
00001032  4E92      1410          jsr       (A2)
00001034  DEFC 0010 1411          add.w     #16,A7
                    1412   ; while(StartRamPtr < EndRamPtr)
                    1413   FillMemory_1:
00001038  B484      1414          cmp.l     D4,D2
0000103A  6408      1415          bhs.s     FillMemory_3
                    1416   ; *StartRamPtr++ = FillData ;
0000103C  2042      1417          move.l    D2,A0
0000103E  5282      1418          addq.l    #1,D2
00001040  1083      1419          move.b    D3,(A0)
00001042  60F4      1420          bra       FillMemory_1
                    1421   FillMemory_3:
00001044  4CDF 041C 1422          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1423          rts
                    1424   ; }
                    1425   ; void Load_SRecordFile()
                    1426   ; {
                    1427   _Load_SRecordFile:
0000104A  4E56 FFDC 1428          link      A6,#-36
0000104E  48E7 3F3C 1429          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1430          lea       -6(A6),A2
00001056  47F8 0C04 1431          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1432          lea       _printf.L,A4
0000105E  5B46      
                    1433   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1434          clr.l     -18(A6)
00001064  3A7C 0000 1435          move.w    #0,A5
                    1436   ; int result, ByteCount ;
                    1437   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1438   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1439   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1440          moveq     #0,D7
                    1441   ; AddressFail = 0 ;
0000106A  42AE FFEA 1442          clr.l     -22(A6)
                    1443   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0B00 1444          clr.l     _Echo.L
00001072  00E0      
                    1445   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1446          pea       @m68kde~1_20.L
00001078  6634      
0000107A  4E94      1447          jsr       (A4)
0000107C  584F      1448          addq.w    #4,A7
                    1449   ; while(1)    {
                    1450   Load_SRecordFile_1:
                    1451   ; CheckSum = 0 ;
0000107E  4212      1452          clr.b     (A2)
                    1453   ; do {
                    1454   Load_SRecordFile_4:
                    1455   ; c = toupper(_getch()) ;
00001080  2F00      1456          move.l    D0,-(A7)
00001082  4EB8 0B68 1457          jsr       __getch
00001086  2200      1458          move.l    D0,D1
00001088  201F      1459          move.l    (A7)+,D0
0000108A  2F01      1460          move.l    D1,-(A7)
0000108C  4EB9 0000 1461          jsr       _toupper
00001090  5B2A      
00001092  584F      1462          addq.w    #4,A7
00001094  1C00      1463          move.b    D0,D6
                    1464   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1465          cmp.b     #27,D6
0000109A  6604      1466          bne.s     Load_SRecordFile_6
                    1467   ; return;
0000109C  6000 0132 1468          bra       Load_SRecordFile_8
                    1469   Load_SRecordFile_6:
000010A0  0C06 0053 1470          cmp.b     #83,D6
000010A4  66DA      1471          bne       Load_SRecordFile_4
                    1472   ; }while(c != (char)('S'));   // wait for S start of header
                    1473   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1474          jsr       __getch
000010AA  1600      1475          move.b    D0,D3
                    1476   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1477          cmp.b     #48,D3
000010B0  6706      1478          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1479          cmp.b     #53,D3
000010B6  6604      1480          bne.s     Load_SRecordFile_9
                    1481   Load_SRecordFile_11:
                    1482   ; continue ;
000010B8  6000 00D2 1483          bra       Load_SRecordFile_23
                    1484   Load_SRecordFile_9:
                    1485   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1486          cmp.b     #55,D3
000010C0  6D04      1487          blt.s     Load_SRecordFile_12
                    1488   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1489          bra       Load_SRecordFile_3
                    1490   Load_SRecordFile_12:
                    1491   ; // get the bytecount
                    1492   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1493          move.l    A2,-(A7)
000010C8  4E93      1494          jsr       (A3)
000010CA  584F      1495          addq.w    #4,A7
000010CC  2D40 FFF6 1496          move.l    D0,-10(A6)
                    1497   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1498   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1499          cmp.b     #49,D3
000010D4  660E      1500          bne.s     Load_SRecordFile_14
                    1501   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1502          moveq     #2,D5
                    1503   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1504          move.l    A2,-(A7)
000010DA  4EB8 0C58 1505          jsr       _Get4HexDigits
000010DE  584F      1506          addq.w    #4,A7
000010E0  2800      1507          move.l    D0,D4
000010E2  6020      1508          bra.s     Load_SRecordFile_17
                    1509   Load_SRecordFile_14:
                    1510   ; }
                    1511   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1512          cmp.b     #50,D3
000010E8  660E      1513          bne.s     Load_SRecordFile_16
                    1514   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1515          moveq     #3,D5
                    1516   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1517          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1518          jsr       _Get6HexDigits
000010F2  584F      1519          addq.w    #4,A7
000010F4  2800      1520          move.l    D0,D4
000010F6  600C      1521          bra.s     Load_SRecordFile_17
                    1522   Load_SRecordFile_16:
                    1523   ; }
                    1524   ; else    {
                    1525   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1526          moveq     #4,D5
                    1527   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1528          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1529          jsr       _Get8HexDigits
00001100  584F      1530          addq.w    #4,A7
00001102  2800      1531          move.l    D0,D4
                    1532   Load_SRecordFile_17:
                    1533   ; }
                    1534   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1535          move.l    D4,-4(A6)
                    1536   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1537          move.l    -10(A6),D0
0000110C  9085      1538          sub.l     D5,D0
0000110E  5380      1539          subq.l    #1,D0
00001110  2D40 FFE2 1540          move.l    D0,-30(A6)
                    1541   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1542          clr.l     D2
                    1543   Load_SRecordFile_18:
00001116  B4AE FFE2 1544          cmp.l     -30(A6),D2
0000111A  6C1E      1545          bge.s     Load_SRecordFile_20
                    1546   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1547          move.l    A2,-(A7)
0000111E  4E93      1548          jsr       (A3)
00001120  584F      1549          addq.w    #4,A7
00001122  2D40 FFDE 1550          move.l    D0,-34(A6)
                    1551   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1552          move.l    -34(A6),D0
0000112A  206E FFFC 1553          move.l    -4(A6),A0
0000112E  52AE FFFC 1554          addq.l    #1,-4(A6)
00001132  1080      1555          move.b    D0,(A0)
                    1556   ; ByteTotal++;
00001134  524D      1557          addq.w    #1,A5
00001136  5282      1558          addq.l    #1,D2
00001138  60DC      1559          bra       Load_SRecordFile_18
                    1560   Load_SRecordFile_20:
                    1561   ; }
                    1562   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1563   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1564          clr.l     -(A7)
0000113C  4E93      1565          jsr       (A3)
0000113E  584F      1566          addq.w    #4,A7
00001140  1D40 FFFB 1567          move.b    D0,-5(A6)
                    1568   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1569          move.b    (A2),D0
00001146  4600      1570          not.b     D0
00001148  4880      1571          ext.w     D0
0000114A  C07C 00FF 1572          and.w     #255,D0
0000114E  122E FFFB 1573          move.b    -5(A6),D1
00001152  4881      1574          ext.w     D1
00001154  C27C 00FF 1575          and.w     #255,D1
00001158  B041      1576          cmp.w     D1,D0
0000115A  6708      1577          beq.s     Load_SRecordFile_21
                    1578   ; LoadFailed = 1 ;
0000115C  7E01      1579          moveq     #1,D7
                    1580   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1581          move.l    D4,-26(A6)
                    1582   ; break;
00001162  602C      1583          bra.s     Load_SRecordFile_3
                    1584   Load_SRecordFile_21:
                    1585   ; }
                    1586   ; SRecordCount++ ;
00001164  52AE FFEE 1587          addq.l    #1,-18(A6)
                    1588   ; // display feedback on progress
                    1589   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1590          move.l    -18(A6),-(A7)
0000116C  4878 0019 1591          pea       25
00001170  4EB9 0000 1592          jsr       LDIV
00001174  5996      
00001176  202F 0004 1593          move.l    4(A7),D0
0000117A  504F      1594          addq.w    #8,A7
0000117C  4A80      1595          tst.l     D0
0000117E  660C      1596          bne.s     Load_SRecordFile_23
                    1597   ; putchar('.') ;
00001180  4878 002E 1598          pea       46
00001184  4EB9 0000 1599          jsr       _putch
00001188  5A62      
0000118A  584F      1600          addq.w    #4,A7
                    1601   Load_SRecordFile_23:
0000118C  6000 FEF0 1602          bra       Load_SRecordFile_1
                    1603   Load_SRecordFile_3:
                    1604   ; }
                    1605   ; if(LoadFailed == 1) {
00001190  0C87 0000 1606          cmp.l     #1,D7
00001194  0001      
00001196  6610      1607          bne.s     Load_SRecordFile_25
                    1608   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1609          move.l    -26(A6),-(A7)
0000119C  4879 0000 1610          pea       @m68kde~1_21.L
000011A0  6664      
000011A2  4E94      1611          jsr       (A4)
000011A4  504F      1612          addq.w    #8,A7
000011A6  600C      1613          bra.s     Load_SRecordFile_26
                    1614   Load_SRecordFile_25:
                    1615   ; }
                    1616   ; else
                    1617   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1618          move.l    A5,-(A7)
000011AA  4879 0000 1619          pea       @m68kde~1_22.L
000011AE  668A      
000011B0  4E94      1620          jsr       (A4)
000011B2  504F      1621          addq.w    #8,A7
                    1622   Load_SRecordFile_26:
                    1623   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1624   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1625          clr.l     D2
                    1626   Load_SRecordFile_27:
000011B6  0C82 0006 1627          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1628          bge.s     Load_SRecordFile_29
000011BE  5282      1629          addq.l    #1,D2
000011C0  60F4      1630          bra       Load_SRecordFile_27
                    1631   Load_SRecordFile_29:
                    1632   ; ;
                    1633   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1634          jsr       _FlushKeyboard
                    1635   ; Echo = 1;
000011C6  23FC 0000 1636          move.l    #1,_Echo.L
000011CA  0001 0B00 
000011CE  00E0      
                    1637   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1638          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1639          unlk      A6
000011D6  4E75      1640          rts
                    1641   ; }
                    1642   ; void MemoryChange(void)
                    1643   ; {
                    1644   _MemoryChange:
000011D8  48E7 3820 1645          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1646          lea       _printf.L,A2
000011E0  5B46      
                    1647   ; unsigned char *RamPtr,c ; // pointer to memory
                    1648   ; int Data ;
                    1649   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1650          pea       @m68kde~1_23.L
000011E6  66AC      
000011E8  4E92      1651          jsr       (A2)
000011EA  584F      1652          addq.w    #4,A7
                    1653   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1654          pea       @m68kde~1_24.L
000011F0  66C8      
000011F2  4E92      1655          jsr       (A2)
000011F4  584F      1656          addq.w    #4,A7
                    1657   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1658          pea       @m68kde~1_25.L
000011FA  670E      
000011FC  4E92      1659          jsr       (A2)
000011FE  584F      1660          addq.w    #4,A7
                    1661   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1662          clr.l     -(A7)
00001202  4EB8 0CA4 1663          jsr       _Get8HexDigits
00001206  584F      1664          addq.w    #4,A7
00001208  2600      1665          move.l    D0,D3
                    1666   ; while(1)    {
                    1667   MemoryChange_1:
                    1668   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1669          move.l    D3,A0
0000120C  1210      1670          move.b    (A0),D1
0000120E  C2BC 0000 1671          and.l     #255,D1
00001212  00FF      
00001214  2F01      1672          move.l    D1,-(A7)
00001216  2F03      1673          move.l    D3,-(A7)
00001218  4879 0000 1674          pea       @m68kde~1_26.L
0000121C  6720      
0000121E  4E92      1675          jsr       (A2)
00001220  DEFC 000C 1676          add.w     #12,A7
                    1677   ; c = tolower(_getch()) ;
00001224  2F00      1678          move.l    D0,-(A7)
00001226  4EB8 0B68 1679          jsr       __getch
0000122A  2200      1680          move.l    D0,D1
0000122C  201F      1681          move.l    (A7)+,D0
0000122E  2F01      1682          move.l    D1,-(A7)
00001230  4EB9 0000 1683          jsr       _tolower
00001234  5AC6      
00001236  584F      1684          addq.w    #4,A7
00001238  1400      1685          move.b    D0,D2
                    1686   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1687          cmp.b     #27,D2
0000123E  6604      1688          bne.s     MemoryChange_4
                    1689   ; return ;                                // abort on escape
00001240  6000 0090 1690          bra       MemoryChange_6
                    1691   MemoryChange_4:
                    1692   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1693          cmp.b     #48,D2
00001248  6506      1694          blo.s     MemoryChange_10
0000124A  0C02 0039 1695          cmp.b     #57,D2
0000124E  6310      1696          bls.s     MemoryChange_9
                    1697   MemoryChange_10:
00001250  0C02 0061 1698          cmp.b     #97,D2
00001254  6500 006E 1699          blo       MemoryChange_7
00001258  0C02 0066 1700          cmp.b     #102,D2
0000125C  6200 0066 1701          bhi       MemoryChange_7
                    1702   MemoryChange_9:
                    1703   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1704          and.l     #255,D2
00001264  00FF      
00001266  2F02      1705          move.l    D2,-(A7)
00001268  4EB8 0BD2 1706          jsr       _xtod
0000126C  584F      1707          addq.w    #4,A7
0000126E  C0BC 0000 1708          and.l     #255,D0
00001272  00FF      
00001274  E980      1709          asl.l     #4,D0
00001276  2F00      1710          move.l    D0,-(A7)
00001278  2F01      1711          move.l    D1,-(A7)
0000127A  4EB8 0B68 1712          jsr       __getch
0000127E  221F      1713          move.l    (A7)+,D1
00001280  2F00      1714          move.l    D0,-(A7)
00001282  4EB8 0BD2 1715          jsr       _xtod
00001286  584F      1716          addq.w    #4,A7
00001288  2200      1717          move.l    D0,D1
0000128A  201F      1718          move.l    (A7)+,D0
0000128C  C2BC 0000 1719          and.l     #255,D1
00001290  00FF      
00001292  8081      1720          or.l      D1,D0
00001294  2800      1721          move.l    D0,D4
                    1722   ; *RamPtr = (char)(Data) ;
00001296  2043      1723          move.l    D3,A0
00001298  1084      1724          move.b    D4,(A0)
                    1725   ; if(*RamPtr != Data) {
0000129A  2043      1726          move.l    D3,A0
0000129C  1010      1727          move.b    (A0),D0
0000129E  C0BC 0000 1728          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1729          cmp.l     D4,D0
000012A6  671A      1730          beq.s     MemoryChange_11
                    1731   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1732          move.l    D3,A0
000012AA  1210      1733          move.b    (A0),D1
000012AC  C2BC 0000 1734          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1735          move.l    D1,-(A7)
000012B4  2F04      1736          move.l    D4,-(A7)
000012B6  4879 0000 1737          pea       @m68kde~1_27.L
000012BA  6732      
000012BC  4E92      1738          jsr       (A2)
000012BE  DEFC 000C 1739          add.w     #12,A7
                    1740   MemoryChange_11:
000012C2  6008      1741          bra.s     MemoryChange_13
                    1742   MemoryChange_7:
                    1743   ; }
                    1744   ; }
                    1745   ; else if(c == (char)('-'))
000012C4  0C02 002D 1746          cmp.b     #45,D2
000012C8  6602      1747          bne.s     MemoryChange_13
                    1748   ; RamPtr -= 2 ; ;
000012CA  5583      1749          subq.l    #2,D3
                    1750   MemoryChange_13:
                    1751   ; RamPtr ++ ;
000012CC  5283      1752          addq.l    #1,D3
000012CE  6000 FF3A 1753          bra       MemoryChange_1
                    1754   MemoryChange_6:
000012D2  4CDF 041C 1755          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1756          rts
                    1757   ; }
                    1758   ; }
                    1759   ; /*******************************************************************
                    1760   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1761   ; ********************************************************************/
                    1762   ; void ProgramFlashChip(void)
                    1763   ; {
                    1764   _ProgramFlashChip:
000012D8  4E56 FFFC 1765          link      A6,#-4
000012DC  48E7 3C20 1766          movem.l   D2/D3/D4/D5/A2,-(A7)
000012E0  45F9 0000 1767          lea       _WaitForSPITransmitComplete.L,A2
000012E4  2C7C      
                    1768   ; //
                    1769   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1770   ; unsigned char *RamPtr;
                    1771   ; unsigned char DataByte, x;
                    1772   ; unsigned char FlashAddressByte1, FlashAddressByte2, FlashAddressByte3;
                    1773   ; int FlashAddress = 0;
000012E6  4285      1774          clr.l     D5
                    1775   ; int count = 0;
000012E8  4284      1776          clr.l     D4
                    1777   ; printf("\r\nRunning ProgramFlashChip....");
000012EA  4879 0000 1778          pea       @m68kde~1_28.L
000012EE  6766      
000012F0  4EB9 0000 1779          jsr       _printf
000012F4  5B46      
000012F6  584F      1780          addq.w    #4,A7
                    1781   ; SPI_Init();
000012F8  4EB9 0000 1782          jsr       _SPI_Init
000012FC  2C54      
                    1783   ; ChipErase();
000012FE  4EB9 0000 1784          jsr       _ChipErase
00001302  2E8A      
                    1785   ; for(RamPtr=0x08000000;RamPtr<=0x08040000;RamPtr++){
00001304  263C 0800 1786          move.l    #134217728,D3
00001308  0000      
                    1787   ProgramFlashChip_1:
0000130A  0C83 0804 1788          cmp.l     #134479872,D3
0000130E  0000      
00001310  6200 00D0 1789          bhi       ProgramFlashChip_3
                    1790   ; if(count == 0){
00001314  4A84      1791          tst.l     D4
00001316  6600 0082 1792          bne       ProgramFlashChip_4
                    1793   ; FlashAddressByte1= (FlashAddress >> 16) & 0xFF;
0000131A  2005      1794          move.l    D5,D0
0000131C  E080      1795          asr.l     #8,D0
0000131E  E080      1796          asr.l     #8,D0
00001320  C0BC 0000 1797          and.l     #255,D0
00001324  00FF      
00001326  1D40 FFFD 1798          move.b    D0,-3(A6)
                    1799   ; FlashAddressByte2 = (FlashAddress >> 8) & 0xFF;
0000132A  2005      1800          move.l    D5,D0
0000132C  E080      1801          asr.l     #8,D0
0000132E  C0BC 0000 1802          and.l     #255,D0
00001332  00FF      
00001334  1D40 FFFE 1803          move.b    D0,-2(A6)
                    1804   ; FlashAddressByte3 = FlashAddress & 0xFF;
00001338  2005      1805          move.l    D5,D0
0000133A  C0BC 0000 1806          and.l     #255,D0
0000133E  00FF      
00001340  1D40 FFFF 1807          move.b    D0,-1(A6)
                    1808   ; DisableBlockProtect();
00001344  4EB9 0000 1809          jsr       _DisableBlockProtect
00001348  2CB6      
                    1810   ; WriteEnable();
0000134A  4EB9 0000 1811          jsr       _WriteEnable
0000134E  2C8A      
                    1812   ; // Enable SPI Chip Select
                    1813   ; Enable_SPI_CS();
00001350  13FC 00FE 1814          move.b    #254,4227112
00001354  0040 8028 
                    1815   ; // Send Write Command to Chip
                    1816   ; SPI_Data = 2;
00001358  13FC 0002 1817          move.b    #2,4227108
0000135C  0040 8024 
                    1818   ; WaitForSPITransmitComplete();
00001360  4E92      1819          jsr       (A2)
                    1820   ; x = SPI_Data;
00001362  1439 0040 1821          move.b    4227108,D2
00001366  8024      
                    1822   ; // Send 24-bit Address that we stored c in
                    1823   ; SPI_Data = FlashAddressByte1; // 24-bit address - 1st Byte
00001368  13EE FFFD 1824          move.b    -3(A6),4227108
0000136C  0040 8024 
                    1825   ; WaitForSPITransmitComplete();
00001370  4E92      1826          jsr       (A2)
                    1827   ; x = SPI_Data;
00001372  1439 0040 1828          move.b    4227108,D2
00001376  8024      
                    1829   ; SPI_Data = FlashAddressByte2; // 24-bit address - 2nd Byte
00001378  13EE FFFE 1830          move.b    -2(A6),4227108
0000137C  0040 8024 
                    1831   ; WaitForSPITransmitComplete();
00001380  4E92      1832          jsr       (A2)
                    1833   ; x = SPI_Data;
00001382  1439 0040 1834          move.b    4227108,D2
00001386  8024      
                    1835   ; SPI_Data = FlashAddressByte3; // 24-bit address - 3rd Byte
00001388  13EE FFFF 1836          move.b    -1(A6),4227108
0000138C  0040 8024 
                    1837   ; WaitForSPITransmitComplete();
00001390  4E92      1838          jsr       (A2)
                    1839   ; x = SPI_Data;
00001392  1439 0040 1840          move.b    4227108,D2
00001396  8024      
00001398  6030      1841          bra.s     ProgramFlashChip_6
                    1842   ProgramFlashChip_4:
                    1843   ; } else if(count == 255){
0000139A  0C84 0000 1844          cmp.l     #255,D4
0000139E  00FF      
000013A0  6628      1845          bne.s     ProgramFlashChip_6
                    1846   ; SPI_Data = *RamPtr;
000013A2  2043      1847          move.l    D3,A0
000013A4  13D0 0040 1848          move.b    (A0),4227108
000013A8  8024      
                    1849   ; WaitForSPITransmitComplete();
000013AA  4E92      1850          jsr       (A2)
                    1851   ; x=SPI_Data;
000013AC  1439 0040 1852          move.b    4227108,D2
000013B0  8024      
                    1853   ; //  Disable Chip Select
                    1854   ; Disable_SPI_CS();
000013B2  13FC 00FF 1855          move.b    #255,4227112
000013B6  0040 8028 
                    1856   ; // Poll Chip Status register for write completion
                    1857   ; WaitWriteCommandCompletion();
000013BA  4EB9 0000 1858          jsr       _WaitWriteCommandCompletion
000013BE  2CF6      
                    1859   ; FlashAddress += 256;
000013C0  0685 0000 1860          add.l     #256,D5
000013C4  0100      
                    1861   ; count = 0;
000013C6  4284      1862          clr.l     D4
                    1863   ; continue;
000013C8  6012      1864          bra.s     ProgramFlashChip_2
                    1865   ProgramFlashChip_6:
                    1866   ; }
                    1867   ; SPI_Data = *RamPtr;
000013CA  2043      1868          move.l    D3,A0
000013CC  13D0 0040 1869          move.b    (A0),4227108
000013D0  8024      
                    1870   ; WaitForSPITransmitComplete();
000013D2  4E92      1871          jsr       (A2)
                    1872   ; x=SPI_Data;
000013D4  1439 0040 1873          move.b    4227108,D2
000013D8  8024      
                    1874   ; count ++;
000013DA  5284      1875          addq.l    #1,D4
                    1876   ProgramFlashChip_2:
000013DC  5283      1877          addq.l    #1,D3
000013DE  6000 FF2A 1878          bra       ProgramFlashChip_1
                    1879   ProgramFlashChip_3:
                    1880   ; }
                    1881   ; //  Disable Chip Select
                    1882   ; Disable_SPI_CS();
000013E2  13FC 00FF 1883          move.b    #255,4227112
000013E6  0040 8028 
                    1884   ; // Poll Chip Status register for write completion
                    1885   ; WaitWriteCommandCompletion();
000013EA  4EB9 0000 1886          jsr       _WaitWriteCommandCompletion
000013EE  2CF6      
                    1887   ; printf("\r\nProgramFlashChip() Completed!");
000013F0  4879 0000 1888          pea       @m68kde~1_29.L
000013F4  6786      
000013F6  4EB9 0000 1889          jsr       _printf
000013FA  5B46      
000013FC  584F      1890          addq.w    #4,A7
                    1891   ; FlashChipMemoryTest();
000013FE  4EB9 0000 1892          jsr       _FlashChipMemoryTest
00001402  140C      
00001404  4CDF 043C 1893          movem.l   (A7)+,D2/D3/D4/D5/A2
00001408  4E5E      1894          unlk      A6
0000140A  4E75      1895          rts
                    1896   ; }
                    1897   ; void FlashChipMemoryTest(void){
                    1898   _FlashChipMemoryTest:
0000140C  4E56 FFFC 1899          link      A6,#-4
00001410  48E7 3030 1900          movem.l   D2/D3/A2/A3,-(A7)
00001414  45F9 0000 1901          lea       _WaitForSPITransmitComplete.L,A2
00001418  2C7C      
0000141A  47F9 0000 1902          lea       _printf.L,A3
0000141E  5B46      
                    1903   ; unsigned char *RamPtr;
                    1904   ; unsigned char x, ReadByte;
                    1905   ; unsigned char FlashAddressByte1, FlashAddressByte2, FlashAddressByte3;
                    1906   ; FlashAddressByte1 = FlashAddressByte2 = FlashAddressByte3 = 0;
00001420  422E FFFF 1907          clr.b     -1(A6)
00001424  422E FFFE 1908          clr.b     -2(A6)
00001428  422E FFFD 1909          clr.b     -3(A6)
                    1910   ; printf("\r\nRunning FlashChipMemoryTest....");
0000142C  4879 0000 1911          pea       @m68kde~1_30.L
00001430  67A6      
00001432  4E93      1912          jsr       (A3)
00001434  584F      1913          addq.w    #4,A7
                    1914   ; // Enable SPI Chip Select
                    1915   ; Enable_SPI_CS();
00001436  13FC 00FE 1916          move.b    #254,4227112
0000143A  0040 8028 
                    1917   ; // Send Read Command to Chip
                    1918   ; SPI_Data = 3;
0000143E  13FC 0003 1919          move.b    #3,4227108
00001442  0040 8024 
                    1920   ; WaitForSPITransmitComplete();
00001446  4E92      1921          jsr       (A2)
                    1922   ; x = SPI_Data;
00001448  1639 0040 1923          move.b    4227108,D3
0000144C  8024      
                    1924   ; // Send 24-bit Address that we stored c in
                    1925   ; SPI_Data = FlashAddressByte1; // 24-bit address - 1st Byte
0000144E  13EE FFFD 1926          move.b    -3(A6),4227108
00001452  0040 8024 
                    1927   ; WaitForSPITransmitComplete();
00001456  4E92      1928          jsr       (A2)
                    1929   ; x = SPI_Data;
00001458  1639 0040 1930          move.b    4227108,D3
0000145C  8024      
                    1931   ; SPI_Data = FlashAddressByte2; // 24-bit address - 2nd Byte
0000145E  13EE FFFE 1932          move.b    -2(A6),4227108
00001462  0040 8024 
                    1933   ; WaitForSPITransmitComplete();
00001466  4E92      1934          jsr       (A2)
                    1935   ; x = SPI_Data;
00001468  1639 0040 1936          move.b    4227108,D3
0000146C  8024      
                    1937   ; SPI_Data = FlashAddressByte3; // 24-bit address - 3rd Byte
0000146E  13EE FFFF 1938          move.b    -1(A6),4227108
00001472  0040 8024 
                    1939   ; WaitForSPITransmitComplete();
00001476  4E92      1940          jsr       (A2)
                    1941   ; x = SPI_Data;
00001478  1639 0040 1942          move.b    4227108,D3
0000147C  8024      
                    1943   ; for(RamPtr=0x08000000;RamPtr<=0x08040000;RamPtr++){
0000147E  243C 0800 1944          move.l    #134217728,D2
00001482  0000      
                    1945   FlashChipMemoryTest_1:
00001484  0C82 0804 1946          cmp.l     #134479872,D2
00001488  0000      
0000148A  6200 004A 1947          bhi       FlashChipMemoryTest_3
                    1948   ; SPI_Data = 0xFF;          // Send Dummy byte
0000148E  13FC 00FF 1949          move.b    #255,4227108
00001492  0040 8024 
                    1950   ; WaitForSPITransmitComplete();
00001496  4E92      1951          jsr       (A2)
                    1952   ; ReadByte = SPI_Data;
00001498  1D79 0040 1953          move.b    4227108,-4(A6)
0000149C  8024 FFFC 
                    1954   ; if(ReadByte != *RamPtr){
000014A0  2042      1955          move.l    D2,A0
000014A2  102E FFFC 1956          move.b    -4(A6),D0
000014A6  B010      1957          cmp.b     (A0),D0
000014A8  6728      1958          beq.s     FlashChipMemoryTest_4
                    1959   ; printf("\r\n Flash Chip Memory Test Failed!");
000014AA  4879 0000 1960          pea       @m68kde~1_31.L
000014AE  67C8      
000014B0  4E93      1961          jsr       (A3)
000014B2  584F      1962          addq.w    #4,A7
                    1963   ; printf("\r\n Failed at %dth Byte!", RamPtr - 0x08000000);
000014B4  2202      1964          move.l    D2,D1
000014B6  0481 0800 1965          sub.l     #134217728,D1
000014BA  0000      
000014BC  2F01      1966          move.l    D1,-(A7)
000014BE  4879 0000 1967          pea       @m68kde~1_32.L
000014C2  67EA      
000014C4  4E93      1968          jsr       (A3)
000014C6  504F      1969          addq.w    #8,A7
                    1970   ; Disable_SPI_CS();
000014C8  13FC 00FF 1971          move.b    #255,4227112
000014CC  0040 8028 
                    1972   ; return;
000014D0  6016      1973          bra.s     FlashChipMemoryTest_6
                    1974   FlashChipMemoryTest_4:
000014D2  5282      1975          addq.l    #1,D2
000014D4  60AE      1976          bra       FlashChipMemoryTest_1
                    1977   FlashChipMemoryTest_3:
                    1978   ; }
                    1979   ; }
                    1980   ; // Disable SPI Chip Select
                    1981   ; Disable_SPI_CS();
000014D6  13FC 00FF 1982          move.b    #255,4227112
000014DA  0040 8028 
                    1983   ; printf("\r\nFlash Chip Memory Test Successful!");
000014DE  4879 0000 1984          pea       @m68kde~1_33.L
000014E2  6802      
000014E4  4E93      1985          jsr       (A3)
000014E6  584F      1986          addq.w    #4,A7
                    1987   FlashChipMemoryTest_6:
000014E8  4CDF 0C0C 1988          movem.l   (A7)+,D2/D3/A2/A3
000014EC  4E5E      1989          unlk      A6
000014EE  4E75      1990          rts
                    1991   ; }
                    1992   ; /*************************************************************************
                    1993   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1994   ; **************************************************************************/
                    1995   ; void LoadFromFlashChip(void)
                    1996   ; {
                    1997   _LoadFromFlashChip:
000014F0  4E56 FFFC 1998          link      A6,#-4
000014F4  48E7 3020 1999          movem.l   D2/D3/A2,-(A7)
000014F8  45F9 0000 2000          lea       _WaitForSPITransmitComplete.L,A2
000014FC  2C7C      
                    2001   ; //  read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    2002   ; unsigned char *RamPtr;
                    2003   ; unsigned char x, ReadByte;
                    2004   ; unsigned char FlashAddressByte1, FlashAddressByte2, FlashAddressByte3;
                    2005   ; FlashAddressByte1 = FlashAddressByte2 = FlashAddressByte3 = 0;
000014FE  422E FFFF 2006          clr.b     -1(A6)
00001502  422E FFFE 2007          clr.b     -2(A6)
00001506  422E FFFD 2008          clr.b     -3(A6)
                    2009   ; printf("\r\nLoading Program From SPI Flash....") ;
0000150A  4879 0000 2010          pea       @m68kde~1_34.L
0000150E  6828      
00001510  4EB9 0000 2011          jsr       _printf
00001514  5B46      
00001516  584F      2012          addq.w    #4,A7
                    2013   ; SPI_Init();
00001518  4EB9 0000 2014          jsr       _SPI_Init
0000151C  2C54      
                    2015   ; // Enable SPI Chip Select
                    2016   ; Enable_SPI_CS();
0000151E  13FC 00FE 2017          move.b    #254,4227112
00001522  0040 8028 
                    2018   ; // Send Read Command to Chip
                    2019   ; SPI_Data = 3;
00001526  13FC 0003 2020          move.b    #3,4227108
0000152A  0040 8024 
                    2021   ; WaitForSPITransmitComplete();
0000152E  4E92      2022          jsr       (A2)
                    2023   ; x = SPI_Data;
00001530  1639 0040 2024          move.b    4227108,D3
00001534  8024      
                    2025   ; // Send 24-bit Address that we stored c in
                    2026   ; SPI_Data = FlashAddressByte1; // 24-bit address - 1st Byte
00001536  13EE FFFD 2027          move.b    -3(A6),4227108
0000153A  0040 8024 
                    2028   ; WaitForSPITransmitComplete();
0000153E  4E92      2029          jsr       (A2)
                    2030   ; x = SPI_Data;
00001540  1639 0040 2031          move.b    4227108,D3
00001544  8024      
                    2032   ; SPI_Data = FlashAddressByte2; // 24-bit address - 2nd Byte
00001546  13EE FFFE 2033          move.b    -2(A6),4227108
0000154A  0040 8024 
                    2034   ; WaitForSPITransmitComplete();
0000154E  4E92      2035          jsr       (A2)
                    2036   ; x = SPI_Data;
00001550  1639 0040 2037          move.b    4227108,D3
00001554  8024      
                    2038   ; SPI_Data = FlashAddressByte3; // 24-bit address - 3rd Byte
00001556  13EE FFFF 2039          move.b    -1(A6),4227108
0000155A  0040 8024 
                    2040   ; WaitForSPITransmitComplete();
0000155E  4E92      2041          jsr       (A2)
                    2042   ; x = SPI_Data;
00001560  1639 0040 2043          move.b    4227108,D3
00001564  8024      
                    2044   ; for(RamPtr=0x08000000;RamPtr<=0x08040000;RamPtr++){
00001566  243C 0800 2045          move.l    #134217728,D2
0000156A  0000      
                    2046   LoadFromFlashChip_1:
0000156C  0C82 0804 2047          cmp.l     #134479872,D2
00001570  0000      
00001572  621C      2048          bhi.s     LoadFromFlashChip_3
                    2049   ; SPI_Data = 0xFF;          // Send Dummy byte
00001574  13FC 00FF 2050          move.b    #255,4227108
00001578  0040 8024 
                    2051   ; WaitForSPITransmitComplete();
0000157C  4E92      2052          jsr       (A2)
                    2053   ; ReadByte = SPI_Data;
0000157E  1D79 0040 2054          move.b    4227108,-4(A6)
00001582  8024 FFFC 
                    2055   ; // Copy SPI Data into DRAM
                    2056   ; *RamPtr = ReadByte;
00001586  2042      2057          move.l    D2,A0
00001588  10AE FFFC 2058          move.b    -4(A6),(A0)
0000158C  5282      2059          addq.l    #1,D2
0000158E  60DC      2060          bra       LoadFromFlashChip_1
                    2061   LoadFromFlashChip_3:
                    2062   ; }
                    2063   ; // Disable SPI Chip Select
                    2064   ; Disable_SPI_CS();
00001590  13FC 00FF 2065          move.b    #255,4227112
00001594  0040 8028 
                    2066   ; printf("\r\nLoading Program From SPI Flash Successful!");
00001598  4879 0000 2067          pea       @m68kde~1_35.L
0000159C  684E      
0000159E  4EB9 0000 2068          jsr       _printf
000015A2  5B46      
000015A4  584F      2069          addq.w    #4,A7
000015A6  4CDF 040C 2070          movem.l   (A7)+,D2/D3/A2
000015AA  4E5E      2071          unlk      A6
000015AC  4E75      2072          rts
                    2073   ; }
                    2074   ; // get rid of excess spaces
                    2075   ; void FormatInstructionForTrace(void)
                    2076   ; {
                    2077   _FormatInstructionForTrace:
000015AE  4E56 FF9C 2078          link      A6,#-100
000015B2  48E7 3C20 2079          movem.l   D2/D3/D4/D5/A2,-(A7)
000015B6  45EE FF9C 2080          lea       -100(A6),A2
                    2081   ; unsigned short int i ;
                    2082   ; char c, temp[100], *iptr, *tempptr ;
                    2083   ; for(i=0; i < 100; i++)
000015BA  4244      2084          clr.w     D4
                    2085   FormatInstructionForTrace_1:
000015BC  0C44 0064 2086          cmp.w     #100,D4
000015C0  640E      2087          bhs.s     FormatInstructionForTrace_3
                    2088   ; temp[i] = 0 ;
000015C2  C8BC 0000 2089          and.l     #65535,D4
000015C6  FFFF      
000015C8  4232 4800 2090          clr.b     0(A2,D4.L)
000015CC  5244      2091          addq.w    #1,D4
000015CE  60EC      2092          bra       FormatInstructionForTrace_1
                    2093   FormatInstructionForTrace_3:
                    2094   ; iptr = Instruction ;
000015D0  41F9 0B00 2095          lea       _Instruction.L,A0
000015D4  04E2      
000015D6  2408      2096          move.l    A0,D2
                    2097   ; tempptr = temp ;
000015D8  2A0A      2098          move.l    A2,D5
                    2099   ; do{
                    2100   FormatInstructionForTrace_4:
                    2101   ; c = *iptr++ ;
000015DA  2042      2102          move.l    D2,A0
000015DC  5282      2103          addq.l    #1,D2
000015DE  1610      2104          move.b    (A0),D3
                    2105   ; *tempptr++ = c ;  // copy chars over
000015E0  2045      2106          move.l    D5,A0
000015E2  5285      2107          addq.l    #1,D5
000015E4  1083      2108          move.b    D3,(A0)
                    2109   ; if(c == ' ')  {   // if copied space
000015E6  0C03 0020 2110          cmp.b     #32,D3
000015EA  6622      2111          bne.s     FormatInstructionForTrace_6
                    2112   ; while(*iptr == ' ') {
                    2113   FormatInstructionForTrace_8:
000015EC  2042      2114          move.l    D2,A0
000015EE  1010      2115          move.b    (A0),D0
000015F0  0C00 0020 2116          cmp.b     #32,D0
000015F4  660C      2117          bne.s     FormatInstructionForTrace_10
                    2118   ; if(*iptr == 0)  // if end of string then done
000015F6  2042      2119          move.l    D2,A0
000015F8  1010      2120          move.b    (A0),D0
000015FA  6602      2121          bne.s     FormatInstructionForTrace_11
                    2122   ; break ;
000015FC  6004      2123          bra.s     FormatInstructionForTrace_10
                    2124   FormatInstructionForTrace_11:
                    2125   ; iptr++ ; // skip over remaining spaces
000015FE  5282      2126          addq.l    #1,D2
00001600  60EA      2127          bra       FormatInstructionForTrace_8
                    2128   FormatInstructionForTrace_10:
                    2129   ; }
                    2130   ; strcat(tempptr,iptr) ;
00001602  2F02      2131          move.l    D2,-(A7)
00001604  2F05      2132          move.l    D5,-(A7)
00001606  4EB9 0000 2133          jsr       _strcat
0000160A  5B14      
0000160C  504F      2134          addq.w    #8,A7
                    2135   FormatInstructionForTrace_6:
0000160E  4A03      2136          tst.b     D3
00001610  66C8      2137          bne       FormatInstructionForTrace_4
                    2138   ; }
                    2139   ; }while(c != 0) ;
                    2140   ; strcpyInstruction(temp) ;
00001612  2F0A      2141          move.l    A2,-(A7)
00001614  4EB8 0CE6 2142          jsr       _strcpyInstruction
00001618  584F      2143          addq.w    #4,A7
0000161A  4CDF 043C 2144          movem.l   (A7)+,D2/D3/D4/D5/A2
0000161E  4E5E      2145          unlk      A6
00001620  4E75      2146          rts
                    2147   ; }
                    2148   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2149   ; // IMPORTANT
                    2150   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2151   ; // has to be done with an interrupt (IRQ Level 6)
                    2152   ; //
                    2153   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2154   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2155   ; //
                    2156   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2157   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2158   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2159   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2160   ; // program area
                    2161   ; //
                    2162   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2163   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2164   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2165   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2166   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2167   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2168   ; void DumpRegisters()
                    2169   ; {
                    2170   _DumpRegisters:
00001622  48E7 3F3C 2171          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001626  45F9 0000 2172          lea       _putch.L,A2
0000162A  5A62      
0000162C  47F9 0000 2173          lea       _printf.L,A3
00001630  5B46      
00001632  49F9 0B00 2174          lea       _SR.L,A4
00001636  012C      
00001638  4BF9 0B00 2175          lea       _WatchPointString.L,A5
0000163C  01C2      
                    2176   ; short i, x, j, k ;
                    2177   ; unsigned char c, *BytePointer;
                    2178   ; // buld up strings for displaying watchpoints
                    2179   ; for(x = 0; x < (short)(8); x++)
0000163E  4242      2180          clr.w     D2
                    2181   DumpRegisters_1:
00001640  0C42 0008 2182          cmp.w     #8,D2
00001644  6C00 01C6 2183          bge       DumpRegisters_3
                    2184   ; {
                    2185   ; if(WatchPointSetOrCleared[x] == 1)
00001648  48C2      2186          ext.l     D2
0000164A  2002      2187          move.l    D2,D0
0000164C  E588      2188          lsl.l     #2,D0
0000164E  41F9 0B00 2189          lea       _WatchPointSetOrCleared.L,A0
00001652  01A2      
00001654  2030 0800 2190          move.l    0(A0,D0.L),D0
00001658  0C80 0000 2191          cmp.l     #1,D0
0000165C  0001      
0000165E  6600 0186 2192          bne       DumpRegisters_4
                    2193   ; {
                    2194   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001662  48C2      2195          ext.l     D2
00001664  2202      2196          move.l    D2,D1
00001666  E589      2197          lsl.l     #2,D1
00001668  41F9 0B00 2198          lea       _WatchPointAddress.L,A0
0000166C  0182      
0000166E  2F30 1800 2199          move.l    0(A0,D1.L),-(A7)
00001672  4879 0000 2200          pea       @m68kde~1_36.L
00001676  687C      
00001678  220D      2201          move.l    A5,D1
0000167A  48C2      2202          ext.l     D2
0000167C  2F00      2203          move.l    D0,-(A7)
0000167E  2002      2204          move.l    D2,D0
00001680  C1FC 0064 2205          muls      #100,D0
00001684  D280      2206          add.l     D0,D1
00001686  201F      2207          move.l    (A7)+,D0
00001688  2F01      2208          move.l    D1,-(A7)
0000168A  4EB9 0000 2209          jsr       _sprintf
0000168E  5AE2      
00001690  DEFC 000C 2210          add.w     #12,A7
                    2211   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001694  48C2      2212          ext.l     D2
00001696  2002      2213          move.l    D2,D0
00001698  E588      2214          lsl.l     #2,D0
0000169A  41F9 0B00 2215          lea       _WatchPointAddress.L,A0
0000169E  0182      
000016A0  2A30 0800 2216          move.l    0(A0,D0.L),D5
                    2217   ; for(j = 0; j < (short)(16); j+=2)
000016A4  4243      2218          clr.w     D3
                    2219   DumpRegisters_6:
000016A6  0C43 0010 2220          cmp.w     #16,D3
000016AA  6C00 0082 2221          bge       DumpRegisters_8
                    2222   ; {
                    2223   ; for(k = 0; k < (short)(2); k++)
000016AE  4246      2224          clr.w     D6
                    2225   DumpRegisters_9:
000016B0  0C46 0002 2226          cmp.w     #2,D6
000016B4  6C00 0052 2227          bge       DumpRegisters_11
                    2228   ; {
                    2229   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000016B8  2045      2230          move.l    D5,A0
000016BA  48C3      2231          ext.l     D3
000016BC  2203      2232          move.l    D3,D1
000016BE  48C6      2233          ext.l     D6
000016C0  D286      2234          add.l     D6,D1
000016C2  1230 1800 2235          move.b    0(A0,D1.L),D1
000016C6  C2BC 0000 2236          and.l     #255,D1
000016CA  00FF      
000016CC  2F01      2237          move.l    D1,-(A7)
000016CE  4879 0000 2238          pea       @m68kde~1_14.L
000016D2  65BC      
000016D4  4879 0B00 2239          pea       _TempString.L
000016D8  0546      
000016DA  4EB9 0000 2240          jsr       _sprintf
000016DE  5AE2      
000016E0  DEFC 000C 2241          add.w     #12,A7
                    2242   ; strcat(WatchPointString[x], TempString) ;
000016E4  4879 0B00 2243          pea       _TempString.L
000016E8  0546      
000016EA  220D      2244          move.l    A5,D1
000016EC  48C2      2245          ext.l     D2
000016EE  2F00      2246          move.l    D0,-(A7)
000016F0  2002      2247          move.l    D2,D0
000016F2  C1FC 0064 2248          muls      #100,D0
000016F6  D280      2249          add.l     D0,D1
000016F8  201F      2250          move.l    (A7)+,D0
000016FA  2F01      2251          move.l    D1,-(A7)
000016FC  4EB9 0000 2252          jsr       _strcat
00001700  5B14      
00001702  504F      2253          addq.w    #8,A7
00001704  5246      2254          addq.w    #1,D6
00001706  60A8      2255          bra       DumpRegisters_9
                    2256   DumpRegisters_11:
                    2257   ; }
                    2258   ; strcat(WatchPointString[x]," ") ;
00001708  4879 0000 2259          pea       @m68kde~1_37.L
0000170C  6884      
0000170E  220D      2260          move.l    A5,D1
00001710  48C2      2261          ext.l     D2
00001712  2F00      2262          move.l    D0,-(A7)
00001714  2002      2263          move.l    D2,D0
00001716  C1FC 0064 2264          muls      #100,D0
0000171A  D280      2265          add.l     D0,D1
0000171C  201F      2266          move.l    (A7)+,D0
0000171E  2F01      2267          move.l    D1,-(A7)
00001720  4EB9 0000 2268          jsr       _strcat
00001724  5B14      
00001726  504F      2269          addq.w    #8,A7
00001728  5443      2270          addq.w    #2,D3
0000172A  6000 FF7A 2271          bra       DumpRegisters_6
                    2272   DumpRegisters_8:
                    2273   ; }
                    2274   ; strcat(WatchPointString[x], "  ") ;
0000172E  4879 0000 2275          pea       @m68kde~1_15.L
00001732  65C2      
00001734  220D      2276          move.l    A5,D1
00001736  48C2      2277          ext.l     D2
00001738  2F00      2278          move.l    D0,-(A7)
0000173A  2002      2279          move.l    D2,D0
0000173C  C1FC 0064 2280          muls      #100,D0
00001740  D280      2281          add.l     D0,D1
00001742  201F      2282          move.l    (A7)+,D0
00001744  2F01      2283          move.l    D1,-(A7)
00001746  4EB9 0000 2284          jsr       _strcat
0000174A  5B14      
0000174C  504F      2285          addq.w    #8,A7
                    2286   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000174E  48C2      2287          ext.l     D2
00001750  2002      2288          move.l    D2,D0
00001752  E588      2289          lsl.l     #2,D0
00001754  41F9 0B00 2290          lea       _WatchPointAddress.L,A0
00001758  0182      
0000175A  2A30 0800 2291          move.l    0(A0,D0.L),D5
                    2292   ; for(j = 0; j < (short)(16); j++)
0000175E  4243      2293          clr.w     D3
                    2294   DumpRegisters_12:
00001760  0C43 0010 2295          cmp.w     #16,D3
00001764  6C00 007E 2296          bge       DumpRegisters_14
                    2297   ; {
                    2298   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001768  2045      2299          move.l    D5,A0
0000176A  48C3      2300          ext.l     D3
0000176C  1030 3800 2301          move.b    0(A0,D3.L),D0
00001770  C03C 007F 2302          and.b     #127,D0
00001774  1E00      2303          move.b    D0,D7
                    2304   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001776  0C07 007F 2305          cmp.b     #127,D7
0000177A  6206      2306          bhi.s     DumpRegisters_17
0000177C  0C07 0020 2307          cmp.b     #32,D7
00001780  6416      2308          bhs.s     DumpRegisters_15
                    2309   DumpRegisters_17:
                    2310   ; sprintf(TempString, ".") ;
00001782  4879 0000 2311          pea       @m68kde~1_38.L
00001786  6886      
00001788  4879 0B00 2312          pea       _TempString.L
0000178C  0546      
0000178E  4EB9 0000 2313          jsr       _sprintf
00001792  5AE2      
00001794  504F      2314          addq.w    #8,A7
00001796  6026      2315          bra.s     DumpRegisters_16
                    2316   DumpRegisters_15:
                    2317   ; else
                    2318   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001798  2045      2319          move.l    D5,A0
0000179A  48C3      2320          ext.l     D3
0000179C  1230 3800 2321          move.b    0(A0,D3.L),D1
000017A0  C2BC 0000 2322          and.l     #255,D1
000017A4  00FF      
000017A6  2F01      2323          move.l    D1,-(A7)
000017A8  4879 0000 2324          pea       @m68kde~1_39.L
000017AC  6888      
000017AE  4879 0B00 2325          pea       _TempString.L
000017B2  0546      
000017B4  4EB9 0000 2326          jsr       _sprintf
000017B8  5AE2      
000017BA  DEFC 000C 2327          add.w     #12,A7
                    2328   DumpRegisters_16:
                    2329   ; strcat(WatchPointString[x], TempString) ;
000017BE  4879 0B00 2330          pea       _TempString.L
000017C2  0546      
000017C4  220D      2331          move.l    A5,D1
000017C6  48C2      2332          ext.l     D2
000017C8  2F00      2333          move.l    D0,-(A7)
000017CA  2002      2334          move.l    D2,D0
000017CC  C1FC 0064 2335          muls      #100,D0
000017D0  D280      2336          add.l     D0,D1
000017D2  201F      2337          move.l    (A7)+,D0
000017D4  2F01      2338          move.l    D1,-(A7)
000017D6  4EB9 0000 2339          jsr       _strcat
000017DA  5B14      
000017DC  504F      2340          addq.w    #8,A7
000017DE  5243      2341          addq.w    #1,D3
000017E0  6000 FF7E 2342          bra       DumpRegisters_12
                    2343   DumpRegisters_14:
000017E4  6020      2344          bra.s     DumpRegisters_5
                    2345   DumpRegisters_4:
                    2346   ; }
                    2347   ; }
                    2348   ; else
                    2349   ; strcpy(WatchPointString[x], "") ;
000017E6  4879 0000 2350          pea       @m68kde~1_40.L
000017EA  688C      
000017EC  220D      2351          move.l    A5,D1
000017EE  48C2      2352          ext.l     D2
000017F0  2F00      2353          move.l    D0,-(A7)
000017F2  2002      2354          move.l    D2,D0
000017F4  C1FC 0064 2355          muls      #100,D0
000017F8  D280      2356          add.l     D0,D1
000017FA  201F      2357          move.l    (A7)+,D0
000017FC  2F01      2358          move.l    D1,-(A7)
000017FE  4EB9 0000 2359          jsr       _strcpy
00001802  5974      
00001804  504F      2360          addq.w    #8,A7
                    2361   DumpRegisters_5:
00001806  5242      2362          addq.w    #1,D2
00001808  6000 FE36 2363          bra       DumpRegisters_1
                    2364   DumpRegisters_3:
                    2365   ; }
                    2366   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
0000180C  2F39 0B00 2367          move.l    _a0.L,-(A7)
00001810  0104      
00001812  2F39 0B00 2368          move.l    _d0.L,-(A7)
00001816  00E4      
00001818  4879 0000 2369          pea       @m68kde~1_41.L
0000181C  688E      
0000181E  4E93      2370          jsr       (A3)
00001820  DEFC 000C 2371          add.w     #12,A7
                    2372   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001824  2F39 0B00 2373          move.l    _a1.L,-(A7)
00001828  0108      
0000182A  2F39 0B00 2374          move.l    _d1.L,-(A7)
0000182E  00E8      
00001830  4879 0000 2375          pea       @m68kde~1_42.L
00001834  68AA      
00001836  4E93      2376          jsr       (A3)
00001838  DEFC 000C 2377          add.w     #12,A7
                    2378   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
0000183C  2F39 0B00 2379          move.l    _a2.L,-(A7)
00001840  010C      
00001842  2F39 0B00 2380          move.l    _d2.L,-(A7)
00001846  00EC      
00001848  4879 0000 2381          pea       @m68kde~1_43.L
0000184C  68C4      
0000184E  4E93      2382          jsr       (A3)
00001850  DEFC 000C 2383          add.w     #12,A7
                    2384   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001854  2F39 0B00 2385          move.l    _a3.L,-(A7)
00001858  0110      
0000185A  2F39 0B00 2386          move.l    _d3.L,-(A7)
0000185E  00F0      
00001860  4879 0000 2387          pea       @m68kde~1_44.L
00001864  68DE      
00001866  4E93      2388          jsr       (A3)
00001868  DEFC 000C 2389          add.w     #12,A7
                    2390   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
0000186C  2F39 0B00 2391          move.l    _a4.L,-(A7)
00001870  0114      
00001872  2F39 0B00 2392          move.l    _d4.L,-(A7)
00001876  00F4      
00001878  4879 0000 2393          pea       @m68kde~1_45.L
0000187C  68F8      
0000187E  4E93      2394          jsr       (A3)
00001880  DEFC 000C 2395          add.w     #12,A7
                    2396   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001884  2F39 0B00 2397          move.l    _a5.L,-(A7)
00001888  0118      
0000188A  2F39 0B00 2398          move.l    _d5.L,-(A7)
0000188E  00F8      
00001890  4879 0000 2399          pea       @m68kde~1_46.L
00001894  6912      
00001896  4E93      2400          jsr       (A3)
00001898  DEFC 000C 2401          add.w     #12,A7
                    2402   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
0000189C  2F39 0B00 2403          move.l    _a6.L,-(A7)
000018A0  011C      
000018A2  2F39 0B00 2404          move.l    _d6.L,-(A7)
000018A6  00FC      
000018A8  4879 0000 2405          pea       @m68kde~1_47.L
000018AC  692C      
000018AE  4E93      2406          jsr       (A3)
000018B0  DEFC 000C 2407          add.w     #12,A7
                    2408   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000018B4  3214      2409          move.w    (A4),D1
000018B6  C27C 2000 2410          and.w     #8192,D1
000018BA  0C41 2000 2411          cmp.w     #8192,D1
000018BE  6608      2412          bne.s     DumpRegisters_18
000018C0  2239 0B00 2413          move.l    _SSP.L,D1
000018C4  0124      
000018C6  6006      2414          bra.s     DumpRegisters_19
                    2415   DumpRegisters_18:
000018C8  2239 0B00 2416          move.l    _USP.L,D1
000018CC  0128      
                    2417   DumpRegisters_19:
000018CE  2F01      2418          move.l    D1,-(A7)
000018D0  2F39 0B00 2419          move.l    _d7.L,-(A7)
000018D4  0100      
000018D6  4879 0000 2420          pea       @m68kde~1_48.L
000018DA  6946      
000018DC  4E93      2421          jsr       (A3)
000018DE  DEFC 000C 2422          add.w     #12,A7
                    2423   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
000018E2  2F39 0B00 2424          move.l    _USP.L,-(A7)
000018E6  0128      
000018E8  4879 0000 2425          pea       @m68kde~1_49.L
000018EC  6960      
000018EE  4E93      2426          jsr       (A3)
000018F0  504F      2427          addq.w    #8,A7
                    2428   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000018F2  2F39 0B00 2429          move.l    _SSP.L,-(A7)
000018F6  0124      
000018F8  4879 0000 2430          pea       @m68kde~1_50.L
000018FC  697E      
000018FE  4E93      2431          jsr       (A3)
00001900  504F      2432          addq.w    #8,A7
                    2433   ; printf("\r\n SR = $%04X   ",SR) ;
00001902  3214      2434          move.w    (A4),D1
00001904  C2BC 0000 2435          and.l     #65535,D1
00001908  FFFF      
0000190A  2F01      2436          move.l    D1,-(A7)
0000190C  4879 0000 2437          pea       @m68kde~1_51.L
00001910  69A0      
00001912  4E93      2438          jsr       (A3)
00001914  504F      2439          addq.w    #8,A7
                    2440   ; // display the status word in characters etc.
                    2441   ; printf("   [") ;
00001916  4879 0000 2442          pea       @m68kde~1_52.L
0000191A  69B2      
0000191C  4E93      2443          jsr       (A3)
0000191E  584F      2444          addq.w    #4,A7
                    2445   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001920  3014      2446          move.w    (A4),D0
00001922  C07C 8000 2447          and.w     #32768,D0
00001926  0C40 8000 2448          cmp.w     #32768,D0
0000192A  660A      2449          bne.s     DumpRegisters_20
0000192C  4878 0054 2450          pea       84
00001930  4E92      2451          jsr       (A2)
00001932  584F      2452          addq.w    #4,A7
00001934  6008      2453          bra.s     DumpRegisters_21
                    2454   DumpRegisters_20:
00001936  4878 002D 2455          pea       45
0000193A  4E92      2456          jsr       (A2)
0000193C  584F      2457          addq.w    #4,A7
                    2458   DumpRegisters_21:
                    2459   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000193E  3014      2460          move.w    (A4),D0
00001940  C07C 2000 2461          and.w     #8192,D0
00001944  0C40 2000 2462          cmp.w     #8192,D0
00001948  660A      2463          bne.s     DumpRegisters_22
0000194A  4878 0053 2464          pea       83
0000194E  4E92      2465          jsr       (A2)
00001950  584F      2466          addq.w    #4,A7
00001952  6008      2467          bra.s     DumpRegisters_23
                    2468   DumpRegisters_22:
00001954  4878 0055 2469          pea       85
00001958  4E92      2470          jsr       (A2)
0000195A  584F      2471          addq.w    #4,A7
                    2472   DumpRegisters_23:
                    2473   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
0000195C  3014      2474          move.w    (A4),D0
0000195E  C07C 0400 2475          and.w     #1024,D0
00001962  0C40 0400 2476          cmp.w     #1024,D0
00001966  660A      2477          bne.s     DumpRegisters_24
00001968  4878 0031 2478          pea       49
0000196C  4E92      2479          jsr       (A2)
0000196E  584F      2480          addq.w    #4,A7
00001970  6008      2481          bra.s     DumpRegisters_25
                    2482   DumpRegisters_24:
00001972  4878 0030 2483          pea       48
00001976  4E92      2484          jsr       (A2)
00001978  584F      2485          addq.w    #4,A7
                    2486   DumpRegisters_25:
                    2487   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000197A  3014      2488          move.w    (A4),D0
0000197C  C07C 0200 2489          and.w     #512,D0
00001980  0C40 0200 2490          cmp.w     #512,D0
00001984  660A      2491          bne.s     DumpRegisters_26
00001986  4878 0031 2492          pea       49
0000198A  4E92      2493          jsr       (A2)
0000198C  584F      2494          addq.w    #4,A7
0000198E  6008      2495          bra.s     DumpRegisters_27
                    2496   DumpRegisters_26:
00001990  4878 0030 2497          pea       48
00001994  4E92      2498          jsr       (A2)
00001996  584F      2499          addq.w    #4,A7
                    2500   DumpRegisters_27:
                    2501   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001998  3014      2502          move.w    (A4),D0
0000199A  C07C 0100 2503          and.w     #256,D0
0000199E  0C40 0100 2504          cmp.w     #256,D0
000019A2  660A      2505          bne.s     DumpRegisters_28
000019A4  4878 0031 2506          pea       49
000019A8  4E92      2507          jsr       (A2)
000019AA  584F      2508          addq.w    #4,A7
000019AC  6008      2509          bra.s     DumpRegisters_29
                    2510   DumpRegisters_28:
000019AE  4878 0030 2511          pea       48
000019B2  4E92      2512          jsr       (A2)
000019B4  584F      2513          addq.w    #4,A7
                    2514   DumpRegisters_29:
                    2515   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000019B6  3014      2516          move.w    (A4),D0
000019B8  C07C 0010 2517          and.w     #16,D0
000019BC  0C40 0010 2518          cmp.w     #16,D0
000019C0  660A      2519          bne.s     DumpRegisters_30
000019C2  4878 0058 2520          pea       88
000019C6  4E92      2521          jsr       (A2)
000019C8  584F      2522          addq.w    #4,A7
000019CA  6008      2523          bra.s     DumpRegisters_31
                    2524   DumpRegisters_30:
000019CC  4878 002D 2525          pea       45
000019D0  4E92      2526          jsr       (A2)
000019D2  584F      2527          addq.w    #4,A7
                    2528   DumpRegisters_31:
                    2529   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
000019D4  3014      2530          move.w    (A4),D0
000019D6  C07C 0008 2531          and.w     #8,D0
000019DA  0C40 0008 2532          cmp.w     #8,D0
000019DE  660A      2533          bne.s     DumpRegisters_32
000019E0  4878 004E 2534          pea       78
000019E4  4E92      2535          jsr       (A2)
000019E6  584F      2536          addq.w    #4,A7
000019E8  6008      2537          bra.s     DumpRegisters_33
                    2538   DumpRegisters_32:
000019EA  4878 002D 2539          pea       45
000019EE  4E92      2540          jsr       (A2)
000019F0  584F      2541          addq.w    #4,A7
                    2542   DumpRegisters_33:
                    2543   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000019F2  3014      2544          move.w    (A4),D0
000019F4  C07C 0004 2545          and.w     #4,D0
000019F8  0C40 0004 2546          cmp.w     #4,D0
000019FC  660A      2547          bne.s     DumpRegisters_34
000019FE  4878 005A 2548          pea       90
00001A02  4E92      2549          jsr       (A2)
00001A04  584F      2550          addq.w    #4,A7
00001A06  6008      2551          bra.s     DumpRegisters_35
                    2552   DumpRegisters_34:
00001A08  4878 002D 2553          pea       45
00001A0C  4E92      2554          jsr       (A2)
00001A0E  584F      2555          addq.w    #4,A7
                    2556   DumpRegisters_35:
                    2557   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001A10  3014      2558          move.w    (A4),D0
00001A12  C07C 0002 2559          and.w     #2,D0
00001A16  0C40 0002 2560          cmp.w     #2,D0
00001A1A  660A      2561          bne.s     DumpRegisters_36
00001A1C  4878 0056 2562          pea       86
00001A20  4E92      2563          jsr       (A2)
00001A22  584F      2564          addq.w    #4,A7
00001A24  6008      2565          bra.s     DumpRegisters_37
                    2566   DumpRegisters_36:
00001A26  4878 002D 2567          pea       45
00001A2A  4E92      2568          jsr       (A2)
00001A2C  584F      2569          addq.w    #4,A7
                    2570   DumpRegisters_37:
                    2571   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001A2E  3014      2572          move.w    (A4),D0
00001A30  C07C 0001 2573          and.w     #1,D0
00001A34  0C40 0001 2574          cmp.w     #1,D0
00001A38  660A      2575          bne.s     DumpRegisters_38
00001A3A  4878 0043 2576          pea       67
00001A3E  4E92      2577          jsr       (A2)
00001A40  584F      2578          addq.w    #4,A7
00001A42  6008      2579          bra.s     DumpRegisters_39
                    2580   DumpRegisters_38:
00001A44  4878 002D 2581          pea       45
00001A48  4E92      2582          jsr       (A2)
00001A4A  584F      2583          addq.w    #4,A7
                    2584   DumpRegisters_39:
                    2585   ; putchar(']') ;
00001A4C  4878 005D 2586          pea       93
00001A50  4E92      2587          jsr       (A2)
00001A52  584F      2588          addq.w    #4,A7
                    2589   ; printf("\r\n PC = $%08X  ", PC) ;
00001A54  2F39 0B00 2590          move.l    _PC.L,-(A7)
00001A58  0120      
00001A5A  4879 0000 2591          pea       @m68kde~1_53.L
00001A5E  69B8      
00001A60  4E93      2592          jsr       (A3)
00001A62  504F      2593          addq.w    #8,A7
                    2594   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
00001A64  2039 0B00 2595          move.l    _PC.L,D0
00001A68  0120      
00001A6A  2040      2596          move.l    D0,A0
00001A6C  3010      2597          move.w    (A0),D0
00001A6E  0C40 4E4E 2598          cmp.w     #20046,D0
00001A72  6724      2599          beq.s     DumpRegisters_40
                    2600   ; DisassembleInstruction(PC) ;
00001A74  2F39 0B00 2601          move.l    _PC.L,-(A7)
00001A78  0120      
00001A7A  4EB9 0000 2602          jsr       _DisassembleInstruction
00001A7E  3AD2      
00001A80  584F      2603          addq.w    #4,A7
                    2604   ; FormatInstructionForTrace() ;
00001A82  4EB8 15AE 2605          jsr       _FormatInstructionForTrace
                    2606   ; printf("%s", Instruction) ;
00001A86  4879 0B00 2607          pea       _Instruction.L
00001A8A  04E2      
00001A8C  4879 0000 2608          pea       @m68kde~1_54.L
00001A90  69C8      
00001A92  4E93      2609          jsr       (A3)
00001A94  504F      2610          addq.w    #8,A7
00001A96  600A      2611          bra.s     DumpRegisters_41
                    2612   DumpRegisters_40:
                    2613   ; }
                    2614   ; else
                    2615   ; printf("[BREAKPOINT]") ;
00001A98  4879 0000 2616          pea       @m68kde~1_55.L
00001A9C  69CC      
00001A9E  4E93      2617          jsr       (A3)
00001AA0  584F      2618          addq.w    #4,A7
                    2619   DumpRegisters_41:
                    2620   ; printf("\r\n") ;
00001AA2  4879 0000 2621          pea       @m68kde~1_1.L
00001AA6  6458      
00001AA8  4E93      2622          jsr       (A3)
00001AAA  584F      2623          addq.w    #4,A7
                    2624   ; for(i=0; i < 8; i++)    {
00001AAC  4244      2625          clr.w     D4
                    2626   DumpRegisters_42:
00001AAE  0C44 0008 2627          cmp.w     #8,D4
00001AB2  6C00 0040 2628          bge       DumpRegisters_44
                    2629   ; if(WatchPointSetOrCleared[i] == 1)
00001AB6  48C4      2630          ext.l     D4
00001AB8  2004      2631          move.l    D4,D0
00001ABA  E588      2632          lsl.l     #2,D0
00001ABC  41F9 0B00 2633          lea       _WatchPointSetOrCleared.L,A0
00001AC0  01A2      
00001AC2  2030 0800 2634          move.l    0(A0,D0.L),D0
00001AC6  0C80 0000 2635          cmp.l     #1,D0
00001ACA  0001      
00001ACC  6622      2636          bne.s     DumpRegisters_45
                    2637   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001ACE  220D      2638          move.l    A5,D1
00001AD0  48C4      2639          ext.l     D4
00001AD2  2F00      2640          move.l    D0,-(A7)
00001AD4  2004      2641          move.l    D4,D0
00001AD6  C1FC 0064 2642          muls      #100,D0
00001ADA  D280      2643          add.l     D0,D1
00001ADC  201F      2644          move.l    (A7)+,D0
00001ADE  2F01      2645          move.l    D1,-(A7)
00001AE0  48C4      2646          ext.l     D4
00001AE2  2F04      2647          move.l    D4,-(A7)
00001AE4  4879 0000 2648          pea       @m68kde~1_56.L
00001AE8  69DA      
00001AEA  4E93      2649          jsr       (A3)
00001AEC  DEFC 000C 2650          add.w     #12,A7
                    2651   DumpRegisters_45:
00001AF0  5244      2652          addq.w    #1,D4
00001AF2  60BA      2653          bra       DumpRegisters_42
                    2654   DumpRegisters_44:
00001AF4  4CDF 3CFC 2655          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001AF8  4E75      2656          rts
                    2657   ; }
                    2658   ; }
                    2659   ; // Trace Exception Handler
                    2660   ; void DumpRegistersandPause(void)
                    2661   ; {
                    2662   _DumpRegistersandPause:
00001AFA  2F0A      2663          move.l    A2,-(A7)
00001AFC  45F9 0000 2664          lea       _printf.L,A2
00001B00  5B46      
                    2665   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001B02  4879 0000 2666          pea       @m68kde~1_57.L
00001B06  69E6      
00001B08  4E92      2667          jsr       (A2)
00001B0A  584F      2668          addq.w    #4,A7
                    2669   ; printf("\r\nBreak Points :[Disabled]") ;
00001B0C  4879 0000 2670          pea       @m68kde~1_58.L
00001B10  6A06      
00001B12  4E92      2671          jsr       (A2)
00001B14  584F      2672          addq.w    #4,A7
                    2673   ; DumpRegisters() ;
00001B16  4EB8 1622 2674          jsr       _DumpRegisters
                    2675   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001B1A  4879 0000 2676          pea       @m68kde~1_59.L
00001B1E  6A22      
00001B20  4E92      2677          jsr       (A2)
00001B22  584F      2678          addq.w    #4,A7
                    2679   ; printf("\r\nPress <ESC> to Resume Program") ;
00001B24  4879 0000 2680          pea       @m68kde~1_60.L
00001B28  6A4E      
00001B2A  4E92      2681          jsr       (A2)
00001B2C  584F      2682          addq.w    #4,A7
                    2683   ; menu() ;
00001B2E  4EB9 0000 2684          jsr       _menu
00001B32  2764      
00001B34  245F      2685          move.l    (A7)+,A2
00001B36  4E75      2686          rts
                    2687   ; }
                    2688   ; void ChangeRegisters(void)
                    2689   ; {
                    2690   _ChangeRegisters:
00001B38  4E56 FFFC 2691          link      A6,#-4
00001B3C  48E7 303C 2692          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001B40  45F9 0000 2693          lea       _printf.L,A2
00001B44  5B46      
00001B46  47EE FFFC 2694          lea       -4(A6),A3
00001B4A  49F8 0CA4 2695          lea       _Get8HexDigits.L,A4
00001B4E  4BF8 0B68 2696          lea       __getch.L,A5
                    2697   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2698   ; int reg_val ;
                    2699   ; char c, reg[3] ;
                    2700   ; reg[0] = tolower(_getch()) ;
00001B52  2F00      2701          move.l    D0,-(A7)
00001B54  4E95      2702          jsr       (A5)
00001B56  2200      2703          move.l    D0,D1
00001B58  201F      2704          move.l    (A7)+,D0
00001B5A  2F01      2705          move.l    D1,-(A7)
00001B5C  4EB9 0000 2706          jsr       _tolower
00001B60  5AC6      
00001B62  584F      2707          addq.w    #4,A7
00001B64  1680      2708          move.b    D0,(A3)
                    2709   ; reg[1] = c = tolower(_getch()) ;
00001B66  2F00      2710          move.l    D0,-(A7)
00001B68  4E95      2711          jsr       (A5)
00001B6A  2200      2712          move.l    D0,D1
00001B6C  201F      2713          move.l    (A7)+,D0
00001B6E  2F01      2714          move.l    D1,-(A7)
00001B70  4EB9 0000 2715          jsr       _tolower
00001B74  5AC6      
00001B76  584F      2716          addq.w    #4,A7
00001B78  1400      2717          move.b    D0,D2
00001B7A  1740 0001 2718          move.b    D0,1(A3)
                    2719   ; if(reg[0] == (char)('d'))  {    // change data register
00001B7E  1013      2720          move.b    (A3),D0
00001B80  0C00 0064 2721          cmp.b     #100,D0
00001B84  6600 00AE 2722          bne       ChangeRegisters_1
                    2723   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001B88  102B 0001 2724          move.b    1(A3),D0
00001B8C  0C00 0037 2725          cmp.b     #55,D0
00001B90  6E0A      2726          bgt.s     ChangeRegisters_5
00001B92  102B 0001 2727          move.b    1(A3),D0
00001B96  0C00 0030 2728          cmp.b     #48,D0
00001B9A  6C0E      2729          bge.s     ChangeRegisters_3
                    2730   ChangeRegisters_5:
                    2731   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001B9C  4879 0000 2732          pea       @m68kde~1_61.L
00001BA0  6A6E      
00001BA2  4E92      2733          jsr       (A2)
00001BA4  584F      2734          addq.w    #4,A7
                    2735   ; return ;
00001BA6  6000 0244 2736          bra       ChangeRegisters_6
                    2737   ChangeRegisters_3:
                    2738   ; }
                    2739   ; else {
                    2740   ; printf("\r\nD%c = ", c) ;
00001BAA  4882      2741          ext.w     D2
00001BAC  48C2      2742          ext.l     D2
00001BAE  2F02      2743          move.l    D2,-(A7)
00001BB0  4879 0000 2744          pea       @m68kde~1_62.L
00001BB4  6A9A      
00001BB6  4E92      2745          jsr       (A2)
00001BB8  504F      2746          addq.w    #8,A7
                    2747   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001BBA  42A7      2748          clr.l     -(A7)
00001BBC  4E94      2749          jsr       (A4)
00001BBE  584F      2750          addq.w    #4,A7
00001BC0  2600      2751          move.l    D0,D3
                    2752   ; }
                    2753   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2754   ; if(c == (char)('0'))
00001BC2  0C02 0030 2755          cmp.b     #48,D2
00001BC6  660A      2756          bne.s     ChangeRegisters_7
                    2757   ; d0 = reg_val ;
00001BC8  23C3 0B00 2758          move.l    D3,_d0.L
00001BCC  00E4      
00001BCE  6000 0060 2759          bra       ChangeRegisters_20
                    2760   ChangeRegisters_7:
                    2761   ; else if(c == (char)('1'))
00001BD2  0C02 0031 2762          cmp.b     #49,D2
00001BD6  660A      2763          bne.s     ChangeRegisters_9
                    2764   ; d1 = reg_val ;
00001BD8  23C3 0B00 2765          move.l    D3,_d1.L
00001BDC  00E8      
00001BDE  6000 0050 2766          bra       ChangeRegisters_20
                    2767   ChangeRegisters_9:
                    2768   ; else if(c == (char)('2'))
00001BE2  0C02 0032 2769          cmp.b     #50,D2
00001BE6  660A      2770          bne.s     ChangeRegisters_11
                    2771   ; d2 = reg_val ;
00001BE8  23C3 0B00 2772          move.l    D3,_d2.L
00001BEC  00EC      
00001BEE  6000 0040 2773          bra       ChangeRegisters_20
                    2774   ChangeRegisters_11:
                    2775   ; else if(c == (char)('3'))
00001BF2  0C02 0033 2776          cmp.b     #51,D2
00001BF6  6608      2777          bne.s     ChangeRegisters_13
                    2778   ; d3 = reg_val ;
00001BF8  23C3 0B00 2779          move.l    D3,_d3.L
00001BFC  00F0      
00001BFE  6030      2780          bra.s     ChangeRegisters_20
                    2781   ChangeRegisters_13:
                    2782   ; else if(c == (char)('4'))
00001C00  0C02 0034 2783          cmp.b     #52,D2
00001C04  6608      2784          bne.s     ChangeRegisters_15
                    2785   ; d4 = reg_val ;
00001C06  23C3 0B00 2786          move.l    D3,_d4.L
00001C0A  00F4      
00001C0C  6022      2787          bra.s     ChangeRegisters_20
                    2788   ChangeRegisters_15:
                    2789   ; else if(c == (char)('5'))
00001C0E  0C02 0035 2790          cmp.b     #53,D2
00001C12  6608      2791          bne.s     ChangeRegisters_17
                    2792   ; d5 = reg_val ;
00001C14  23C3 0B00 2793          move.l    D3,_d5.L
00001C18  00F8      
00001C1A  6014      2794          bra.s     ChangeRegisters_20
                    2795   ChangeRegisters_17:
                    2796   ; else if(c == (char)('6'))
00001C1C  0C02 0036 2797          cmp.b     #54,D2
00001C20  6608      2798          bne.s     ChangeRegisters_19
                    2799   ; d6 = reg_val ;
00001C22  23C3 0B00 2800          move.l    D3,_d6.L
00001C26  00FC      
00001C28  6006      2801          bra.s     ChangeRegisters_20
                    2802   ChangeRegisters_19:
                    2803   ; else
                    2804   ; d7 = reg_val ;
00001C2A  23C3 0B00 2805          move.l    D3,_d7.L
00001C2E  0100      
                    2806   ChangeRegisters_20:
00001C30  6000 01B6 2807          bra       ChangeRegisters_51
                    2808   ChangeRegisters_1:
                    2809   ; }
                    2810   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001C34  1013      2811          move.b    (A3),D0
00001C36  0C00 0061 2812          cmp.b     #97,D0
00001C3A  6600 00A6 2813          bne       ChangeRegisters_21
                    2814   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001C3E  0C02 0037 2815          cmp.b     #55,D2
00001C42  6E06      2816          bgt.s     ChangeRegisters_25
00001C44  0C02 0030 2817          cmp.b     #48,D2
00001C48  6C0E      2818          bge.s     ChangeRegisters_23
                    2819   ChangeRegisters_25:
                    2820   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001C4A  4879 0000 2821          pea       @m68kde~1_63.L
00001C4E  6AA4      
00001C50  4E92      2822          jsr       (A2)
00001C52  584F      2823          addq.w    #4,A7
                    2824   ; return ;
00001C54  6000 0196 2825          bra       ChangeRegisters_6
                    2826   ChangeRegisters_23:
                    2827   ; }
                    2828   ; else {
                    2829   ; printf("\r\nA%c = ", c) ;
00001C58  4882      2830          ext.w     D2
00001C5A  48C2      2831          ext.l     D2
00001C5C  2F02      2832          move.l    D2,-(A7)
00001C5E  4879 0000 2833          pea       @m68kde~1_64.L
00001C62  6AD2      
00001C64  4E92      2834          jsr       (A2)
00001C66  504F      2835          addq.w    #8,A7
                    2836   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C68  42A7      2837          clr.l     -(A7)
00001C6A  4E94      2838          jsr       (A4)
00001C6C  584F      2839          addq.w    #4,A7
00001C6E  2600      2840          move.l    D0,D3
                    2841   ; }
                    2842   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2843   ; if(c == (char)('0'))
00001C70  0C02 0030 2844          cmp.b     #48,D2
00001C74  660A      2845          bne.s     ChangeRegisters_26
                    2846   ; a0 = reg_val ;
00001C76  23C3 0B00 2847          move.l    D3,_a0.L
00001C7A  0104      
00001C7C  6000 0060 2848          bra       ChangeRegisters_39
                    2849   ChangeRegisters_26:
                    2850   ; else if(c == (char)('1'))
00001C80  0C02 0031 2851          cmp.b     #49,D2
00001C84  660A      2852          bne.s     ChangeRegisters_28
                    2853   ; a1 = reg_val ;
00001C86  23C3 0B00 2854          move.l    D3,_a1.L
00001C8A  0108      
00001C8C  6000 0050 2855          bra       ChangeRegisters_39
                    2856   ChangeRegisters_28:
                    2857   ; else if(c == (char)('2'))
00001C90  0C02 0032 2858          cmp.b     #50,D2
00001C94  660A      2859          bne.s     ChangeRegisters_30
                    2860   ; a2 = reg_val ;
00001C96  23C3 0B00 2861          move.l    D3,_a2.L
00001C9A  010C      
00001C9C  6000 0040 2862          bra       ChangeRegisters_39
                    2863   ChangeRegisters_30:
                    2864   ; else if(c == (char)('3'))
00001CA0  0C02 0033 2865          cmp.b     #51,D2
00001CA4  6608      2866          bne.s     ChangeRegisters_32
                    2867   ; a3 = reg_val ;
00001CA6  23C3 0B00 2868          move.l    D3,_a3.L
00001CAA  0110      
00001CAC  6030      2869          bra.s     ChangeRegisters_39
                    2870   ChangeRegisters_32:
                    2871   ; else if(c == (char)('4'))
00001CAE  0C02 0034 2872          cmp.b     #52,D2
00001CB2  6608      2873          bne.s     ChangeRegisters_34
                    2874   ; a4 = reg_val ;
00001CB4  23C3 0B00 2875          move.l    D3,_a4.L
00001CB8  0114      
00001CBA  6022      2876          bra.s     ChangeRegisters_39
                    2877   ChangeRegisters_34:
                    2878   ; else if(c == (char)('5'))
00001CBC  0C02 0035 2879          cmp.b     #53,D2
00001CC0  6608      2880          bne.s     ChangeRegisters_36
                    2881   ; a5 = reg_val ;
00001CC2  23C3 0B00 2882          move.l    D3,_a5.L
00001CC6  0118      
00001CC8  6014      2883          bra.s     ChangeRegisters_39
                    2884   ChangeRegisters_36:
                    2885   ; else if(c == (char)('6'))
00001CCA  0C02 0036 2886          cmp.b     #54,D2
00001CCE  6608      2887          bne.s     ChangeRegisters_38
                    2888   ; a6 = reg_val ;
00001CD0  23C3 0B00 2889          move.l    D3,_a6.L
00001CD4  011C      
00001CD6  6006      2890          bra.s     ChangeRegisters_39
                    2891   ChangeRegisters_38:
                    2892   ; else
                    2893   ; USP = reg_val ;
00001CD8  23C3 0B00 2894          move.l    D3,_USP.L
00001CDC  0128      
                    2895   ChangeRegisters_39:
00001CDE  6000 0108 2896          bra       ChangeRegisters_51
                    2897   ChangeRegisters_21:
                    2898   ; }
                    2899   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001CE2  1013      2900          move.b    (A3),D0
00001CE4  0C00 0075 2901          cmp.b     #117,D0
00001CE8  6600 004E 2902          bne       ChangeRegisters_40
00001CEC  0C02 0073 2903          cmp.b     #115,D2
00001CF0  6600 0046 2904          bne       ChangeRegisters_40
                    2905   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001CF4  2F00      2906          move.l    D0,-(A7)
00001CF6  4E95      2907          jsr       (A5)
00001CF8  2200      2908          move.l    D0,D1
00001CFA  201F      2909          move.l    (A7)+,D0
00001CFC  2F01      2910          move.l    D1,-(A7)
00001CFE  4EB9 0000 2911          jsr       _tolower
00001D02  5AC6      
00001D04  584F      2912          addq.w    #4,A7
00001D06  0C80 0000 2913          cmp.l     #112,D0
00001D0A  0070      
00001D0C  6618      2914          bne.s     ChangeRegisters_42
                    2915   ; printf("\r\nUser SP = ") ;
00001D0E  4879 0000 2916          pea       @m68kde~1_65.L
00001D12  6ADC      
00001D14  4E92      2917          jsr       (A2)
00001D16  584F      2918          addq.w    #4,A7
                    2919   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001D18  42A7      2920          clr.l     -(A7)
00001D1A  4E94      2921          jsr       (A4)
00001D1C  584F      2922          addq.w    #4,A7
00001D1E  23C0 0B00 2923          move.l    D0,_USP.L
00001D22  0128      
00001D24  600E      2924          bra.s     ChangeRegisters_43
                    2925   ChangeRegisters_42:
                    2926   ; }
                    2927   ; else {
                    2928   ; printf("\r\nIllegal Register....") ;
00001D26  4879 0000 2929          pea       @m68kde~1_66.L
00001D2A  6AEA      
00001D2C  4E92      2930          jsr       (A2)
00001D2E  584F      2931          addq.w    #4,A7
                    2932   ; return ;
00001D30  6000 00BA 2933          bra       ChangeRegisters_6
                    2934   ChangeRegisters_43:
00001D34  6000 00B2 2935          bra       ChangeRegisters_51
                    2936   ChangeRegisters_40:
                    2937   ; }
                    2938   ; }
                    2939   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001D38  1013      2940          move.b    (A3),D0
00001D3A  0C00 0073 2941          cmp.b     #115,D0
00001D3E  6600 004E 2942          bne       ChangeRegisters_44
00001D42  0C02 0073 2943          cmp.b     #115,D2
00001D46  6600 0046 2944          bne       ChangeRegisters_44
                    2945   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001D4A  2F00      2946          move.l    D0,-(A7)
00001D4C  4E95      2947          jsr       (A5)
00001D4E  2200      2948          move.l    D0,D1
00001D50  201F      2949          move.l    (A7)+,D0
00001D52  2F01      2950          move.l    D1,-(A7)
00001D54  4EB9 0000 2951          jsr       _tolower
00001D58  5AC6      
00001D5A  584F      2952          addq.w    #4,A7
00001D5C  0C80 0000 2953          cmp.l     #112,D0
00001D60  0070      
00001D62  6618      2954          bne.s     ChangeRegisters_46
                    2955   ; printf("\r\nSystem SP = ") ;
00001D64  4879 0000 2956          pea       @m68kde~1_67.L
00001D68  6B02      
00001D6A  4E92      2957          jsr       (A2)
00001D6C  584F      2958          addq.w    #4,A7
                    2959   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001D6E  42A7      2960          clr.l     -(A7)
00001D70  4E94      2961          jsr       (A4)
00001D72  584F      2962          addq.w    #4,A7
00001D74  23C0 0B00 2963          move.l    D0,_SSP.L
00001D78  0124      
00001D7A  600E      2964          bra.s     ChangeRegisters_47
                    2965   ChangeRegisters_46:
                    2966   ; }
                    2967   ; else {
                    2968   ; printf("\r\nIllegal Register....") ;
00001D7C  4879 0000 2969          pea       @m68kde~1_66.L
00001D80  6AEA      
00001D82  4E92      2970          jsr       (A2)
00001D84  584F      2971          addq.w    #4,A7
                    2972   ; return ;
00001D86  6000 0064 2973          bra       ChangeRegisters_6
                    2974   ChangeRegisters_47:
00001D8A  6000 005C 2975          bra       ChangeRegisters_51
                    2976   ChangeRegisters_44:
                    2977   ; }
                    2978   ; }
                    2979   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001D8E  1013      2980          move.b    (A3),D0
00001D90  0C00 0070 2981          cmp.b     #112,D0
00001D94  6620      2982          bne.s     ChangeRegisters_48
00001D96  0C02 0063 2983          cmp.b     #99,D2
00001D9A  661A      2984          bne.s     ChangeRegisters_48
                    2985   ; printf("\r\nPC = ") ;
00001D9C  4879 0000 2986          pea       @m68kde~1_68.L
00001DA0  6B12      
00001DA2  4E92      2987          jsr       (A2)
00001DA4  584F      2988          addq.w    #4,A7
                    2989   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001DA6  42A7      2990          clr.l     -(A7)
00001DA8  4E94      2991          jsr       (A4)
00001DAA  584F      2992          addq.w    #4,A7
00001DAC  23C0 0B00 2993          move.l    D0,_PC.L
00001DB0  0120      
00001DB2  6000 0034 2994          bra       ChangeRegisters_51
                    2995   ChangeRegisters_48:
                    2996   ; }
                    2997   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001DB6  1013      2998          move.b    (A3),D0
00001DB8  0C00 0073 2999          cmp.b     #115,D0
00001DBC  6620      3000          bne.s     ChangeRegisters_50
00001DBE  0C02 0072 3001          cmp.b     #114,D2
00001DC2  661A      3002          bne.s     ChangeRegisters_50
                    3003   ; printf("\r\nSR = ") ;
00001DC4  4879 0000 3004          pea       @m68kde~1_69.L
00001DC8  6B1A      
00001DCA  4E92      3005          jsr       (A2)
00001DCC  584F      3006          addq.w    #4,A7
                    3007   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001DCE  42A7      3008          clr.l     -(A7)
00001DD0  4EB8 0C58 3009          jsr       _Get4HexDigits
00001DD4  584F      3010          addq.w    #4,A7
00001DD6  33C0 0B00 3011          move.w    D0,_SR.L
00001DDA  012C      
00001DDC  600A      3012          bra.s     ChangeRegisters_51
                    3013   ChangeRegisters_50:
                    3014   ; }
                    3015   ; else
                    3016   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001DDE  4879 0000 3017          pea       @m68kde~1_70.L
00001DE2  6B22      
00001DE4  4E92      3018          jsr       (A2)
00001DE6  584F      3019          addq.w    #4,A7
                    3020   ChangeRegisters_51:
                    3021   ; DumpRegisters() ;
00001DE8  4EB8 1622 3022          jsr       _DumpRegisters
                    3023   ChangeRegisters_6:
00001DEC  4CDF 3C0C 3024          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001DF0  4E5E      3025          unlk      A6
00001DF2  4E75      3026          rts
                    3027   ; }
                    3028   ; void BreakPointDisplay(void)
                    3029   ; {
                    3030   _BreakPointDisplay:
00001DF4  48E7 3030 3031          movem.l   D2/D3/A2/A3,-(A7)
00001DF8  45F9 0000 3032          lea       _printf.L,A2
00001DFC  5B46      
00001DFE  47F9 0B00 3033          lea       _BreakPointAddress.L,A3
00001E02  012E      
                    3034   ; int i, BreakPointsSet = 0 ;
00001E04  4283      3035          clr.l     D3
                    3036   ; // any break points  set
                    3037   ; for(i = 0; i < 8; i++)  {
00001E06  4282      3038          clr.l     D2
                    3039   BreakPointDisplay_1:
00001E08  0C82 0000 3040          cmp.l     #8,D2
00001E0C  0008      
00001E0E  6C1C      3041          bge.s     BreakPointDisplay_3
                    3042   ; if(BreakPointSetOrCleared[i] == 1)
00001E10  2002      3043          move.l    D2,D0
00001E12  E588      3044          lsl.l     #2,D0
00001E14  41F9 0B00 3045          lea       _BreakPointSetOrCleared.L,A0
00001E18  015E      
00001E1A  2030 0800 3046          move.l    0(A0,D0.L),D0
00001E1E  0C80 0000 3047          cmp.l     #1,D0
00001E22  0001      
00001E24  6602      3048          bne.s     BreakPointDisplay_4
                    3049   ; BreakPointsSet = 1;
00001E26  7601      3050          moveq     #1,D3
                    3051   BreakPointDisplay_4:
00001E28  5282      3052          addq.l    #1,D2
00001E2A  60DC      3053          bra       BreakPointDisplay_1
                    3054   BreakPointDisplay_3:
                    3055   ; }
                    3056   ; if(BreakPointsSet == 1) {
00001E2C  0C83 0000 3057          cmp.l     #1,D3
00001E30  0001      
00001E32  6616      3058          bne.s     BreakPointDisplay_6
                    3059   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001E34  4879 0000 3060          pea       @m68kde~1_71.L
00001E38  6B5E      
00001E3A  4E92      3061          jsr       (A2)
00001E3C  584F      3062          addq.w    #4,A7
                    3063   ; printf("\r\n---     ---------    -----------") ;
00001E3E  4879 0000 3064          pea       @m68kde~1_72.L
00001E42  6B84      
00001E44  4E92      3065          jsr       (A2)
00001E46  584F      3066          addq.w    #4,A7
00001E48  600A      3067          bra.s     BreakPointDisplay_7
                    3068   BreakPointDisplay_6:
                    3069   ; }
                    3070   ; else
                    3071   ; printf("\r\nNo BreakPoints Set") ;
00001E4A  4879 0000 3072          pea       @m68kde~1_73.L
00001E4E  6BA8      
00001E50  4E92      3073          jsr       (A2)
00001E52  584F      3074          addq.w    #4,A7
                    3075   BreakPointDisplay_7:
                    3076   ; for(i = 0; i < 8; i++)  {
00001E54  4282      3077          clr.l     D2
                    3078   BreakPointDisplay_8:
00001E56  0C82 0000 3079          cmp.l     #8,D2
00001E5A  0008      
00001E5C  6C00 0080 3080          bge       BreakPointDisplay_10
                    3081   ; // put opcode back to disassemble it, then put break point back
                    3082   ; if(BreakPointSetOrCleared[i] == 1)  {
00001E60  2002      3083          move.l    D2,D0
00001E62  E588      3084          lsl.l     #2,D0
00001E64  41F9 0B00 3085          lea       _BreakPointSetOrCleared.L,A0
00001E68  015E      
00001E6A  2030 0800 3086          move.l    0(A0,D0.L),D0
00001E6E  0C80 0000 3087          cmp.l     #1,D0
00001E72  0001      
00001E74  6600 0062 3088          bne       BreakPointDisplay_11
                    3089   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001E78  2002      3090          move.l    D2,D0
00001E7A  E388      3091          lsl.l     #1,D0
00001E7C  41F9 0B00 3092          lea       _BreakPointInstruction.L,A0
00001E80  014E      
00001E82  2202      3093          move.l    D2,D1
00001E84  E589      3094          lsl.l     #2,D1
00001E86  2233 1800 3095          move.l    0(A3,D1.L),D1
00001E8A  2241      3096          move.l    D1,A1
00001E8C  32B0 0800 3097          move.w    0(A0,D0.L),(A1)
                    3098   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001E90  2202      3099          move.l    D2,D1
00001E92  E589      3100          lsl.l     #2,D1
00001E94  2F33 1800 3101          move.l    0(A3,D1.L),-(A7)
00001E98  4EB9 0000 3102          jsr       _DisassembleInstruction
00001E9C  3AD2      
00001E9E  584F      3103          addq.w    #4,A7
                    3104   ; FormatInstructionForTrace() ;
00001EA0  4EB8 15AE 3105          jsr       _FormatInstructionForTrace
                    3106   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001EA4  2002      3107          move.l    D2,D0
00001EA6  E588      3108          lsl.l     #2,D0
00001EA8  2033 0800 3109          move.l    0(A3,D0.L),D0
00001EAC  2040      3110          move.l    D0,A0
00001EAE  30BC 4E4E 3111          move.w    #20046,(A0)
                    3112   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001EB2  2202      3113          move.l    D2,D1
00001EB4  E589      3114          lsl.l     #2,D1
00001EB6  2F33 1800 3115          move.l    0(A3,D1.L),-(A7)
00001EBA  2F02      3116          move.l    D2,-(A7)
00001EBC  4879 0000 3117          pea       @m68kde~1_74.L
00001EC0  6BBE      
00001EC2  4E92      3118          jsr       (A2)
00001EC4  DEFC 000C 3119          add.w     #12,A7
                    3120   ; printf("    %s", Instruction);
00001EC8  4879 0B00 3121          pea       _Instruction.L
00001ECC  04E2      
00001ECE  4879 0000 3122          pea       @m68kde~1_75.L
00001ED2  6BCE      
00001ED4  4E92      3123          jsr       (A2)
00001ED6  504F      3124          addq.w    #8,A7
                    3125   BreakPointDisplay_11:
00001ED8  5282      3126          addq.l    #1,D2
00001EDA  6000 FF7A 3127          bra       BreakPointDisplay_8
                    3128   BreakPointDisplay_10:
                    3129   ; }
                    3130   ; }
                    3131   ; printf("\r\n") ;
00001EDE  4879 0000 3132          pea       @m68kde~1_1.L
00001EE2  6458      
00001EE4  4E92      3133          jsr       (A2)
00001EE6  584F      3134          addq.w    #4,A7
00001EE8  4CDF 0C0C 3135          movem.l   (A7)+,D2/D3/A2/A3
00001EEC  4E75      3136          rts
                    3137   ; }
                    3138   ; void WatchPointDisplay(void)
                    3139   ; {
                    3140   _WatchPointDisplay:
00001EEE  48E7 3020 3141          movem.l   D2/D3/A2,-(A7)
00001EF2  45F9 0000 3142          lea       _printf.L,A2
00001EF6  5B46      
                    3143   ; int i ;
                    3144   ; int WatchPointsSet = 0 ;
00001EF8  4283      3145          clr.l     D3
                    3146   ; // any watchpoints set
                    3147   ; for(i = 0; i < 8; i++)  {
00001EFA  4282      3148          clr.l     D2
                    3149   WatchPointDisplay_1:
00001EFC  0C82 0000 3150          cmp.l     #8,D2
00001F00  0008      
00001F02  6C1C      3151          bge.s     WatchPointDisplay_3
                    3152   ; if(WatchPointSetOrCleared[i] == 1)
00001F04  2002      3153          move.l    D2,D0
00001F06  E588      3154          lsl.l     #2,D0
00001F08  41F9 0B00 3155          lea       _WatchPointSetOrCleared.L,A0
00001F0C  01A2      
00001F0E  2030 0800 3156          move.l    0(A0,D0.L),D0
00001F12  0C80 0000 3157          cmp.l     #1,D0
00001F16  0001      
00001F18  6602      3158          bne.s     WatchPointDisplay_4
                    3159   ; WatchPointsSet = 1;
00001F1A  7601      3160          moveq     #1,D3
                    3161   WatchPointDisplay_4:
00001F1C  5282      3162          addq.l    #1,D2
00001F1E  60DC      3163          bra       WatchPointDisplay_1
                    3164   WatchPointDisplay_3:
                    3165   ; }
                    3166   ; if(WatchPointsSet == 1) {
00001F20  0C83 0000 3167          cmp.l     #1,D3
00001F24  0001      
00001F26  6616      3168          bne.s     WatchPointDisplay_6
                    3169   ; printf("\r\nNum     Address") ;
00001F28  4879 0000 3170          pea       @m68kde~1_76.L
00001F2C  6BD6      
00001F2E  4E92      3171          jsr       (A2)
00001F30  584F      3172          addq.w    #4,A7
                    3173   ; printf("\r\n---     ---------") ;
00001F32  4879 0000 3174          pea       @m68kde~1_77.L
00001F36  6BE8      
00001F38  4E92      3175          jsr       (A2)
00001F3A  584F      3176          addq.w    #4,A7
00001F3C  600A      3177          bra.s     WatchPointDisplay_7
                    3178   WatchPointDisplay_6:
                    3179   ; }
                    3180   ; else
                    3181   ; printf("\r\nNo WatchPoints Set") ;
00001F3E  4879 0000 3182          pea       @m68kde~1_78.L
00001F42  6BFC      
00001F44  4E92      3183          jsr       (A2)
00001F46  584F      3184          addq.w    #4,A7
                    3185   WatchPointDisplay_7:
                    3186   ; for(i = 0; i < 8; i++)  {
00001F48  4282      3187          clr.l     D2
                    3188   WatchPointDisplay_8:
00001F4A  0C82 0000 3189          cmp.l     #8,D2
00001F4E  0008      
00001F50  6C00 0038 3190          bge       WatchPointDisplay_10
                    3191   ; if(WatchPointSetOrCleared[i] == 1)
00001F54  2002      3192          move.l    D2,D0
00001F56  E588      3193          lsl.l     #2,D0
00001F58  41F9 0B00 3194          lea       _WatchPointSetOrCleared.L,A0
00001F5C  01A2      
00001F5E  2030 0800 3195          move.l    0(A0,D0.L),D0
00001F62  0C80 0000 3196          cmp.l     #1,D0
00001F66  0001      
00001F68  661C      3197          bne.s     WatchPointDisplay_11
                    3198   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001F6A  2202      3199          move.l    D2,D1
00001F6C  E589      3200          lsl.l     #2,D1
00001F6E  41F9 0B00 3201          lea       _WatchPointAddress.L,A0
00001F72  0182      
00001F74  2F30 1800 3202          move.l    0(A0,D1.L),-(A7)
00001F78  2F02      3203          move.l    D2,-(A7)
00001F7A  4879 0000 3204          pea       @m68kde~1_74.L
00001F7E  6BBE      
00001F80  4E92      3205          jsr       (A2)
00001F82  DEFC 000C 3206          add.w     #12,A7
                    3207   WatchPointDisplay_11:
00001F86  5282      3208          addq.l    #1,D2
00001F88  60C0      3209          bra       WatchPointDisplay_8
                    3210   WatchPointDisplay_10:
                    3211   ; }
                    3212   ; printf("\r\n") ;
00001F8A  4879 0000 3213          pea       @m68kde~1_1.L
00001F8E  6458      
00001F90  4E92      3214          jsr       (A2)
00001F92  584F      3215          addq.w    #4,A7
00001F94  4CDF 040C 3216          movem.l   (A7)+,D2/D3/A2
00001F98  4E75      3217          rts
                    3218   ; }
                    3219   ; void BreakPointClear(void)
                    3220   ; {
                    3221   _BreakPointClear:
00001F9A  4E56 FFFC 3222          link      A6,#-4
00001F9E  48E7 2020 3223          movem.l   D2/A2,-(A7)
00001FA2  45F9 0000 3224          lea       _printf.L,A2
00001FA6  5B46      
                    3225   ; unsigned int i ;
                    3226   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3227   ; BreakPointDisplay() ;
00001FA8  4EB8 1DF4 3228          jsr       _BreakPointDisplay
                    3229   ; printf("\r\nEnter Break Point Number: ") ;
00001FAC  4879 0000 3230          pea       @m68kde~1_79.L
00001FB0  6C12      
00001FB2  4E92      3231          jsr       (A2)
00001FB4  584F      3232          addq.w    #4,A7
                    3233   ; i = xtod(_getch()) ;           // get break pointer number
00001FB6  2F00      3234          move.l    D0,-(A7)
00001FB8  4EB8 0B68 3235          jsr       __getch
00001FBC  2200      3236          move.l    D0,D1
00001FBE  201F      3237          move.l    (A7)+,D0
00001FC0  2F01      3238          move.l    D1,-(A7)
00001FC2  4EB8 0BD2 3239          jsr       _xtod
00001FC6  584F      3240          addq.w    #4,A7
00001FC8  C0BC 0000 3241          and.l     #255,D0
00001FCC  00FF      
00001FCE  2400      3242          move.l    D0,D2
                    3243   ; if((i < 0) || (i > 7))   {
00001FD0  0C82 0000 3244          cmp.l     #0,D2
00001FD4  0000      
00001FD6  6508      3245          blo.s     BreakPointClear_3
00001FD8  0C82 0000 3246          cmp.l     #7,D2
00001FDC  0007      
00001FDE  630E      3247          bls.s     BreakPointClear_1
                    3248   BreakPointClear_3:
                    3249   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001FE0  4879 0000 3250          pea       @m68kde~1_80.L
00001FE4  6C30      
00001FE6  4E92      3251          jsr       (A2)
00001FE8  584F      3252          addq.w    #4,A7
                    3253   ; return ;
00001FEA  6000 0080 3254          bra       BreakPointClear_4
                    3255   BreakPointClear_1:
                    3256   ; }
                    3257   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001FEE  2002      3258          move.l    D2,D0
00001FF0  E588      3259          lsl.l     #2,D0
00001FF2  41F9 0B00 3260          lea       _BreakPointSetOrCleared.L,A0
00001FF6  015E      
00001FF8  2030 0800 3261          move.l    0(A0,D0.L),D0
00001FFC  0C80 0000 3262          cmp.l     #1,D0
00002000  0001      
00002002  6600 005A 3263          bne       BreakPointClear_5
                    3264   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00002006  2002      3265          move.l    D2,D0
00002008  E588      3266          lsl.l     #2,D0
0000200A  41F9 0B00 3267          lea       _BreakPointAddress.L,A0
0000200E  012E      
00002010  2D70 0800 3268          move.l    0(A0,D0.L),-4(A6)
00002014  FFFC      
                    3269   ; BreakPointAddress[i] = 0 ;
00002016  2002      3270          move.l    D2,D0
00002018  E588      3271          lsl.l     #2,D0
0000201A  41F9 0B00 3272          lea       _BreakPointAddress.L,A0
0000201E  012E      
00002020  42B0 0800 3273          clr.l     0(A0,D0.L)
                    3274   ; BreakPointSetOrCleared[i] = 0 ;
00002024  2002      3275          move.l    D2,D0
00002026  E588      3276          lsl.l     #2,D0
00002028  41F9 0B00 3277          lea       _BreakPointSetOrCleared.L,A0
0000202C  015E      
0000202E  42B0 0800 3278          clr.l     0(A0,D0.L)
                    3279   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002032  2002      3280          move.l    D2,D0
00002034  E388      3281          lsl.l     #1,D0
00002036  41F9 0B00 3282          lea       _BreakPointInstruction.L,A0
0000203A  014E      
0000203C  226E FFFC 3283          move.l    -4(A6),A1
00002040  32B0 0800 3284          move.w    0(A0,D0.L),(A1)
                    3285   ; BreakPointInstruction[i] = 0 ;
00002044  2002      3286          move.l    D2,D0
00002046  E388      3287          lsl.l     #1,D0
00002048  41F9 0B00 3288          lea       _BreakPointInstruction.L,A0
0000204C  014E      
0000204E  4270 0800 3289          clr.w     0(A0,D0.L)
                    3290   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00002052  4879 0000 3291          pea       @m68kde~1_81.L
00002056  6C4C      
00002058  4E92      3292          jsr       (A2)
0000205A  584F      3293          addq.w    #4,A7
0000205C  600A      3294          bra.s     BreakPointClear_6
                    3295   BreakPointClear_5:
                    3296   ; }
                    3297   ; else
                    3298   ; printf("\r\nBreak Point wasn't Set.....") ;
0000205E  4879 0000 3299          pea       @m68kde~1_82.L
00002062  6C6A      
00002064  4E92      3300          jsr       (A2)
00002066  584F      3301          addq.w    #4,A7
                    3302   BreakPointClear_6:
                    3303   ; BreakPointDisplay() ;
00002068  4EB8 1DF4 3304          jsr       _BreakPointDisplay
                    3305   ; return ;
                    3306   BreakPointClear_4:
0000206C  4CDF 0404 3307          movem.l   (A7)+,D2/A2
00002070  4E5E      3308          unlk      A6
00002072  4E75      3309          rts
                    3310   ; }
                    3311   ; void WatchPointClear(void)
                    3312   ; {
                    3313   _WatchPointClear:
00002074  48E7 2020 3314          movem.l   D2/A2,-(A7)
00002078  45F9 0000 3315          lea       _printf.L,A2
0000207C  5B46      
                    3316   ; unsigned int i ;
                    3317   ; WatchPointDisplay() ;
0000207E  4EB8 1EEE 3318          jsr       _WatchPointDisplay
                    3319   ; printf("\r\nEnter Watch Point Number: ") ;
00002082  4879 0000 3320          pea       @m68kde~1_83.L
00002086  6C88      
00002088  4E92      3321          jsr       (A2)
0000208A  584F      3322          addq.w    #4,A7
                    3323   ; i = xtod(_getch()) ;           // get watch pointer number
0000208C  2F00      3324          move.l    D0,-(A7)
0000208E  4EB8 0B68 3325          jsr       __getch
00002092  2200      3326          move.l    D0,D1
00002094  201F      3327          move.l    (A7)+,D0
00002096  2F01      3328          move.l    D1,-(A7)
00002098  4EB8 0BD2 3329          jsr       _xtod
0000209C  584F      3330          addq.w    #4,A7
0000209E  C0BC 0000 3331          and.l     #255,D0
000020A2  00FF      
000020A4  2400      3332          move.l    D0,D2
                    3333   ; if((i < 0) || (i > 7))   {
000020A6  0C82 0000 3334          cmp.l     #0,D2
000020AA  0000      
000020AC  6508      3335          blo.s     WatchPointClear_3
000020AE  0C82 0000 3336          cmp.l     #7,D2
000020B2  0007      
000020B4  630E      3337          bls.s     WatchPointClear_1
                    3338   WatchPointClear_3:
                    3339   ; printf("\r\nIllegal Range : Use 0 - 7") ;
000020B6  4879 0000 3340          pea       @m68kde~1_80.L
000020BA  6C30      
000020BC  4E92      3341          jsr       (A2)
000020BE  584F      3342          addq.w    #4,A7
                    3343   ; return ;
000020C0  6000 004E 3344          bra       WatchPointClear_4
                    3345   WatchPointClear_1:
                    3346   ; }
                    3347   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
000020C4  2002      3348          move.l    D2,D0
000020C6  E588      3349          lsl.l     #2,D0
000020C8  41F9 0B00 3350          lea       _WatchPointSetOrCleared.L,A0
000020CC  01A2      
000020CE  2030 0800 3351          move.l    0(A0,D0.L),D0
000020D2  0C80 0000 3352          cmp.l     #1,D0
000020D6  0001      
000020D8  6628      3353          bne.s     WatchPointClear_5
                    3354   ; WatchPointAddress[i] = 0 ;
000020DA  2002      3355          move.l    D2,D0
000020DC  E588      3356          lsl.l     #2,D0
000020DE  41F9 0B00 3357          lea       _WatchPointAddress.L,A0
000020E2  0182      
000020E4  42B0 0800 3358          clr.l     0(A0,D0.L)
                    3359   ; WatchPointSetOrCleared[i] = 0 ;
000020E8  2002      3360          move.l    D2,D0
000020EA  E588      3361          lsl.l     #2,D0
000020EC  41F9 0B00 3362          lea       _WatchPointSetOrCleared.L,A0
000020F0  01A2      
000020F2  42B0 0800 3363          clr.l     0(A0,D0.L)
                    3364   ; printf("\r\nWatch Point Cleared.....\r\n") ;
000020F6  4879 0000 3365          pea       @m68kde~1_84.L
000020FA  6CA6      
000020FC  4E92      3366          jsr       (A2)
000020FE  584F      3367          addq.w    #4,A7
00002100  600A      3368          bra.s     WatchPointClear_6
                    3369   WatchPointClear_5:
                    3370   ; }
                    3371   ; else
                    3372   ; printf("\r\nWatch Point Was not Set.....") ;
00002102  4879 0000 3373          pea       @m68kde~1_85.L
00002106  6CC4      
00002108  4E92      3374          jsr       (A2)
0000210A  584F      3375          addq.w    #4,A7
                    3376   WatchPointClear_6:
                    3377   ; WatchPointDisplay() ;
0000210C  4EB8 1EEE 3378          jsr       _WatchPointDisplay
                    3379   ; return ;
                    3380   WatchPointClear_4:
00002110  4CDF 0404 3381          movem.l   (A7)+,D2/A2
00002114  4E75      3382          rts
                    3383   ; }
                    3384   ; void DisableBreakPoints(void)
                    3385   ; {
                    3386   _DisableBreakPoints:
00002116  4E56 FFFC 3387          link      A6,#-4
0000211A  2F02      3388          move.l    D2,-(A7)
                    3389   ; int i ;
                    3390   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3391   ; for(i = 0; i < 8; i++)  {
0000211C  4282      3392          clr.l     D2
                    3393   DisableBreakPoints_1:
0000211E  0C82 0000 3394          cmp.l     #8,D2
00002122  0008      
00002124  6C00 003E 3395          bge       DisableBreakPoints_3
                    3396   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00002128  2002      3397          move.l    D2,D0
0000212A  E588      3398          lsl.l     #2,D0
0000212C  41F9 0B00 3399          lea       _BreakPointSetOrCleared.L,A0
00002130  015E      
00002132  2030 0800 3400          move.l    0(A0,D0.L),D0
00002136  0C80 0000 3401          cmp.l     #1,D0
0000213A  0001      
0000213C  6622      3402          bne.s     DisableBreakPoints_4
                    3403   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
0000213E  2002      3404          move.l    D2,D0
00002140  E588      3405          lsl.l     #2,D0
00002142  41F9 0B00 3406          lea       _BreakPointAddress.L,A0
00002146  012E      
00002148  2D70 0800 3407          move.l    0(A0,D0.L),-4(A6)
0000214C  FFFC      
                    3408   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
0000214E  2002      3409          move.l    D2,D0
00002150  E388      3410          lsl.l     #1,D0
00002152  41F9 0B00 3411          lea       _BreakPointInstruction.L,A0
00002156  014E      
00002158  226E FFFC 3412          move.l    -4(A6),A1
0000215C  32B0 0800 3413          move.w    0(A0,D0.L),(A1)
                    3414   DisableBreakPoints_4:
00002160  5282      3415          addq.l    #1,D2
00002162  60BA      3416          bra       DisableBreakPoints_1
                    3417   DisableBreakPoints_3:
00002164  241F      3418          move.l    (A7)+,D2
00002166  4E5E      3419          unlk      A6
00002168  4E75      3420          rts
                    3421   ; }
                    3422   ; }
                    3423   ; }
                    3424   ; void EnableBreakPoints(void)
                    3425   ; {
                    3426   _EnableBreakPoints:
0000216A  4E56 FFFC 3427          link      A6,#-4
0000216E  2F02      3428          move.l    D2,-(A7)
                    3429   ; int i ;
                    3430   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3431   ; for(i = 0; i < 8; i++)  {
00002170  4282      3432          clr.l     D2
                    3433   EnableBreakPoints_1:
00002172  0C82 0000 3434          cmp.l     #8,D2
00002176  0008      
00002178  6C32      3435          bge.s     EnableBreakPoints_3
                    3436   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
0000217A  2002      3437          move.l    D2,D0
0000217C  E588      3438          lsl.l     #2,D0
0000217E  41F9 0B00 3439          lea       _BreakPointSetOrCleared.L,A0
00002182  015E      
00002184  2030 0800 3440          move.l    0(A0,D0.L),D0
00002188  0C80 0000 3441          cmp.l     #1,D0
0000218C  0001      
0000218E  6618      3442          bne.s     EnableBreakPoints_4
                    3443   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002190  2002      3444          move.l    D2,D0
00002192  E588      3445          lsl.l     #2,D0
00002194  41F9 0B00 3446          lea       _BreakPointAddress.L,A0
00002198  012E      
0000219A  2D70 0800 3447          move.l    0(A0,D0.L),-4(A6)
0000219E  FFFC      
                    3448   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
000021A0  206E FFFC 3449          move.l    -4(A6),A0
000021A4  30BC 4E4E 3450          move.w    #20046,(A0)
                    3451   EnableBreakPoints_4:
000021A8  5282      3452          addq.l    #1,D2
000021AA  60C6      3453          bra       EnableBreakPoints_1
                    3454   EnableBreakPoints_3:
000021AC  241F      3455          move.l    (A7)+,D2
000021AE  4E5E      3456          unlk      A6
000021B0  4E75      3457          rts
                    3458   ; }
                    3459   ; }
                    3460   ; }
                    3461   ; void KillAllBreakPoints(void)
                    3462   ; {
                    3463   _KillAllBreakPoints:
000021B2  4E56 FFFC 3464          link      A6,#-4
000021B6  2F02      3465          move.l    D2,-(A7)
                    3466   ; int i ;
                    3467   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3468   ; for(i = 0; i < 8; i++)  {
000021B8  4282      3469          clr.l     D2
                    3470   KillAllBreakPoints_1:
000021BA  0C82 0000 3471          cmp.l     #8,D2
000021BE  0008      
000021C0  6C00 0052 3472          bge       KillAllBreakPoints_3
                    3473   ; // clear BP
                    3474   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000021C4  2002      3475          move.l    D2,D0
000021C6  E588      3476          lsl.l     #2,D0
000021C8  41F9 0B00 3477          lea       _BreakPointAddress.L,A0
000021CC  012E      
000021CE  2D70 0800 3478          move.l    0(A0,D0.L),-4(A6)
000021D2  FFFC      
                    3479   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
000021D4  2002      3480          move.l    D2,D0
000021D6  E388      3481          lsl.l     #1,D0
000021D8  41F9 0B00 3482          lea       _BreakPointInstruction.L,A0
000021DC  014E      
000021DE  226E FFFC 3483          move.l    -4(A6),A1
000021E2  32B0 0800 3484          move.w    0(A0,D0.L),(A1)
                    3485   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
000021E6  2002      3486          move.l    D2,D0
000021E8  E588      3487          lsl.l     #2,D0
000021EA  41F9 0B00 3488          lea       _BreakPointAddress.L,A0
000021EE  012E      
000021F0  42B0 0800 3489          clr.l     0(A0,D0.L)
                    3490   ; BreakPointInstruction[i] = 0 ;
000021F4  2002      3491          move.l    D2,D0
000021F6  E388      3492          lsl.l     #1,D0
000021F8  41F9 0B00 3493          lea       _BreakPointInstruction.L,A0
000021FC  014E      
000021FE  4270 0800 3494          clr.w     0(A0,D0.L)
                    3495   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002202  2002      3496          move.l    D2,D0
00002204  E588      3497          lsl.l     #2,D0
00002206  41F9 0B00 3498          lea       _BreakPointSetOrCleared.L,A0
0000220A  015E      
0000220C  42B0 0800 3499          clr.l     0(A0,D0.L)
00002210  5282      3500          addq.l    #1,D2
00002212  60A6      3501          bra       KillAllBreakPoints_1
                    3502   KillAllBreakPoints_3:
00002214  241F      3503          move.l    (A7)+,D2
00002216  4E5E      3504          unlk      A6
00002218  4E75      3505          rts
                    3506   ; }
                    3507   ; //BreakPointDisplay() ;       // display the break points
                    3508   ; }
                    3509   ; void KillAllWatchPoints(void)
                    3510   ; {
                    3511   _KillAllWatchPoints:
0000221A  2F02      3512          move.l    D2,-(A7)
                    3513   ; int i ;
                    3514   ; for(i = 0; i < 8; i++)  {
0000221C  4282      3515          clr.l     D2
                    3516   KillAllWatchPoints_1:
0000221E  0C82 0000 3517          cmp.l     #8,D2
00002222  0008      
00002224  6C20      3518          bge.s     KillAllWatchPoints_3
                    3519   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002226  2002      3520          move.l    D2,D0
00002228  E588      3521          lsl.l     #2,D0
0000222A  41F9 0B00 3522          lea       _WatchPointAddress.L,A0
0000222E  0182      
00002230  42B0 0800 3523          clr.l     0(A0,D0.L)
                    3524   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002234  2002      3525          move.l    D2,D0
00002236  E588      3526          lsl.l     #2,D0
00002238  41F9 0B00 3527          lea       _WatchPointSetOrCleared.L,A0
0000223C  01A2      
0000223E  42B0 0800 3528          clr.l     0(A0,D0.L)
00002242  5282      3529          addq.l    #1,D2
00002244  60D8      3530          bra       KillAllWatchPoints_1
                    3531   KillAllWatchPoints_3:
00002246  241F      3532          move.l    (A7)+,D2
00002248  4E75      3533          rts
                    3534   ; }
                    3535   ; //WatchPointDisplay() ;       // display the break points
                    3536   ; }
                    3537   ; void SetBreakPoint(void)
                    3538   ; {
                    3539   _SetBreakPoint:
0000224A  4E56 FFFC 3540          link      A6,#-4
0000224E  48E7 3830 3541          movem.l   D2/D3/D4/A2/A3,-(A7)
00002252  45F9 0000 3542          lea       _printf.L,A2
00002256  5B46      
00002258  47F9 0B00 3543          lea       _BreakPointSetOrCleared.L,A3
0000225C  015E      
                    3544   ; int i ;
                    3545   ; int BPNumber;
                    3546   ; int BPAddress;
                    3547   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3548   ; // see if any free break points
                    3549   ; for(i = 0; i < 8; i ++) {
0000225E  4282      3550          clr.l     D2
                    3551   SetBreakPoint_1:
00002260  0C82 0000 3552          cmp.l     #8,D2
00002264  0008      
00002266  6C10      3553          bge.s     SetBreakPoint_3
                    3554   ; if( BreakPointSetOrCleared[i] == 0)
00002268  2002      3555          move.l    D2,D0
0000226A  E588      3556          lsl.l     #2,D0
0000226C  2033 0800 3557          move.l    0(A3,D0.L),D0
00002270  6602      3558          bne.s     SetBreakPoint_4
                    3559   ; break ;         // if spare BP found allow user to set it
00002272  6004      3560          bra.s     SetBreakPoint_3
                    3561   SetBreakPoint_4:
00002274  5282      3562          addq.l    #1,D2
00002276  60E8      3563          bra       SetBreakPoint_1
                    3564   SetBreakPoint_3:
                    3565   ; }
                    3566   ; if(i == 8) {
00002278  0C82 0000 3567          cmp.l     #8,D2
0000227C  0008      
0000227E  660E      3568          bne.s     SetBreakPoint_6
                    3569   ; printf("\r\nNo FREE Break Points.....") ;
00002280  4879 0000 3570          pea       @m68kde~1_86.L
00002284  6CE4      
00002286  4E92      3571          jsr       (A2)
00002288  584F      3572          addq.w    #4,A7
                    3573   ; return ;
0000228A  6000 00EC 3574          bra       SetBreakPoint_15
                    3575   SetBreakPoint_6:
                    3576   ; }
                    3577   ; printf("\r\nBreak Point Address: ") ;
0000228E  4879 0000 3578          pea       @m68kde~1_87.L
00002292  6D00      
00002294  4E92      3579          jsr       (A2)
00002296  584F      3580          addq.w    #4,A7
                    3581   ; BPAddress = Get8HexDigits(0) ;
00002298  42A7      3582          clr.l     -(A7)
0000229A  4EB8 0CA4 3583          jsr       _Get8HexDigits
0000229E  584F      3584          addq.w    #4,A7
000022A0  2600      3585          move.l    D0,D3
                    3586   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
000022A2  2803      3587          move.l    D3,D4
                    3588   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
000022A4  2003      3589          move.l    D3,D0
000022A6  C0BC 0000 3590          and.l     #1,D0
000022AA  0001      
000022AC  0C80 0000 3591          cmp.l     #1,D0
000022B0  0001      
000022B2  660E      3592          bne.s     SetBreakPoint_9
                    3593   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
000022B4  4879 0000 3594          pea       @m68kde~1_88.L
000022B8  6D18      
000022BA  4E92      3595          jsr       (A2)
000022BC  584F      3596          addq.w    #4,A7
                    3597   ; return ;
000022BE  6000 00B8 3598          bra       SetBreakPoint_15
                    3599   SetBreakPoint_9:
                    3600   ; }
                    3601   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
000022C2  0C83 0000 3602          cmp.l     #32768,D3
000022C6  8000      
000022C8  640E      3603          bhs.s     SetBreakPoint_11
                    3604   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
000022CA  4879 0000 3605          pea       @m68kde~1_89.L
000022CE  6D4E      
000022D0  4E92      3606          jsr       (A2)
000022D2  584F      3607          addq.w    #4,A7
                    3608   ; return ;
000022D4  6000 00A2 3609          bra       SetBreakPoint_15
                    3610   SetBreakPoint_11:
                    3611   ; }
                    3612   ; // search for first free bp or existing same BP
                    3613   ; for(i = 0; i < 8; i++)  {
000022D8  4282      3614          clr.l     D2
                    3615   SetBreakPoint_13:
000022DA  0C82 0000 3616          cmp.l     #8,D2
000022DE  0008      
000022E0  6C00 0096 3617          bge       SetBreakPoint_15
                    3618   ; if(BreakPointAddress[i] == BPAddress)   {
000022E4  2002      3619          move.l    D2,D0
000022E6  E588      3620          lsl.l     #2,D0
000022E8  41F9 0B00 3621          lea       _BreakPointAddress.L,A0
000022EC  012E      
000022EE  B6B0 0800 3622          cmp.l     0(A0,D0.L),D3
000022F2  6610      3623          bne.s     SetBreakPoint_16
                    3624   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
000022F4  2F03      3625          move.l    D3,-(A7)
000022F6  4879 0000 3626          pea       @m68kde~1_90.L
000022FA  6D96      
000022FC  4E92      3627          jsr       (A2)
000022FE  504F      3628          addq.w    #8,A7
                    3629   ; return ;
00002300  6000 0076 3630          bra       SetBreakPoint_15
                    3631   SetBreakPoint_16:
                    3632   ; }
                    3633   ; if(BreakPointSetOrCleared[i] == 0) {
00002304  2002      3634          move.l    D2,D0
00002306  E588      3635          lsl.l     #2,D0
00002308  2033 0800 3636          move.l    0(A3,D0.L),D0
0000230C  6600 0064 3637          bne       SetBreakPoint_18
                    3638   ; // set BP here
                    3639   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002310  2002      3640          move.l    D2,D0
00002312  E588      3641          lsl.l     #2,D0
00002314  27BC 0000 3642          move.l    #1,0(A3,D0.L)
00002318  0001 0800 
                    3643   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
0000231C  2044      3644          move.l    D4,A0
0000231E  2002      3645          move.l    D2,D0
00002320  E388      3646          lsl.l     #1,D0
00002322  43F9 0B00 3647          lea       _BreakPointInstruction.L,A1
00002326  014E      
00002328  3390 0800 3648          move.w    (A0),0(A1,D0.L)
                    3649   ; DisassembleInstruction(ProgramBreakPointAddress) ;
0000232C  2F04      3650          move.l    D4,-(A7)
0000232E  4EB9 0000 3651          jsr       _DisassembleInstruction
00002332  3AD2      
00002334  584F      3652          addq.w    #4,A7
                    3653   ; FormatInstructionForTrace() ;
00002336  4EB8 15AE 3654          jsr       _FormatInstructionForTrace
                    3655   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
0000233A  4879 0B00 3656          pea       _Instruction.L
0000233E  04E2      
00002340  2F04      3657          move.l    D4,-(A7)
00002342  4879 0000 3658          pea       @m68kde~1_91.L
00002346  6DCE      
00002348  4E92      3659          jsr       (A2)
0000234A  DEFC 000C 3660          add.w     #12,A7
                    3661   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000234E  2044      3662          move.l    D4,A0
00002350  30BC 4E4E 3663          move.w    #20046,(A0)
                    3664   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002354  2002      3665          move.l    D2,D0
00002356  E588      3666          lsl.l     #2,D0
00002358  41F9 0B00 3667          lea       _BreakPointAddress.L,A0
0000235C  012E      
0000235E  2183 0800 3668          move.l    D3,0(A0,D0.L)
                    3669   ; printf("\r\n") ;
00002362  4879 0000 3670          pea       @m68kde~1_1.L
00002366  6458      
00002368  4E92      3671          jsr       (A2)
0000236A  584F      3672          addq.w    #4,A7
                    3673   ; BreakPointDisplay() ;       // display the break points
0000236C  4EB8 1DF4 3674          jsr       _BreakPointDisplay
                    3675   ; return ;
00002370  6006      3676          bra.s     SetBreakPoint_15
                    3677   SetBreakPoint_18:
00002372  5282      3678          addq.l    #1,D2
00002374  6000 FF64 3679          bra       SetBreakPoint_13
                    3680   SetBreakPoint_15:
00002378  4CDF 0C1C 3681          movem.l   (A7)+,D2/D3/D4/A2/A3
0000237C  4E5E      3682          unlk      A6
0000237E  4E75      3683          rts
                    3684   ; }
                    3685   ; }
                    3686   ; }
                    3687   ; void SetWatchPoint(void)
                    3688   ; {
                    3689   _SetWatchPoint:
00002380  4E56 FFF8 3690          link      A6,#-8
00002384  48E7 3030 3691          movem.l   D2/D3/A2/A3,-(A7)
00002388  45F9 0000 3692          lea       _printf.L,A2
0000238C  5B46      
0000238E  47F9 0B00 3693          lea       _WatchPointSetOrCleared.L,A3
00002392  01A2      
                    3694   ; int i ;
                    3695   ; int WPNumber;
                    3696   ; int WPAddress;
                    3697   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3698   ; // see if any free break points
                    3699   ; for(i = 0; i < 8; i ++) {
00002394  4282      3700          clr.l     D2
                    3701   SetWatchPoint_1:
00002396  0C82 0000 3702          cmp.l     #8,D2
0000239A  0008      
0000239C  6C10      3703          bge.s     SetWatchPoint_3
                    3704   ; if( WatchPointSetOrCleared[i] == 0)
0000239E  2002      3705          move.l    D2,D0
000023A0  E588      3706          lsl.l     #2,D0
000023A2  2033 0800 3707          move.l    0(A3,D0.L),D0
000023A6  6602      3708          bne.s     SetWatchPoint_4
                    3709   ; break ;         // if spare WP found allow user to set it
000023A8  6004      3710          bra.s     SetWatchPoint_3
                    3711   SetWatchPoint_4:
000023AA  5282      3712          addq.l    #1,D2
000023AC  60E8      3713          bra       SetWatchPoint_1
                    3714   SetWatchPoint_3:
                    3715   ; }
                    3716   ; if(i == 8) {
000023AE  0C82 0000 3717          cmp.l     #8,D2
000023B2  0008      
000023B4  660E      3718          bne.s     SetWatchPoint_6
                    3719   ; printf("\r\nNo FREE Watch Points.....") ;
000023B6  4879 0000 3720          pea       @m68kde~1_92.L
000023BA  6E06      
000023BC  4E92      3721          jsr       (A2)
000023BE  584F      3722          addq.w    #4,A7
                    3723   ; return ;
000023C0  6000 008C 3724          bra       SetWatchPoint_11
                    3725   SetWatchPoint_6:
                    3726   ; }
                    3727   ; printf("\r\nWatch Point Address: ") ;
000023C4  4879 0000 3728          pea       @m68kde~1_93.L
000023C8  6E22      
000023CA  4E92      3729          jsr       (A2)
000023CC  584F      3730          addq.w    #4,A7
                    3731   ; WPAddress = Get8HexDigits(0) ;
000023CE  42A7      3732          clr.l     -(A7)
000023D0  4EB8 0CA4 3733          jsr       _Get8HexDigits
000023D4  584F      3734          addq.w    #4,A7
000023D6  2600      3735          move.l    D0,D3
                    3736   ; // search for first free wp or existing same wp
                    3737   ; for(i = 0; i < 8; i++)  {
000023D8  4282      3738          clr.l     D2
                    3739   SetWatchPoint_9:
000023DA  0C82 0000 3740          cmp.l     #8,D2
000023DE  0008      
000023E0  6C00 006C 3741          bge       SetWatchPoint_11
                    3742   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
000023E4  2002      3743          move.l    D2,D0
000023E6  E588      3744          lsl.l     #2,D0
000023E8  41F9 0B00 3745          lea       _WatchPointAddress.L,A0
000023EC  0182      
000023EE  B6B0 0800 3746          cmp.l     0(A0,D0.L),D3
000023F2  6614      3747          bne.s     SetWatchPoint_12
000023F4  4A83      3748          tst.l     D3
000023F6  6710      3749          beq.s     SetWatchPoint_12
                    3750   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
000023F8  2F03      3751          move.l    D3,-(A7)
000023FA  4879 0000 3752          pea       @m68kde~1_94.L
000023FE  6E3A      
00002400  4E92      3753          jsr       (A2)
00002402  504F      3754          addq.w    #8,A7
                    3755   ; return ;
00002404  6000 0048 3756          bra       SetWatchPoint_11
                    3757   SetWatchPoint_12:
                    3758   ; }
                    3759   ; if(WatchPointSetOrCleared[i] == 0) {
00002408  2002      3760          move.l    D2,D0
0000240A  E588      3761          lsl.l     #2,D0
0000240C  2033 0800 3762          move.l    0(A3,D0.L),D0
00002410  6600 0038 3763          bne       SetWatchPoint_14
                    3764   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002414  2002      3765          move.l    D2,D0
00002416  E588      3766          lsl.l     #2,D0
00002418  27BC 0000 3767          move.l    #1,0(A3,D0.L)
0000241C  0001 0800 
                    3768   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002420  2F03      3769          move.l    D3,-(A7)
00002422  4879 0000 3770          pea       @m68kde~1_95.L
00002426  6E70      
00002428  4E92      3771          jsr       (A2)
0000242A  504F      3772          addq.w    #8,A7
                    3773   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
0000242C  2002      3774          move.l    D2,D0
0000242E  E588      3775          lsl.l     #2,D0
00002430  41F9 0B00 3776          lea       _WatchPointAddress.L,A0
00002434  0182      
00002436  2183 0800 3777          move.l    D3,0(A0,D0.L)
                    3778   ; printf("\r\n") ;
0000243A  4879 0000 3779          pea       @m68kde~1_1.L
0000243E  6458      
00002440  4E92      3780          jsr       (A2)
00002442  584F      3781          addq.w    #4,A7
                    3782   ; WatchPointDisplay() ;       // display the break points
00002444  4EB8 1EEE 3783          jsr       _WatchPointDisplay
                    3784   ; return ;
00002448  6004      3785          bra.s     SetWatchPoint_11
                    3786   SetWatchPoint_14:
0000244A  5282      3787          addq.l    #1,D2
0000244C  608C      3788          bra       SetWatchPoint_9
                    3789   SetWatchPoint_11:
0000244E  4CDF 0C0C 3790          movem.l   (A7)+,D2/D3/A2/A3
00002452  4E5E      3791          unlk      A6
00002454  4E75      3792          rts
                    3793   ; }
                    3794   ; }
                    3795   ; }
                    3796   ; void HandleBreakPoint(void)
                    3797   ; {
                    3798   _HandleBreakPoint:
00002456  4E56 FFFC 3799          link      A6,#-4
0000245A  48E7 0038 3800          movem.l   A2/A3/A4,-(A7)
0000245E  45F9 0B00 3801          lea       _i.L,A2
00002462  00C4      
00002464  47F9 0000 3802          lea       _printf.L,A3
00002468  5B46      
0000246A  49F9 0B00 3803          lea       _PC.L,A4
0000246E  0120      
                    3804   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3805   ; // now we have to put the break point back to run the instruction
                    3806   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3807   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00002470  5594      3808          subq.l    #2,(A4)
                    3809   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00002472  4879 0000 3810          pea       @m68kde~1_96.L
00002476  6E96      
00002478  4E93      3811          jsr       (A3)
0000247A  584F      3812          addq.w    #4,A7
                    3813   ; printf("\r\nSingle Step : [ON]") ;
0000247C  4879 0000 3814          pea       @m68kde~1_97.L
00002480  6EAA      
00002482  4E93      3815          jsr       (A3)
00002484  584F      3816          addq.w    #4,A7
                    3817   ; printf("\r\nBreakPoints : [Enabled]") ;
00002486  4879 0000 3818          pea       @m68kde~1_98.L
0000248A  6EC0      
0000248C  4E93      3819          jsr       (A3)
0000248E  584F      3820          addq.w    #4,A7
                    3821   ; // now clear the break point (put original instruction back)
                    3822   ; ProgramBreakPointAddress = PC ;
00002490  2D54 FFFC 3823          move.l    (A4),-4(A6)
                    3824   ; for(i = 0; i < 8; i ++) {
00002494  4292      3825          clr.l     (A2)
                    3826   HandleBreakPoint_1:
00002496  2012      3827          move.l    (A2),D0
00002498  0C80 0000 3828          cmp.l     #8,D0
0000249C  0008      
0000249E  6400 0056 3829          bhs       HandleBreakPoint_3
                    3830   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000024A2  2012      3831          move.l    (A2),D0
000024A4  E588      3832          lsl.l     #2,D0
000024A6  41F9 0B00 3833          lea       _BreakPointAddress.L,A0
000024AA  012E      
000024AC  2230 0800 3834          move.l    0(A0,D0.L),D1
000024B0  B294      3835          cmp.l     (A4),D1
000024B2  6600 003E 3836          bne       HandleBreakPoint_4
                    3837   ; BreakPointAddress[i] = 0 ;
000024B6  2012      3838          move.l    (A2),D0
000024B8  E588      3839          lsl.l     #2,D0
000024BA  41F9 0B00 3840          lea       _BreakPointAddress.L,A0
000024BE  012E      
000024C0  42B0 0800 3841          clr.l     0(A0,D0.L)
                    3842   ; BreakPointSetOrCleared[i] = 0 ;
000024C4  2012      3843          move.l    (A2),D0
000024C6  E588      3844          lsl.l     #2,D0
000024C8  41F9 0B00 3845          lea       _BreakPointSetOrCleared.L,A0
000024CC  015E      
000024CE  42B0 0800 3846          clr.l     0(A0,D0.L)
                    3847   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000024D2  2012      3848          move.l    (A2),D0
000024D4  E388      3849          lsl.l     #1,D0
000024D6  41F9 0B00 3850          lea       _BreakPointInstruction.L,A0
000024DA  014E      
000024DC  226E FFFC 3851          move.l    -4(A6),A1
000024E0  32B0 0800 3852          move.w    0(A0,D0.L),(A1)
                    3853   ; BreakPointInstruction[i] = 0 ;
000024E4  2012      3854          move.l    (A2),D0
000024E6  E388      3855          lsl.l     #1,D0
000024E8  41F9 0B00 3856          lea       _BreakPointInstruction.L,A0
000024EC  014E      
000024EE  4270 0800 3857          clr.w     0(A0,D0.L)
                    3858   HandleBreakPoint_4:
000024F2  5292      3859          addq.l    #1,(A2)
000024F4  60A0      3860          bra       HandleBreakPoint_1
                    3861   HandleBreakPoint_3:
                    3862   ; }
                    3863   ; }
                    3864   ; DumpRegisters() ;
000024F6  4EB8 1622 3865          jsr       _DumpRegisters
                    3866   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000024FA  4879 0000 3867          pea       @m68kde~1_59.L
000024FE  6A22      
00002500  4E93      3868          jsr       (A3)
00002502  584F      3869          addq.w    #4,A7
                    3870   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002504  4879 0000 3871          pea       @m68kde~1_99.L
00002508  6EDA      
0000250A  4E93      3872          jsr       (A3)
0000250C  584F      3873          addq.w    #4,A7
                    3874   ; menu() ;
0000250E  4EB9 0000 3875          jsr       _menu
00002512  2764      
00002514  4CDF 1C00 3876          movem.l   (A7)+,A2/A3/A4
00002518  4E5E      3877          unlk      A6
0000251A  4E75      3878          rts
                    3879   ; }
                    3880   ; void UnknownCommand()
                    3881   ; {
                    3882   _UnknownCommand:
                    3883   ; printf("\r\nUnknown Command.....\r\n") ;
0000251C  4879 0000 3884          pea       @m68kde~1_100.L
00002520  6F02      
00002522  4EB9 0000 3885          jsr       _printf
00002526  5B46      
00002528  584F      3886          addq.w    #4,A7
                    3887   ; Help() ;
0000252A  4EB9 0000 3888          jsr       _Help
0000252E  2680      
00002530  4E75      3889          rts
                    3890   ; }
                    3891   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3892   ; void CallDebugMonitor(void)
                    3893   ; {
                    3894   _CallDebugMonitor:
                    3895   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002532  4879 0000 3896          pea       @m68kde~1_101.L
00002536  6F1C      
00002538  4EB9 0000 3897          jsr       _printf
0000253C  5B46      
0000253E  584F      3898          addq.w    #4,A7
                    3899   ; menu();
00002540  4EB9 0000 3900          jsr       _menu
00002544  2764      
00002546  4E75      3901          rts
                    3902   ; }
                    3903   ; void Breakpoint(void)
                    3904   ; {
                    3905   _Breakpoint:
00002548  2F02      3906          move.l    D2,-(A7)
                    3907   ; char c;
                    3908   ; c = toupper(_getch());
0000254A  2F00      3909          move.l    D0,-(A7)
0000254C  4EB8 0B68 3910          jsr       __getch
00002550  2200      3911          move.l    D0,D1
00002552  201F      3912          move.l    (A7)+,D0
00002554  2F01      3913          move.l    D1,-(A7)
00002556  4EB9 0000 3914          jsr       _toupper
0000255A  5B2A      
0000255C  584F      3915          addq.w    #4,A7
0000255E  1400      3916          move.b    D0,D2
                    3917   ; if( c == (char)('D'))                                      // BreakPoint Display
00002560  0C02 0044 3918          cmp.b     #68,D2
00002564  6608      3919          bne.s     Breakpoint_1
                    3920   ; BreakPointDisplay() ;
00002566  4EB8 1DF4 3921          jsr       _BreakPointDisplay
0000256A  6000 0054 3922          bra       Breakpoint_10
                    3923   Breakpoint_1:
                    3924   ; else if(c == (char)('K')) {                                 // breakpoint Kill
0000256E  0C02 004B 3925          cmp.b     #75,D2
00002572  6630      3926          bne.s     Breakpoint_3
                    3927   ; printf("\r\nKill All Break Points...(y/n)?") ;
00002574  4879 0000 3928          pea       @m68kde~1_102.L
00002578  6F3C      
0000257A  4EB9 0000 3929          jsr       _printf
0000257E  5B46      
00002580  584F      3930          addq.w    #4,A7
                    3931   ; c = toupper(_getch());
00002582  2F00      3932          move.l    D0,-(A7)
00002584  4EB8 0B68 3933          jsr       __getch
00002588  2200      3934          move.l    D0,D1
0000258A  201F      3935          move.l    (A7)+,D0
0000258C  2F01      3936          move.l    D1,-(A7)
0000258E  4EB9 0000 3937          jsr       _toupper
00002592  5B2A      
00002594  584F      3938          addq.w    #4,A7
00002596  1400      3939          move.b    D0,D2
                    3940   ; if(c == (char)('Y'))
00002598  0C02 0059 3941          cmp.b     #89,D2
0000259C  6604      3942          bne.s     Breakpoint_5
                    3943   ; KillAllBreakPoints() ;
0000259E  4EB8 21B2 3944          jsr       _KillAllBreakPoints
                    3945   Breakpoint_5:
000025A2  601C      3946          bra.s     Breakpoint_10
                    3947   Breakpoint_3:
                    3948   ; }
                    3949   ; else if(c == (char)('S')) {
000025A4  0C02 0053 3950          cmp.b     #83,D2
000025A8  6606      3951          bne.s     Breakpoint_7
                    3952   ; SetBreakPoint() ;
000025AA  4EB8 224A 3953          jsr       _SetBreakPoint
000025AE  6010      3954          bra.s     Breakpoint_10
                    3955   Breakpoint_7:
                    3956   ; }
                    3957   ; else if(c == (char)('C')) {
000025B0  0C02 0043 3958          cmp.b     #67,D2
000025B4  6606      3959          bne.s     Breakpoint_9
                    3960   ; BreakPointClear() ;
000025B6  4EB8 1F9A 3961          jsr       _BreakPointClear
000025BA  6004      3962          bra.s     Breakpoint_10
                    3963   Breakpoint_9:
                    3964   ; }
                    3965   ; else
                    3966   ; UnknownCommand() ;
000025BC  4EB8 251C 3967          jsr       _UnknownCommand
                    3968   Breakpoint_10:
000025C0  241F      3969          move.l    (A7)+,D2
000025C2  4E75      3970          rts
                    3971   ; }
                    3972   ; void Watchpoint(void)
                    3973   ; {
                    3974   _Watchpoint:
000025C4  2F02      3975          move.l    D2,-(A7)
                    3976   ; char c;
                    3977   ; c = toupper(_getch());
000025C6  2F00      3978          move.l    D0,-(A7)
000025C8  4EB8 0B68 3979          jsr       __getch
000025CC  2200      3980          move.l    D0,D1
000025CE  201F      3981          move.l    (A7)+,D0
000025D0  2F01      3982          move.l    D1,-(A7)
000025D2  4EB9 0000 3983          jsr       _toupper
000025D6  5B2A      
000025D8  584F      3984          addq.w    #4,A7
000025DA  1400      3985          move.b    D0,D2
                    3986   ; if( c == (char)('D'))                                      // WatchPoint Display
000025DC  0C02 0044 3987          cmp.b     #68,D2
000025E0  6608      3988          bne.s     Watchpoint_1
                    3989   ; WatchPointDisplay() ;
000025E2  4EB8 1EEE 3990          jsr       _WatchPointDisplay
000025E6  6000 0054 3991          bra       Watchpoint_10
                    3992   Watchpoint_1:
                    3993   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
000025EA  0C02 004B 3994          cmp.b     #75,D2
000025EE  6630      3995          bne.s     Watchpoint_3
                    3996   ; printf("\r\nKill All Watch Points...(y/n)?") ;
000025F0  4879 0000 3997          pea       @m68kde~1_103.L
000025F4  6F5E      
000025F6  4EB9 0000 3998          jsr       _printf
000025FA  5B46      
000025FC  584F      3999          addq.w    #4,A7
                    4000   ; c = toupper(_getch());
000025FE  2F00      4001          move.l    D0,-(A7)
00002600  4EB8 0B68 4002          jsr       __getch
00002604  2200      4003          move.l    D0,D1
00002606  201F      4004          move.l    (A7)+,D0
00002608  2F01      4005          move.l    D1,-(A7)
0000260A  4EB9 0000 4006          jsr       _toupper
0000260E  5B2A      
00002610  584F      4007          addq.w    #4,A7
00002612  1400      4008          move.b    D0,D2
                    4009   ; if(c == (char)('Y'))
00002614  0C02 0059 4010          cmp.b     #89,D2
00002618  6604      4011          bne.s     Watchpoint_5
                    4012   ; KillAllWatchPoints() ;
0000261A  4EB8 221A 4013          jsr       _KillAllWatchPoints
                    4014   Watchpoint_5:
0000261E  601C      4015          bra.s     Watchpoint_10
                    4016   Watchpoint_3:
                    4017   ; }
                    4018   ; else if(c == (char)('S')) {
00002620  0C02 0053 4019          cmp.b     #83,D2
00002624  6606      4020          bne.s     Watchpoint_7
                    4021   ; SetWatchPoint() ;
00002626  4EB8 2380 4022          jsr       _SetWatchPoint
0000262A  6010      4023          bra.s     Watchpoint_10
                    4024   Watchpoint_7:
                    4025   ; }
                    4026   ; else if(c == (char)('C')) {
0000262C  0C02 0043 4027          cmp.b     #67,D2
00002630  6606      4028          bne.s     Watchpoint_9
                    4029   ; WatchPointClear() ;
00002632  4EB8 2074 4030          jsr       _WatchPointClear
00002636  6004      4031          bra.s     Watchpoint_10
                    4032   Watchpoint_9:
                    4033   ; }
                    4034   ; else
                    4035   ; UnknownCommand() ;
00002638  4EB8 251C 4036          jsr       _UnknownCommand
                    4037   Watchpoint_10:
0000263C  241F      4038          move.l    (A7)+,D2
0000263E  4E75      4039          rts
                    4040   ; }
                    4041   ; void DMenu(void)
                    4042   ; {
                    4043   _DMenu:
00002640  2F02      4044          move.l    D2,-(A7)
                    4045   ; char c;
                    4046   ; c = toupper(_getch());
00002642  2F00      4047          move.l    D0,-(A7)
00002644  4EB8 0B68 4048          jsr       __getch
00002648  2200      4049          move.l    D0,D1
0000264A  201F      4050          move.l    (A7)+,D0
0000264C  2F01      4051          move.l    D1,-(A7)
0000264E  4EB9 0000 4052          jsr       _toupper
00002652  5B2A      
00002654  584F      4053          addq.w    #4,A7
00002656  1400      4054          move.b    D0,D2
                    4055   ; if( c == (char)('U'))                                     // Dump Memory
00002658  0C02 0055 4056          cmp.b     #85,D2
0000265C  6606      4057          bne.s     DMenu_1
                    4058   ; DumpMemory() ;
0000265E  4EB8 0EE0 4059          jsr       _DumpMemory
00002662  6018      4060          bra.s     DMenu_4
                    4061   DMenu_1:
                    4062   ; else if(c == (char)('I'))   {
00002664  0C02 0049 4063          cmp.b     #73,D2
00002668  660E      4064          bne.s     DMenu_3
                    4065   ; DisableBreakPoints() ;
0000266A  4EB8 2116 4066          jsr       _DisableBreakPoints
                    4067   ; DisassembleProgram() ;
0000266E  4EB8 0D00 4068          jsr       _DisassembleProgram
                    4069   ; EnableBreakPoints() ;
00002672  4EB8 216A 4070          jsr       _EnableBreakPoints
00002676  6004      4071          bra.s     DMenu_4
                    4072   DMenu_3:
                    4073   ; }
                    4074   ; else
                    4075   ; UnknownCommand() ;
00002678  4EB8 251C 4076          jsr       _UnknownCommand
                    4077   DMenu_4:
0000267C  241F      4078          move.l    (A7)+,D2
0000267E  4E75      4079          rts
                    4080   ; }
                    4081   ; void Help(void)
                    4082   ; {
                    4083   _Help:
00002680  48E7 2020 4084          movem.l   D2/A2,-(A7)
00002684  45F9 0000 4085          lea       _printf.L,A2
00002688  5B46      
                    4086   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000268A  41F9 0000 4087          lea       @m68kde~1_104.L,A0
0000268E  6F80      
00002690  2408      4088          move.l    A0,D2
                    4089   ; printf(banner) ;
00002692  2F02      4090          move.l    D2,-(A7)
00002694  4E92      4091          jsr       (A2)
00002696  584F      4092          addq.w    #4,A7
                    4093   ; printf("\r\n  Debugger Command Summary") ;
00002698  4879 0000 4094          pea       @m68kde~1_105.L
0000269C  6FC4      
0000269E  4E92      4095          jsr       (A2)
000026A0  584F      4096          addq.w    #4,A7
                    4097   ; printf(banner) ;
000026A2  2F02      4098          move.l    D2,-(A7)
000026A4  4E92      4099          jsr       (A2)
000026A6  584F      4100          addq.w    #4,A7
                    4101   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000026A8  4879 0000 4102          pea       @m68kde~1_106.L
000026AC  6FE2      
000026AE  4E92      4103          jsr       (A2)
000026B0  584F      4104          addq.w    #4,A7
                    4105   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000026B2  4879 0000 4106          pea       @m68kde~1_107.L
000026B6  7026      
000026B8  4E92      4107          jsr       (A2)
000026BA  584F      4108          addq.w    #4,A7
                    4109   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000026BC  4879 0000 4110          pea       @m68kde~1_108.L
000026C0  705E      
000026C2  4E92      4111          jsr       (A2)
000026C4  584F      4112          addq.w    #4,A7
                    4113   ; printf("\r\n  DI           - Disassemble Program");
000026C6  4879 0000 4114          pea       @m68kde~1_109.L
000026CA  7098      
000026CC  4E92      4115          jsr       (A2)
000026CE  584F      4116          addq.w    #4,A7
                    4117   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
000026D0  4879 0000 4118          pea       @m68kde~1_110.L
000026D4  70C0      
000026D6  4E92      4119          jsr       (A2)
000026D8  584F      4120          addq.w    #4,A7
                    4121   ; printf("\r\n  E            - Enter String into Memory") ;
000026DA  4879 0000 4122          pea       @m68kde~1_111.L
000026DE  70F2      
000026E0  4E92      4123          jsr       (A2)
000026E2  584F      4124          addq.w    #4,A7
                    4125   ; printf("\r\n  F            - Fill Memory with Data") ;
000026E4  4879 0000 4126          pea       @m68kde~1_112.L
000026E8  711E      
000026EA  4E92      4127          jsr       (A2)
000026EC  584F      4128          addq.w    #4,A7
                    4129   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000026EE  2F39 0B00 4130          move.l    _PC.L,-(A7)
000026F2  0120      
000026F4  4879 0000 4131          pea       @m68kde~1_113.L
000026F8  7148      
000026FA  4E92      4132          jsr       (A2)
000026FC  504F      4133          addq.w    #8,A7
                    4134   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
000026FE  4879 0000 4135          pea       @m68kde~1_114.L
00002702  7182      
00002704  4E92      4136          jsr       (A2)
00002706  584F      4137          addq.w    #4,A7
                    4138   ; printf("\r\n  M            - Memory Examine and Change");
00002708  4879 0000 4139          pea       @m68kde~1_115.L
0000270C  71BA      
0000270E  4E92      4140          jsr       (A2)
00002710  584F      4141          addq.w    #4,A7
                    4142   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002712  4879 0000 4143          pea       @m68kde~1_116.L
00002716  71E8      
00002718  4E92      4144          jsr       (A2)
0000271A  584F      4145          addq.w    #4,A7
                    4146   ; printf("\r\n  R            - Display 68000 Registers") ;
0000271C  4879 0000 4147          pea       @m68kde~1_117.L
00002720  7222      
00002722  4E92      4148          jsr       (A2)
00002724  584F      4149          addq.w    #4,A7
                    4150   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002726  4879 0000 4151          pea       @m68kde~1_118.L
0000272A  724E      
0000272C  4E92      4152          jsr       (A2)
0000272E  584F      4153          addq.w    #4,A7
                    4154   ; printf("\r\n  TM           - Test Memory") ;
00002730  4879 0000 4155          pea       @m68kde~1_119.L
00002734  7280      
00002736  4E92      4156          jsr       (A2)
00002738  584F      4157          addq.w    #4,A7
                    4158   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000273A  4879 0000 4159          pea       @m68kde~1_120.L
0000273E  72A0      
00002740  4E92      4160          jsr       (A2)
00002742  584F      4161          addq.w    #4,A7
                    4162   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002744  4879 0000 4163          pea       @m68kde~1_121.L
00002748  72C8      
0000274A  4E92      4164          jsr       (A2)
0000274C  584F      4165          addq.w    #4,A7
                    4166   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000274E  4879 0000 4167          pea       @m68kde~1_122.L
00002752  72FE      
00002754  4E92      4168          jsr       (A2)
00002756  584F      4169          addq.w    #4,A7
                    4170   ; printf(banner) ;
00002758  2F02      4171          move.l    D2,-(A7)
0000275A  4E92      4172          jsr       (A2)
0000275C  584F      4173          addq.w    #4,A7
0000275E  4CDF 0404 4174          movem.l   (A7)+,D2/A2
00002762  4E75      4175          rts
                    4176   ; }
                    4177   ; void menu(void)
                    4178   ; {
                    4179   _menu:
00002764  48E7 303C 4180          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002768  45F9 0000 4181          lea       _printf.L,A2
0000276C  5B46      
0000276E  47F9 0B00 4182          lea       _Trace.L,A3
00002772  00D8      
00002774  49F9 0B00 4183          lea       _x.L,A4
00002778  00C8      
0000277A  4BF9 0B00 4184          lea       _SR.L,A5
0000277E  012C      
                    4185   ; char c,c1 ;
                    4186   ; while(1)    {
                    4187   menu_1:
                    4188   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002780  4EB8 0BA6 4189          jsr       _FlushKeyboard
                    4190   ; printf("\r\n#") ;
00002784  4879 0000 4191          pea       @m68kde~1_123.L
00002788  7336      
0000278A  4E92      4192          jsr       (A2)
0000278C  584F      4193          addq.w    #4,A7
                    4194   ; c = toupper(_getch());
0000278E  2F00      4195          move.l    D0,-(A7)
00002790  4EB8 0B68 4196          jsr       __getch
00002794  2200      4197          move.l    D0,D1
00002796  201F      4198          move.l    (A7)+,D0
00002798  2F01      4199          move.l    D1,-(A7)
0000279A  4EB9 0000 4200          jsr       _toupper
0000279E  5B2A      
000027A0  584F      4201          addq.w    #4,A7
000027A2  1400      4202          move.b    D0,D2
                    4203   ; if( c == (char)('L'))                  // load s record file
000027A4  0C02 004C 4204          cmp.b     #76,D2
000027A8  6608      4205          bne.s     menu_4
                    4206   ; Load_SRecordFile() ;
000027AA  4EB8 104A 4207          jsr       _Load_SRecordFile
000027AE  6000 021E 4208          bra       menu_46
                    4209   menu_4:
                    4210   ; else if( c == (char)('D'))             // dump memory
000027B2  0C02 0044 4211          cmp.b     #68,D2
000027B6  6608      4212          bne.s     menu_6
                    4213   ; DMenu() ;
000027B8  4EB8 2640 4214          jsr       _DMenu
000027BC  6000 0210 4215          bra       menu_46
                    4216   menu_6:
                    4217   ; else if( c == (char)('E'))             // Enter String into memory
000027C0  0C02 0045 4218          cmp.b     #69,D2
000027C4  660A      4219          bne.s     menu_8
                    4220   ; EnterString() ;
000027C6  4EB9 0000 4221          jsr       _EnterString
000027CA  2B16      
000027CC  6000 0200 4222          bra       menu_46
                    4223   menu_8:
                    4224   ; else if( c == (char)('F'))             // fill memory
000027D0  0C02 0046 4225          cmp.b     #70,D2
000027D4  6608      4226          bne.s     menu_10
                    4227   ; FillMemory() ;
000027D6  4EB8 0FD0 4228          jsr       _FillMemory
000027DA  6000 01F2 4229          bra       menu_46
                    4230   menu_10:
                    4231   ; else if( c == (char)('G'))  {           // go user program
000027DE  0C02 0047 4232          cmp.b     #71,D2
000027E2  6626      4233          bne.s     menu_12
                    4234   ; printf("\r\nProgram Running.....") ;
000027E4  4879 0000 4235          pea       @m68kde~1_124.L
000027E8  733A      
000027EA  4E92      4236          jsr       (A2)
000027EC  584F      4237          addq.w    #4,A7
                    4238   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000027EE  4879 0000 4239          pea       @m68kde~1_125.L
000027F2  7352      
000027F4  4E92      4240          jsr       (A2)
000027F6  584F      4241          addq.w    #4,A7
                    4242   ; GoFlag = 1 ;
000027F8  23FC 0000 4243          move.l    #1,_GoFlag.L
000027FC  0001 0B00 
00002800  00DC      
                    4244   ; go() ;
00002802  4EB8 08B8 4245          jsr       _go
00002806  6000 01C6 4246          bra       menu_46
                    4247   menu_12:
                    4248   ; }
                    4249   ; else if( c == (char)('M'))           // memory examine and modify
0000280A  0C02 004D 4250          cmp.b     #77,D2
0000280E  6608      4251          bne.s     menu_14
                    4252   ; MemoryChange() ;
00002810  4EB8 11D8 4253          jsr       _MemoryChange
00002814  6000 01B8 4254          bra       menu_46
                    4255   menu_14:
                    4256   ; else if( c == (char)('P'))            // Program Flash Chip
00002818  0C02 0050 4257          cmp.b     #80,D2
0000281C  6608      4258          bne.s     menu_16
                    4259   ; ProgramFlashChip() ;
0000281E  4EB8 12D8 4260          jsr       _ProgramFlashChip
00002822  6000 01AA 4261          bra       menu_46
                    4262   menu_16:
                    4263   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002826  0C02 0043 4264          cmp.b     #67,D2
0000282A  6608      4265          bne.s     menu_18
                    4266   ; LoadFromFlashChip();
0000282C  4EB8 14F0 4267          jsr       _LoadFromFlashChip
00002830  6000 019C 4268          bra       menu_46
                    4269   menu_18:
                    4270   ; else if( c == (char)('R'))             // dump registers
00002834  0C02 0052 4271          cmp.b     #82,D2
00002838  6608      4272          bne.s     menu_20
                    4273   ; DumpRegisters() ;
0000283A  4EB8 1622 4274          jsr       _DumpRegisters
0000283E  6000 018E 4275          bra       menu_46
                    4276   menu_20:
                    4277   ; else if( c == (char)('.'))           // change registers
00002842  0C02 002E 4278          cmp.b     #46,D2
00002846  6608      4279          bne.s     menu_22
                    4280   ; ChangeRegisters() ;
00002848  4EB8 1B38 4281          jsr       _ChangeRegisters
0000284C  6000 0180 4282          bra       menu_46
                    4283   menu_22:
                    4284   ; else if( c == (char)('B'))              // breakpoint command
00002850  0C02 0042 4285          cmp.b     #66,D2
00002854  6608      4286          bne.s     menu_24
                    4287   ; Breakpoint() ;
00002856  4EB8 2548 4288          jsr       _Breakpoint
0000285A  6000 0172 4289          bra       menu_46
                    4290   menu_24:
                    4291   ; else if( c == (char)('T'))  {          // Test command
0000285E  0C02 0054 4292          cmp.b     #84,D2
00002862  6600 0046 4293          bne       menu_26
                    4294   ; c1 = toupper(_getch()) ;
00002866  2F00      4295          move.l    D0,-(A7)
00002868  4EB8 0B68 4296          jsr       __getch
0000286C  2200      4297          move.l    D0,D1
0000286E  201F      4298          move.l    (A7)+,D0
00002870  2F01      4299          move.l    D1,-(A7)
00002872  4EB9 0000 4300          jsr       _toupper
00002876  5B2A      
00002878  584F      4301          addq.w    #4,A7
0000287A  1600      4302          move.b    D0,D3
                    4303   ; if(c1 == (char)('M'))                    // memory test
0000287C  0C03 004D 4304          cmp.b     #77,D3
00002880  6608      4305          bne.s     menu_28
                    4306   ; MemoryTest() ;
00002882  4EB9 0000 4307          jsr       _MemoryTest
00002886  2B66      
00002888  601C      4308          bra.s     menu_33
                    4309   menu_28:
                    4310   ; else if( c1 == (char)('S'))              // Switch Test command
0000288A  0C03 0053 4311          cmp.b     #83,D3
0000288E  6606      4312          bne.s     menu_30
                    4313   ; SwitchTest() ;
00002890  4EB8 0AA4 4314          jsr       _SwitchTest
00002894  6010      4315          bra.s     menu_33
                    4316   menu_30:
                    4317   ; else if( c1 == (char)('D'))              // display Test command
00002896  0C03 0044 4318          cmp.b     #68,D3
0000289A  6606      4319          bne.s     menu_32
                    4320   ; TestLEDS() ;
0000289C  4EB8 0A50 4321          jsr       _TestLEDS
000028A0  6004      4322          bra.s     menu_33
                    4323   menu_32:
                    4324   ; else
                    4325   ; UnknownCommand() ;
000028A2  4EB8 251C 4326          jsr       _UnknownCommand
                    4327   menu_33:
000028A6  6000 0126 4328          bra       menu_46
                    4329   menu_26:
                    4330   ; }
                    4331   ; else if( c == (char)(' ')) {             // Next instruction command
000028AA  0C02 0020 4332          cmp.b     #32,D2
000028AE  6636      4333          bne.s     menu_34
                    4334   ; DisableBreakPoints() ;
000028B0  4EB8 2116 4335          jsr       _DisableBreakPoints
                    4336   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000028B4  2013      4337          move.l    (A3),D0
000028B6  0C80 0000 4338          cmp.l     #1,D0
000028BA  0001      
000028BC  661A      4339          bne.s     menu_36
000028BE  2039 0B00 4340          move.l    _GoFlag.L,D0
000028C2  00DC      
000028C4  0C80 0000 4341          cmp.l     #1,D0
000028C8  0001      
000028CA  660C      4342          bne.s     menu_36
                    4343   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000028CC  13FC 0001 4344          move.b    #1,4194314
000028D0  0040 000A 
                    4345   ; return ;
000028D4  6000 00FC 4346          bra       menu_38
                    4347   menu_36:
                    4348   ; }
                    4349   ; else
                    4350   ; printf("\r\nError: Press 'G' first to start program") ;
000028D8  4879 0000 4351          pea       @m68kde~1_126.L
000028DC  7380      
000028DE  4E92      4352          jsr       (A2)
000028E0  584F      4353          addq.w    #4,A7
000028E2  6000 00EA 4354          bra       menu_46
                    4355   menu_34:
                    4356   ; }
                    4357   ; else if( c == (char)('S')) {             // single step
000028E6  0C02 0053 4358          cmp.b     #83,D2
000028EA  6600 008C 4359          bne       menu_39
                    4360   ; if(Trace == 0) {
000028EE  2013      4361          move.l    (A3),D0
000028F0  6600 0050 4362          bne       menu_41
                    4363   ; DisableBreakPoints() ;
000028F4  4EB8 2116 4364          jsr       _DisableBreakPoints
                    4365   ; printf("\r\nSingle Step  :[ON]") ;
000028F8  4879 0000 4366          pea       @m68kde~1_127.L
000028FC  73AA      
000028FE  4E92      4367          jsr       (A2)
00002900  584F      4368          addq.w    #4,A7
                    4369   ; printf("\r\nBreak Points :[Disabled]") ;
00002902  4879 0000 4370          pea       @m68kde~1_58.L
00002906  6A06      
00002908  4E92      4371          jsr       (A2)
0000290A  584F      4372          addq.w    #4,A7
                    4373   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
0000290C  0055 8000 4374          or.w      #32768,(A5)
                    4375   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002910  2F39 0B00 4376          move.l    _PC.L,-(A7)
00002914  0120      
00002916  4879 0000 4377          pea       @m68kde~1_128.L
0000291A  73C0      
0000291C  4E92      4378          jsr       (A2)
0000291E  504F      4379          addq.w    #8,A7
                    4380   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002920  4879 0000 4381          pea       @m68kde~1_129.L
00002924  73F4      
00002926  4E92      4382          jsr       (A2)
00002928  584F      4383          addq.w    #4,A7
                    4384   ; DumpRegisters() ;
0000292A  4EB8 1622 4385          jsr       _DumpRegisters
                    4386   ; Trace = 1;
0000292E  26BC 0000 4387          move.l    #1,(A3)
00002932  0001      
                    4388   ; TraceException = 1;
00002934  13FC 0001 4389          move.b    #1,4194314
00002938  0040 000A 
                    4390   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000293C  28B8 0074 4391          move.l    116,(A4)
00002940  6032      4392          bra.s     menu_42
                    4393   menu_41:
                    4394   ; }
                    4395   ; else {
                    4396   ; Trace = 0 ;
00002942  4293      4397          clr.l     (A3)
                    4398   ; TraceException = 0 ;
00002944  4239 0040 4399          clr.b     4194314
00002948  000A      
                    4400   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000294A  28B8 0074 4401          move.l    116,(A4)
                    4402   ; EnableBreakPoints() ;
0000294E  4EB8 216A 4403          jsr       _EnableBreakPoints
                    4404   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002952  0255 7FFF 4405          and.w     #32767,(A5)
                    4406   ; printf("\r\nSingle Step : [OFF]") ;
00002956  4879 0000 4407          pea       @m68kde~1_130.L
0000295A  7418      
0000295C  4E92      4408          jsr       (A2)
0000295E  584F      4409          addq.w    #4,A7
                    4410   ; printf("\r\nBreak Points :[Enabled]") ;
00002960  4879 0000 4411          pea       @m68kde~1_131.L
00002964  742E      
00002966  4E92      4412          jsr       (A2)
00002968  584F      4413          addq.w    #4,A7
                    4414   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
0000296A  4879 0000 4415          pea       @m68kde~1_132.L
0000296E  7448      
00002970  4E92      4416          jsr       (A2)
00002972  584F      4417          addq.w    #4,A7
                    4418   menu_42:
00002974  6000 0058 4419          bra       menu_46
                    4420   menu_39:
                    4421   ; }
                    4422   ; }
                    4423   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002978  0C02 001B 4424          cmp.b     #27,D2
0000297C  6600 0040 4425          bne       menu_43
                    4426   ; Trace = 0;
00002980  4293      4427          clr.l     (A3)
                    4428   ; TraceException = 0;
00002982  4239 0040 4429          clr.b     4194314
00002986  000A      
                    4430   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002988  28B8 0074 4431          move.l    116,(A4)
                    4432   ; EnableBreakPoints() ;
0000298C  4EB8 216A 4433          jsr       _EnableBreakPoints
                    4434   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002990  0255 7FFF 4435          and.w     #32767,(A5)
                    4436   ; printf("\r\nSingle Step  :[OFF]") ;
00002994  4879 0000 4437          pea       @m68kde~1_133.L
00002998  7472      
0000299A  4E92      4438          jsr       (A2)
0000299C  584F      4439          addq.w    #4,A7
                    4440   ; printf("\r\nBreak Points :[Enabled]");
0000299E  4879 0000 4441          pea       @m68kde~1_131.L
000029A2  742E      
000029A4  4E92      4442          jsr       (A2)
000029A6  584F      4443          addq.w    #4,A7
                    4444   ; printf("\r\nProgram Running.....") ;
000029A8  4879 0000 4445          pea       @m68kde~1_124.L
000029AC  733A      
000029AE  4E92      4446          jsr       (A2)
000029B0  584F      4447          addq.w    #4,A7
                    4448   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000029B2  4879 0000 4449          pea       @m68kde~1_125.L
000029B6  7352      
000029B8  4E92      4450          jsr       (A2)
000029BA  584F      4451          addq.w    #4,A7
                    4452   ; return ;
000029BC  6014      4453          bra.s     menu_38
                    4454   menu_43:
                    4455   ; }
                    4456   ; else if( c == (char)('W'))              // Watchpoint command
000029BE  0C02 0057 4457          cmp.b     #87,D2
000029C2  6606      4458          bne.s     menu_45
                    4459   ; Watchpoint() ;
000029C4  4EB8 25C4 4460          jsr       _Watchpoint
000029C8  6004      4461          bra.s     menu_46
                    4462   menu_45:
                    4463   ; else
                    4464   ; UnknownCommand() ;
000029CA  4EB8 251C 4465          jsr       _UnknownCommand
                    4466   menu_46:
000029CE  6000 FDB0 4467          bra       menu_1
                    4468   menu_38:
000029D2  4CDF 3C0C 4469          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000029D6  4E75      4470          rts
                    4471   ; }
                    4472   ; }
                    4473   ; void PrintErrorMessageandAbort(char *string) {
                    4474   _PrintErrorMessageandAbort:
000029D8  4E56 0000 4475          link      A6,#0
                    4476   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000029DC  4879 0000 4477          pea       @m68kde~1_134.L
000029E0  7488      
000029E2  4EB9 0000 4478          jsr       _printf
000029E6  5B46      
000029E8  584F      4479          addq.w    #4,A7
                    4480   ; printf("%s\r\n", string) ;
000029EA  2F2E 0008 4481          move.l    8(A6),-(A7)
000029EE  4879 0000 4482          pea       @m68kde~1_135.L
000029F2  74A4      
000029F4  4EB9 0000 4483          jsr       _printf
000029F8  5B46      
000029FA  504F      4484          addq.w    #8,A7
                    4485   ; menu() ;
000029FC  4EB8 2764 4486          jsr       _menu
00002A00  4E5E      4487          unlk      A6
00002A02  4E75      4488          rts
                    4489   ; }
                    4490   ; void IRQMessage(int level) {
                    4491   _IRQMessage:
00002A04  4E56 0000 4492          link      A6,#0
                    4493   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002A08  4879 0000 4494          pea       @m68kde~1_136.L
00002A0C  74AA      
00002A0E  4EB9 0000 4495          jsr       _printf
00002A12  5B46      
00002A14  584F      4496          addq.w    #4,A7
                    4497   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002A16  2F2E 0008 4498          move.l    8(A6),-(A7)
00002A1A  4879 0000 4499          pea       @m68kde~1_137.L
00002A1E  74C2      
00002A20  4EB9 0000 4500          jsr       _printf
00002A24  5B46      
00002A26  504F      4501          addq.w    #8,A7
                    4502   ; menu() ;
00002A28  4EB8 2764 4503          jsr       _menu
00002A2C  4E5E      4504          unlk      A6
00002A2E  4E75      4505          rts
                    4506   ; }
                    4507   ; void UnhandledIRQ1(void) {
                    4508   _UnhandledIRQ1:
                    4509   ; IRQMessage(1);
00002A30  4878 0001 4510          pea       1
00002A34  4EB8 2A04 4511          jsr       _IRQMessage
00002A38  584F      4512          addq.w    #4,A7
00002A3A  4E75      4513          rts
                    4514   ; }
                    4515   ; void UnhandledIRQ2(void) {
                    4516   _UnhandledIRQ2:
                    4517   ; IRQMessage(2);
00002A3C  4878 0002 4518          pea       2
00002A40  4EB8 2A04 4519          jsr       _IRQMessage
00002A44  584F      4520          addq.w    #4,A7
00002A46  4E75      4521          rts
                    4522   ; }
                    4523   ; void UnhandledIRQ3(void){
                    4524   _UnhandledIRQ3:
                    4525   ; IRQMessage(3);
00002A48  4878 0003 4526          pea       3
00002A4C  4EB8 2A04 4527          jsr       _IRQMessage
00002A50  584F      4528          addq.w    #4,A7
00002A52  4E75      4529          rts
                    4530   ; }
                    4531   ; void UnhandledIRQ4(void) {
                    4532   _UnhandledIRQ4:
                    4533   ; IRQMessage(4);
00002A54  4878 0004 4534          pea       4
00002A58  4EB8 2A04 4535          jsr       _IRQMessage
00002A5C  584F      4536          addq.w    #4,A7
00002A5E  4E75      4537          rts
                    4538   ; }
                    4539   ; void UnhandledIRQ5(void) {
                    4540   _UnhandledIRQ5:
                    4541   ; IRQMessage(5);
00002A60  4878 0005 4542          pea       5
00002A64  4EB8 2A04 4543          jsr       _IRQMessage
00002A68  584F      4544          addq.w    #4,A7
00002A6A  4E75      4545          rts
                    4546   ; }
                    4547   ; void UnhandledIRQ6(void) {
                    4548   _UnhandledIRQ6:
                    4549   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002A6C  4879 0000 4550          pea       @m68kde~1_138.L
00002A70  74E6      
00002A72  4EB8 29D8 4551          jsr       _PrintErrorMessageandAbort
00002A76  584F      4552          addq.w    #4,A7
                    4553   ; menu() ;
00002A78  4EB8 2764 4554          jsr       _menu
00002A7C  4E75      4555          rts
                    4556   ; }
                    4557   ; void UnhandledIRQ7(void) {
                    4558   _UnhandledIRQ7:
                    4559   ; IRQMessage(7);
00002A7E  4878 0007 4560          pea       7
00002A82  4EB8 2A04 4561          jsr       _IRQMessage
00002A86  584F      4562          addq.w    #4,A7
00002A88  4E75      4563          rts
                    4564   ; }
                    4565   ; void UnhandledTrap(void) {
                    4566   _UnhandledTrap:
                    4567   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002A8A  4879 0000 4568          pea       @m68kde~1_139.L
00002A8E  7526      
00002A90  4EB8 29D8 4569          jsr       _PrintErrorMessageandAbort
00002A94  584F      4570          addq.w    #4,A7
00002A96  4E75      4571          rts
                    4572   ; }
                    4573   ; void BusError() {
                    4574   _BusError:
                    4575   ; PrintErrorMessageandAbort("BUS Error!") ;
00002A98  4879 0000 4576          pea       @m68kde~1_140.L
00002A9C  753C      
00002A9E  4EB8 29D8 4577          jsr       _PrintErrorMessageandAbort
00002AA2  584F      4578          addq.w    #4,A7
00002AA4  4E75      4579          rts
                    4580   ; }
                    4581   ; void AddressError() {
                    4582   _AddressError:
                    4583   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002AA6  4879 0000 4584          pea       @m68kde~1_141.L
00002AAA  7548      
00002AAC  4EB8 29D8 4585          jsr       _PrintErrorMessageandAbort
00002AB0  584F      4586          addq.w    #4,A7
00002AB2  4E75      4587          rts
                    4588   ; }
                    4589   ; void IllegalInstruction() {
                    4590   _IllegalInstruction:
                    4591   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002AB4  4879 0000 4592          pea       @m68kde~1_142.L
00002AB8  7558      
00002ABA  4EB8 29D8 4593          jsr       _PrintErrorMessageandAbort
00002ABE  584F      4594          addq.w    #4,A7
00002AC0  4E75      4595          rts
                    4596   ; }
                    4597   ; void Dividebyzero() {
                    4598   _Dividebyzero:
                    4599   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002AC2  4879 0000 4600          pea       @m68kde~1_143.L
00002AC6  756C      
00002AC8  4EB8 29D8 4601          jsr       _PrintErrorMessageandAbort
00002ACC  584F      4602          addq.w    #4,A7
00002ACE  4E75      4603          rts
                    4604   ; }
                    4605   ; void Check() {
                    4606   _Check:
                    4607   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002AD0  4879 0000 4608          pea       @m68kde~1_144.L
00002AD4  757C      
00002AD6  4EB8 29D8 4609          jsr       _PrintErrorMessageandAbort
00002ADA  584F      4610          addq.w    #4,A7
00002ADC  4E75      4611          rts
                    4612   ; }
                    4613   ; void Trapv() {
                    4614   _Trapv:
                    4615   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002ADE  4879 0000 4616          pea       @m68kde~1_145.L
00002AE2  758E      
00002AE4  4EB8 29D8 4617          jsr       _PrintErrorMessageandAbort
00002AE8  584F      4618          addq.w    #4,A7
00002AEA  4E75      4619          rts
                    4620   ; }
                    4621   ; void PrivError() {
                    4622   _PrivError:
                    4623   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002AEC  4879 0000 4624          pea       @m68kde~1_146.L
00002AF0  75A0      
00002AF2  4EB8 29D8 4625          jsr       _PrintErrorMessageandAbort
00002AF6  584F      4626          addq.w    #4,A7
00002AF8  4E75      4627          rts
                    4628   ; }
                    4629   ; void UnitIRQ() {
                    4630   _UnitIRQ:
                    4631   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002AFA  4879 0000 4632          pea       @m68kde~1_147.L
00002AFE  75B4      
00002B00  4EB8 29D8 4633          jsr       _PrintErrorMessageandAbort
00002B04  584F      4634          addq.w    #4,A7
00002B06  4E75      4635          rts
                    4636   ; }
                    4637   ; void Spurious() {
                    4638   _Spurious:
                    4639   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002B08  4879 0000 4640          pea       @m68kde~1_148.L
00002B0C  75C6      
00002B0E  4EB8 29D8 4641          jsr       _PrintErrorMessageandAbort
00002B12  584F      4642          addq.w    #4,A7
00002B14  4E75      4643          rts
                    4644   ; }
                    4645   ; void EnterString(void)
                    4646   ; {
                    4647   _EnterString:
00002B16  4E56 FFFC 4648          link      A6,#-4
00002B1A  2F02      4649          move.l    D2,-(A7)
                    4650   ; unsigned char *Start;
                    4651   ; unsigned char c;
                    4652   ; printf("\r\nStart Address in Memory: ") ;
00002B1C  4879 0000 4653          pea       @m68kde~1_149.L
00002B20  75D4      
00002B22  4EB9 0000 4654          jsr       _printf
00002B26  5B46      
00002B28  584F      4655          addq.w    #4,A7
                    4656   ; Start = Get8HexDigits(0) ;
00002B2A  42A7      4657          clr.l     -(A7)
00002B2C  4EB8 0CA4 4658          jsr       _Get8HexDigits
00002B30  584F      4659          addq.w    #4,A7
00002B32  2400      4660          move.l    D0,D2
                    4661   ; printf("\r\nEnter String (ESC to end) :") ;
00002B34  4879 0000 4662          pea       @m68kde~1_150.L
00002B38  75F0      
00002B3A  4EB9 0000 4663          jsr       _printf
00002B3E  5B46      
00002B40  584F      4664          addq.w    #4,A7
                    4665   ; while((c = getchar()) != 0x1b)
                    4666   EnterString_1:
00002B42  4EB9 0000 4667          jsr       _getch
00002B46  5A8E      
00002B48  1D40 FFFF 4668          move.b    D0,-1(A6)
00002B4C  0C00 001B 4669          cmp.b     #27,D0
00002B50  670A      4670          beq.s     EnterString_3
                    4671   ; *Start++ = c ;
00002B52  2042      4672          move.l    D2,A0
00002B54  5282      4673          addq.l    #1,D2
00002B56  10AE FFFF 4674          move.b    -1(A6),(A0)
00002B5A  60E6      4675          bra       EnterString_1
                    4676   EnterString_3:
                    4677   ; *Start = 0x00;  // terminate with a null
00002B5C  2042      4678          move.l    D2,A0
00002B5E  4210      4679          clr.b     (A0)
00002B60  241F      4680          move.l    (A7)+,D2
00002B62  4E5E      4681          unlk      A6
00002B64  4E75      4682          rts
                    4683   ; }
                    4684   ; void MemoryTest(void)
                    4685   ; {
                    4686   _MemoryTest:
00002B66  48E7 3830 4687          movem.l   D2/D3/D4/A2/A3,-(A7)
00002B6A  45F9 0000 4688          lea       _printf.L,A2
00002B6E  5B46      
00002B70  47F8 09D4 4689          lea       _Oline0.L,A3
                    4690   ; unsigned int *RamPtr;
                    4691   ; unsigned int *Start, *End ;
                    4692   ; // Output to LCD
                    4693   ; Oline0("Performing Memory Test!");
00002B74  4879 0000 4694          pea       @m68kde~1_151.L
00002B78  760E      
00002B7A  4E93      4695          jsr       (A3)
00002B7C  584F      4696          addq.w    #4,A7
                    4697   ; Oline1("");
00002B7E  4879 0000 4698          pea       @m68kde~1_40.L
00002B82  688C      
00002B84  4EB8 0A02 4699          jsr       _Oline1
00002B88  584F      4700          addq.w    #4,A7
                    4701   ; printf("\r\nStart Address: ") ;
00002B8A  4879 0000 4702          pea       @m68kde~1_152.L
00002B8E  7626      
00002B90  4E92      4703          jsr       (A2)
00002B92  584F      4704          addq.w    #4,A7
                    4705   ; Start = Get8HexDigits(0) ;
00002B94  42A7      4706          clr.l     -(A7)
00002B96  4EB8 0CA4 4707          jsr       _Get8HexDigits
00002B9A  584F      4708          addq.w    #4,A7
00002B9C  2800      4709          move.l    D0,D4
                    4710   ; printf("\r\nEnd Address: ") ;
00002B9E  4879 0000 4711          pea       @m68kde~1_153.L
00002BA2  7638      
00002BA4  4E92      4712          jsr       (A2)
00002BA6  584F      4713          addq.w    #4,A7
                    4714   ; End = Get8HexDigits(0) ;
00002BA8  42A7      4715          clr.l     -(A7)
00002BAA  4EB8 0CA4 4716          jsr       _Get8HexDigits
00002BAE  584F      4717          addq.w    #4,A7
00002BB0  2600      4718          move.l    D0,D3
                    4719   ; // Write to Memory
                    4720   ; for(RamPtr=Start; RamPtr <= End; RamPtr+=0x1){
00002BB2  2404      4721          move.l    D4,D2
                    4722   MemoryTest_1:
00002BB4  B483      4723          cmp.l     D3,D2
00002BB6  620C      4724          bhi.s     MemoryTest_3
                    4725   ; *RamPtr = 0xDEADBEEF;
00002BB8  2042      4726          move.l    D2,A0
00002BBA  20BC DEAD 4727          move.l    #-559038737,(A0)
00002BBE  BEEF      
00002BC0  5882      4728          addq.l    #4,D2
00002BC2  60F0      4729          bra       MemoryTest_1
                    4730   MemoryTest_3:
                    4731   ; }
                    4732   ; // Read from Memory & Validate Data
                    4733   ; for(RamPtr=Start; RamPtr <= End; RamPtr+=0x1){
00002BC4  2404      4734          move.l    D4,D2
                    4735   MemoryTest_4:
00002BC6  B483      4736          cmp.l     D3,D2
00002BC8  6200 0054 4737          bhi       MemoryTest_6
                    4738   ; if(*RamPtr != 0xDEADBEEF){
00002BCC  2042      4739          move.l    D2,A0
00002BCE  2010      4740          move.l    (A0),D0
00002BD0  0C80 DEAD 4741          cmp.l     #-559038737,D0
00002BD4  BEEF      
00002BD6  6700 0042 4742          beq       MemoryTest_7
                    4743   ; printf("\r\nMemory Test Failed!");
00002BDA  4879 0000 4744          pea       @m68kde~1_154.L
00002BDE  7648      
00002BE0  4E92      4745          jsr       (A2)
00002BE2  584F      4746          addq.w    #4,A7
                    4747   ; printf("\r\nAddress = %u", RamPtr) ;
00002BE4  2F02      4748          move.l    D2,-(A7)
00002BE6  4879 0000 4749          pea       @m68kde~1_155.L
00002BEA  765E      
00002BEC  4E92      4750          jsr       (A2)
00002BEE  504F      4751          addq.w    #8,A7
                    4752   ; printf("\r\nData Written to address = %u", 0xDEADBEEF) ;
00002BF0  4879 DEAD 4753          pea       -559038737
00002BF4  BEEF      
00002BF6  4879 0000 4754          pea       @m68kde~1_156.L
00002BFA  766E      
00002BFC  4E92      4755          jsr       (A2)
00002BFE  504F      4756          addq.w    #8,A7
                    4757   ; printf("\r\nData found in address = %u", *RamPtr) ;
00002C00  2042      4758          move.l    D2,A0
00002C02  2F10      4759          move.l    (A0),-(A7)
00002C04  4879 0000 4760          pea       @m68kde~1_157.L
00002C08  768E      
00002C0A  4E92      4761          jsr       (A2)
00002C0C  504F      4762          addq.w    #8,A7
                    4763   ; Oline0("Memory Test Failed!");
00002C0E  4879 0000 4764          pea       @m68kde~1_158.L
00002C12  76AC      
00002C14  4E93      4765          jsr       (A3)
00002C16  584F      4766          addq.w    #4,A7
                    4767   ; return;
00002C18  6018      4768          bra.s     MemoryTest_9
                    4769   MemoryTest_7:
00002C1A  5882      4770          addq.l    #4,D2
00002C1C  60A8      4771          bra       MemoryTest_4
                    4772   MemoryTest_6:
                    4773   ; }
                    4774   ; }
                    4775   ; printf("\r\nMemory Test Successful") ;
00002C1E  4879 0000 4776          pea       @m68kde~1_159.L
00002C22  76C0      
00002C24  4E92      4777          jsr       (A2)
00002C26  584F      4778          addq.w    #4,A7
                    4779   ; Oline0("Memory Test Successful!");
00002C28  4879 0000 4780          pea       @m68kde~1_160.L
00002C2C  76DA      
00002C2E  4E93      4781          jsr       (A3)
00002C30  584F      4782          addq.w    #4,A7
                    4783   ; return;
                    4784   MemoryTest_9:
00002C32  4CDF 0C1C 4785          movem.l   (A7)+,D2/D3/D4/A2/A3
00002C36  4E75      4786          rts
                    4787   ; }
                    4788   ; int TestForSPITransmitDataComplete(void)
                    4789   ; {
                    4790   _TestForSPITransmitDataComplete:
                    4791   ; /* if register SPIF bit set, return true, otherwise wait*/
                    4792   ; while ((SPI_Status & 128) >> 7 != 1);
                    4793   TestForSPITransmitDataComplete_1:
00002C38  1039 0040 4794          move.b    4227106,D0
00002C3C  8022      
00002C3E  C07C 00FF 4795          and.w     #255,D0
00002C42  C07C 0080 4796          and.w     #128,D0
00002C46  EE40      4797          asr.w     #7,D0
00002C48  0C40 0001 4798          cmp.w     #1,D0
00002C4C  6702      4799          beq.s     TestForSPITransmitDataComplete_3
00002C4E  60E8      4800          bra       TestForSPITransmitDataComplete_1
                    4801   TestForSPITransmitDataComplete_3:
                    4802   ; return 1;
00002C50  7001      4803          moveq     #1,D0
00002C52  4E75      4804          rts
                    4805   ; }
                    4806   ; /************************************************************************************
                    4807   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    4808   ; ************************************************************************************/
                    4809   ; void SPI_Init(void)
                    4810   ; {
                    4811   _SPI_Init:
                    4812   ; //TODO
                    4813   ; //
                    4814   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    4815   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    4816   ; //
                    4817   ; // Here are some settings we want to create
                    4818   ; //
                    4819   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                    4820   ; SPI_Control = 0x53; // 8'b01010011
00002C54  13FC 0053 4821          move.b    #83,4227104
00002C58  0040 8020 
                    4822   ; // Ext Reg         - in conjunction with control reg sets speed to above and also sets interrupt flag after every completed transfer (each byte)
                    4823   ; SPI_Ext = 0;        //8'b00XXXX00
00002C5C  4239 0040 4824          clr.b     4227110
00002C60  8026      
                    4825   ; // SPI_CS Reg      - disable all connected SPI chips via their CS signals
                    4826   ; SPI_CS = Disable_SPI_CS();
00002C62  13FC 00FF 4827          move.b    #255,4227112
00002C66  0040 8028 
00002C6A  13FC 00FF 4828          move.b    #255,4227112
00002C6E  0040 8028 
                    4829   ; // Status Reg      - clear any write collision and interrupt on transmit complete flag
                    4830   ; SPI_Status = 0xC0;  // 8'b11XX0000, X = don't Care (Use 0)
00002C72  13FC 00C0 4831          move.b    #192,4227106
00002C76  0040 8022 
00002C7A  4E75      4832          rts
                    4833   ; }
                    4834   ; /************************************************************************************
                    4835   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    4836   ; ************************************************************************************/
                    4837   ; void WaitForSPITransmitComplete(void)
                    4838   ; {
                    4839   _WaitForSPITransmitComplete:
                    4840   ; // poll the status register SPIF bit looking for completion of transmission
                    4841   ; TestForSPITransmitDataComplete();
00002C7C  4EB8 2C38 4842          jsr       _TestForSPITransmitDataComplete
                    4843   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    4844   ; // in case they were set
                    4845   ; SPI_Status = 0xC0; //  (8'b11000000, X = don't Care (Use 0))
00002C80  13FC 00C0 4846          move.b    #192,4227106
00002C84  0040 8022 
00002C88  4E75      4847          rts
                    4848   ; }
                    4849   ; /************************************************************************************
                    4850   ; ** Disable Write Protect to allow writing access to chip
                    4851   ; ************************************************************************************/
                    4852   ; void WriteEnable(void){
                    4853   _WriteEnable:
00002C8A  4E56 FFFC 4854          link      A6,#-4
                    4855   ; unsigned char x;
                    4856   ; // Enable Chip Select
                    4857   ; Enable_SPI_CS();
00002C8E  13FC 00FE 4858          move.b    #254,4227112
00002C92  0040 8028 
                    4859   ; // Send Write Command to Chip
                    4860   ; SPI_Data = 6;
00002C96  13FC 0006 4861          move.b    #6,4227108
00002C9A  0040 8024 
                    4862   ; WaitForSPITransmitComplete();
00002C9E  4EB8 2C7C 4863          jsr       _WaitForSPITransmitComplete
                    4864   ; x = SPI_Data;
00002CA2  1D79 0040 4865          move.b    4227108,-1(A6)
00002CA6  8024 FFFF 
                    4866   ; // Disable Chip Select
                    4867   ; Disable_SPI_CS();
00002CAA  13FC 00FF 4868          move.b    #255,4227112
00002CAE  0040 8028 
00002CB2  4E5E      4869          unlk      A6
00002CB4  4E75      4870          rts
                    4871   ; }
                    4872   ; /************************************************************************************
                    4873   ; ** Disable Write Protect to allow writing access to chip
                    4874   ; ************************************************************************************/
                    4875   ; void DisableBlockProtect(void){
                    4876   _DisableBlockProtect:
00002CB6  4E56 FFFC 4877          link      A6,#-4
                    4878   ; unsigned char x;
                    4879   ; Enable_SPI_CS();
00002CBA  13FC 00FE 4880          move.b    #254,4227112
00002CBE  0040 8028 
                    4881   ; // Send Write To status Register Command to Chip
                    4882   ; SPI_Data = 1;
00002CC2  13FC 0001 4883          move.b    #1,4227108
00002CC6  0040 8024 
                    4884   ; WaitForSPITransmitComplete();
00002CCA  4EB8 2C7C 4885          jsr       _WaitForSPITransmitComplete
                    4886   ; x = SPI_Data;
00002CCE  1D79 0040 4887          move.b    4227108,-1(A6)
00002CD2  8024 FFFF 
                    4888   ; // Send Write To status Register Command to Chip
                    4889   ; SPI_Data = 2;   // 8'b00000010
00002CD6  13FC 0002 4890          move.b    #2,4227108
00002CDA  0040 8024 
                    4891   ; WaitForSPITransmitComplete();
00002CDE  4EB8 2C7C 4892          jsr       _WaitForSPITransmitComplete
                    4893   ; x = SPI_Data;
00002CE2  1D79 0040 4894          move.b    4227108,-1(A6)
00002CE6  8024 FFFF 
                    4895   ; Disable_SPI_CS();
00002CEA  13FC 00FF 4896          move.b    #255,4227112
00002CEE  0040 8028 
00002CF2  4E5E      4897          unlk      A6
00002CF4  4E75      4898          rts
                    4899   ; }
                    4900   ; /************************************************************************************
                    4901   ; ** Wait for Write Command Completion
                    4902   ; ************************************************************************************/
                    4903   ; void WaitWriteCommandCompletion(void){
                    4904   _WaitWriteCommandCompletion:
00002CF6  2F02      4905          move.l    D2,-(A7)
                    4906   ; unsigned char x;
                    4907   ; // Enable Chip Select
                    4908   ; Enable_SPI_CS();
00002CF8  13FC 00FE 4909          move.b    #254,4227112
00002CFC  0040 8028 
                    4910   ; // Send Write Command to Chip
                    4911   ; SPI_Data = 5;
00002D00  13FC 0005 4912          move.b    #5,4227108
00002D04  0040 8024 
                    4913   ; WaitForSPITransmitComplete();
00002D08  4EB8 2C7C 4914          jsr       _WaitForSPITransmitComplete
                    4915   ; x = SPI_Data;
00002D0C  1439 0040 4916          move.b    4227108,D2
00002D10  8024      
                    4917   ; while(1){
                    4918   WaitWriteCommandCompletion_1:
                    4919   ; SPI_Data = 0xFF;
00002D12  13FC 00FF 4920          move.b    #255,4227108
00002D16  0040 8024 
                    4921   ; WaitForSPITransmitComplete();
00002D1A  4EB8 2C7C 4922          jsr       _WaitForSPITransmitComplete
                    4923   ; x = SPI_Data;
00002D1E  1439 0040 4924          move.b    4227108,D2
00002D22  8024      
                    4925   ; if ((x & 1) != 1)
00002D24  1002      4926          move.b    D2,D0
00002D26  C03C 0001 4927          and.b     #1,D0
00002D2A  0C00 0001 4928          cmp.b     #1,D0
00002D2E  6702      4929          beq.s     WaitWriteCommandCompletion_4
                    4930   ; break;
00002D30  6002      4931          bra.s     WaitWriteCommandCompletion_3
                    4932   WaitWriteCommandCompletion_4:
00002D32  60DE      4933          bra       WaitWriteCommandCompletion_1
                    4934   WaitWriteCommandCompletion_3:
                    4935   ; }
                    4936   ; // Disable Chip Select
                    4937   ; Disable_SPI_CS();
00002D34  13FC 00FF 4938          move.b    #255,4227112
00002D38  0040 8028 
00002D3C  241F      4939          move.l    (A7)+,D2
00002D3E  4E75      4940          rts
                    4941   ; }
                    4942   ; /************************************************************************************
                    4943   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    4944   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    4945   ; ************************************************************************************/
                    4946   ; void WriteSPIChar(unsigned char c)
                    4947   ; {
                    4948   _WriteSPIChar:
00002D40  4E56 FFFC 4949          link      A6,#-4
00002D44  48E7 2020 4950          movem.l   D2/A2,-(A7)
00002D48  45F8 2C7C 4951          lea       _WaitForSPITransmitComplete.L,A2
                    4952   ; unsigned char x;
                    4953   ; unsigned char addr1, addr2, addr3;
                    4954   ; addr1 = addr2 = addr3 = 6;
00002D4C  1D7C 0006 4955          move.b    #6,-1(A6)
00002D50  FFFF      
00002D52  1D7C 0006 4956          move.b    #6,-2(A6)
00002D56  FFFE      
00002D58  1D7C 0006 4957          move.b    #6,-3(A6)
00002D5C  FFFD      
                    4958   ; printf("\r\nc = %u \n", c);
00002D5E  122E 000B 4959          move.b    11(A6),D1
00002D62  C2BC 0000 4960          and.l     #255,D1
00002D66  00FF      
00002D68  2F01      4961          move.l    D1,-(A7)
00002D6A  4879 0000 4962          pea       @m68kde~1_161.L
00002D6E  76F2      
00002D70  4EB9 0000 4963          jsr       _printf
00002D74  5B46      
00002D76  504F      4964          addq.w    #8,A7
                    4965   ; DisableBlockProtect();
00002D78  4EB8 2CB6 4966          jsr       _DisableBlockProtect
                    4967   ; WriteEnable();
00002D7C  4EB8 2C8A 4968          jsr       _WriteEnable
                    4969   ; // Enable Chip Select
                    4970   ; Enable_SPI_CS();
00002D80  13FC 00FE 4971          move.b    #254,4227112
00002D84  0040 8028 
                    4972   ; // Send Write Command to Chip
                    4973   ; SPI_Data = 2;
00002D88  13FC 0002 4974          move.b    #2,4227108
00002D8C  0040 8024 
                    4975   ; WaitForSPITransmitComplete();
00002D90  4E92      4976          jsr       (A2)
                    4977   ; x = SPI_Data;
00002D92  1439 0040 4978          move.b    4227108,D2
00002D96  8024      
                    4979   ; // Send 24-bit Address that we stored c in
                    4980   ; SPI_Data = addr1; // 24-bit address - 1st Byte
00002D98  13EE FFFD 4981          move.b    -3(A6),4227108
00002D9C  0040 8024 
                    4982   ; WaitForSPITransmitComplete();
00002DA0  4E92      4983          jsr       (A2)
                    4984   ; x = SPI_Data;
00002DA2  1439 0040 4985          move.b    4227108,D2
00002DA6  8024      
                    4986   ; SPI_Data = addr2; // 24-bit address - 2nd Byte
00002DA8  13EE FFFE 4987          move.b    -2(A6),4227108
00002DAC  0040 8024 
                    4988   ; WaitForSPITransmitComplete();
00002DB0  4E92      4989          jsr       (A2)
                    4990   ; x = SPI_Data;
00002DB2  1439 0040 4991          move.b    4227108,D2
00002DB6  8024      
                    4992   ; SPI_Data = addr3; // 24-bit address - 3rd Byte
00002DB8  13EE FFFF 4993          move.b    -1(A6),4227108
00002DBC  0040 8024 
                    4994   ; WaitForSPITransmitComplete();
00002DC0  4E92      4995          jsr       (A2)
                    4996   ; x = SPI_Data;
00002DC2  1439 0040 4997          move.b    4227108,D2
00002DC6  8024      
                    4998   ; // Payload Data
                    4999   ; SPI_Data = c;
00002DC8  13EE 000B 5000          move.b    11(A6),4227108
00002DCC  0040 8024 
                    5001   ; WaitForSPITransmitComplete();
00002DD0  4E92      5002          jsr       (A2)
                    5003   ; x = SPI_Data;
00002DD2  1439 0040 5004          move.b    4227108,D2
00002DD6  8024      
                    5005   ; //  Disable Chip Select
                    5006   ; Disable_SPI_CS();
00002DD8  13FC 00FF 5007          move.b    #255,4227112
00002DDC  0040 8028 
                    5008   ; // Poll Chip Status register for write completion
                    5009   ; WaitWriteCommandCompletion();
00002DE0  4EB8 2CF6 5010          jsr       _WaitWriteCommandCompletion
00002DE4  4CDF 0404 5011          movem.l   (A7)+,D2/A2
00002DE8  4E5E      5012          unlk      A6
00002DEA  4E75      5013          rts
                    5014   ; }
                    5015   ; /************************************************************************************
                    5016   ; ** Read contents of SPI flash chip from address 0
                    5017   ; ************************************************************************************/
                    5018   ; unsigned char ReadSPIChar(void){
                    5019   _ReadSPIChar:
00002DEC  4E56 FFFC 5020          link      A6,#-4
00002DF0  48E7 3020 5021          movem.l   D2/D3/A2,-(A7)
00002DF4  45F8 2C7C 5022          lea       _WaitForSPITransmitComplete.L,A2
                    5023   ; unsigned char x;
                    5024   ; unsigned char read_byte;
                    5025   ; unsigned char addr1, addr2, addr3;
                    5026   ; addr1 = addr2 = addr3 = 6;
00002DF8  1D7C 0006 5027          move.b    #6,-1(A6)
00002DFC  FFFF      
00002DFE  1D7C 0006 5028          move.b    #6,-2(A6)
00002E02  FFFE      
00002E04  1D7C 0006 5029          move.b    #6,-3(A6)
00002E08  FFFD      
                    5030   ; // Enable Chip Select
                    5031   ; Enable_SPI_CS();
00002E0A  13FC 00FE 5032          move.b    #254,4227112
00002E0E  0040 8028 
                    5033   ; // Send Read Command to Chip
                    5034   ; SPI_Data = 3;
00002E12  13FC 0003 5035          move.b    #3,4227108
00002E16  0040 8024 
                    5036   ; WaitForSPITransmitComplete();
00002E1A  4E92      5037          jsr       (A2)
                    5038   ; x = SPI_Data;
00002E1C  1439 0040 5039          move.b    4227108,D2
00002E20  8024      
                    5040   ; // Send 24-bit Address that we stored c in
                    5041   ; // 24-bit address - 1st Byte
                    5042   ; SPI_Data = addr1;
00002E22  13EE FFFD 5043          move.b    -3(A6),4227108
00002E26  0040 8024 
                    5044   ; WaitForSPITransmitComplete();
00002E2A  4E92      5045          jsr       (A2)
                    5046   ; x = SPI_Data;
00002E2C  1439 0040 5047          move.b    4227108,D2
00002E30  8024      
                    5048   ; // 24-bit address - 2nd Byte
                    5049   ; SPI_Data = addr2;
00002E32  13EE FFFE 5050          move.b    -2(A6),4227108
00002E36  0040 8024 
                    5051   ; WaitForSPITransmitComplete();
00002E3A  4E92      5052          jsr       (A2)
                    5053   ; x = SPI_Data;
00002E3C  1439 0040 5054          move.b    4227108,D2
00002E40  8024      
                    5055   ; // 24-bit address - 3rd Byte
                    5056   ; SPI_Data = addr3;
00002E42  13EE FFFF 5057          move.b    -1(A6),4227108
00002E46  0040 8024 
                    5058   ; WaitForSPITransmitComplete();
00002E4A  4E92      5059          jsr       (A2)
                    5060   ; x = SPI_Data;
00002E4C  1439 0040 5061          move.b    4227108,D2
00002E50  8024      
                    5062   ; // Send Dummy Data to purge c out of read FIFO
                    5063   ; SPI_Data = 0xF0;
00002E52  13FC 00F0 5064          move.b    #240,4227108
00002E56  0040 8024 
                    5065   ; WaitForSPITransmitComplete();
00002E5A  4E92      5066          jsr       (A2)
                    5067   ; read_byte = SPI_Data;   // store data from read FIFO into temporary variable
00002E5C  1639 0040 5068          move.b    4227108,D3
00002E60  8024      
                    5069   ; //  Disable Chip Select
                    5070   ; Disable_SPI_CS();
00002E62  13FC 00FF 5071          move.b    #255,4227112
00002E66  0040 8028 
                    5072   ; printf("Read back Data (as u-char) = %u \n", read_byte);
00002E6A  C6BC 0000 5073          and.l     #255,D3
00002E6E  00FF      
00002E70  2F03      5074          move.l    D3,-(A7)
00002E72  4879 0000 5075          pea       @m68kde~1_162.L
00002E76  76FE      
00002E78  4EB9 0000 5076          jsr       _printf
00002E7C  5B46      
00002E7E  504F      5077          addq.w    #8,A7
                    5078   ; return read_byte;
00002E80  1003      5079          move.b    D3,D0
00002E82  4CDF 040C 5080          movem.l   (A7)+,D2/D3/A2
00002E86  4E5E      5081          unlk      A6
00002E88  4E75      5082          rts
                    5083   ; // return the received data from Flash chip
                    5084   ; }
                    5085   ; /************************************************************************************
                    5086   ; ** Erase Chip Contents in SPI flash chip
                    5087   ; ************************************************************************************/
                    5088   ; void ChipErase(void){
                    5089   _ChipErase:
00002E8A  4E56 FFFC 5090          link      A6,#-4
                    5091   ; unsigned char x;
                    5092   ; DisableBlockProtect();
00002E8E  4EB8 2CB6 5093          jsr       _DisableBlockProtect
                    5094   ; WriteEnable();
00002E92  4EB8 2C8A 5095          jsr       _WriteEnable
                    5096   ; Enable_SPI_CS();
00002E96  13FC 00FE 5097          move.b    #254,4227112
00002E9A  0040 8028 
                    5098   ; // Send Dummy Data to purge c out of read FIFO
                    5099   ; SPI_Data = 199;
00002E9E  13FC 00C7 5100          move.b    #199,4227108
00002EA2  0040 8024 
                    5101   ; WaitForSPITransmitComplete();
00002EA6  4EB8 2C7C 5102          jsr       _WaitForSPITransmitComplete
                    5103   ; x = SPI_Data;
00002EAA  1D79 0040 5104          move.b    4227108,-1(A6)
00002EAE  8024 FFFF 
                    5105   ; Disable_SPI_CS();
00002EB2  13FC 00FF 5106          move.b    #255,4227112
00002EB6  0040 8028 
                    5107   ; WaitWriteCommandCompletion();
00002EBA  4EB8 2CF6 5108          jsr       _WaitWriteCommandCompletion
                    5109   ; printf("\r\nChip Erased!");
00002EBE  4879 0000 5110          pea       @m68kde~1_163.L
00002EC2  7720      
00002EC4  4EB9 0000 5111          jsr       _printf
00002EC8  5B46      
00002ECA  584F      5112          addq.w    #4,A7
00002ECC  4E5E      5113          unlk      A6
00002ECE  4E75      5114          rts
                    5115   ; }
                    5116   ; void main(void)
                    5117   ; {
                    5118   _main:
00002ED0  4E56 FFE8 5119          link      A6,#-24
00002ED4  48E7 2030 5120          movem.l   D2/A2/A3,-(A7)
00002ED8  45F8 0A30 5121          lea       _InstallExceptionHandler.L,A2
00002EDC  47F9 0000 5122          lea       _printf.L,A3
00002EE0  5B46      
                    5123   ; char c ;
                    5124   ; int i, j ;
                    5125   ; char *BugMessage = "DE1-68k Bug V1.77";
00002EE2  41F9 0000 5126          lea       @m68kde~1_164.L,A0
00002EE6  7730      
00002EE8  2D48 FFF0 5127          move.l    A0,-16(A6)
                    5128   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002EEC  41F9 0000 5129          lea       @m68kde~1_165.L,A0
00002EF0  7742      
00002EF2  2D48 FFF4 5130          move.l    A0,-12(A6)
                    5131   ; char *StudentName = "Mohamed Abouelmagd";
00002EF6  41F9 0000 5132          lea       @m68kde~1_166.L,A0
00002EFA  7760      
00002EFC  2D48 FFF8 5133          move.l    A0,-8(A6)
                    5134   ; char *StudentNumber = "Std #: 38585148";
00002F00  41F9 0000 5135          lea       @m68kde~1_167.L,A0
00002F04  7774      
00002F06  2D48 FFFC 5136          move.l    A0,-4(A6)
                    5137   ; KillAllBreakPoints() ;
00002F0A  4EB8 21B2 5138          jsr       _KillAllBreakPoints
                    5139   ; i = x = y = z = PortA_Count = 0;
00002F0E  42B9 0B00 5140          clr.l     _PortA_Count.L
00002F12  00D4      
00002F14  42B9 0B00 5141          clr.l     _z.L
00002F18  00D0      
00002F1A  42B9 0B00 5142          clr.l     _y.L
00002F1E  00CC      
00002F20  42B9 0B00 5143          clr.l     _x.L
00002F24  00C8      
00002F26  4282      5144          clr.l     D2
                    5145   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002F28  42B9 0B00 5146          clr.l     _GoFlag.L
00002F2C  00DC      
00002F2E  42B9 0B00 5147          clr.l     _Trace.L
00002F32  00D8      
                    5148   ; Echo = 1 ;
00002F34  23FC 0000 5149          move.l    #1,_Echo.L
00002F38  0001 0B00 
00002F3C  00E0      
                    5150   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002F3E  42B9 0B00 5151          clr.l     _d7.L
00002F42  0100      
00002F44  42B9 0B00 5152          clr.l     _d6.L
00002F48  00FC      
00002F4A  42B9 0B00 5153          clr.l     _d5.L
00002F4E  00F8      
00002F50  42B9 0B00 5154          clr.l     _d4.L
00002F54  00F4      
00002F56  42B9 0B00 5155          clr.l     _d3.L
00002F5A  00F0      
00002F5C  42B9 0B00 5156          clr.l     _d2.L
00002F60  00EC      
00002F62  42B9 0B00 5157          clr.l     _d1.L
00002F66  00E8      
00002F68  42B9 0B00 5158          clr.l     _d0.L
00002F6C  00E4      
                    5159   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002F6E  42B9 0B00 5160          clr.l     _a6.L
00002F72  011C      
00002F74  42B9 0B00 5161          clr.l     _a5.L
00002F78  0118      
00002F7A  42B9 0B00 5162          clr.l     _a4.L
00002F7E  0114      
00002F80  42B9 0B00 5163          clr.l     _a3.L
00002F84  0110      
00002F86  42B9 0B00 5164          clr.l     _a2.L
00002F8A  010C      
00002F8C  42B9 0B00 5165          clr.l     _a1.L
00002F90  0108      
00002F92  42B9 0B00 5166          clr.l     _a0.L
00002F96  0104      
                    5167   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002F98  23FC 0800 5168          move.l    #134217728,_PC.L
00002F9C  0000 0B00 
00002FA0  0120      
00002FA2  23FC 0C00 5169          move.l    #201326592,_SSP.L
00002FA6  0000 0B00 
00002FAA  0124      
00002FAC  23FC 0C00 5170          move.l    #201326592,_USP.L
00002FB0  0000 0B00 
00002FB4  0128      
                    5171   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002FB6  33FC 2000 5172          move.w    #8192,_SR.L
00002FBA  0B00 012C 
                    5173   ; // Initialise Breakpoint variables
                    5174   ; for(i = 0; i < 8; i++)  {
00002FBE  4282      5175          clr.l     D2
                    5176   main_1:
00002FC0  0C82 0000 5177          cmp.l     #8,D2
00002FC4  0008      
00002FC6  6C00 004C 5178          bge       main_3
                    5179   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002FCA  2002      5180          move.l    D2,D0
00002FCC  E588      5181          lsl.l     #2,D0
00002FCE  41F9 0B00 5182          lea       _BreakPointAddress.L,A0
00002FD2  012E      
00002FD4  42B0 0800 5183          clr.l     0(A0,D0.L)
                    5184   ; WatchPointAddress[i] = 0 ;
00002FD8  2002      5185          move.l    D2,D0
00002FDA  E588      5186          lsl.l     #2,D0
00002FDC  41F9 0B00 5187          lea       _WatchPointAddress.L,A0
00002FE0  0182      
00002FE2  42B0 0800 5188          clr.l     0(A0,D0.L)
                    5189   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002FE6  2002      5190          move.l    D2,D0
00002FE8  E388      5191          lsl.l     #1,D0
00002FEA  41F9 0B00 5192          lea       _BreakPointInstruction.L,A0
00002FEE  014E      
00002FF0  4270 0800 5193          clr.w     0(A0,D0.L)
                    5194   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002FF4  2002      5195          move.l    D2,D0
00002FF6  E588      5196          lsl.l     #2,D0
00002FF8  41F9 0B00 5197          lea       _BreakPointSetOrCleared.L,A0
00002FFC  015E      
00002FFE  42B0 0800 5198          clr.l     0(A0,D0.L)
                    5199   ; WatchPointSetOrCleared[i] = 0;
00003002  2002      5200          move.l    D2,D0
00003004  E588      5201          lsl.l     #2,D0
00003006  41F9 0B00 5202          lea       _WatchPointSetOrCleared.L,A0
0000300A  01A2      
0000300C  42B0 0800 5203          clr.l     0(A0,D0.L)
00003010  5282      5204          addq.l    #1,D2
00003012  60AC      5205          bra       main_1
                    5206   main_3:
                    5207   ; }
                    5208   ; Init_RS232() ;     // initialise the RS232 port
00003014  4EB8 0B12 5209          jsr       _Init_RS232
                    5210   ; Init_LCD() ;
00003018  4EB8 095E 5211          jsr       _Init_LCD
                    5212   ; for( i = 32; i < 48; i++)
0000301C  7420      5213          moveq     #32,D2
                    5214   main_4:
0000301E  0C82 0000 5215          cmp.l     #48,D2
00003022  0030      
00003024  6C0E      5216          bge.s     main_6
                    5217   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00003026  2F02      5218          move.l    D2,-(A7)
00003028  4878 2A8A 5219          pea       _UnhandledTrap.L
0000302C  4E92      5220          jsr       (A2)
0000302E  504F      5221          addq.w    #8,A7
00003030  5282      5222          addq.l    #1,D2
00003032  60EA      5223          bra       main_4
                    5224   main_6:
                    5225   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00003034  4878 002F 5226          pea       47
00003038  4878 2764 5227          pea       _menu.L
0000303C  4E92      5228          jsr       (A2)
0000303E  504F      5229          addq.w    #8,A7
                    5230   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00003040  4878 0019 5231          pea       25
00003044  4878 2A30 5232          pea       _UnhandledIRQ1.L
00003048  4E92      5233          jsr       (A2)
0000304A  504F      5234          addq.w    #8,A7
                    5235   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
0000304C  4878 001A 5236          pea       26
00003050  4878 2A3C 5237          pea       _UnhandledIRQ2.L
00003054  4E92      5238          jsr       (A2)
00003056  504F      5239          addq.w    #8,A7
                    5240   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00003058  4878 001B 5241          pea       27
0000305C  4878 2A48 5242          pea       _UnhandledIRQ3.L
00003060  4E92      5243          jsr       (A2)
00003062  504F      5244          addq.w    #8,A7
                    5245   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00003064  4878 001C 5246          pea       28
00003068  4878 2A54 5247          pea       _UnhandledIRQ4.L
0000306C  4E92      5248          jsr       (A2)
0000306E  504F      5249          addq.w    #8,A7
                    5250   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00003070  4878 001D 5251          pea       29
00003074  4878 2A60 5252          pea       _UnhandledIRQ5.L
00003078  4E92      5253          jsr       (A2)
0000307A  504F      5254          addq.w    #8,A7
                    5255   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
0000307C  4878 001E 5256          pea       30
00003080  4878 2A6C 5257          pea       _UnhandledIRQ6.L
00003084  4E92      5258          jsr       (A2)
00003086  504F      5259          addq.w    #8,A7
                    5260   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00003088  4878 001F 5261          pea       31
0000308C  4878 2A7E 5262          pea       _UnhandledIRQ7.L
00003090  4E92      5263          jsr       (A2)
00003092  504F      5264          addq.w    #8,A7
                    5265   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00003094  4878 002E 5266          pea       46
00003098  4878 2456 5267          pea       _HandleBreakPoint.L
0000309C  4E92      5268          jsr       (A2)
0000309E  504F      5269          addq.w    #8,A7
                    5270   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
000030A0  4878 001D 5271          pea       29
000030A4  4878 1AFA 5272          pea       _DumpRegistersandPause.L
000030A8  4E92      5273          jsr       (A2)
000030AA  504F      5274          addq.w    #8,A7
                    5275   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
000030AC  4878 0002 5276          pea       2
000030B0  4878 2A98 5277          pea       _BusError.L
000030B4  4E92      5278          jsr       (A2)
000030B6  504F      5279          addq.w    #8,A7
                    5280   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
000030B8  4878 0003 5281          pea       3
000030BC  4878 2AA6 5282          pea       _AddressError.L
000030C0  4E92      5283          jsr       (A2)
000030C2  504F      5284          addq.w    #8,A7
                    5285   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
000030C4  4878 0004 5286          pea       4
000030C8  4878 2AB4 5287          pea       _IllegalInstruction.L
000030CC  4E92      5288          jsr       (A2)
000030CE  504F      5289          addq.w    #8,A7
                    5290   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
000030D0  4878 0005 5291          pea       5
000030D4  4878 2AC2 5292          pea       _Dividebyzero.L
000030D8  4E92      5293          jsr       (A2)
000030DA  504F      5294          addq.w    #8,A7
                    5295   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
000030DC  4878 0006 5296          pea       6
000030E0  4878 2AD0 5297          pea       _Check.L
000030E4  4E92      5298          jsr       (A2)
000030E6  504F      5299          addq.w    #8,A7
                    5300   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
000030E8  4878 0007 5301          pea       7
000030EC  4878 2ADE 5302          pea       _Trapv.L
000030F0  4E92      5303          jsr       (A2)
000030F2  504F      5304          addq.w    #8,A7
                    5305   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
000030F4  4878 0008 5306          pea       8
000030F8  4878 2AEC 5307          pea       _PrivError.L
000030FC  4E92      5308          jsr       (A2)
000030FE  504F      5309          addq.w    #8,A7
                    5310   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00003100  4878 000F 5311          pea       15
00003104  4878 2AFA 5312          pea       _UnitIRQ.L
00003108  4E92      5313          jsr       (A2)
0000310A  504F      5314          addq.w    #8,A7
                    5315   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
0000310C  4878 0018 5316          pea       24
00003110  4878 2AD0 5317          pea       _Check.L
00003114  4E92      5318          jsr       (A2)
00003116  504F      5319          addq.w    #8,A7
                    5320   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00003118  4EB8 0BA6 5321          jsr       _FlushKeyboard
                    5322   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
0000311C  4239 0040 5323          clr.b     4194314
00003120  000A      
                    5324   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5325   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5326   main_7:
00003122  1039 0040 5327          move.b    4194306,D0
00003126  0002      
00003128  C03C 0002 5328          and.b     #2,D0
0000312C  0C00 0002 5329          cmp.b     #2,D0
00003130  662A      5330          bne.s     main_9
                    5331   ; LoadFromFlashChip();
00003132  4EB8 14F0 5332          jsr       _LoadFromFlashChip
                    5333   ; printf("\r\nRunning.....") ;
00003136  4879 0000 5334          pea       @m68kde~1_168.L
0000313A  7784      
0000313C  4E93      5335          jsr       (A3)
0000313E  584F      5336          addq.w    #4,A7
                    5337   ; Oline1("Running.....") ;
00003140  4879 0000 5338          pea       @m68kde~1_169.L
00003144  7794      
00003146  4EB8 0A02 5339          jsr       _Oline1
0000314A  584F      5340          addq.w    #4,A7
                    5341   ; GoFlag = 1;
0000314C  23FC 0000 5342          move.l    #1,_GoFlag.L
00003150  0001 0B00 
00003154  00DC      
                    5343   ; go() ;
00003156  4EB8 08B8 5344          jsr       _go
0000315A  60C6      5345          bra       main_7
                    5346   main_9:
                    5347   ; }
                    5348   ; // otherwise start the debug monitor
                    5349   ; Oline0(StudentName) ;
0000315C  2F2E FFF8 5350          move.l    -8(A6),-(A7)
00003160  4EB8 09D4 5351          jsr       _Oline0
00003164  584F      5352          addq.w    #4,A7
                    5353   ; Oline1(StudentNumber) ;
00003166  2F2E FFFC 5354          move.l    -4(A6),-(A7)
0000316A  4EB8 0A02 5355          jsr       _Oline1
0000316E  584F      5356          addq.w    #4,A7
                    5357   ; printf("\r\n%s", BugMessage) ;
00003170  2F2E FFF0 5358          move.l    -16(A6),-(A7)
00003174  4879 0000 5359          pea       @m68kde~1_170.L
00003178  77A2      
0000317A  4E93      5360          jsr       (A3)
0000317C  504F      5361          addq.w    #8,A7
                    5362   ; printf("\r\n%s", CopyrightMessage) ;
0000317E  2F2E FFF4 5363          move.l    -12(A6),-(A7)
00003182  4879 0000 5364          pea       @m68kde~1_170.L
00003186  77A2      
00003188  4E93      5365          jsr       (A3)
0000318A  504F      5366          addq.w    #8,A7
                    5367   ; menu();
0000318C  4EB8 2764 5368          jsr       _menu
00003190  4CDF 0C04 5369          movem.l   (A7)+,D2/A2/A3
00003194  4E5E      5370          unlk      A6
00003196  4E75      5371          rts
                    5372   ; }
                    5373   ; void FormatInstruction(void)    // for disassembly
                    5374   ; {
                    5375   _FormatInstruction:
00003198  4E56 FEC0 5376          link      A6,#-320
0000319C  48E7 3C20 5377          movem.l   D2/D3/D4/D5/A2,-(A7)
000031A0  45EE FEC0 5378          lea       -320(A6),A2
                    5379   ; short i, ilen = 0 ;
000031A4  4245      5380          clr.w     D5
                    5381   ; char *iptr = Instruction ;
000031A6  41F9 0B00 5382          lea       _Instruction.L,A0
000031AA  04E2      
000031AC  2608      5383          move.l    A0,D3
                    5384   ; char *Formatted[80], *fptr ;
                    5385   ; fptr = Formatted ;
000031AE  280A      5386          move.l    A2,D4
                    5387   ; for(i = 0; i < (short)(80); i ++)
000031B0  4242      5388          clr.w     D2
                    5389   FormatInstruction_1:
000031B2  0C42 0050 5390          cmp.w     #80,D2
000031B6  6C0E      5391          bge.s     FormatInstruction_3
                    5392   ; Formatted[i] = (char)(0);          // set formatted string to null
000031B8  48C2      5393          ext.l     D2
000031BA  2002      5394          move.l    D2,D0
000031BC  E588      5395          lsl.l     #2,D0
000031BE  42B2 0800 5396          clr.l     0(A2,D0.L)
000031C2  5242      5397          addq.w    #1,D2
000031C4  60EC      5398          bra       FormatInstruction_1
                    5399   FormatInstruction_3:
                    5400   ; while((*iptr != ' '))   {   // while ot a space char
                    5401   FormatInstruction_4:
000031C6  2043      5402          move.l    D3,A0
000031C8  1010      5403          move.b    (A0),D0
000031CA  0C00 0020 5404          cmp.b     #32,D0
000031CE  6718      5405          beq.s     FormatInstruction_6
                    5406   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
000031D0  2043      5407          move.l    D3,A0
000031D2  5283      5408          addq.l    #1,D3
000031D4  2244      5409          move.l    D4,A1
000031D6  5284      5410          addq.l    #1,D4
000031D8  1290      5411          move.b    (A0),(A1)
                    5412   ; ilen ++ ;               // count length of string as we go
000031DA  5245      5413          addq.w    #1,D5
                    5414   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
000031DC  2043      5415          move.l    D3,A0
000031DE  1010      5416          move.b    (A0),D0
000031E0  6604      5417          bne.s     FormatInstruction_7
                    5418   ; return ;
000031E2  6000 003E 5419          bra       FormatInstruction_9
                    5420   FormatInstruction_7:
000031E6  60DE      5421          bra       FormatInstruction_4
                    5422   FormatInstruction_6:
                    5423   ; }
                    5424   ; // must still be more text to process otherwise we would have returned above if got to the end
                    5425   ; for(i = 0; i < ((short)(8) - ilen); i++)
000031E8  4242      5426          clr.w     D2
                    5427   FormatInstruction_10:
000031EA  7008      5428          moveq     #8,D0
000031EC  4880      5429          ext.w     D0
000031EE  9045      5430          sub.w     D5,D0
000031F0  B440      5431          cmp.w     D0,D2
000031F2  6C0C      5432          bge.s     FormatInstruction_12
                    5433   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
000031F4  2044      5434          move.l    D4,A0
000031F6  5284      5435          addq.l    #1,D4
000031F8  10BC 0020 5436          move.b    #32,(A0)
000031FC  5242      5437          addq.w    #1,D2
000031FE  60EA      5438          bra       FormatInstruction_10
                    5439   FormatInstruction_12:
                    5440   ; // now skip over any spaces in original unformatted string before copying the rest
                    5441   ; while((*iptr == ' '))
                    5442   FormatInstruction_13:
00003200  2043      5443          move.l    D3,A0
00003202  1010      5444          move.b    (A0),D0
00003204  0C00 0020 5445          cmp.b     #32,D0
00003208  6604      5446          bne.s     FormatInstruction_15
                    5447   ; iptr++ ;
0000320A  5283      5448          addq.l    #1,D3
0000320C  60F2      5449          bra       FormatInstruction_13
                    5450   FormatInstruction_15:
                    5451   ; strcat(fptr,iptr) ;
0000320E  2F03      5452          move.l    D3,-(A7)
00003210  2F04      5453          move.l    D4,-(A7)
00003212  4EB9 0000 5454          jsr       _strcat
00003216  5B14      
00003218  504F      5455          addq.w    #8,A7
                    5456   ; strcpyInstruction(Formatted) ;
0000321A  2F0A      5457          move.l    A2,-(A7)
0000321C  4EB8 0CE6 5458          jsr       _strcpyInstruction
00003220  584F      5459          addq.w    #4,A7
                    5460   FormatInstruction_9:
00003222  4CDF 043C 5461          movem.l   (A7)+,D2/D3/D4/D5/A2
00003226  4E5E      5462          unlk      A6
00003228  4E75      5463          rts
                    5464   ; }
                    5465   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    5466   ; {
                    5467   _Decode2BitOperandSize:
0000322A  4E56 0000 5468          link      A6,#0
0000322E  48E7 3020 5469          movem.l   D2/D3/A2,-(A7)
00003232  362E 000A 5470          move.w    10(A6),D3
00003236  C6BC 0000 5471          and.l     #65535,D3
0000323A  FFFF      
0000323C  45F8 0CCC 5472          lea       _strcatInstruction.L,A2
                    5473   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    5474   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00003240  3003      5475          move.w    D3,D0
00003242  C07C 00C0 5476          and.w     #192,D0
00003246  EC48      5477          lsr.w     #6,D0
00003248  3600      5478          move.w    D0,D3
                    5479   ; if(OpCode == (unsigned short int)(0))   {
0000324A  4A43      5480          tst.w     D3
0000324C  660E      5481          bne.s     Decode2BitOperandSize_1
                    5482   ; strcatInstruction(".B ") ;
0000324E  4879 0000 5483          pea       @m68kde~1_171.L
00003252  77A8      
00003254  4E92      5484          jsr       (A2)
00003256  584F      5485          addq.w    #4,A7
                    5486   ; DataSize = 1 ;
00003258  7401      5487          moveq     #1,D2
0000325A  6020      5488          bra.s     Decode2BitOperandSize_4
                    5489   Decode2BitOperandSize_1:
                    5490   ; }
                    5491   ; else if(OpCode == (unsigned short int)(1)) {
0000325C  0C43 0001 5492          cmp.w     #1,D3
00003260  660E      5493          bne.s     Decode2BitOperandSize_3
                    5494   ; strcatInstruction(".W ") ;
00003262  4879 0000 5495          pea       @m68kde~1_172.L
00003266  77AC      
00003268  4E92      5496          jsr       (A2)
0000326A  584F      5497          addq.w    #4,A7
                    5498   ; DataSize = 1 ;
0000326C  7401      5499          moveq     #1,D2
0000326E  600C      5500          bra.s     Decode2BitOperandSize_4
                    5501   Decode2BitOperandSize_3:
                    5502   ; }
                    5503   ; else {
                    5504   ; strcatInstruction(".L ") ;
00003270  4879 0000 5505          pea       @m68kde~1_173.L
00003274  77B0      
00003276  4E92      5506          jsr       (A2)
00003278  584F      5507          addq.w    #4,A7
                    5508   ; DataSize = 2 ;
0000327A  7402      5509          moveq     #2,D2
                    5510   Decode2BitOperandSize_4:
                    5511   ; }
                    5512   ; return DataSize;
0000327C  3002      5513          move.w    D2,D0
0000327E  4CDF 040C 5514          movem.l   (A7)+,D2/D3/A2
00003282  4E5E      5515          unlk      A6
00003284  4E75      5516          rts
                    5517   ; }
                    5518   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5519   ; {
                    5520   _Decode3BitDataRegister:
00003286  4E56 FFFC 5521          link      A6,#-4
0000328A  2F0A      5522          move.l    A2,-(A7)
0000328C  45EE FFFC 5523          lea       -4(A6),A2
                    5524   ; unsigned char RegNumber[3] ;
                    5525   ; RegNumber[0] = 'D' ;
00003290  14BC 0044 5526          move.b    #68,(A2)
                    5527   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00003294  7030      5528          moveq     #48,D0
00003296  322E 000A 5529          move.w    10(A6),D1
0000329A  C27C 0E00 5530          and.w     #3584,D1
0000329E  E049      5531          lsr.w     #8,D1
000032A0  E249      5532          lsr.w     #1,D1
000032A2  D001      5533          add.b     D1,D0
000032A4  1540 0001 5534          move.b    D0,1(A2)
                    5535   ; RegNumber[2] = 0 ;
000032A8  422A 0002 5536          clr.b     2(A2)
                    5537   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
000032AC  2F0A      5538          move.l    A2,-(A7)
000032AE  4EB8 0CCC 5539          jsr       _strcatInstruction
000032B2  584F      5540          addq.w    #4,A7
000032B4  245F      5541          move.l    (A7)+,A2
000032B6  4E5E      5542          unlk      A6
000032B8  4E75      5543          rts
                    5544   ; }
                    5545   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5546   ; {
                    5547   _Decode3BitAddressRegister:
000032BA  4E56 FFFC 5548          link      A6,#-4
000032BE  2F0A      5549          move.l    A2,-(A7)
000032C0  45EE FFFC 5550          lea       -4(A6),A2
                    5551   ; unsigned char RegNumber[3];
                    5552   ; RegNumber[0] = 'A' ;
000032C4  14BC 0041 5553          move.b    #65,(A2)
                    5554   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
000032C8  7030      5555          moveq     #48,D0
000032CA  322E 000A 5556          move.w    10(A6),D1
000032CE  D001      5557          add.b     D1,D0
000032D0  1540 0001 5558          move.b    D0,1(A2)
                    5559   ; RegNumber[2] = 0 ;
000032D4  422A 0002 5560          clr.b     2(A2)
                    5561   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
000032D8  2F0A      5562          move.l    A2,-(A7)
000032DA  4EB8 0CCC 5563          jsr       _strcatInstruction
000032DE  584F      5564          addq.w    #4,A7
000032E0  245F      5565          move.l    (A7)+,A2
000032E2  4E5E      5566          unlk      A6
000032E4  4E75      5567          rts
                    5568   ; }
                    5569   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5570   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5571   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5572   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5573   ; {
                    5574   _DecodeBWLDataAfterOpCodeForMove:
000032E6  4E56 0000 5575          link      A6,#0
000032EA  48E7 3030 5576          movem.l   D2/D3/A2/A3,-(A7)
000032EE  242E 0008 5577          move.l    8(A6),D2
000032F2  45F9 0B00 5578          lea       _TempString.L,A2
000032F6  0546      
000032F8  47F9 0000 5579          lea       _sprintf.L,A3
000032FC  5AE2      
                    5580   ; unsigned char OperandSize ;
                    5581   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
000032FE  2042      5582          move.l    D2,A0
00003300  3010      5583          move.w    (A0),D0
00003302  E048      5584          lsr.w     #8,D0
00003304  E848      5585          lsr.w     #4,D0
00003306  C07C 0003 5586          and.w     #3,D0
0000330A  1600      5587          move.b    D0,D3
                    5588   ; InstructionSize += 1;
0000330C  52B9 0B00 5589          addq.l    #1,_InstructionSize.L
00003310  017E      
                    5590   ; if(OperandSize == (char)(1))                // #byte value
00003312  0C03 0001 5591          cmp.b     #1,D3
00003316  6620      5592          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5593   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003318  2042      5594          move.l    D2,A0
0000331A  3228 0002 5595          move.w    2(A0),D1
0000331E  C2BC 0000 5596          and.l     #65535,D1
00003322  FFFF      
00003324  2F01      5597          move.l    D1,-(A7)
00003326  4879 0000 5598          pea       @m68kde~1_174.L
0000332A  77B4      
0000332C  2F0A      5599          move.l    A2,-(A7)
0000332E  4E93      5600          jsr       (A3)
00003330  DEFC 000C 5601          add.w     #12,A7
00003334  6000 0068 5602          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5603   DecodeBWLDataAfterOpCodeForMove_1:
                    5604   ; else if(OperandSize == (char)(3))          // #word value
00003338  0C03 0003 5605          cmp.b     #3,D3
0000333C  6620      5606          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5607   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
0000333E  2042      5608          move.l    D2,A0
00003340  3228 0002 5609          move.w    2(A0),D1
00003344  C2BC 0000 5610          and.l     #65535,D1
00003348  FFFF      
0000334A  2F01      5611          move.l    D1,-(A7)
0000334C  4879 0000 5612          pea       @m68kde~1_174.L
00003350  77B4      
00003352  2F0A      5613          move.l    A2,-(A7)
00003354  4E93      5614          jsr       (A3)
00003356  DEFC 000C 5615          add.w     #12,A7
0000335A  6000 0042 5616          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5617   DecodeBWLDataAfterOpCodeForMove_3:
                    5618   ; else if(OperandSize == (char)(2)) {                                       // long value
0000335E  0C03 0002 5619          cmp.b     #2,D3
00003362  6600 003A 5620          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5621   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00003366  2042      5622          move.l    D2,A0
00003368  3228 0002 5623          move.w    2(A0),D1
0000336C  C2BC 0000 5624          and.l     #65535,D1
00003370  FFFF      
00003372  E189      5625          lsl.l     #8,D1
00003374  E189      5626          lsl.l     #8,D1
00003376  2042      5627          move.l    D2,A0
00003378  2F00      5628          move.l    D0,-(A7)
0000337A  3028 0004 5629          move.w    4(A0),D0
0000337E  C0BC 0000 5630          and.l     #65535,D0
00003382  FFFF      
00003384  8280      5631          or.l      D0,D1
00003386  201F      5632          move.l    (A7)+,D0
00003388  2F01      5633          move.l    D1,-(A7)
0000338A  4879 0000 5634          pea       @m68kde~1_174.L
0000338E  77B4      
00003390  2F0A      5635          move.l    A2,-(A7)
00003392  4E93      5636          jsr       (A3)
00003394  DEFC 000C 5637          add.w     #12,A7
                    5638   ; InstructionSize += 1;
00003398  52B9 0B00 5639          addq.l    #1,_InstructionSize.L
0000339C  017E      
                    5640   DecodeBWLDataAfterOpCodeForMove_5:
                    5641   ; }
                    5642   ; strcatInstruction(TempString) ;
0000339E  2F0A      5643          move.l    A2,-(A7)
000033A0  4EB8 0CCC 5644          jsr       _strcatInstruction
000033A4  584F      5645          addq.w    #4,A7
000033A6  4CDF 0C0C 5646          movem.l   (A7)+,D2/D3/A2/A3
000033AA  4E5E      5647          unlk      A6
000033AC  4E75      5648          rts
                    5649   ; }
                    5650   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5651   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5652   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5653   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5654   ; {
                    5655   _DecodeBWLDataAfterOpCode:
000033AE  4E56 0000 5656          link      A6,#0
000033B2  48E7 3038 5657          movem.l   D2/D3/A2/A3/A4,-(A7)
000033B6  262E 0008 5658          move.l    8(A6),D3
000033BA  45F9 0B00 5659          lea       _TempString.L,A2
000033BE  0546      
000033C0  47F9 0000 5660          lea       _sprintf.L,A3
000033C4  5AE2      
000033C6  49F9 0B00 5661          lea       _InstructionSize.L,A4
000033CA  017E      
                    5662   ; unsigned char OperandSize ;
                    5663   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
000033CC  2043      5664          move.l    D3,A0
000033CE  3010      5665          move.w    (A0),D0
000033D0  C07C 01C0 5666          and.w     #448,D0
000033D4  EC48      5667          lsr.w     #6,D0
000033D6  1400      5668          move.b    D0,D2
                    5669   ; InstructionSize += 1;
000033D8  5294      5670          addq.l    #1,(A4)
                    5671   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
000033DA  4A02      5672          tst.b     D2
000033DC  6706      5673          beq.s     DecodeBWLDataAfterOpCode_3
000033DE  0C02 0004 5674          cmp.b     #4,D2
000033E2  6620      5675          bne.s     DecodeBWLDataAfterOpCode_1
                    5676   DecodeBWLDataAfterOpCode_3:
                    5677   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000033E4  2043      5678          move.l    D3,A0
000033E6  3228 0002 5679          move.w    2(A0),D1
000033EA  C2BC 0000 5680          and.l     #65535,D1
000033EE  FFFF      
000033F0  2F01      5681          move.l    D1,-(A7)
000033F2  4879 0000 5682          pea       @m68kde~1_174.L
000033F6  77B4      
000033F8  2F0A      5683          move.l    A2,-(A7)
000033FA  4E93      5684          jsr       (A3)
000033FC  DEFC 000C 5685          add.w     #12,A7
00003400  6000 007C 5686          bra       DecodeBWLDataAfterOpCode_7
                    5687   DecodeBWLDataAfterOpCode_1:
                    5688   ; // #word value 7 is used by divs.w instruction (not divu)
                    5689   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5690   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5691   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00003404  0C02 0001 5692          cmp.b     #1,D2
00003408  670C      5693          beq.s     DecodeBWLDataAfterOpCode_6
0000340A  0C02 0005 5694          cmp.b     #5,D2
0000340E  6706      5695          beq.s     DecodeBWLDataAfterOpCode_6
00003410  0C02 0003 5696          cmp.b     #3,D2
00003414  6620      5697          bne.s     DecodeBWLDataAfterOpCode_4
                    5698   DecodeBWLDataAfterOpCode_6:
                    5699   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003416  2043      5700          move.l    D3,A0
00003418  3228 0002 5701          move.w    2(A0),D1
0000341C  C2BC 0000 5702          and.l     #65535,D1
00003420  FFFF      
00003422  2F01      5703          move.l    D1,-(A7)
00003424  4879 0000 5704          pea       @m68kde~1_174.L
00003428  77B4      
0000342A  2F0A      5705          move.l    A2,-(A7)
0000342C  4E93      5706          jsr       (A3)
0000342E  DEFC 000C 5707          add.w     #12,A7
00003432  6000 004A 5708          bra       DecodeBWLDataAfterOpCode_7
                    5709   DecodeBWLDataAfterOpCode_4:
                    5710   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00003436  0C02 0002 5711          cmp.b     #2,D2
0000343A  670E      5712          beq.s     DecodeBWLDataAfterOpCode_9
0000343C  0C02 0006 5713          cmp.b     #6,D2
00003440  6708      5714          beq.s     DecodeBWLDataAfterOpCode_9
00003442  0C02 0007 5715          cmp.b     #7,D2
00003446  6600 0036 5716          bne       DecodeBWLDataAfterOpCode_7
                    5717   DecodeBWLDataAfterOpCode_9:
                    5718   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
0000344A  2043      5719          move.l    D3,A0
0000344C  3228 0002 5720          move.w    2(A0),D1
00003450  C2BC 0000 5721          and.l     #65535,D1
00003454  FFFF      
00003456  E189      5722          lsl.l     #8,D1
00003458  E189      5723          lsl.l     #8,D1
0000345A  2043      5724          move.l    D3,A0
0000345C  2F00      5725          move.l    D0,-(A7)
0000345E  3028 0004 5726          move.w    4(A0),D0
00003462  C0BC 0000 5727          and.l     #65535,D0
00003466  FFFF      
00003468  8280      5728          or.l      D0,D1
0000346A  201F      5729          move.l    (A7)+,D0
0000346C  2F01      5730          move.l    D1,-(A7)
0000346E  4879 0000 5731          pea       @m68kde~1_174.L
00003472  77B4      
00003474  2F0A      5732          move.l    A2,-(A7)
00003476  4E93      5733          jsr       (A3)
00003478  DEFC 000C 5734          add.w     #12,A7
                    5735   ; InstructionSize += 1;
0000347C  5294      5736          addq.l    #1,(A4)
                    5737   DecodeBWLDataAfterOpCode_7:
                    5738   ; }
                    5739   ; // special case for divs - bugger!!!
                    5740   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
0000347E  2043      5741          move.l    D3,A0
00003480  3010      5742          move.w    (A0),D0
00003482  C07C F1C0 5743          and.w     #61888,D0
00003486  0C40 81C0 5744          cmp.w     #33216,D0
0000348A  6622      5745          bne.s     DecodeBWLDataAfterOpCode_10
                    5746   ; {
                    5747   ; InstructionSize = 2 ;
0000348C  28BC 0000 5748          move.l    #2,(A4)
00003490  0002      
                    5749   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003492  2043      5750          move.l    D3,A0
00003494  3228 0002 5751          move.w    2(A0),D1
00003498  C2BC 0000 5752          and.l     #65535,D1
0000349C  FFFF      
0000349E  2F01      5753          move.l    D1,-(A7)
000034A0  4879 0000 5754          pea       @m68kde~1_174.L
000034A4  77B4      
000034A6  2F0A      5755          move.l    A2,-(A7)
000034A8  4E93      5756          jsr       (A3)
000034AA  DEFC 000C 5757          add.w     #12,A7
                    5758   DecodeBWLDataAfterOpCode_10:
                    5759   ; }
                    5760   ; strcatInstruction(TempString) ;
000034AE  2F0A      5761          move.l    A2,-(A7)
000034B0  4EB8 0CCC 5762          jsr       _strcatInstruction
000034B4  584F      5763          addq.w    #4,A7
000034B6  4CDF 1C0C 5764          movem.l   (A7)+,D2/D3/A2/A3/A4
000034BA  4E5E      5765          unlk      A6
000034BC  4E75      5766          rts
                    5767   ; }
                    5768   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5769   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5770   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5771   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5772   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5773   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5774   ; {
                    5775   _Decode6BitEA:
000034BE  4E56 FFF4 5776          link      A6,#-12
000034C2  48E7 3F3C 5777          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000034C6  45F8 0CCC 5778          lea       _strcatInstruction.L,A2
000034CA  47F9 0B00 5779          lea       _TempString.L,A3
000034CE  0546      
000034D0  282E 0008 5780          move.l    8(A6),D4
000034D4  49F9 0000 5781          lea       _sprintf.L,A4
000034D8  5AE2      
000034DA  4BF9 0B00 5782          lea       _InstructionSize.L,A5
000034DE  017E      
000034E0  3C2E 0012 5783          move.w    18(A6),D6
000034E4  CCBC 0000 5784          and.l     #65535,D6
000034E8  FFFF      
                    5785   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5786   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5787   ; unsigned char RegNumber[3];
                    5788   ; signed char offset ;
                    5789   ; unsigned short int Xn, XnSize ;
                    5790   ; if(EAChoice == 0)   {   // if EA in bits 5-0
000034EA  202E 000C 5791          move.l    12(A6),D0
000034EE  6620      5792          bne.s     Decode6BitEA_1
                    5793   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
000034F0  2044      5794          move.l    D4,A0
000034F2  3010      5795          move.w    (A0),D0
000034F4  E648      5796          lsr.w     #3,D0
000034F6  C07C 00FF 5797          and.w     #255,D0
000034FA  C07C 0007 5798          and.w     #7,D0
000034FE  1A00      5799          move.b    D0,D5
                    5800   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
00003500  2044      5801          move.l    D4,A0
00003502  3010      5802          move.w    (A0),D0
00003504  C07C 00FF 5803          and.w     #255,D0
00003508  C07C 0007 5804          and.w     #7,D0
0000350C  1600      5805          move.b    D0,D3
0000350E  6022      5806          bra.s     Decode6BitEA_2
                    5807   Decode6BitEA_1:
                    5808   ; }
                    5809   ; else    {               // else EA in bits 11-6
                    5810   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
00003510  2044      5811          move.l    D4,A0
00003512  3010      5812          move.w    (A0),D0
00003514  EC48      5813          lsr.w     #6,D0
00003516  C07C 00FF 5814          and.w     #255,D0
0000351A  C07C 0007 5815          and.w     #7,D0
0000351E  1A00      5816          move.b    D0,D5
                    5817   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00003520  2044      5818          move.l    D4,A0
00003522  3010      5819          move.w    (A0),D0
00003524  E048      5820          lsr.w     #8,D0
00003526  E248      5821          lsr.w     #1,D0
00003528  C07C 00FF 5822          and.w     #255,D0
0000352C  C07C 0007 5823          and.w     #7,D0
00003530  1600      5824          move.b    D0,D3
                    5825   Decode6BitEA_2:
                    5826   ; }
                    5827   ; if(EAChoice == 0)    {
00003532  202E 000C 5828          move.l    12(A6),D0
00003536  6600 0034 5829          bne       Decode6BitEA_3
                    5830   ; ExWord1 = OpCode[1+DataSize] ;
0000353A  2044      5831          move.l    D4,A0
0000353C  7001      5832          moveq     #1,D0
0000353E  4880      5833          ext.w     D0
00003540  48C0      5834          ext.l     D0
00003542  CCBC 0000 5835          and.l     #65535,D6
00003546  FFFF      
00003548  D086      5836          add.l     D6,D0
0000354A  E388      5837          lsl.l     #1,D0
0000354C  3430 0800 5838          move.w    0(A0,D0.L),D2
                    5839   ; ExWord2 = OpCode[2+DataSize] ;
00003550  2044      5840          move.l    D4,A0
00003552  7002      5841          moveq     #2,D0
00003554  4880      5842          ext.w     D0
00003556  48C0      5843          ext.l     D0
00003558  CCBC 0000 5844          and.l     #65535,D6
0000355C  FFFF      
0000355E  D086      5845          add.l     D6,D0
00003560  E388      5846          lsl.l     #1,D0
00003562  3D70 0800 5847          move.w    0(A0,D0.L),-8(A6)
00003566  FFF8      
00003568  6000 007E 5848          bra       Decode6BitEA_7
                    5849   Decode6BitEA_3:
                    5850   ; }
                    5851   ; else if(EAChoice == 1)   {
0000356C  202E 000C 5852          move.l    12(A6),D0
00003570  0C80 0000 5853          cmp.l     #1,D0
00003574  0001      
00003576  6600 0034 5854          bne       Decode6BitEA_5
                    5855   ; ExWord1 = OpCode[3+DataSize] ;
0000357A  2044      5856          move.l    D4,A0
0000357C  7003      5857          moveq     #3,D0
0000357E  4880      5858          ext.w     D0
00003580  48C0      5859          ext.l     D0
00003582  CCBC 0000 5860          and.l     #65535,D6
00003586  FFFF      
00003588  D086      5861          add.l     D6,D0
0000358A  E388      5862          lsl.l     #1,D0
0000358C  3430 0800 5863          move.w    0(A0,D0.L),D2
                    5864   ; ExWord2 = OpCode[4+DataSize] ;
00003590  2044      5865          move.l    D4,A0
00003592  7004      5866          moveq     #4,D0
00003594  4880      5867          ext.w     D0
00003596  48C0      5868          ext.l     D0
00003598  CCBC 0000 5869          and.l     #65535,D6
0000359C  FFFF      
0000359E  D086      5870          add.l     D6,D0
000035A0  E388      5871          lsl.l     #1,D0
000035A2  3D70 0800 5872          move.w    0(A0,D0.L),-8(A6)
000035A6  FFF8      
000035A8  6000 003E 5873          bra       Decode6BitEA_7
                    5874   Decode6BitEA_5:
                    5875   ; }
                    5876   ; else if(EAChoice == 2)   {  // for move instruction
000035AC  202E 000C 5877          move.l    12(A6),D0
000035B0  0C80 0000 5878          cmp.l     #2,D0
000035B4  0002      
000035B6  6600 0030 5879          bne       Decode6BitEA_7
                    5880   ; ExWord1 = OpCode[1+DataSize] ;
000035BA  2044      5881          move.l    D4,A0
000035BC  7001      5882          moveq     #1,D0
000035BE  4880      5883          ext.w     D0
000035C0  48C0      5884          ext.l     D0
000035C2  CCBC 0000 5885          and.l     #65535,D6
000035C6  FFFF      
000035C8  D086      5886          add.l     D6,D0
000035CA  E388      5887          lsl.l     #1,D0
000035CC  3430 0800 5888          move.w    0(A0,D0.L),D2
                    5889   ; ExWord2 = OpCode[2+DataSize] ;
000035D0  2044      5890          move.l    D4,A0
000035D2  7002      5891          moveq     #2,D0
000035D4  4880      5892          ext.w     D0
000035D6  48C0      5893          ext.l     D0
000035D8  CCBC 0000 5894          and.l     #65535,D6
000035DC  FFFF      
000035DE  D086      5895          add.l     D6,D0
000035E0  E388      5896          lsl.l     #1,D0
000035E2  3D70 0800 5897          move.w    0(A0,D0.L),-8(A6)
000035E6  FFF8      
                    5898   Decode6BitEA_7:
                    5899   ; }
                    5900   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
000035E8  4A05      5901          tst.b     D5
000035EA  661E      5902          bne.s     Decode6BitEA_9
                    5903   ; RegNumber[0] = 'D' ;
000035EC  1D7C 0044 5904          move.b    #68,-6+0(A6)
000035F0  FFFA      
                    5905   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
000035F2  7030      5906          moveq     #48,D0
000035F4  D003      5907          add.b     D3,D0
000035F6  1D40 FFFB 5908          move.b    D0,-6+1(A6)
                    5909   ; RegNumber[2] = 0 ;
000035FA  422E FFFC 5910          clr.b     -6+2(A6)
                    5911   ; strcatInstruction(RegNumber) ;
000035FE  486E FFFA 5912          pea       -6(A6)
00003602  4E92      5913          jsr       (A2)
00003604  584F      5914          addq.w    #4,A7
00003606  6000 02D6 5915          bra       Decode6BitEA_44
                    5916   Decode6BitEA_9:
                    5917   ; }
                    5918   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
0000360A  0C05 0001 5919          cmp.b     #1,D5
0000360E  6616      5920          bne.s     Decode6BitEA_11
                    5921   ; Decode3BitAddressRegister(OperandRegister) ;
00003610  C67C 00FF 5922          and.w     #255,D3
00003614  C6BC 0000 5923          and.l     #65535,D3
00003618  FFFF      
0000361A  2F03      5924          move.l    D3,-(A7)
0000361C  4EB8 32BA 5925          jsr       _Decode3BitAddressRegister
00003620  584F      5926          addq.w    #4,A7
00003622  6000 02BA 5927          bra       Decode6BitEA_44
                    5928   Decode6BitEA_11:
                    5929   ; }
                    5930   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
00003626  0C05 0002 5931          cmp.b     #2,D5
0000362A  662A      5932          bne.s     Decode6BitEA_13
                    5933   ; strcatInstruction("(") ;
0000362C  4879 0000 5934          pea       @m68kde~1_175.L
00003630  77BA      
00003632  4E92      5935          jsr       (A2)
00003634  584F      5936          addq.w    #4,A7
                    5937   ; Decode3BitAddressRegister(OperandRegister) ;
00003636  C67C 00FF 5938          and.w     #255,D3
0000363A  C6BC 0000 5939          and.l     #65535,D3
0000363E  FFFF      
00003640  2F03      5940          move.l    D3,-(A7)
00003642  4EB8 32BA 5941          jsr       _Decode3BitAddressRegister
00003646  584F      5942          addq.w    #4,A7
                    5943   ; strcatInstruction(")") ;
00003648  4879 0000 5944          pea       @m68kde~1_176.L
0000364C  77BC      
0000364E  4E92      5945          jsr       (A2)
00003650  584F      5946          addq.w    #4,A7
00003652  6000 028A 5947          bra       Decode6BitEA_44
                    5948   Decode6BitEA_13:
                    5949   ; }
                    5950   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
00003656  0C05 0003 5951          cmp.b     #3,D5
0000365A  662A      5952          bne.s     Decode6BitEA_15
                    5953   ; strcatInstruction("(") ;
0000365C  4879 0000 5954          pea       @m68kde~1_175.L
00003660  77BA      
00003662  4E92      5955          jsr       (A2)
00003664  584F      5956          addq.w    #4,A7
                    5957   ; Decode3BitAddressRegister(OperandRegister) ;
00003666  C67C 00FF 5958          and.w     #255,D3
0000366A  C6BC 0000 5959          and.l     #65535,D3
0000366E  FFFF      
00003670  2F03      5960          move.l    D3,-(A7)
00003672  4EB8 32BA 5961          jsr       _Decode3BitAddressRegister
00003676  584F      5962          addq.w    #4,A7
                    5963   ; strcatInstruction(")+") ;
00003678  4879 0000 5964          pea       @m68kde~1_177.L
0000367C  77BE      
0000367E  4E92      5965          jsr       (A2)
00003680  584F      5966          addq.w    #4,A7
00003682  6000 025A 5967          bra       Decode6BitEA_44
                    5968   Decode6BitEA_15:
                    5969   ; }
                    5970   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
00003686  0C05 0004 5971          cmp.b     #4,D5
0000368A  662A      5972          bne.s     Decode6BitEA_17
                    5973   ; strcatInstruction("-(") ;
0000368C  4879 0000 5974          pea       @m68kde~1_178.L
00003690  77C2      
00003692  4E92      5975          jsr       (A2)
00003694  584F      5976          addq.w    #4,A7
                    5977   ; Decode3BitAddressRegister(OperandRegister) ;
00003696  C67C 00FF 5978          and.w     #255,D3
0000369A  C6BC 0000 5979          and.l     #65535,D3
0000369E  FFFF      
000036A0  2F03      5980          move.l    D3,-(A7)
000036A2  4EB8 32BA 5981          jsr       _Decode3BitAddressRegister
000036A6  584F      5982          addq.w    #4,A7
                    5983   ; strcatInstruction(")") ;
000036A8  4879 0000 5984          pea       @m68kde~1_176.L
000036AC  77BC      
000036AE  4E92      5985          jsr       (A2)
000036B0  584F      5986          addq.w    #4,A7
000036B2  6000 022A 5987          bra       Decode6BitEA_44
                    5988   Decode6BitEA_17:
                    5989   ; }
                    5990   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
000036B6  0C05 0005 5991          cmp.b     #5,D5
000036BA  6626      5992          bne.s     Decode6BitEA_19
                    5993   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
000036BC  C6BC 0000 5994          and.l     #255,D3
000036C0  00FF      
000036C2  2F03      5995          move.l    D3,-(A7)
000036C4  48C2      5996          ext.l     D2
000036C6  2F02      5997          move.l    D2,-(A7)
000036C8  4879 0000 5998          pea       @m68kde~1_179.L
000036CC  77C6      
000036CE  2F0B      5999          move.l    A3,-(A7)
000036D0  4E94      6000          jsr       (A4)
000036D2  DEFC 0010 6001          add.w     #16,A7
                    6002   ; strcatInstruction(TempString) ;
000036D6  2F0B      6003          move.l    A3,-(A7)
000036D8  4E92      6004          jsr       (A2)
000036DA  584F      6005          addq.w    #4,A7
                    6006   ; InstructionSize += 1;
000036DC  5295      6007          addq.l    #1,(A5)
000036DE  6000 01FE 6008          bra       Decode6BitEA_44
                    6009   Decode6BitEA_19:
                    6010   ; }
                    6011   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
000036E2  0C05 0006 6012          cmp.b     #6,D5
000036E6  6600 00AA 6013          bne       Decode6BitEA_21
                    6014   ; offset = ExWord1 & (short int)(0x00FF);
000036EA  3002      6015          move.w    D2,D0
000036EC  C07C 00FF 6016          and.w     #255,D0
000036F0  1D40 FFFD 6017          move.b    D0,-3(A6)
                    6018   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
000036F4  C6BC 0000 6019          and.l     #255,D3
000036F8  00FF      
000036FA  2F03      6020          move.l    D3,-(A7)
000036FC  122E FFFD 6021          move.b    -3(A6),D1
00003700  4881      6022          ext.w     D1
00003702  48C1      6023          ext.l     D1
00003704  2F01      6024          move.l    D1,-(A7)
00003706  4879 0000 6025          pea       @m68kde~1_180.L
0000370A  77CE      
0000370C  2F0B      6026          move.l    A3,-(A7)
0000370E  4E94      6027          jsr       (A4)
00003710  DEFC 0010 6028          add.w     #16,A7
                    6029   ; strcatInstruction(TempString) ;
00003714  2F0B      6030          move.l    A3,-(A7)
00003716  4E92      6031          jsr       (A2)
00003718  584F      6032          addq.w    #4,A7
                    6033   ; InstructionSize += 1;
0000371A  5295      6034          addq.l    #1,(A5)
                    6035   ; // decode the Xn bit
                    6036   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000371C  3002      6037          move.w    D2,D0
0000371E  C07C 8000 6038          and.w     #32768,D0
00003722  660C      6039          bne.s     Decode6BitEA_23
                    6040   ; strcatInstruction("D") ;
00003724  4879 0000 6041          pea       @m68kde~1_181.L
00003728  77D6      
0000372A  4E92      6042          jsr       (A2)
0000372C  584F      6043          addq.w    #4,A7
0000372E  600A      6044          bra.s     Decode6BitEA_24
                    6045   Decode6BitEA_23:
                    6046   ; else
                    6047   ; strcatInstruction("A") ;
00003730  4879 0000 6048          pea       @m68kde~1_182.L
00003734  77D8      
00003736  4E92      6049          jsr       (A2)
00003738  584F      6050          addq.w    #4,A7
                    6051   Decode6BitEA_24:
                    6052   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000373A  3002      6053          move.w    D2,D0
0000373C  C07C 7000 6054          and.w     #28672,D0
00003740  E048      6055          lsr.w     #8,D0
00003742  E848      6056          lsr.w     #4,D0
00003744  3D40 FFFE 6057          move.w    D0,-2(A6)
                    6058   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
00003748  322E FFFE 6059          move.w    -2(A6),D1
0000374C  C2BC 0000 6060          and.l     #65535,D1
00003750  FFFF      
00003752  2F01      6061          move.l    D1,-(A7)
00003754  4879 0000 6062          pea       @m68kde~1_183.L
00003758  77DA      
0000375A  2F0B      6063          move.l    A3,-(A7)
0000375C  4E94      6064          jsr       (A4)
0000375E  DEFC 000C 6065          add.w     #12,A7
                    6066   ; strcatInstruction(TempString) ;
00003762  2F0B      6067          move.l    A3,-(A7)
00003764  4E92      6068          jsr       (A2)
00003766  584F      6069          addq.w    #4,A7
                    6070   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
00003768  3002      6071          move.w    D2,D0
0000376A  C07C 0800 6072          and.w     #2048,D0
0000376E  E048      6073          lsr.w     #8,D0
00003770  E648      6074          lsr.w     #3,D0
00003772  3E00      6075          move.w    D0,D7
                    6076   ; if(XnSize == 0)
00003774  4A47      6077          tst.w     D7
00003776  660C      6078          bne.s     Decode6BitEA_25
                    6079   ; strcatInstruction(".W)") ;
00003778  4879 0000 6080          pea       @m68kde~1_184.L
0000377C  77DE      
0000377E  4E92      6081          jsr       (A2)
00003780  584F      6082          addq.w    #4,A7
00003782  600A      6083          bra.s     Decode6BitEA_26
                    6084   Decode6BitEA_25:
                    6085   ; else
                    6086   ; strcatInstruction(".L)") ;
00003784  4879 0000 6087          pea       @m68kde~1_185.L
00003788  77E2      
0000378A  4E92      6088          jsr       (A2)
0000378C  584F      6089          addq.w    #4,A7
                    6090   Decode6BitEA_26:
0000378E  6000 014E 6091          bra       Decode6BitEA_44
                    6092   Decode6BitEA_21:
                    6093   ; }
                    6094   ; else if(OperandMode == (unsigned char)(7)) {
00003792  0C05 0007 6095          cmp.b     #7,D5
00003796  6600 0146 6096          bne       Decode6BitEA_44
                    6097   ; if(OperandRegister == 0) {                               // EA = (xxx).W
0000379A  4A03      6098          tst.b     D3
0000379C  661E      6099          bne.s     Decode6BitEA_29
                    6100   ; sprintf(TempString, "$%X", ExWord1) ;
0000379E  48C2      6101          ext.l     D2
000037A0  2F02      6102          move.l    D2,-(A7)
000037A2  4879 0000 6103          pea       @m68kde~1_186.L
000037A6  77E6      
000037A8  2F0B      6104          move.l    A3,-(A7)
000037AA  4E94      6105          jsr       (A4)
000037AC  DEFC 000C 6106          add.w     #12,A7
                    6107   ; strcatInstruction(TempString) ;
000037B0  2F0B      6108          move.l    A3,-(A7)
000037B2  4E92      6109          jsr       (A2)
000037B4  584F      6110          addq.w    #4,A7
                    6111   ; InstructionSize += 1;
000037B6  5295      6112          addq.l    #1,(A5)
000037B8  6000 0124 6113          bra       Decode6BitEA_44
                    6114   Decode6BitEA_29:
                    6115   ; }
                    6116   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
000037BC  0C03 0001 6117          cmp.b     #1,D3
000037C0  6600 0032 6118          bne       Decode6BitEA_31
                    6119   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
000037C4  3202      6120          move.w    D2,D1
000037C6  48C1      6121          ext.l     D1
000037C8  E189      6122          lsl.l     #8,D1
000037CA  E189      6123          lsl.l     #8,D1
000037CC  2F00      6124          move.l    D0,-(A7)
000037CE  302E FFF8 6125          move.w    -8(A6),D0
000037D2  48C0      6126          ext.l     D0
000037D4  8280      6127          or.l      D0,D1
000037D6  201F      6128          move.l    (A7)+,D0
000037D8  2F01      6129          move.l    D1,-(A7)
000037DA  4879 0000 6130          pea       @m68kde~1_186.L
000037DE  77E6      
000037E0  2F0B      6131          move.l    A3,-(A7)
000037E2  4E94      6132          jsr       (A4)
000037E4  DEFC 000C 6133          add.w     #12,A7
                    6134   ; strcatInstruction(TempString) ;
000037E8  2F0B      6135          move.l    A3,-(A7)
000037EA  4E92      6136          jsr       (A2)
000037EC  584F      6137          addq.w    #4,A7
                    6138   ; InstructionSize += 2;
000037EE  5495      6139          addq.l    #2,(A5)
000037F0  6000 00EC 6140          bra       Decode6BitEA_44
                    6141   Decode6BitEA_31:
                    6142   ; }
                    6143   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
000037F4  0C03 0004 6144          cmp.b     #4,D3
000037F8  661C      6145          bne.s     Decode6BitEA_33
                    6146   ; if(IsItMoveInstruction == 0)        //not move instruction
000037FA  302E 0016 6147          move.w    22(A6),D0
000037FE  660A      6148          bne.s     Decode6BitEA_35
                    6149   ; DecodeBWLDataAfterOpCode(OpCode);
00003800  2F04      6150          move.l    D4,-(A7)
00003802  4EB8 33AE 6151          jsr       _DecodeBWLDataAfterOpCode
00003806  584F      6152          addq.w    #4,A7
00003808  6008      6153          bra.s     Decode6BitEA_36
                    6154   Decode6BitEA_35:
                    6155   ; else
                    6156   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
0000380A  2F04      6157          move.l    D4,-(A7)
0000380C  4EB8 32E6 6158          jsr       _DecodeBWLDataAfterOpCodeForMove
00003810  584F      6159          addq.w    #4,A7
                    6160   Decode6BitEA_36:
00003812  6000 00CA 6161          bra       Decode6BitEA_44
                    6162   Decode6BitEA_33:
                    6163   ; }
                    6164   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
00003816  0C03 0002 6165          cmp.b     #2,D3
0000381A  661E      6166          bne.s     Decode6BitEA_37
                    6167   ; sprintf(TempString, "%d(PC)", ExWord1) ;
0000381C  48C2      6168          ext.l     D2
0000381E  2F02      6169          move.l    D2,-(A7)
00003820  4879 0000 6170          pea       @m68kde~1_187.L
00003824  77EA      
00003826  2F0B      6171          move.l    A3,-(A7)
00003828  4E94      6172          jsr       (A4)
0000382A  DEFC 000C 6173          add.w     #12,A7
                    6174   ; strcatInstruction(TempString) ;
0000382E  2F0B      6175          move.l    A3,-(A7)
00003830  4E92      6176          jsr       (A2)
00003832  584F      6177          addq.w    #4,A7
                    6178   ; InstructionSize += 1;
00003834  5295      6179          addq.l    #1,(A5)
00003836  6000 00A6 6180          bra       Decode6BitEA_44
                    6181   Decode6BitEA_37:
                    6182   ; }
                    6183   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
0000383A  0C03 0003 6184          cmp.b     #3,D3
0000383E  6600 009E 6185          bne       Decode6BitEA_44
                    6186   ; offset = ExWord1 & (short int)(0x00FF);
00003842  3002      6187          move.w    D2,D0
00003844  C07C 00FF 6188          and.w     #255,D0
00003848  1D40 FFFD 6189          move.b    D0,-3(A6)
                    6190   ; sprintf(TempString, "%d(PC,", offset ) ;
0000384C  122E FFFD 6191          move.b    -3(A6),D1
00003850  4881      6192          ext.w     D1
00003852  48C1      6193          ext.l     D1
00003854  2F01      6194          move.l    D1,-(A7)
00003856  4879 0000 6195          pea       @m68kde~1_188.L
0000385A  77F2      
0000385C  2F0B      6196          move.l    A3,-(A7)
0000385E  4E94      6197          jsr       (A4)
00003860  DEFC 000C 6198          add.w     #12,A7
                    6199   ; strcatInstruction(TempString) ;
00003864  2F0B      6200          move.l    A3,-(A7)
00003866  4E92      6201          jsr       (A2)
00003868  584F      6202          addq.w    #4,A7
                    6203   ; InstructionSize += 1;
0000386A  5295      6204          addq.l    #1,(A5)
                    6205   ; // decode the Xn bit
                    6206   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000386C  3002      6207          move.w    D2,D0
0000386E  C07C 8000 6208          and.w     #32768,D0
00003872  660C      6209          bne.s     Decode6BitEA_41
                    6210   ; strcatInstruction("D") ;
00003874  4879 0000 6211          pea       @m68kde~1_181.L
00003878  77D6      
0000387A  4E92      6212          jsr       (A2)
0000387C  584F      6213          addq.w    #4,A7
0000387E  600A      6214          bra.s     Decode6BitEA_42
                    6215   Decode6BitEA_41:
                    6216   ; else
                    6217   ; strcatInstruction("A") ;
00003880  4879 0000 6218          pea       @m68kde~1_182.L
00003884  77D8      
00003886  4E92      6219          jsr       (A2)
00003888  584F      6220          addq.w    #4,A7
                    6221   Decode6BitEA_42:
                    6222   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000388A  3002      6223          move.w    D2,D0
0000388C  C07C 7000 6224          and.w     #28672,D0
00003890  E048      6225          lsr.w     #8,D0
00003892  E848      6226          lsr.w     #4,D0
00003894  3D40 FFFE 6227          move.w    D0,-2(A6)
                    6228   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
00003898  322E FFFE 6229          move.w    -2(A6),D1
0000389C  C2BC 0000 6230          and.l     #65535,D1
000038A0  FFFF      
000038A2  2F01      6231          move.l    D1,-(A7)
000038A4  4879 0000 6232          pea       @m68kde~1_183.L
000038A8  77DA      
000038AA  2F0B      6233          move.l    A3,-(A7)
000038AC  4E94      6234          jsr       (A4)
000038AE  DEFC 000C 6235          add.w     #12,A7
                    6236   ; strcatInstruction(TempString) ;
000038B2  2F0B      6237          move.l    A3,-(A7)
000038B4  4E92      6238          jsr       (A2)
000038B6  584F      6239          addq.w    #4,A7
                    6240   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000038B8  3002      6241          move.w    D2,D0
000038BA  C07C 0800 6242          and.w     #2048,D0
000038BE  E048      6243          lsr.w     #8,D0
000038C0  E648      6244          lsr.w     #3,D0
000038C2  3E00      6245          move.w    D0,D7
                    6246   ; if(XnSize == 0)
000038C4  4A47      6247          tst.w     D7
000038C6  660C      6248          bne.s     Decode6BitEA_43
                    6249   ; strcatInstruction(".W)") ;
000038C8  4879 0000 6250          pea       @m68kde~1_184.L
000038CC  77DE      
000038CE  4E92      6251          jsr       (A2)
000038D0  584F      6252          addq.w    #4,A7
000038D2  600A      6253          bra.s     Decode6BitEA_44
                    6254   Decode6BitEA_43:
                    6255   ; else
                    6256   ; strcatInstruction(".L)") ;
000038D4  4879 0000 6257          pea       @m68kde~1_185.L
000038D8  77E2      
000038DA  4E92      6258          jsr       (A2)
000038DC  584F      6259          addq.w    #4,A7
                    6260   Decode6BitEA_44:
000038DE  4CDF 3CFC 6261          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000038E2  4E5E      6262          unlk      A6
000038E4  4E75      6263          rts
                    6264   ; }
                    6265   ; }
                    6266   ; }
                    6267   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    6268   ; {
                    6269   _Decode3BitOperandMode:
000038E6  4E56 FFFC 6270          link      A6,#-4
000038EA  2F02      6271          move.l    D2,-(A7)
000038EC  242E 0008 6272          move.l    8(A6),D2
                    6273   ; unsigned short int OperandMode;
                    6274   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
000038F0  2042      6275          move.l    D2,A0
000038F2  3010      6276          move.w    (A0),D0
000038F4  C07C 0100 6277          and.w     #256,D0
000038F8  E048      6278          lsr.w     #8,D0
000038FA  3D40 FFFE 6279          move.w    D0,-2(A6)
                    6280   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000038FE  2042      6281          move.l    D2,A0
00003900  3210      6282          move.w    (A0),D1
00003902  C2BC 0000 6283          and.l     #65535,D1
00003906  FFFF      
00003908  2F01      6284          move.l    D1,-(A7)
0000390A  4EB8 322A 6285          jsr       _Decode2BitOperandSize
0000390E  584F      6286          addq.w    #4,A7
                    6287   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
00003910  302E FFFE 6288          move.w    -2(A6),D0
00003914  6600 0032 6289          bne       Decode3BitOperandMode_1
                    6290   ; Decode6BitEA(OpCode,0,0,0) ;
00003918  42A7      6291          clr.l     -(A7)
0000391A  42A7      6292          clr.l     -(A7)
0000391C  42A7      6293          clr.l     -(A7)
0000391E  2F02      6294          move.l    D2,-(A7)
00003920  4EB8 34BE 6295          jsr       _Decode6BitEA
00003924  DEFC 0010 6296          add.w     #16,A7
                    6297   ; strcatInstruction(",") ;
00003928  4879 0000 6298          pea       @m68kde~1_189.L
0000392C  77FA      
0000392E  4EB8 0CCC 6299          jsr       _strcatInstruction
00003932  584F      6300          addq.w    #4,A7
                    6301   ; Decode3BitDataRegister(*OpCode) ;
00003934  2042      6302          move.l    D2,A0
00003936  3210      6303          move.w    (A0),D1
00003938  C2BC 0000 6304          and.l     #65535,D1
0000393C  FFFF      
0000393E  2F01      6305          move.l    D1,-(A7)
00003940  4EB8 3286 6306          jsr       _Decode3BitDataRegister
00003944  584F      6307          addq.w    #4,A7
00003946  602E      6308          bra.s     Decode3BitOperandMode_2
                    6309   Decode3BitOperandMode_1:
                    6310   ; }
                    6311   ; else {                                                         // Destination is in EA
                    6312   ; Decode3BitDataRegister(*OpCode) ;
00003948  2042      6313          move.l    D2,A0
0000394A  3210      6314          move.w    (A0),D1
0000394C  C2BC 0000 6315          and.l     #65535,D1
00003950  FFFF      
00003952  2F01      6316          move.l    D1,-(A7)
00003954  4EB8 3286 6317          jsr       _Decode3BitDataRegister
00003958  584F      6318          addq.w    #4,A7
                    6319   ; strcatInstruction(",") ;
0000395A  4879 0000 6320          pea       @m68kde~1_189.L
0000395E  77FA      
00003960  4EB8 0CCC 6321          jsr       _strcatInstruction
00003964  584F      6322          addq.w    #4,A7
                    6323   ; Decode6BitEA(OpCode,0,0,0) ;
00003966  42A7      6324          clr.l     -(A7)
00003968  42A7      6325          clr.l     -(A7)
0000396A  42A7      6326          clr.l     -(A7)
0000396C  2F02      6327          move.l    D2,-(A7)
0000396E  4EB8 34BE 6328          jsr       _Decode6BitEA
00003972  DEFC 0010 6329          add.w     #16,A7
                    6330   Decode3BitOperandMode_2:
00003976  241F      6331          move.l    (A7)+,D2
00003978  4E5E      6332          unlk      A6
0000397A  4E75      6333          rts
                    6334   ; }
                    6335   ; }
                    6336   ; void DecodeBranchCondition(unsigned short int Condition)
                    6337   ; {
                    6338   _DecodeBranchCondition:
0000397C  4E56 0000 6339          link      A6,#0
00003980  48E7 2020 6340          movem.l   D2/A2,-(A7)
00003984  45F8 0CCC 6341          lea       _strcatInstruction.L,A2
00003988  342E 000A 6342          move.w    10(A6),D2
0000398C  C4BC 0000 6343          and.l     #65535,D2
00003990  FFFF      
                    6344   ; if(Condition == (unsigned short int)(0x04))
00003992  0C42 0004 6345          cmp.w     #4,D2
00003996  660E      6346          bne.s     DecodeBranchCondition_1
                    6347   ; strcatInstruction("CC") ;
00003998  4879 0000 6348          pea       @m68kde~1_190.L
0000399C  77FC      
0000399E  4E92      6349          jsr       (A2)
000039A0  584F      6350          addq.w    #4,A7
000039A2  6000 011C 6351          bra       DecodeBranchCondition_30
                    6352   DecodeBranchCondition_1:
                    6353   ; else if(Condition == (unsigned short int)(0x05))
000039A6  0C42 0005 6354          cmp.w     #5,D2
000039AA  660E      6355          bne.s     DecodeBranchCondition_3
                    6356   ; strcatInstruction("CS") ;
000039AC  4879 0000 6357          pea       @m68kde~1_191.L
000039B0  7800      
000039B2  4E92      6358          jsr       (A2)
000039B4  584F      6359          addq.w    #4,A7
000039B6  6000 0108 6360          bra       DecodeBranchCondition_30
                    6361   DecodeBranchCondition_3:
                    6362   ; else if(Condition == (unsigned short int)(0x07))
000039BA  0C42 0007 6363          cmp.w     #7,D2
000039BE  660E      6364          bne.s     DecodeBranchCondition_5
                    6365   ; strcatInstruction("EQ") ;
000039C0  4879 0000 6366          pea       @m68kde~1_192.L
000039C4  7804      
000039C6  4E92      6367          jsr       (A2)
000039C8  584F      6368          addq.w    #4,A7
000039CA  6000 00F4 6369          bra       DecodeBranchCondition_30
                    6370   DecodeBranchCondition_5:
                    6371   ; else if(Condition == (unsigned short int)(0x0C))
000039CE  0C42 000C 6372          cmp.w     #12,D2
000039D2  660E      6373          bne.s     DecodeBranchCondition_7
                    6374   ; strcatInstruction("GE") ;
000039D4  4879 0000 6375          pea       @m68kde~1_193.L
000039D8  7808      
000039DA  4E92      6376          jsr       (A2)
000039DC  584F      6377          addq.w    #4,A7
000039DE  6000 00E0 6378          bra       DecodeBranchCondition_30
                    6379   DecodeBranchCondition_7:
                    6380   ; else if(Condition == (unsigned short int)(0x0E))
000039E2  0C42 000E 6381          cmp.w     #14,D2
000039E6  660E      6382          bne.s     DecodeBranchCondition_9
                    6383   ; strcatInstruction("GT") ;
000039E8  4879 0000 6384          pea       @m68kde~1_194.L
000039EC  780C      
000039EE  4E92      6385          jsr       (A2)
000039F0  584F      6386          addq.w    #4,A7
000039F2  6000 00CC 6387          bra       DecodeBranchCondition_30
                    6388   DecodeBranchCondition_9:
                    6389   ; else if(Condition == (unsigned short int)(0x02))
000039F6  0C42 0002 6390          cmp.w     #2,D2
000039FA  660E      6391          bne.s     DecodeBranchCondition_11
                    6392   ; strcatInstruction("HI") ;
000039FC  4879 0000 6393          pea       @m68kde~1_195.L
00003A00  7810      
00003A02  4E92      6394          jsr       (A2)
00003A04  584F      6395          addq.w    #4,A7
00003A06  6000 00B8 6396          bra       DecodeBranchCondition_30
                    6397   DecodeBranchCondition_11:
                    6398   ; else if(Condition == (unsigned short int)(0x0F))
00003A0A  0C42 000F 6399          cmp.w     #15,D2
00003A0E  660E      6400          bne.s     DecodeBranchCondition_13
                    6401   ; strcatInstruction("LE") ;
00003A10  4879 0000 6402          pea       @m68kde~1_196.L
00003A14  7814      
00003A16  4E92      6403          jsr       (A2)
00003A18  584F      6404          addq.w    #4,A7
00003A1A  6000 00A4 6405          bra       DecodeBranchCondition_30
                    6406   DecodeBranchCondition_13:
                    6407   ; else if(Condition == (unsigned short int)(0x03))
00003A1E  0C42 0003 6408          cmp.w     #3,D2
00003A22  660E      6409          bne.s     DecodeBranchCondition_15
                    6410   ; strcatInstruction("LS") ;
00003A24  4879 0000 6411          pea       @m68kde~1_197.L
00003A28  7818      
00003A2A  4E92      6412          jsr       (A2)
00003A2C  584F      6413          addq.w    #4,A7
00003A2E  6000 0090 6414          bra       DecodeBranchCondition_30
                    6415   DecodeBranchCondition_15:
                    6416   ; else if(Condition == (unsigned short int)(0x0D))
00003A32  0C42 000D 6417          cmp.w     #13,D2
00003A36  660E      6418          bne.s     DecodeBranchCondition_17
                    6419   ; strcatInstruction("LT") ;
00003A38  4879 0000 6420          pea       @m68kde~1_198.L
00003A3C  781C      
00003A3E  4E92      6421          jsr       (A2)
00003A40  584F      6422          addq.w    #4,A7
00003A42  6000 007C 6423          bra       DecodeBranchCondition_30
                    6424   DecodeBranchCondition_17:
                    6425   ; else if(Condition == (unsigned short int)(0x0B))
00003A46  0C42 000B 6426          cmp.w     #11,D2
00003A4A  660E      6427          bne.s     DecodeBranchCondition_19
                    6428   ; strcatInstruction("MI") ;
00003A4C  4879 0000 6429          pea       @m68kde~1_199.L
00003A50  7820      
00003A52  4E92      6430          jsr       (A2)
00003A54  584F      6431          addq.w    #4,A7
00003A56  6000 0068 6432          bra       DecodeBranchCondition_30
                    6433   DecodeBranchCondition_19:
                    6434   ; else if(Condition == (unsigned short int)(0x06))
00003A5A  0C42 0006 6435          cmp.w     #6,D2
00003A5E  660E      6436          bne.s     DecodeBranchCondition_21
                    6437   ; strcatInstruction("NE") ;
00003A60  4879 0000 6438          pea       @m68kde~1_200.L
00003A64  7824      
00003A66  4E92      6439          jsr       (A2)
00003A68  584F      6440          addq.w    #4,A7
00003A6A  6000 0054 6441          bra       DecodeBranchCondition_30
                    6442   DecodeBranchCondition_21:
                    6443   ; else if(Condition == (unsigned short int)(0x0A))
00003A6E  0C42 000A 6444          cmp.w     #10,D2
00003A72  660E      6445          bne.s     DecodeBranchCondition_23
                    6446   ; strcatInstruction("PL") ;
00003A74  4879 0000 6447          pea       @m68kde~1_201.L
00003A78  7828      
00003A7A  4E92      6448          jsr       (A2)
00003A7C  584F      6449          addq.w    #4,A7
00003A7E  6000 0040 6450          bra       DecodeBranchCondition_30
                    6451   DecodeBranchCondition_23:
                    6452   ; else if(Condition == (unsigned short int)(0x09))
00003A82  0C42 0009 6453          cmp.w     #9,D2
00003A86  660C      6454          bne.s     DecodeBranchCondition_25
                    6455   ; strcatInstruction("VS") ;
00003A88  4879 0000 6456          pea       @m68kde~1_202.L
00003A8C  782C      
00003A8E  4E92      6457          jsr       (A2)
00003A90  584F      6458          addq.w    #4,A7
00003A92  602C      6459          bra.s     DecodeBranchCondition_30
                    6460   DecodeBranchCondition_25:
                    6461   ; else if(Condition == (unsigned short int)(0x08))
00003A94  0C42 0008 6462          cmp.w     #8,D2
00003A98  660C      6463          bne.s     DecodeBranchCondition_27
                    6464   ; strcatInstruction("VC") ;
00003A9A  4879 0000 6465          pea       @m68kde~1_203.L
00003A9E  7830      
00003AA0  4E92      6466          jsr       (A2)
00003AA2  584F      6467          addq.w    #4,A7
00003AA4  601A      6468          bra.s     DecodeBranchCondition_30
                    6469   DecodeBranchCondition_27:
                    6470   ; else if(Condition == (unsigned short int)(0))
00003AA6  4A42      6471          tst.w     D2
00003AA8  660C      6472          bne.s     DecodeBranchCondition_29
                    6473   ; strcatInstruction("RA") ;
00003AAA  4879 0000 6474          pea       @m68kde~1_204.L
00003AAE  7834      
00003AB0  4E92      6475          jsr       (A2)
00003AB2  584F      6476          addq.w    #4,A7
00003AB4  600A      6477          bra.s     DecodeBranchCondition_30
                    6478   DecodeBranchCondition_29:
                    6479   ; else
                    6480   ; strcatInstruction("SR");
00003AB6  4879 0000 6481          pea       @m68kde~1_205.L
00003ABA  7838      
00003ABC  4E92      6482          jsr       (A2)
00003ABE  584F      6483          addq.w    #4,A7
                    6484   DecodeBranchCondition_30:
                    6485   ; strcatInstruction(" ") ;
00003AC0  4879 0000 6486          pea       @m68kde~1_37.L
00003AC4  6884      
00003AC6  4E92      6487          jsr       (A2)
00003AC8  584F      6488          addq.w    #4,A7
00003ACA  4CDF 0404 6489          movem.l   (A7)+,D2/A2
00003ACE  4E5E      6490          unlk      A6
00003AD0  4E75      6491          rts
                    6492   ; }
                    6493   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6494   ; {
                    6495   _DisassembleInstruction:
00003AD2  4E56 FFD8 6496          link      A6,#-40
00003AD6  48E7 3F3C 6497          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003ADA  242E 0008 6498          move.l    8(A6),D2
00003ADE  45F9 0B00 6499          lea       _InstructionSize.L,A2
00003AE2  017E      
00003AE4  47F8 0CE6 6500          lea       _strcpyInstruction.L,A3
00003AE8  49F9 0B00 6501          lea       _TempString.L,A4
00003AEC  0546      
00003AEE  4BF9 0000 6502          lea       _sprintf.L,A5
00003AF2  5AE2      
                    6503   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
00003AF4  2042      6504          move.l    D2,A0
00003AF6  3010      6505          move.w    (A0),D0
00003AF8  E040      6506          asr.w     #8,D0
00003AFA  E840      6507          asr.w     #4,D0
00003AFC  3D40 FFDA 6508          move.w    D0,-38(A6)
                    6509   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
00003B00  2042      6510          move.l    D2,A0
00003B02  3010      6511          move.w    (A0),D0
00003B04  C07C 0FFF 6512          and.w     #4095,D0
00003B08  3D40 FFDC 6513          move.w    D0,-36(A6)
                    6514   ; unsigned short int SourceBits, DestBits, Size ;
                    6515   ; unsigned char *Mode, Condition;
                    6516   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6517   ; unsigned short int DataRegister, AddressRegister;
                    6518   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6519   ; signed short int Displacement16Bit;
                    6520   ; short int Mask, DoneSlash;
                    6521   ; int i;
                    6522   ; strcpyInstruction("Unknown") ;
00003B0C  4879 0000 6523          pea       @m68kde~1_206.L
00003B10  783C      
00003B12  4E93      6524          jsr       (A3)
00003B14  584F      6525          addq.w    #4,A7
                    6526   ; /////////////////////////////////////////////////////////////////////////////////
                    6527   ; // if instruction is ABCD
                    6528   ; /////////////////////////////////////////////////////////////////////////////////
                    6529   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
00003B16  2042      6530          move.l    D2,A0
00003B18  3010      6531          move.w    (A0),D0
00003B1A  C07C F1F0 6532          and.w     #61936,D0
00003B1E  0C40 C100 6533          cmp.w     #49408,D0
00003B22  6600 008C 6534          bne       DisassembleInstruction_4
                    6535   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00003B26  2042      6536          move.l    D2,A0
00003B28  3010      6537          move.w    (A0),D0
00003B2A  E040      6538          asr.w     #8,D0
00003B2C  E240      6539          asr.w     #1,D0
00003B2E  C07C 0007 6540          and.w     #7,D0
00003B32  3D40 FFE0 6541          move.w    D0,-32(A6)
                    6542   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00003B36  2042      6543          move.l    D2,A0
00003B38  3010      6544          move.w    (A0),D0
00003B3A  C07C 0007 6545          and.w     #7,D0
00003B3E  3D40 FFDE 6546          move.w    D0,-34(A6)
                    6547   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00003B42  2042      6548          move.l    D2,A0
00003B44  3010      6549          move.w    (A0),D0
00003B46  E640      6550          asr.w     #3,D0
00003B48  48C0      6551          ext.l     D0
00003B4A  C0BC 0000 6552          and.l     #1,D0
00003B4E  0001      
00003B50  2D40 FFE4 6553          move.l    D0,-28(A6)
                    6554   ; if(Mode == 0)
00003B54  202E FFE4 6555          move.l    -28(A6),D0
00003B58  662C      6556          bne.s     DisassembleInstruction_3
                    6557   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
00003B5A  322E FFE0 6558          move.w    -32(A6),D1
00003B5E  C2BC 0000 6559          and.l     #65535,D1
00003B62  FFFF      
00003B64  2F01      6560          move.l    D1,-(A7)
00003B66  322E FFDE 6561          move.w    -34(A6),D1
00003B6A  C2BC 0000 6562          and.l     #65535,D1
00003B6E  FFFF      
00003B70  2F01      6563          move.l    D1,-(A7)
00003B72  4879 0000 6564          pea       @m68kde~1_207.L
00003B76  7844      
00003B78  4879 0B00 6565          pea       _Instruction.L
00003B7C  04E2      
00003B7E  4E95      6566          jsr       (A5)
00003B80  DEFC 0010 6567          add.w     #16,A7
00003B84  602A      6568          bra.s     DisassembleInstruction_4
                    6569   DisassembleInstruction_3:
                    6570   ; else
                    6571   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00003B86  322E FFE0 6572          move.w    -32(A6),D1
00003B8A  C2BC 0000 6573          and.l     #65535,D1
00003B8E  FFFF      
00003B90  2F01      6574          move.l    D1,-(A7)
00003B92  322E FFDE 6575          move.w    -34(A6),D1
00003B96  C2BC 0000 6576          and.l     #65535,D1
00003B9A  FFFF      
00003B9C  2F01      6577          move.l    D1,-(A7)
00003B9E  4879 0000 6578          pea       @m68kde~1_208.L
00003BA2  7852      
00003BA4  4879 0B00 6579          pea       _Instruction.L
00003BA8  04E2      
00003BAA  4E95      6580          jsr       (A5)
00003BAC  DEFC 0010 6581          add.w     #16,A7
                    6582   DisassembleInstruction_4:
                    6583   ; }
                    6584   ; /////////////////////////////////////////////////////////////////////////////////
                    6585   ; // if instruction is ADD or ADDA
                    6586   ; /////////////////////////////////////////////////////////////////////////////////
                    6587   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
00003BB0  2042      6588          move.l    D2,A0
00003BB2  3010      6589          move.w    (A0),D0
00003BB4  C07C F000 6590          and.w     #61440,D0
00003BB8  0C40 D000 6591          cmp.w     #53248,D0
00003BBC  6600 008C 6592          bne       DisassembleInstruction_8
                    6593   ; InstructionSize = 1;
00003BC0  24BC 0000 6594          move.l    #1,(A2)
00003BC4  0001      
                    6595   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00003BC6  2042      6596          move.l    D2,A0
00003BC8  3010      6597          move.w    (A0),D0
00003BCA  EC40      6598          asr.w     #6,D0
00003BCC  C07C 0007 6599          and.w     #7,D0
00003BD0  3600      6600          move.w    D0,D3
                    6601   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00003BD2  0C43 0003 6602          cmp.w     #3,D3
00003BD6  6708      6603          beq.s     DisassembleInstruction_9
00003BD8  0C43 0007 6604          cmp.w     #7,D3
00003BDC  6600 005A 6605          bne       DisassembleInstruction_7
                    6606   DisassembleInstruction_9:
                    6607   ; {
                    6608   ; if(OpMode == (unsigned short int)(0x0003))
00003BE0  0C43 0003 6609          cmp.w     #3,D3
00003BE4  660C      6610          bne.s     DisassembleInstruction_10
                    6611   ; strcpyInstruction("ADDA.W ") ;
00003BE6  4879 0000 6612          pea       @m68kde~1_209.L
00003BEA  7866      
00003BEC  4E93      6613          jsr       (A3)
00003BEE  584F      6614          addq.w    #4,A7
00003BF0  600A      6615          bra.s     DisassembleInstruction_11
                    6616   DisassembleInstruction_10:
                    6617   ; else
                    6618   ; strcpyInstruction("ADDA.L ") ;
00003BF2  4879 0000 6619          pea       @m68kde~1_210.L
00003BF6  786E      
00003BF8  4E93      6620          jsr       (A3)
00003BFA  584F      6621          addq.w    #4,A7
                    6622   DisassembleInstruction_11:
                    6623   ; Decode6BitEA(OpCode,0,0,0)  ;
00003BFC  42A7      6624          clr.l     -(A7)
00003BFE  42A7      6625          clr.l     -(A7)
00003C00  42A7      6626          clr.l     -(A7)
00003C02  2F02      6627          move.l    D2,-(A7)
00003C04  4EB8 34BE 6628          jsr       _Decode6BitEA
00003C08  DEFC 0010 6629          add.w     #16,A7
                    6630   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003C0C  2042      6631          move.l    D2,A0
00003C0E  3210      6632          move.w    (A0),D1
00003C10  E041      6633          asr.w     #8,D1
00003C12  E241      6634          asr.w     #1,D1
00003C14  C27C 0007 6635          and.w     #7,D1
00003C18  C2BC 0000 6636          and.l     #65535,D1
00003C1C  FFFF      
00003C1E  2F01      6637          move.l    D1,-(A7)
00003C20  4879 0000 6638          pea       @m68kde~1_211.L
00003C24  7876      
00003C26  2F0C      6639          move.l    A4,-(A7)
00003C28  4E95      6640          jsr       (A5)
00003C2A  DEFC 000C 6641          add.w     #12,A7
                    6642   ; strcatInstruction(TempString) ;
00003C2E  2F0C      6643          move.l    A4,-(A7)
00003C30  4EB8 0CCC 6644          jsr       _strcatInstruction
00003C34  584F      6645          addq.w    #4,A7
00003C36  6012      6646          bra.s     DisassembleInstruction_8
                    6647   DisassembleInstruction_7:
                    6648   ; }
                    6649   ; else {
                    6650   ; strcpyInstruction("ADD") ;
00003C38  4879 0000 6651          pea       @m68kde~1_212.L
00003C3C  787C      
00003C3E  4E93      6652          jsr       (A3)
00003C40  584F      6653          addq.w    #4,A7
                    6654   ; Decode3BitOperandMode(OpCode) ;
00003C42  2F02      6655          move.l    D2,-(A7)
00003C44  4EB8 38E6 6656          jsr       _Decode3BitOperandMode
00003C48  584F      6657          addq.w    #4,A7
                    6658   DisassembleInstruction_8:
                    6659   ; }
                    6660   ; }
                    6661   ; /////////////////////////////////////////////////////////////////////////////////
                    6662   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6663   ; /////////////////////////////////////////////////////////////////////////////////
                    6664   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
00003C4A  2042      6665          move.l    D2,A0
00003C4C  3010      6666          move.w    (A0),D0
00003C4E  C07C FF00 6667          and.w     #65280,D0
00003C52  0C40 0600 6668          cmp.w     #1536,D0
00003C56  6604      6669          bne.s     DisassembleInstruction_14
00003C58  7001      6670          moveq     #1,D0
00003C5A  6002      6671          bra.s     DisassembleInstruction_15
                    6672   DisassembleInstruction_14:
00003C5C  4280      6673          clr.l     D0
                    6674   DisassembleInstruction_15:
00003C5E  2042      6675          move.l    D2,A0
00003C60  3210      6676          move.w    (A0),D1
00003C62  C27C FF00 6677          and.w     #65280,D1
00003C66  0C41 0200 6678          cmp.w     #512,D1
00003C6A  6604      6679          bne.s     DisassembleInstruction_16
00003C6C  7201      6680          moveq     #1,D1
00003C6E  6002      6681          bra.s     DisassembleInstruction_17
                    6682   DisassembleInstruction_16:
00003C70  4281      6683          clr.l     D1
                    6684   DisassembleInstruction_17:
00003C72  8041      6685          or.w      D1,D0
00003C74  2042      6686          move.l    D2,A0
00003C76  3210      6687          move.w    (A0),D1
00003C78  C27C FF00 6688          and.w     #65280,D1
00003C7C  0C41 0C00 6689          cmp.w     #3072,D1
00003C80  6604      6690          bne.s     DisassembleInstruction_18
00003C82  7201      6691          moveq     #1,D1
00003C84  6002      6692          bra.s     DisassembleInstruction_19
                    6693   DisassembleInstruction_18:
00003C86  4281      6694          clr.l     D1
                    6695   DisassembleInstruction_19:
00003C88  8041      6696          or.w      D1,D0
00003C8A  2042      6697          move.l    D2,A0
00003C8C  3210      6698          move.w    (A0),D1
00003C8E  C27C FF00 6699          and.w     #65280,D1
00003C92  0C41 0A00 6700          cmp.w     #2560,D1
00003C96  6604      6701          bne.s     DisassembleInstruction_20
00003C98  7201      6702          moveq     #1,D1
00003C9A  6002      6703          bra.s     DisassembleInstruction_21
                    6704   DisassembleInstruction_20:
00003C9C  4281      6705          clr.l     D1
                    6706   DisassembleInstruction_21:
00003C9E  8041      6707          or.w      D1,D0
00003CA0  2042      6708          move.l    D2,A0
00003CA2  3210      6709          move.w    (A0),D1
00003CA4  C27C FF00 6710          and.w     #65280,D1
00003CA8  6604      6711          bne.s     DisassembleInstruction_22
00003CAA  7201      6712          moveq     #1,D1
00003CAC  6002      6713          bra.s     DisassembleInstruction_23
                    6714   DisassembleInstruction_22:
00003CAE  4281      6715          clr.l     D1
                    6716   DisassembleInstruction_23:
00003CB0  8041      6717          or.w      D1,D0
00003CB2  2042      6718          move.l    D2,A0
00003CB4  3210      6719          move.w    (A0),D1
00003CB6  C27C FF00 6720          and.w     #65280,D1
00003CBA  0C41 0400 6721          cmp.w     #1024,D1
00003CBE  6604      6722          bne.s     DisassembleInstruction_24
00003CC0  7201      6723          moveq     #1,D1
00003CC2  6002      6724          bra.s     DisassembleInstruction_25
                    6725   DisassembleInstruction_24:
00003CC4  4281      6726          clr.l     D1
                    6727   DisassembleInstruction_25:
00003CC6  8041      6728          or.w      D1,D0
00003CC8  6700 00E4 6729          beq       DisassembleInstruction_12
                    6730   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6731   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6732   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6733   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6734   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6735   ; {
                    6736   ; InstructionSize = 1;
00003CCC  24BC 0000 6737          move.l    #1,(A2)
00003CD0  0001      
                    6738   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
00003CD2  2042      6739          move.l    D2,A0
00003CD4  3010      6740          move.w    (A0),D0
00003CD6  C07C FF00 6741          and.w     #65280,D0
00003CDA  0C40 0600 6742          cmp.w     #1536,D0
00003CDE  660E      6743          bne.s     DisassembleInstruction_26
                    6744   ; strcpyInstruction("ADDI") ;
00003CE0  4879 0000 6745          pea       @m68kde~1_213.L
00003CE4  7880      
00003CE6  4E93      6746          jsr       (A3)
00003CE8  584F      6747          addq.w    #4,A7
00003CEA  6000 0084 6748          bra       DisassembleInstruction_36
                    6749   DisassembleInstruction_26:
                    6750   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003CEE  2042      6751          move.l    D2,A0
00003CF0  3010      6752          move.w    (A0),D0
00003CF2  C07C FF00 6753          and.w     #65280,D0
00003CF6  0C40 0200 6754          cmp.w     #512,D0
00003CFA  660E      6755          bne.s     DisassembleInstruction_28
                    6756   ; strcpyInstruction("ANDI") ;
00003CFC  4879 0000 6757          pea       @m68kde~1_214.L
00003D00  7886      
00003D02  4E93      6758          jsr       (A3)
00003D04  584F      6759          addq.w    #4,A7
00003D06  6000 0068 6760          bra       DisassembleInstruction_36
                    6761   DisassembleInstruction_28:
                    6762   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
00003D0A  2042      6763          move.l    D2,A0
00003D0C  3010      6764          move.w    (A0),D0
00003D0E  C07C FF00 6765          and.w     #65280,D0
00003D12  0C40 0C00 6766          cmp.w     #3072,D0
00003D16  660E      6767          bne.s     DisassembleInstruction_30
                    6768   ; strcpyInstruction("CMPI") ;
00003D18  4879 0000 6769          pea       @m68kde~1_215.L
00003D1C  788C      
00003D1E  4E93      6770          jsr       (A3)
00003D20  584F      6771          addq.w    #4,A7
00003D22  6000 004C 6772          bra       DisassembleInstruction_36
                    6773   DisassembleInstruction_30:
                    6774   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003D26  2042      6775          move.l    D2,A0
00003D28  3010      6776          move.w    (A0),D0
00003D2A  C07C FF00 6777          and.w     #65280,D0
00003D2E  0C40 0A00 6778          cmp.w     #2560,D0
00003D32  660E      6779          bne.s     DisassembleInstruction_32
                    6780   ; strcpyInstruction("EORI") ;
00003D34  4879 0000 6781          pea       @m68kde~1_216.L
00003D38  7892      
00003D3A  4E93      6782          jsr       (A3)
00003D3C  584F      6783          addq.w    #4,A7
00003D3E  6000 0030 6784          bra       DisassembleInstruction_36
                    6785   DisassembleInstruction_32:
                    6786   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
00003D42  2042      6787          move.l    D2,A0
00003D44  3010      6788          move.w    (A0),D0
00003D46  C07C FF00 6789          and.w     #65280,D0
00003D4A  660C      6790          bne.s     DisassembleInstruction_34
                    6791   ; strcpyInstruction("ORI") ;
00003D4C  4879 0000 6792          pea       @m68kde~1_217.L
00003D50  7898      
00003D52  4E93      6793          jsr       (A3)
00003D54  584F      6794          addq.w    #4,A7
00003D56  6018      6795          bra.s     DisassembleInstruction_36
                    6796   DisassembleInstruction_34:
                    6797   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
00003D58  2042      6798          move.l    D2,A0
00003D5A  3010      6799          move.w    (A0),D0
00003D5C  C07C FF00 6800          and.w     #65280,D0
00003D60  0C40 0400 6801          cmp.w     #1024,D0
00003D64  660A      6802          bne.s     DisassembleInstruction_36
                    6803   ; strcpyInstruction("SUBI") ;
00003D66  4879 0000 6804          pea       @m68kde~1_218.L
00003D6A  789C      
00003D6C  4E93      6805          jsr       (A3)
00003D6E  584F      6806          addq.w    #4,A7
                    6807   DisassembleInstruction_36:
                    6808   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003D70  2042      6809          move.l    D2,A0
00003D72  3210      6810          move.w    (A0),D1
00003D74  C2BC 0000 6811          and.l     #65535,D1
00003D78  FFFF      
00003D7A  2F01      6812          move.l    D1,-(A7)
00003D7C  4EB8 322A 6813          jsr       _Decode2BitOperandSize
00003D80  584F      6814          addq.w    #4,A7
00003D82  3E00      6815          move.w    D0,D7
                    6816   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
00003D84  2F02      6817          move.l    D2,-(A7)
00003D86  4EB8 33AE 6818          jsr       _DecodeBWLDataAfterOpCode
00003D8A  584F      6819          addq.w    #4,A7
                    6820   ; strcatInstruction(",") ;
00003D8C  4879 0000 6821          pea       @m68kde~1_189.L
00003D90  77FA      
00003D92  4EB8 0CCC 6822          jsr       _strcatInstruction
00003D96  584F      6823          addq.w    #4,A7
                    6824   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
00003D98  42A7      6825          clr.l     -(A7)
00003D9A  CEBC 0000 6826          and.l     #65535,D7
00003D9E  FFFF      
00003DA0  2F07      6827          move.l    D7,-(A7)
00003DA2  42A7      6828          clr.l     -(A7)
00003DA4  2F02      6829          move.l    D2,-(A7)
00003DA6  4EB8 34BE 6830          jsr       _Decode6BitEA
00003DAA  DEFC 0010 6831          add.w     #16,A7
                    6832   DisassembleInstruction_12:
                    6833   ; }
                    6834   ; /////////////////////////////////////////////////////////////////////////////////
                    6835   ; // if instruction is ADDI #data,SR
                    6836   ; /////////////////////////////////////////////////////////////////////////////////
                    6837   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003DAE  2042      6838          move.l    D2,A0
00003DB0  3010      6839          move.w    (A0),D0
00003DB2  0C40 027C 6840          cmp.w     #636,D0
00003DB6  6622      6841          bne.s     DisassembleInstruction_38
                    6842   ; InstructionSize = 2;
00003DB8  24BC 0000 6843          move.l    #2,(A2)
00003DBC  0002      
                    6844   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003DBE  2042      6845          move.l    D2,A0
00003DC0  3228 0002 6846          move.w    2(A0),D1
00003DC4  48C1      6847          ext.l     D1
00003DC6  2F01      6848          move.l    D1,-(A7)
00003DC8  4879 0000 6849          pea       @m68kde~1_219.L
00003DCC  78A2      
00003DCE  4879 0B00 6850          pea       _Instruction.L
00003DD2  04E2      
00003DD4  4E95      6851          jsr       (A5)
00003DD6  DEFC 000C 6852          add.w     #12,A7
                    6853   DisassembleInstruction_38:
                    6854   ; }
                    6855   ; /////////////////////////////////////////////////////////////////////////////////
                    6856   ; // if instruction is ADDQ
                    6857   ; /////////////////////////////////////////////////////////////////////////////////
                    6858   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
00003DDA  2042      6859          move.l    D2,A0
00003DDC  3010      6860          move.w    (A0),D0
00003DDE  C07C F100 6861          and.w     #61696,D0
00003DE2  0C40 5000 6862          cmp.w     #20480,D0
00003DE6  6600 005E 6863          bne       DisassembleInstruction_40
                    6864   ; InstructionSize = 1;
00003DEA  24BC 0000 6865          move.l    #1,(A2)
00003DEE  0001      
                    6866   ; strcpyInstruction("ADDQ") ;
00003DF0  4879 0000 6867          pea       @m68kde~1_220.L
00003DF4  78B0      
00003DF6  4E93      6868          jsr       (A3)
00003DF8  584F      6869          addq.w    #4,A7
                    6870   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003DFA  2042      6871          move.l    D2,A0
00003DFC  3210      6872          move.w    (A0),D1
00003DFE  C2BC 0000 6873          and.l     #65535,D1
00003E02  FFFF      
00003E04  2F01      6874          move.l    D1,-(A7)
00003E06  4EB8 322A 6875          jsr       _Decode2BitOperandSize
00003E0A  584F      6876          addq.w    #4,A7
                    6877   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003E0C  2042      6878          move.l    D2,A0
00003E0E  3210      6879          move.w    (A0),D1
00003E10  E041      6880          asr.w     #8,D1
00003E12  E241      6881          asr.w     #1,D1
00003E14  C27C 0007 6882          and.w     #7,D1
00003E18  C2BC 0000 6883          and.l     #65535,D1
00003E1C  FFFF      
00003E1E  2F01      6884          move.l    D1,-(A7)
00003E20  4879 0000 6885          pea       @m68kde~1_221.L
00003E24  78B6      
00003E26  2F0C      6886          move.l    A4,-(A7)
00003E28  4E95      6887          jsr       (A5)
00003E2A  DEFC 000C 6888          add.w     #12,A7
                    6889   ; strcatInstruction(TempString) ;
00003E2E  2F0C      6890          move.l    A4,-(A7)
00003E30  4EB8 0CCC 6891          jsr       _strcatInstruction
00003E34  584F      6892          addq.w    #4,A7
                    6893   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003E36  42A7      6894          clr.l     -(A7)
00003E38  42A7      6895          clr.l     -(A7)
00003E3A  42A7      6896          clr.l     -(A7)
00003E3C  2F02      6897          move.l    D2,-(A7)
00003E3E  4EB8 34BE 6898          jsr       _Decode6BitEA
00003E42  DEFC 0010 6899          add.w     #16,A7
                    6900   DisassembleInstruction_40:
                    6901   ; }
                    6902   ; /////////////////////////////////////////////////////////////////////////////////
                    6903   ; // if instruction is ADDX
                    6904   ; /////////////////////////////////////////////////////////////////////////////////
                    6905   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003E46  2042      6906          move.l    D2,A0
00003E48  3010      6907          move.w    (A0),D0
00003E4A  C07C F130 6908          and.w     #61744,D0
00003E4E  0C40 D100 6909          cmp.w     #53504,D0
00003E52  6600 00A4 6910          bne       DisassembleInstruction_44
                    6911   ; InstructionSize = 1;
00003E56  24BC 0000 6912          move.l    #1,(A2)
00003E5A  0001      
                    6913   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003E5C  2042      6914          move.l    D2,A0
00003E5E  3010      6915          move.w    (A0),D0
00003E60  EC40      6916          asr.w     #6,D0
00003E62  C07C 0003 6917          and.w     #3,D0
00003E66  3600      6918          move.w    D0,D3
                    6919   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003E68  0C43 0003 6920          cmp.w     #3,D3
00003E6C  6700 008A 6921          beq       DisassembleInstruction_44
                    6922   ; {
                    6923   ; strcpyInstruction("ADDX") ;
00003E70  4879 0000 6924          pea       @m68kde~1_222.L
00003E74  78BC      
00003E76  4E93      6925          jsr       (A3)
00003E78  584F      6926          addq.w    #4,A7
                    6927   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003E7A  2042      6928          move.l    D2,A0
00003E7C  3210      6929          move.w    (A0),D1
00003E7E  C2BC 0000 6930          and.l     #65535,D1
00003E82  FFFF      
00003E84  2F01      6931          move.l    D1,-(A7)
00003E86  4EB8 322A 6932          jsr       _Decode2BitOperandSize
00003E8A  584F      6933          addq.w    #4,A7
                    6934   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003E8C  2042      6935          move.l    D2,A0
00003E8E  3010      6936          move.w    (A0),D0
00003E90  C07C 0008 6937          and.w     #8,D0
00003E94  6600 0030 6938          bne       DisassembleInstruction_46
                    6939   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003E98  2042      6940          move.l    D2,A0
00003E9A  3210      6941          move.w    (A0),D1
00003E9C  E041      6942          asr.w     #8,D1
00003E9E  E241      6943          asr.w     #1,D1
00003EA0  C27C 0007 6944          and.w     #7,D1
00003EA4  48C1      6945          ext.l     D1
00003EA6  2F01      6946          move.l    D1,-(A7)
00003EA8  2042      6947          move.l    D2,A0
00003EAA  3210      6948          move.w    (A0),D1
00003EAC  C27C 0007 6949          and.w     #7,D1
00003EB0  48C1      6950          ext.l     D1
00003EB2  2F01      6951          move.l    D1,-(A7)
00003EB4  4879 0000 6952          pea       @m68kde~1_223.L
00003EB8  78C2      
00003EBA  2F0C      6953          move.l    A4,-(A7)
00003EBC  4E95      6954          jsr       (A5)
00003EBE  DEFC 0010 6955          add.w     #16,A7
00003EC2  6000 002C 6956          bra       DisassembleInstruction_47
                    6957   DisassembleInstruction_46:
                    6958   ; else        // -(ax),-(ay) mode used
                    6959   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003EC6  2042      6960          move.l    D2,A0
00003EC8  3210      6961          move.w    (A0),D1
00003ECA  E041      6962          asr.w     #8,D1
00003ECC  E241      6963          asr.w     #1,D1
00003ECE  C27C 0007 6964          and.w     #7,D1
00003ED2  48C1      6965          ext.l     D1
00003ED4  2F01      6966          move.l    D1,-(A7)
00003ED6  2042      6967          move.l    D2,A0
00003ED8  3210      6968          move.w    (A0),D1
00003EDA  C27C 0007 6969          and.w     #7,D1
00003EDE  48C1      6970          ext.l     D1
00003EE0  2F01      6971          move.l    D1,-(A7)
00003EE2  4879 0000 6972          pea       @m68kde~1_224.L
00003EE6  78CA      
00003EE8  2F0C      6973          move.l    A4,-(A7)
00003EEA  4E95      6974          jsr       (A5)
00003EEC  DEFC 0010 6975          add.w     #16,A7
                    6976   DisassembleInstruction_47:
                    6977   ; strcatInstruction(TempString) ;
00003EF0  2F0C      6978          move.l    A4,-(A7)
00003EF2  4EB8 0CCC 6979          jsr       _strcatInstruction
00003EF6  584F      6980          addq.w    #4,A7
                    6981   DisassembleInstruction_44:
                    6982   ; }
                    6983   ; }
                    6984   ; /////////////////////////////////////////////////////////////////////////////////
                    6985   ; // if instruction is AND
                    6986   ; /////////////////////////////////////////////////////////////////////////////////
                    6987   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003EF8  2042      6988          move.l    D2,A0
00003EFA  3010      6989          move.w    (A0),D0
00003EFC  C07C F000 6990          and.w     #61440,D0
00003F00  0C40 C000 6991          cmp.w     #49152,D0
00003F04  662A      6992          bne.s     DisassembleInstruction_50
                    6993   ; InstructionSize = 1;
00003F06  24BC 0000 6994          move.l    #1,(A2)
00003F0A  0001      
                    6995   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6996   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003F0C  2042      6997          move.l    D2,A0
00003F0E  3010      6998          move.w    (A0),D0
00003F10  E840      6999          asr.w     #4,D0
00003F12  C07C 001F 7000          and.w     #31,D0
00003F16  3600      7001          move.w    D0,D3
                    7002   ; if(OpMode != (unsigned short int)(0x0010))   {
00003F18  0C43 0010 7003          cmp.w     #16,D3
00003F1C  6712      7004          beq.s     DisassembleInstruction_50
                    7005   ; strcpyInstruction("AND") ;
00003F1E  4879 0000 7006          pea       @m68kde~1_225.L
00003F22  78D8      
00003F24  4E93      7007          jsr       (A3)
00003F26  584F      7008          addq.w    #4,A7
                    7009   ; Decode3BitOperandMode(OpCode) ;
00003F28  2F02      7010          move.l    D2,-(A7)
00003F2A  4EB8 38E6 7011          jsr       _Decode3BitOperandMode
00003F2E  584F      7012          addq.w    #4,A7
                    7013   DisassembleInstruction_50:
                    7014   ; }
                    7015   ; }
                    7016   ; /////////////////////////////////////////////////////////////////////////////////
                    7017   ; // if instruction is ANDI to CCR
                    7018   ; /////////////////////////////////////////////////////////////////////////////////
                    7019   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003F30  2042      7020          move.l    D2,A0
00003F32  3010      7021          move.w    (A0),D0
00003F34  0C40 023C 7022          cmp.w     #572,D0
00003F38  662A      7023          bne.s     DisassembleInstruction_52
                    7024   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003F3A  2042      7025          move.l    D2,A0
00003F3C  3228 0002 7026          move.w    2(A0),D1
00003F40  C27C 00FF 7027          and.w     #255,D1
00003F44  C2BC 0000 7028          and.l     #65535,D1
00003F48  FFFF      
00003F4A  2F01      7029          move.l    D1,-(A7)
00003F4C  4879 0000 7030          pea       @m68kde~1_226.L
00003F50  78DC      
00003F52  4879 0B00 7031          pea       _Instruction.L
00003F56  04E2      
00003F58  4E95      7032          jsr       (A5)
00003F5A  DEFC 000C 7033          add.w     #12,A7
                    7034   ; InstructionSize = 2;
00003F5E  24BC 0000 7035          move.l    #2,(A2)
00003F62  0002      
                    7036   DisassembleInstruction_52:
                    7037   ; }
                    7038   ; /////////////////////////////////////////////////////////////////////////////////
                    7039   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    7040   ; /////////////////////////////////////////////////////////////////////////////////
                    7041   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003F64  2042      7042          move.l    D2,A0
00003F66  3010      7043          move.w    (A0),D0
00003F68  C07C F018 7044          and.w     #61464,D0
00003F6C  0C40 E000 7045          cmp.w     #57344,D0
00003F70  6604      7046          bne.s     DisassembleInstruction_56
00003F72  7001      7047          moveq     #1,D0
00003F74  6002      7048          bra.s     DisassembleInstruction_57
                    7049   DisassembleInstruction_56:
00003F76  4280      7050          clr.l     D0
                    7051   DisassembleInstruction_57:
00003F78  2042      7052          move.l    D2,A0
00003F7A  3210      7053          move.w    (A0),D1
00003F7C  C27C FEC0 7054          and.w     #65216,D1
00003F80  0C41 E0C0 7055          cmp.w     #57536,D1
00003F84  6604      7056          bne.s     DisassembleInstruction_58
00003F86  7201      7057          moveq     #1,D1
00003F88  6002      7058          bra.s     DisassembleInstruction_59
                    7059   DisassembleInstruction_58:
00003F8A  4281      7060          clr.l     D1
                    7061   DisassembleInstruction_59:
00003F8C  8041      7062          or.w      D1,D0
00003F8E  2042      7063          move.l    D2,A0
00003F90  3210      7064          move.w    (A0),D1
00003F92  C27C F018 7065          and.w     #61464,D1
00003F96  0C41 E008 7066          cmp.w     #57352,D1
00003F9A  6604      7067          bne.s     DisassembleInstruction_60
00003F9C  7201      7068          moveq     #1,D1
00003F9E  6002      7069          bra.s     DisassembleInstruction_61
                    7070   DisassembleInstruction_60:
00003FA0  4281      7071          clr.l     D1
                    7072   DisassembleInstruction_61:
00003FA2  8041      7073          or.w      D1,D0
00003FA4  2042      7074          move.l    D2,A0
00003FA6  3210      7075          move.w    (A0),D1
00003FA8  C27C FEC0 7076          and.w     #65216,D1
00003FAC  0C41 E2C0 7077          cmp.w     #58048,D1
00003FB0  6604      7078          bne.s     DisassembleInstruction_62
00003FB2  7201      7079          moveq     #1,D1
00003FB4  6002      7080          bra.s     DisassembleInstruction_63
                    7081   DisassembleInstruction_62:
00003FB6  4281      7082          clr.l     D1
                    7083   DisassembleInstruction_63:
00003FB8  8041      7084          or.w      D1,D0
00003FBA  2042      7085          move.l    D2,A0
00003FBC  3210      7086          move.w    (A0),D1
00003FBE  C27C F018 7087          and.w     #61464,D1
00003FC2  0C41 E018 7088          cmp.w     #57368,D1
00003FC6  6604      7089          bne.s     DisassembleInstruction_64
00003FC8  7201      7090          moveq     #1,D1
00003FCA  6002      7091          bra.s     DisassembleInstruction_65
                    7092   DisassembleInstruction_64:
00003FCC  4281      7093          clr.l     D1
                    7094   DisassembleInstruction_65:
00003FCE  8041      7095          or.w      D1,D0
00003FD0  2042      7096          move.l    D2,A0
00003FD2  3210      7097          move.w    (A0),D1
00003FD4  C27C FEC0 7098          and.w     #65216,D1
00003FD8  0C41 E6C0 7099          cmp.w     #59072,D1
00003FDC  6604      7100          bne.s     DisassembleInstruction_66
00003FDE  7201      7101          moveq     #1,D1
00003FE0  6002      7102          bra.s     DisassembleInstruction_67
                    7103   DisassembleInstruction_66:
00003FE2  4281      7104          clr.l     D1
                    7105   DisassembleInstruction_67:
00003FE4  8041      7106          or.w      D1,D0
00003FE6  2042      7107          move.l    D2,A0
00003FE8  3210      7108          move.w    (A0),D1
00003FEA  C27C F018 7109          and.w     #61464,D1
00003FEE  0C41 E010 7110          cmp.w     #57360,D1
00003FF2  6604      7111          bne.s     DisassembleInstruction_68
00003FF4  7201      7112          moveq     #1,D1
00003FF6  6002      7113          bra.s     DisassembleInstruction_69
                    7114   DisassembleInstruction_68:
00003FF8  4281      7115          clr.l     D1
                    7116   DisassembleInstruction_69:
00003FFA  8041      7117          or.w      D1,D0
00003FFC  2042      7118          move.l    D2,A0
00003FFE  3210      7119          move.w    (A0),D1
00004000  C27C FEC0 7120          and.w     #65216,D1
00004004  0C41 E4C0 7121          cmp.w     #58560,D1
00004008  6604      7122          bne.s     DisassembleInstruction_70
0000400A  7201      7123          moveq     #1,D1
0000400C  6002      7124          bra.s     DisassembleInstruction_71
                    7125   DisassembleInstruction_70:
0000400E  4281      7126          clr.l     D1
                    7127   DisassembleInstruction_71:
00004010  8041      7128          or.w      D1,D0
00004012  6700 0252 7129          beq       DisassembleInstruction_73
                    7130   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    7131   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    7132   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    7133   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    7134   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    7135   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    7136   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    7137   ; {
                    7138   ; InstructionSize = 1;
00004016  24BC 0000 7139          move.l    #1,(A2)
0000401A  0001      
                    7140   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    7141   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
0000401C  2042      7142          move.l    D2,A0
0000401E  3010      7143          move.w    (A0),D0
00004020  C07C 00C0 7144          and.w     #192,D0
00004024  0C40 00C0 7145          cmp.w     #192,D0
00004028  6600 00EA 7146          bne       DisassembleInstruction_72
                    7147   ; {
                    7148   ; // test direction by testing bit 8
                    7149   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
0000402C  2042      7150          move.l    D2,A0
0000402E  3010      7151          move.w    (A0),D0
00004030  C07C FEC0 7152          and.w     #65216,D0
00004034  0C40 E0C0 7153          cmp.w     #57536,D0
00004038  6624      7154          bne.s     DisassembleInstruction_77
                    7155   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
0000403A  2042      7156          move.l    D2,A0
0000403C  3010      7157          move.w    (A0),D0
0000403E  C07C 0100 7158          and.w     #256,D0
00004042  0C40 0100 7159          cmp.w     #256,D0
00004046  660C      7160          bne.s     DisassembleInstruction_76
                    7161   ; strcpyInstruction("ASL") ;
00004048  4879 0000 7162          pea       @m68kde~1_227.L
0000404C  78EC      
0000404E  4E93      7163          jsr       (A3)
00004050  584F      7164          addq.w    #4,A7
00004052  600A      7165          bra.s     DisassembleInstruction_77
                    7166   DisassembleInstruction_76:
                    7167   ; else
                    7168   ; strcpyInstruction("ASR") ;
00004054  4879 0000 7169          pea       @m68kde~1_228.L
00004058  78F0      
0000405A  4E93      7170          jsr       (A3)
0000405C  584F      7171          addq.w    #4,A7
                    7172   DisassembleInstruction_77:
                    7173   ; // test direction by testing bit 8
                    7174   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
0000405E  2042      7175          move.l    D2,A0
00004060  3010      7176          move.w    (A0),D0
00004062  C07C FEC0 7177          and.w     #65216,D0
00004066  0C40 E2C0 7178          cmp.w     #58048,D0
0000406A  6624      7179          bne.s     DisassembleInstruction_81
                    7180   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
0000406C  2042      7181          move.l    D2,A0
0000406E  3010      7182          move.w    (A0),D0
00004070  C07C 0100 7183          and.w     #256,D0
00004074  0C40 0100 7184          cmp.w     #256,D0
00004078  660C      7185          bne.s     DisassembleInstruction_80
                    7186   ; strcpyInstruction("LSL") ;
0000407A  4879 0000 7187          pea       @m68kde~1_229.L
0000407E  78F4      
00004080  4E93      7188          jsr       (A3)
00004082  584F      7189          addq.w    #4,A7
00004084  600A      7190          bra.s     DisassembleInstruction_81
                    7191   DisassembleInstruction_80:
                    7192   ; else
                    7193   ; strcpyInstruction("LSR") ;
00004086  4879 0000 7194          pea       @m68kde~1_230.L
0000408A  78F8      
0000408C  4E93      7195          jsr       (A3)
0000408E  584F      7196          addq.w    #4,A7
                    7197   DisassembleInstruction_81:
                    7198   ; // test direction by testing bit 8
                    7199   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00004090  2042      7200          move.l    D2,A0
00004092  3010      7201          move.w    (A0),D0
00004094  C07C FEC0 7202          and.w     #65216,D0
00004098  0C40 E6C0 7203          cmp.w     #59072,D0
0000409C  6624      7204          bne.s     DisassembleInstruction_85
                    7205   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
0000409E  2042      7206          move.l    D2,A0
000040A0  3010      7207          move.w    (A0),D0
000040A2  C07C 0100 7208          and.w     #256,D0
000040A6  0C40 0100 7209          cmp.w     #256,D0
000040AA  660C      7210          bne.s     DisassembleInstruction_84
                    7211   ; strcpyInstruction("ROL") ;
000040AC  4879 0000 7212          pea       @m68kde~1_231.L
000040B0  78FC      
000040B2  4E93      7213          jsr       (A3)
000040B4  584F      7214          addq.w    #4,A7
000040B6  600A      7215          bra.s     DisassembleInstruction_85
                    7216   DisassembleInstruction_84:
                    7217   ; else
                    7218   ; strcpyInstruction("ROR") ;
000040B8  4879 0000 7219          pea       @m68kde~1_232.L
000040BC  7900      
000040BE  4E93      7220          jsr       (A3)
000040C0  584F      7221          addq.w    #4,A7
                    7222   DisassembleInstruction_85:
                    7223   ; // test direction by testing bit 8
                    7224   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
000040C2  2042      7225          move.l    D2,A0
000040C4  3010      7226          move.w    (A0),D0
000040C6  C07C FEC0 7227          and.w     #65216,D0
000040CA  0C40 E4C0 7228          cmp.w     #58560,D0
000040CE  6624      7229          bne.s     DisassembleInstruction_89
                    7230   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
000040D0  2042      7231          move.l    D2,A0
000040D2  3010      7232          move.w    (A0),D0
000040D4  C07C 0100 7233          and.w     #256,D0
000040D8  0C40 0100 7234          cmp.w     #256,D0
000040DC  660C      7235          bne.s     DisassembleInstruction_88
                    7236   ; strcpyInstruction("ROXL") ;
000040DE  4879 0000 7237          pea       @m68kde~1_233.L
000040E2  7904      
000040E4  4E93      7238          jsr       (A3)
000040E6  584F      7239          addq.w    #4,A7
000040E8  600A      7240          bra.s     DisassembleInstruction_89
                    7241   DisassembleInstruction_88:
                    7242   ; else
                    7243   ; strcpyInstruction("ROXR") ;
000040EA  4879 0000 7244          pea       @m68kde~1_234.L
000040EE  790A      
000040F0  4E93      7245          jsr       (A3)
000040F2  584F      7246          addq.w    #4,A7
                    7247   DisassembleInstruction_89:
                    7248   ; strcatInstruction("  ") ;
000040F4  4879 0000 7249          pea       @m68kde~1_15.L
000040F8  65C2      
000040FA  4EB8 0CCC 7250          jsr       _strcatInstruction
000040FE  584F      7251          addq.w    #4,A7
                    7252   ; Decode6BitEA(OpCode,0, 0,0) ;
00004100  42A7      7253          clr.l     -(A7)
00004102  42A7      7254          clr.l     -(A7)
00004104  42A7      7255          clr.l     -(A7)
00004106  2F02      7256          move.l    D2,-(A7)
00004108  4EB8 34BE 7257          jsr       _Decode6BitEA
0000410C  DEFC 0010 7258          add.w     #16,A7
00004110  6000 0154 7259          bra       DisassembleInstruction_73
                    7260   DisassembleInstruction_72:
                    7261   ; }
                    7262   ; // first version of above instructions, bit 5 is 0
                    7263   ; else
                    7264   ; {
                    7265   ; // test instruction and direction by testing bits 4,3
                    7266   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00004114  2042      7267          move.l    D2,A0
00004116  3010      7268          move.w    (A0),D0
00004118  C07C 0018 7269          and.w     #24,D0
0000411C  6624      7270          bne.s     DisassembleInstruction_93
                    7271   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
0000411E  2042      7272          move.l    D2,A0
00004120  3010      7273          move.w    (A0),D0
00004122  C07C 0100 7274          and.w     #256,D0
00004126  0C40 0100 7275          cmp.w     #256,D0
0000412A  660C      7276          bne.s     DisassembleInstruction_92
                    7277   ; strcpyInstruction("ASL") ;
0000412C  4879 0000 7278          pea       @m68kde~1_227.L
00004130  78EC      
00004132  4E93      7279          jsr       (A3)
00004134  584F      7280          addq.w    #4,A7
00004136  600A      7281          bra.s     DisassembleInstruction_93
                    7282   DisassembleInstruction_92:
                    7283   ; else
                    7284   ; strcpyInstruction("ASR") ;
00004138  4879 0000 7285          pea       @m68kde~1_228.L
0000413C  78F0      
0000413E  4E93      7286          jsr       (A3)
00004140  584F      7287          addq.w    #4,A7
                    7288   DisassembleInstruction_93:
                    7289   ; // test instruction and direction by testing bits 4,3
                    7290   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00004142  2042      7291          move.l    D2,A0
00004144  3010      7292          move.w    (A0),D0
00004146  C07C 0018 7293          and.w     #24,D0
0000414A  0C40 0008 7294          cmp.w     #8,D0
0000414E  6624      7295          bne.s     DisassembleInstruction_97
                    7296   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00004150  2042      7297          move.l    D2,A0
00004152  3010      7298          move.w    (A0),D0
00004154  C07C 0100 7299          and.w     #256,D0
00004158  0C40 0100 7300          cmp.w     #256,D0
0000415C  660C      7301          bne.s     DisassembleInstruction_96
                    7302   ; strcpyInstruction("LSL") ;
0000415E  4879 0000 7303          pea       @m68kde~1_229.L
00004162  78F4      
00004164  4E93      7304          jsr       (A3)
00004166  584F      7305          addq.w    #4,A7
00004168  600A      7306          bra.s     DisassembleInstruction_97
                    7307   DisassembleInstruction_96:
                    7308   ; else
                    7309   ; strcpyInstruction("LSR") ;
0000416A  4879 0000 7310          pea       @m68kde~1_230.L
0000416E  78F8      
00004170  4E93      7311          jsr       (A3)
00004172  584F      7312          addq.w    #4,A7
                    7313   DisassembleInstruction_97:
                    7314   ; // test instruction and direction by testing bits 4,3
                    7315   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00004174  2042      7316          move.l    D2,A0
00004176  3010      7317          move.w    (A0),D0
00004178  C07C 0018 7318          and.w     #24,D0
0000417C  0C40 0018 7319          cmp.w     #24,D0
00004180  6624      7320          bne.s     DisassembleInstruction_101
                    7321   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00004182  2042      7322          move.l    D2,A0
00004184  3010      7323          move.w    (A0),D0
00004186  C07C 0100 7324          and.w     #256,D0
0000418A  0C40 0100 7325          cmp.w     #256,D0
0000418E  660C      7326          bne.s     DisassembleInstruction_100
                    7327   ; strcpyInstruction("ROL") ;
00004190  4879 0000 7328          pea       @m68kde~1_231.L
00004194  78FC      
00004196  4E93      7329          jsr       (A3)
00004198  584F      7330          addq.w    #4,A7
0000419A  600A      7331          bra.s     DisassembleInstruction_101
                    7332   DisassembleInstruction_100:
                    7333   ; else
                    7334   ; strcpyInstruction("ROR") ;
0000419C  4879 0000 7335          pea       @m68kde~1_232.L
000041A0  7900      
000041A2  4E93      7336          jsr       (A3)
000041A4  584F      7337          addq.w    #4,A7
                    7338   DisassembleInstruction_101:
                    7339   ; // test instruction and direction by testing bits 4,3
                    7340   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
000041A6  2042      7341          move.l    D2,A0
000041A8  3010      7342          move.w    (A0),D0
000041AA  C07C 0018 7343          and.w     #24,D0
000041AE  0C40 0010 7344          cmp.w     #16,D0
000041B2  6624      7345          bne.s     DisassembleInstruction_105
                    7346   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
000041B4  2042      7347          move.l    D2,A0
000041B6  3010      7348          move.w    (A0),D0
000041B8  C07C 0100 7349          and.w     #256,D0
000041BC  0C40 0100 7350          cmp.w     #256,D0
000041C0  660C      7351          bne.s     DisassembleInstruction_104
                    7352   ; strcpyInstruction("ROXL") ;
000041C2  4879 0000 7353          pea       @m68kde~1_233.L
000041C6  7904      
000041C8  4E93      7354          jsr       (A3)
000041CA  584F      7355          addq.w    #4,A7
000041CC  600A      7356          bra.s     DisassembleInstruction_105
                    7357   DisassembleInstruction_104:
                    7358   ; else
                    7359   ; strcpyInstruction("ROXR") ;
000041CE  4879 0000 7360          pea       @m68kde~1_234.L
000041D2  790A      
000041D4  4E93      7361          jsr       (A3)
000041D6  584F      7362          addq.w    #4,A7
                    7363   DisassembleInstruction_105:
                    7364   ; Decode2BitOperandSize(*OpCode) ;
000041D8  2042      7365          move.l    D2,A0
000041DA  3210      7366          move.w    (A0),D1
000041DC  C2BC 0000 7367          and.l     #65535,D1
000041E0  FFFF      
000041E2  2F01      7368          move.l    D1,-(A7)
000041E4  4EB8 322A 7369          jsr       _Decode2BitOperandSize
000041E8  584F      7370          addq.w    #4,A7
                    7371   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
000041EA  2042      7372          move.l    D2,A0
000041EC  3010      7373          move.w    (A0),D0
000041EE  C07C 0020 7374          and.w     #32,D0
000041F2  6600 0038 7375          bne       DisassembleInstruction_106
                    7376   ; sprintf(TempString,"#$%X,D%X",
000041F6  2042      7377          move.l    D2,A0
000041F8  3210      7378          move.w    (A0),D1
000041FA  C27C 0007 7379          and.w     #7,D1
000041FE  C2BC 0000 7380          and.l     #65535,D1
00004202  FFFF      
00004204  2F01      7381          move.l    D1,-(A7)
00004206  2042      7382          move.l    D2,A0
00004208  3210      7383          move.w    (A0),D1
0000420A  E041      7384          asr.w     #8,D1
0000420C  E241      7385          asr.w     #1,D1
0000420E  C27C 0007 7386          and.w     #7,D1
00004212  C2BC 0000 7387          and.l     #65535,D1
00004216  FFFF      
00004218  2F01      7388          move.l    D1,-(A7)
0000421A  4879 0000 7389          pea       @m68kde~1_235.L
0000421E  7910      
00004220  2F0C      7390          move.l    A4,-(A7)
00004222  4E95      7391          jsr       (A5)
00004224  DEFC 0010 7392          add.w     #16,A7
00004228  6000 0034 7393          bra       DisassembleInstruction_107
                    7394   DisassembleInstruction_106:
                    7395   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7396   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7397   ; }
                    7398   ; else {                                                                      // if shift is for example ASR D1,D2
                    7399   ; sprintf(TempString,"D%X,D%X",
0000422C  2042      7400          move.l    D2,A0
0000422E  3210      7401          move.w    (A0),D1
00004230  C27C 0007 7402          and.w     #7,D1
00004234  C2BC 0000 7403          and.l     #65535,D1
00004238  FFFF      
0000423A  2F01      7404          move.l    D1,-(A7)
0000423C  2042      7405          move.l    D2,A0
0000423E  3210      7406          move.w    (A0),D1
00004240  E041      7407          asr.w     #8,D1
00004242  E241      7408          asr.w     #1,D1
00004244  C27C 0007 7409          and.w     #7,D1
00004248  C2BC 0000 7410          and.l     #65535,D1
0000424C  FFFF      
0000424E  2F01      7411          move.l    D1,-(A7)
00004250  4879 0000 7412          pea       @m68kde~1_223.L
00004254  78C2      
00004256  2F0C      7413          move.l    A4,-(A7)
00004258  4E95      7414          jsr       (A5)
0000425A  DEFC 0010 7415          add.w     #16,A7
                    7416   DisassembleInstruction_107:
                    7417   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7418   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7419   ; }
                    7420   ; strcatInstruction(TempString) ;
0000425E  2F0C      7421          move.l    A4,-(A7)
00004260  4EB8 0CCC 7422          jsr       _strcatInstruction
00004264  584F      7423          addq.w    #4,A7
                    7424   DisassembleInstruction_73:
                    7425   ; }
                    7426   ; }
                    7427   ; /////////////////////////////////////////////////////////////////////////////////
                    7428   ; // if instruction is BCC and BSR and BRA
                    7429   ; /////////////////////////////////////////////////////////////////////////////////
                    7430   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00004266  2042      7431          move.l    D2,A0
00004268  3010      7432          move.w    (A0),D0
0000426A  C07C F000 7433          and.w     #61440,D0
0000426E  0C40 6000 7434          cmp.w     #24576,D0
00004272  6600 00A0 7435          bne       DisassembleInstruction_108
                    7436   ; {
                    7437   ; InstructionSize = 1;
00004276  24BC 0000 7438          move.l    #1,(A2)
0000427A  0001      
                    7439   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
0000427C  2042      7440          move.l    D2,A0
0000427E  3010      7441          move.w    (A0),D0
00004280  E040      7442          asr.w     #8,D0
00004282  C07C 000F 7443          and.w     #15,D0
00004286  1D40 FFE9 7444          move.b    D0,-23(A6)
                    7445   ; strcpyInstruction("B") ;
0000428A  4879 0000 7446          pea       @m68kde~1_236.L
0000428E  791A      
00004290  4E93      7447          jsr       (A3)
00004292  584F      7448          addq.w    #4,A7
                    7449   ; DecodeBranchCondition(Condition) ;
00004294  122E FFE9 7450          move.b    -23(A6),D1
00004298  C27C 00FF 7451          and.w     #255,D1
0000429C  C2BC 0000 7452          and.l     #65535,D1
000042A0  FFFF      
000042A2  2F01      7453          move.l    D1,-(A7)
000042A4  4EB8 397C 7454          jsr       _DecodeBranchCondition
000042A8  584F      7455          addq.w    #4,A7
                    7456   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
000042AA  2042      7457          move.l    D2,A0
000042AC  3010      7458          move.w    (A0),D0
000042AE  C07C 00FF 7459          and.w     #255,D0
000042B2  1D40 FFFB 7460          move.b    D0,-5(A6)
                    7461   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
000042B6  102E FFFB 7462          move.b    -5(A6),D0
000042BA  4880      7463          ext.w     D0
000042BC  4A40      7464          tst.w     D0
000042BE  662A      7465          bne.s     DisassembleInstruction_110
                    7466   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
000042C0  2202      7467          move.l    D2,D1
000042C2  2042      7468          move.l    D2,A0
000042C4  2F00      7469          move.l    D0,-(A7)
000042C6  3028 0002 7470          move.w    2(A0),D0
000042CA  48C0      7471          ext.l     D0
000042CC  D280      7472          add.l     D0,D1
000042CE  201F      7473          move.l    (A7)+,D0
000042D0  5481      7474          addq.l    #2,D1
000042D2  2F01      7475          move.l    D1,-(A7)
000042D4  4879 0000 7476          pea       @m68kde~1_186.L
000042D8  77E6      
000042DA  2F0C      7477          move.l    A4,-(A7)
000042DC  4E95      7478          jsr       (A5)
000042DE  DEFC 000C 7479          add.w     #12,A7
                    7480   ; InstructionSize = 2 ;
000042E2  24BC 0000 7481          move.l    #2,(A2)
000042E6  0002      
000042E8  6022      7482          bra.s     DisassembleInstruction_111
                    7483   DisassembleInstruction_110:
                    7484   ; }
                    7485   ; else
                    7486   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
000042EA  2202      7487          move.l    D2,D1
000042EC  2F00      7488          move.l    D0,-(A7)
000042EE  102E FFFB 7489          move.b    -5(A6),D0
000042F2  4880      7490          ext.w     D0
000042F4  48C0      7491          ext.l     D0
000042F6  D280      7492          add.l     D0,D1
000042F8  201F      7493          move.l    (A7)+,D0
000042FA  5481      7494          addq.l    #2,D1
000042FC  2F01      7495          move.l    D1,-(A7)
000042FE  4879 0000 7496          pea       @m68kde~1_186.L
00004302  77E6      
00004304  2F0C      7497          move.l    A4,-(A7)
00004306  4E95      7498          jsr       (A5)
00004308  DEFC 000C 7499          add.w     #12,A7
                    7500   DisassembleInstruction_111:
                    7501   ; strcatInstruction(TempString) ;
0000430C  2F0C      7502          move.l    A4,-(A7)
0000430E  4EB8 0CCC 7503          jsr       _strcatInstruction
00004312  584F      7504          addq.w    #4,A7
                    7505   DisassembleInstruction_108:
                    7506   ; }
                    7507   ; /////////////////////////////////////////////////////////////////////////////////
                    7508   ; // if instruction is BCHG dn,<EA>
                    7509   ; /////////////////////////////////////////////////////////////////////////////////
                    7510   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00004314  2042      7511          move.l    D2,A0
00004316  3010      7512          move.w    (A0),D0
00004318  C07C F1C0 7513          and.w     #61888,D0
0000431C  0C40 0140 7514          cmp.w     #320,D0
00004320  6600 004C 7515          bne       DisassembleInstruction_112
                    7516   ; InstructionSize = 1;
00004324  24BC 0000 7517          move.l    #1,(A2)
00004328  0001      
                    7518   ; strcpyInstruction("BCHG ") ;
0000432A  4879 0000 7519          pea       @m68kde~1_237.L
0000432E  791C      
00004330  4E93      7520          jsr       (A3)
00004332  584F      7521          addq.w    #4,A7
                    7522   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004334  2042      7523          move.l    D2,A0
00004336  3210      7524          move.w    (A0),D1
00004338  E041      7525          asr.w     #8,D1
0000433A  E241      7526          asr.w     #1,D1
0000433C  C27C 0007 7527          and.w     #7,D1
00004340  C2BC 0000 7528          and.l     #65535,D1
00004344  FFFF      
00004346  2F01      7529          move.l    D1,-(A7)
00004348  4879 0000 7530          pea       @m68kde~1_238.L
0000434C  7922      
0000434E  2F0C      7531          move.l    A4,-(A7)
00004350  4E95      7532          jsr       (A5)
00004352  DEFC 000C 7533          add.w     #12,A7
                    7534   ; strcatInstruction(TempString) ;
00004356  2F0C      7535          move.l    A4,-(A7)
00004358  4EB8 0CCC 7536          jsr       _strcatInstruction
0000435C  584F      7537          addq.w    #4,A7
                    7538   ; Decode6BitEA(OpCode,0,0,0) ;
0000435E  42A7      7539          clr.l     -(A7)
00004360  42A7      7540          clr.l     -(A7)
00004362  42A7      7541          clr.l     -(A7)
00004364  2F02      7542          move.l    D2,-(A7)
00004366  4EB8 34BE 7543          jsr       _Decode6BitEA
0000436A  DEFC 0010 7544          add.w     #16,A7
                    7545   DisassembleInstruction_112:
                    7546   ; }
                    7547   ; /////////////////////////////////////////////////////////////////////////////////
                    7548   ; // if instruction is BCHG #data,<EA>
                    7549   ; /////////////////////////////////////////////////////////////////////////////////
                    7550   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
0000436E  2042      7551          move.l    D2,A0
00004370  3010      7552          move.w    (A0),D0
00004372  C07C FFC0 7553          and.w     #65472,D0
00004376  0C40 0840 7554          cmp.w     #2112,D0
0000437A  6600 0044 7555          bne       DisassembleInstruction_114
                    7556   ; strcpyInstruction("BCHG ") ;
0000437E  4879 0000 7557          pea       @m68kde~1_237.L
00004382  791C      
00004384  4E93      7558          jsr       (A3)
00004386  584F      7559          addq.w    #4,A7
                    7560   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004388  2042      7561          move.l    D2,A0
0000438A  3228 0002 7562          move.w    2(A0),D1
0000438E  48C1      7563          ext.l     D1
00004390  2F01      7564          move.l    D1,-(A7)
00004392  4879 0000 7565          pea       @m68kde~1_239.L
00004396  7928      
00004398  2F0C      7566          move.l    A4,-(A7)
0000439A  4E95      7567          jsr       (A5)
0000439C  DEFC 000C 7568          add.w     #12,A7
                    7569   ; InstructionSize = 2 ;
000043A0  24BC 0000 7570          move.l    #2,(A2)
000043A4  0002      
                    7571   ; strcatInstruction(TempString) ;
000043A6  2F0C      7572          move.l    A4,-(A7)
000043A8  4EB8 0CCC 7573          jsr       _strcatInstruction
000043AC  584F      7574          addq.w    #4,A7
                    7575   ; Decode6BitEA(OpCode,0,1,0) ;
000043AE  42A7      7576          clr.l     -(A7)
000043B0  4878 0001 7577          pea       1
000043B4  42A7      7578          clr.l     -(A7)
000043B6  2F02      7579          move.l    D2,-(A7)
000043B8  4EB8 34BE 7580          jsr       _Decode6BitEA
000043BC  DEFC 0010 7581          add.w     #16,A7
                    7582   DisassembleInstruction_114:
                    7583   ; }
                    7584   ; /////////////////////////////////////////////////////////////////////////////////
                    7585   ; // if instruction is BCLR  dn,<EA>
                    7586   ; /////////////////////////////////////////////////////////////////////////////////
                    7587   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
000043C0  2042      7588          move.l    D2,A0
000043C2  3010      7589          move.w    (A0),D0
000043C4  C07C F1C0 7590          and.w     #61888,D0
000043C8  0C40 0180 7591          cmp.w     #384,D0
000043CC  6600 004C 7592          bne       DisassembleInstruction_116
                    7593   ; InstructionSize = 1;
000043D0  24BC 0000 7594          move.l    #1,(A2)
000043D4  0001      
                    7595   ; strcpyInstruction("BCLR ") ;
000043D6  4879 0000 7596          pea       @m68kde~1_240.L
000043DA  792E      
000043DC  4E93      7597          jsr       (A3)
000043DE  584F      7598          addq.w    #4,A7
                    7599   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000043E0  2042      7600          move.l    D2,A0
000043E2  3210      7601          move.w    (A0),D1
000043E4  E041      7602          asr.w     #8,D1
000043E6  E241      7603          asr.w     #1,D1
000043E8  C27C 0007 7604          and.w     #7,D1
000043EC  C2BC 0000 7605          and.l     #65535,D1
000043F0  FFFF      
000043F2  2F01      7606          move.l    D1,-(A7)
000043F4  4879 0000 7607          pea       @m68kde~1_238.L
000043F8  7922      
000043FA  2F0C      7608          move.l    A4,-(A7)
000043FC  4E95      7609          jsr       (A5)
000043FE  DEFC 000C 7610          add.w     #12,A7
                    7611   ; strcatInstruction(TempString) ;
00004402  2F0C      7612          move.l    A4,-(A7)
00004404  4EB8 0CCC 7613          jsr       _strcatInstruction
00004408  584F      7614          addq.w    #4,A7
                    7615   ; Decode6BitEA(OpCode,0,0,0) ;
0000440A  42A7      7616          clr.l     -(A7)
0000440C  42A7      7617          clr.l     -(A7)
0000440E  42A7      7618          clr.l     -(A7)
00004410  2F02      7619          move.l    D2,-(A7)
00004412  4EB8 34BE 7620          jsr       _Decode6BitEA
00004416  DEFC 0010 7621          add.w     #16,A7
                    7622   DisassembleInstruction_116:
                    7623   ; }
                    7624   ; /////////////////////////////////////////////////////////////////////////////////
                    7625   ; // if instruction is BCLR #data,<EA>
                    7626   ; /////////////////////////////////////////////////////////////////////////////////
                    7627   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
0000441A  2042      7628          move.l    D2,A0
0000441C  3010      7629          move.w    (A0),D0
0000441E  C07C FFC0 7630          and.w     #65472,D0
00004422  0C40 0880 7631          cmp.w     #2176,D0
00004426  6600 0044 7632          bne       DisassembleInstruction_118
                    7633   ; strcpyInstruction("BCLR ") ;
0000442A  4879 0000 7634          pea       @m68kde~1_240.L
0000442E  792E      
00004430  4E93      7635          jsr       (A3)
00004432  584F      7636          addq.w    #4,A7
                    7637   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004434  2042      7638          move.l    D2,A0
00004436  3228 0002 7639          move.w    2(A0),D1
0000443A  48C1      7640          ext.l     D1
0000443C  2F01      7641          move.l    D1,-(A7)
0000443E  4879 0000 7642          pea       @m68kde~1_239.L
00004442  7928      
00004444  2F0C      7643          move.l    A4,-(A7)
00004446  4E95      7644          jsr       (A5)
00004448  DEFC 000C 7645          add.w     #12,A7
                    7646   ; InstructionSize = 2 ;
0000444C  24BC 0000 7647          move.l    #2,(A2)
00004450  0002      
                    7648   ; strcatInstruction(TempString) ;
00004452  2F0C      7649          move.l    A4,-(A7)
00004454  4EB8 0CCC 7650          jsr       _strcatInstruction
00004458  584F      7651          addq.w    #4,A7
                    7652   ; Decode6BitEA(OpCode,0,1,0) ;
0000445A  42A7      7653          clr.l     -(A7)
0000445C  4878 0001 7654          pea       1
00004460  42A7      7655          clr.l     -(A7)
00004462  2F02      7656          move.l    D2,-(A7)
00004464  4EB8 34BE 7657          jsr       _Decode6BitEA
00004468  DEFC 0010 7658          add.w     #16,A7
                    7659   DisassembleInstruction_118:
                    7660   ; }
                    7661   ; /////////////////////////////////////////////////////////////////////////////////
                    7662   ; // if instruction is BSET dn,<EA>
                    7663   ; /////////////////////////////////////////////////////////////////////////////////
                    7664   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
0000446C  2042      7665          move.l    D2,A0
0000446E  3010      7666          move.w    (A0),D0
00004470  C07C F1C0 7667          and.w     #61888,D0
00004474  0C40 01C0 7668          cmp.w     #448,D0
00004478  6600 004C 7669          bne       DisassembleInstruction_120
                    7670   ; InstructionSize = 1;
0000447C  24BC 0000 7671          move.l    #1,(A2)
00004480  0001      
                    7672   ; strcpyInstruction("BSET ") ;
00004482  4879 0000 7673          pea       @m68kde~1_241.L
00004486  7934      
00004488  4E93      7674          jsr       (A3)
0000448A  584F      7675          addq.w    #4,A7
                    7676   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000448C  2042      7677          move.l    D2,A0
0000448E  3210      7678          move.w    (A0),D1
00004490  E041      7679          asr.w     #8,D1
00004492  E241      7680          asr.w     #1,D1
00004494  C27C 0007 7681          and.w     #7,D1
00004498  C2BC 0000 7682          and.l     #65535,D1
0000449C  FFFF      
0000449E  2F01      7683          move.l    D1,-(A7)
000044A0  4879 0000 7684          pea       @m68kde~1_238.L
000044A4  7922      
000044A6  2F0C      7685          move.l    A4,-(A7)
000044A8  4E95      7686          jsr       (A5)
000044AA  DEFC 000C 7687          add.w     #12,A7
                    7688   ; strcatInstruction(TempString) ;
000044AE  2F0C      7689          move.l    A4,-(A7)
000044B0  4EB8 0CCC 7690          jsr       _strcatInstruction
000044B4  584F      7691          addq.w    #4,A7
                    7692   ; Decode6BitEA(OpCode,0,0,0) ;
000044B6  42A7      7693          clr.l     -(A7)
000044B8  42A7      7694          clr.l     -(A7)
000044BA  42A7      7695          clr.l     -(A7)
000044BC  2F02      7696          move.l    D2,-(A7)
000044BE  4EB8 34BE 7697          jsr       _Decode6BitEA
000044C2  DEFC 0010 7698          add.w     #16,A7
                    7699   DisassembleInstruction_120:
                    7700   ; }
                    7701   ; /////////////////////////////////////////////////////////////////////////////////
                    7702   ; // if instruction is BSET #data,<EA>
                    7703   ; /////////////////////////////////////////////////////////////////////////////////
                    7704   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
000044C6  2042      7705          move.l    D2,A0
000044C8  3010      7706          move.w    (A0),D0
000044CA  C07C FFC0 7707          and.w     #65472,D0
000044CE  0C40 08C0 7708          cmp.w     #2240,D0
000044D2  6600 0044 7709          bne       DisassembleInstruction_122
                    7710   ; strcpyInstruction("BSET ") ;
000044D6  4879 0000 7711          pea       @m68kde~1_241.L
000044DA  7934      
000044DC  4E93      7712          jsr       (A3)
000044DE  584F      7713          addq.w    #4,A7
                    7714   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000044E0  2042      7715          move.l    D2,A0
000044E2  3228 0002 7716          move.w    2(A0),D1
000044E6  48C1      7717          ext.l     D1
000044E8  2F01      7718          move.l    D1,-(A7)
000044EA  4879 0000 7719          pea       @m68kde~1_239.L
000044EE  7928      
000044F0  2F0C      7720          move.l    A4,-(A7)
000044F2  4E95      7721          jsr       (A5)
000044F4  DEFC 000C 7722          add.w     #12,A7
                    7723   ; InstructionSize = 2 ;
000044F8  24BC 0000 7724          move.l    #2,(A2)
000044FC  0002      
                    7725   ; strcatInstruction(TempString) ;
000044FE  2F0C      7726          move.l    A4,-(A7)
00004500  4EB8 0CCC 7727          jsr       _strcatInstruction
00004504  584F      7728          addq.w    #4,A7
                    7729   ; Decode6BitEA(OpCode,0,1,0) ;
00004506  42A7      7730          clr.l     -(A7)
00004508  4878 0001 7731          pea       1
0000450C  42A7      7732          clr.l     -(A7)
0000450E  2F02      7733          move.l    D2,-(A7)
00004510  4EB8 34BE 7734          jsr       _Decode6BitEA
00004514  DEFC 0010 7735          add.w     #16,A7
                    7736   DisassembleInstruction_122:
                    7737   ; }
                    7738   ; /////////////////////////////////////////////////////////////////////////////////
                    7739   ; // if instruction is BTST dn,<EA>
                    7740   ; /////////////////////////////////////////////////////////////////////////////////
                    7741   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
00004518  2042      7742          move.l    D2,A0
0000451A  3010      7743          move.w    (A0),D0
0000451C  C07C F1C0 7744          and.w     #61888,D0
00004520  0C40 0100 7745          cmp.w     #256,D0
00004524  6600 004C 7746          bne       DisassembleInstruction_124
                    7747   ; InstructionSize = 1;
00004528  24BC 0000 7748          move.l    #1,(A2)
0000452C  0001      
                    7749   ; strcpyInstruction("BTST ") ;
0000452E  4879 0000 7750          pea       @m68kde~1_242.L
00004532  793A      
00004534  4E93      7751          jsr       (A3)
00004536  584F      7752          addq.w    #4,A7
                    7753   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004538  2042      7754          move.l    D2,A0
0000453A  3210      7755          move.w    (A0),D1
0000453C  E041      7756          asr.w     #8,D1
0000453E  E241      7757          asr.w     #1,D1
00004540  C27C 0007 7758          and.w     #7,D1
00004544  C2BC 0000 7759          and.l     #65535,D1
00004548  FFFF      
0000454A  2F01      7760          move.l    D1,-(A7)
0000454C  4879 0000 7761          pea       @m68kde~1_238.L
00004550  7922      
00004552  2F0C      7762          move.l    A4,-(A7)
00004554  4E95      7763          jsr       (A5)
00004556  DEFC 000C 7764          add.w     #12,A7
                    7765   ; strcatInstruction(TempString) ;
0000455A  2F0C      7766          move.l    A4,-(A7)
0000455C  4EB8 0CCC 7767          jsr       _strcatInstruction
00004560  584F      7768          addq.w    #4,A7
                    7769   ; Decode6BitEA(OpCode,0,0,0) ;
00004562  42A7      7770          clr.l     -(A7)
00004564  42A7      7771          clr.l     -(A7)
00004566  42A7      7772          clr.l     -(A7)
00004568  2F02      7773          move.l    D2,-(A7)
0000456A  4EB8 34BE 7774          jsr       _Decode6BitEA
0000456E  DEFC 0010 7775          add.w     #16,A7
                    7776   DisassembleInstruction_124:
                    7777   ; }
                    7778   ; /////////////////////////////////////////////////////////////////////////////////
                    7779   ; // if instruction is BTST #data,<EA>
                    7780   ; /////////////////////////////////////////////////////////////////////////////////
                    7781   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
00004572  2042      7782          move.l    D2,A0
00004574  3010      7783          move.w    (A0),D0
00004576  C07C FFC0 7784          and.w     #65472,D0
0000457A  0C40 0800 7785          cmp.w     #2048,D0
0000457E  6600 0044 7786          bne       DisassembleInstruction_126
                    7787   ; strcpyInstruction("BTST ") ;
00004582  4879 0000 7788          pea       @m68kde~1_242.L
00004586  793A      
00004588  4E93      7789          jsr       (A3)
0000458A  584F      7790          addq.w    #4,A7
                    7791   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
0000458C  2042      7792          move.l    D2,A0
0000458E  3228 0002 7793          move.w    2(A0),D1
00004592  48C1      7794          ext.l     D1
00004594  2F01      7795          move.l    D1,-(A7)
00004596  4879 0000 7796          pea       @m68kde~1_239.L
0000459A  7928      
0000459C  2F0C      7797          move.l    A4,-(A7)
0000459E  4E95      7798          jsr       (A5)
000045A0  DEFC 000C 7799          add.w     #12,A7
                    7800   ; InstructionSize = 2 ;
000045A4  24BC 0000 7801          move.l    #2,(A2)
000045A8  0002      
                    7802   ; strcatInstruction(TempString) ;
000045AA  2F0C      7803          move.l    A4,-(A7)
000045AC  4EB8 0CCC 7804          jsr       _strcatInstruction
000045B0  584F      7805          addq.w    #4,A7
                    7806   ; Decode6BitEA(OpCode,0,1,0) ;
000045B2  42A7      7807          clr.l     -(A7)
000045B4  4878 0001 7808          pea       1
000045B8  42A7      7809          clr.l     -(A7)
000045BA  2F02      7810          move.l    D2,-(A7)
000045BC  4EB8 34BE 7811          jsr       _Decode6BitEA
000045C0  DEFC 0010 7812          add.w     #16,A7
                    7813   DisassembleInstruction_126:
                    7814   ; }
                    7815   ; /////////////////////////////////////////////////////////////////////////////////
                    7816   ; // if instruction is CHK.W <EA>,DN
                    7817   ; /////////////////////////////////////////////////////////////////////////////////
                    7818   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
000045C4  2042      7819          move.l    D2,A0
000045C6  3010      7820          move.w    (A0),D0
000045C8  C07C F1C0 7821          and.w     #61888,D0
000045CC  0C40 4180 7822          cmp.w     #16768,D0
000045D0  6600 004C 7823          bne       DisassembleInstruction_128
                    7824   ; InstructionSize = 1;
000045D4  24BC 0000 7825          move.l    #1,(A2)
000045D8  0001      
                    7826   ; strcpyInstruction("CHK ") ;
000045DA  4879 0000 7827          pea       @m68kde~1_243.L
000045DE  7940      
000045E0  4E93      7828          jsr       (A3)
000045E2  584F      7829          addq.w    #4,A7
                    7830   ; Decode6BitEA(OpCode,0,0,0) ;
000045E4  42A7      7831          clr.l     -(A7)
000045E6  42A7      7832          clr.l     -(A7)
000045E8  42A7      7833          clr.l     -(A7)
000045EA  2F02      7834          move.l    D2,-(A7)
000045EC  4EB8 34BE 7835          jsr       _Decode6BitEA
000045F0  DEFC 0010 7836          add.w     #16,A7
                    7837   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000045F4  2042      7838          move.l    D2,A0
000045F6  3210      7839          move.w    (A0),D1
000045F8  E041      7840          asr.w     #8,D1
000045FA  E241      7841          asr.w     #1,D1
000045FC  C27C 0007 7842          and.w     #7,D1
00004600  C2BC 0000 7843          and.l     #65535,D1
00004604  FFFF      
00004606  2F01      7844          move.l    D1,-(A7)
00004608  4879 0000 7845          pea       @m68kde~1_244.L
0000460C  7946      
0000460E  2F0C      7846          move.l    A4,-(A7)
00004610  4E95      7847          jsr       (A5)
00004612  DEFC 000C 7848          add.w     #12,A7
                    7849   ; strcatInstruction(TempString) ;
00004616  2F0C      7850          move.l    A4,-(A7)
00004618  4EB8 0CCC 7851          jsr       _strcatInstruction
0000461C  584F      7852          addq.w    #4,A7
                    7853   DisassembleInstruction_128:
                    7854   ; }
                    7855   ; /////////////////////////////////////////////////////////////////////////////////
                    7856   ; // if instruction is CLR <EA>
                    7857   ; /////////////////////////////////////////////////////////////////////////////////
                    7858   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
0000461E  2042      7859          move.l    D2,A0
00004620  3010      7860          move.w    (A0),D0
00004622  C07C FF00 7861          and.w     #65280,D0
00004626  0C40 4200 7862          cmp.w     #16896,D0
0000462A  6600 0034 7863          bne       DisassembleInstruction_130
                    7864   ; InstructionSize = 1;
0000462E  24BC 0000 7865          move.l    #1,(A2)
00004632  0001      
                    7866   ; strcpyInstruction("CLR") ;
00004634  4879 0000 7867          pea       @m68kde~1_245.L
00004638  794C      
0000463A  4E93      7868          jsr       (A3)
0000463C  584F      7869          addq.w    #4,A7
                    7870   ; Decode2BitOperandSize(*OpCode) ;
0000463E  2042      7871          move.l    D2,A0
00004640  3210      7872          move.w    (A0),D1
00004642  C2BC 0000 7873          and.l     #65535,D1
00004646  FFFF      
00004648  2F01      7874          move.l    D1,-(A7)
0000464A  4EB8 322A 7875          jsr       _Decode2BitOperandSize
0000464E  584F      7876          addq.w    #4,A7
                    7877   ; Decode6BitEA(OpCode,0,0,0) ;
00004650  42A7      7878          clr.l     -(A7)
00004652  42A7      7879          clr.l     -(A7)
00004654  42A7      7880          clr.l     -(A7)
00004656  2F02      7881          move.l    D2,-(A7)
00004658  4EB8 34BE 7882          jsr       _Decode6BitEA
0000465C  DEFC 0010 7883          add.w     #16,A7
                    7884   DisassembleInstruction_130:
                    7885   ; }
                    7886   ; /////////////////////////////////////////////////////////////////////////////////
                    7887   ; // if instruction is CMP, CMPA
                    7888   ; /////////////////////////////////////////////////////////////////////////////////
                    7889   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
00004660  2042      7890          move.l    D2,A0
00004662  3010      7891          move.w    (A0),D0
00004664  C07C F000 7892          and.w     #61440,D0
00004668  0C40 B000 7893          cmp.w     #45056,D0
0000466C  6600 008C 7894          bne       DisassembleInstruction_135
                    7895   ; {
                    7896   ; InstructionSize = 1;
00004670  24BC 0000 7897          move.l    #1,(A2)
00004674  0001      
                    7898   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004676  2042      7899          move.l    D2,A0
00004678  3010      7900          move.w    (A0),D0
0000467A  EC40      7901          asr.w     #6,D0
0000467C  C07C 0007 7902          and.w     #7,D0
00004680  3600      7903          move.w    D0,D3
                    7904   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
00004682  0C43 0003 7905          cmp.w     #3,D3
00004686  6708      7906          beq.s     DisassembleInstruction_136
00004688  0C43 0007 7907          cmp.w     #7,D3
0000468C  6600 005A 7908          bne       DisassembleInstruction_134
                    7909   DisassembleInstruction_136:
                    7910   ; if(OpMode == (unsigned short int)(0x0003))
00004690  0C43 0003 7911          cmp.w     #3,D3
00004694  660C      7912          bne.s     DisassembleInstruction_137
                    7913   ; strcpyInstruction("CMPA.W ") ;
00004696  4879 0000 7914          pea       @m68kde~1_246.L
0000469A  7950      
0000469C  4E93      7915          jsr       (A3)
0000469E  584F      7916          addq.w    #4,A7
000046A0  600A      7917          bra.s     DisassembleInstruction_138
                    7918   DisassembleInstruction_137:
                    7919   ; else
                    7920   ; strcpyInstruction("CMPA.L ") ;
000046A2  4879 0000 7921          pea       @m68kde~1_247.L
000046A6  7958      
000046A8  4E93      7922          jsr       (A3)
000046AA  584F      7923          addq.w    #4,A7
                    7924   DisassembleInstruction_138:
                    7925   ; Decode6BitEA(OpCode,0,0,0) ;
000046AC  42A7      7926          clr.l     -(A7)
000046AE  42A7      7927          clr.l     -(A7)
000046B0  42A7      7928          clr.l     -(A7)
000046B2  2F02      7929          move.l    D2,-(A7)
000046B4  4EB8 34BE 7930          jsr       _Decode6BitEA
000046B8  DEFC 0010 7931          add.w     #16,A7
                    7932   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
000046BC  2042      7933          move.l    D2,A0
000046BE  3210      7934          move.w    (A0),D1
000046C0  E041      7935          asr.w     #8,D1
000046C2  E241      7936          asr.w     #1,D1
000046C4  C27C 0007 7937          and.w     #7,D1
000046C8  C2BC 0000 7938          and.l     #65535,D1
000046CC  FFFF      
000046CE  2F01      7939          move.l    D1,-(A7)
000046D0  4879 0000 7940          pea       @m68kde~1_248.L
000046D4  7960      
000046D6  2F0C      7941          move.l    A4,-(A7)
000046D8  4E95      7942          jsr       (A5)
000046DA  DEFC 000C 7943          add.w     #12,A7
                    7944   ; strcatInstruction(TempString) ;
000046DE  2F0C      7945          move.l    A4,-(A7)
000046E0  4EB8 0CCC 7946          jsr       _strcatInstruction
000046E4  584F      7947          addq.w    #4,A7
000046E6  6012      7948          bra.s     DisassembleInstruction_135
                    7949   DisassembleInstruction_134:
                    7950   ; }
                    7951   ; else {
                    7952   ; strcpyInstruction("CMP") ;
000046E8  4879 0000 7953          pea       @m68kde~1_249.L
000046EC  7966      
000046EE  4E93      7954          jsr       (A3)
000046F0  584F      7955          addq.w    #4,A7
                    7956   ; Decode3BitOperandMode(OpCode) ;
000046F2  2F02      7957          move.l    D2,-(A7)
000046F4  4EB8 38E6 7958          jsr       _Decode3BitOperandMode
000046F8  584F      7959          addq.w    #4,A7
                    7960   DisassembleInstruction_135:
                    7961   ; }
                    7962   ; }
                    7963   ; /////////////////////////////////////////////////////////////////////////////////
                    7964   ; // if instruction is CMPM
                    7965   ; /////////////////////////////////////////////////////////////////////////////////
                    7966   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
000046FA  2042      7967          move.l    D2,A0
000046FC  3010      7968          move.w    (A0),D0
000046FE  C07C F138 7969          and.w     #61752,D0
00004702  0C40 B108 7970          cmp.w     #45320,D0
00004706  6600 007A 7971          bne       DisassembleInstruction_141
                    7972   ; {
                    7973   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000470A  2042      7974          move.l    D2,A0
0000470C  3010      7975          move.w    (A0),D0
0000470E  EC40      7976          asr.w     #6,D0
00004710  C07C 0003 7977          and.w     #3,D0
00004714  3600      7978          move.w    D0,D3
                    7979   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
00004716  0C43 0000 7980          cmp.w     #0,D3
0000471A  6500 0066 7981          blo       DisassembleInstruction_141
0000471E  0C43 0002 7982          cmp.w     #2,D3
00004722  6200 005E 7983          bhi       DisassembleInstruction_141
                    7984   ; {
                    7985   ; InstructionSize = 1;
00004726  24BC 0000 7986          move.l    #1,(A2)
0000472A  0001      
                    7987   ; strcpyInstruction("CMPM") ;
0000472C  4879 0000 7988          pea       @m68kde~1_250.L
00004730  796A      
00004732  4E93      7989          jsr       (A3)
00004734  584F      7990          addq.w    #4,A7
                    7991   ; Decode2BitOperandSize(*OpCode) ;
00004736  2042      7992          move.l    D2,A0
00004738  3210      7993          move.w    (A0),D1
0000473A  C2BC 0000 7994          and.l     #65535,D1
0000473E  FFFF      
00004740  2F01      7995          move.l    D1,-(A7)
00004742  4EB8 322A 7996          jsr       _Decode2BitOperandSize
00004746  584F      7997          addq.w    #4,A7
                    7998   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
00004748  2042      7999          move.l    D2,A0
0000474A  3210      8000          move.w    (A0),D1
0000474C  E041      8001          asr.w     #8,D1
0000474E  E241      8002          asr.w     #1,D1
00004750  C27C 0007 8003          and.w     #7,D1
00004754  C2BC 0000 8004          and.l     #65535,D1
00004758  FFFF      
0000475A  2F01      8005          move.l    D1,-(A7)
0000475C  2042      8006          move.l    D2,A0
0000475E  3210      8007          move.w    (A0),D1
00004760  C27C 0007 8008          and.w     #7,D1
00004764  C2BC 0000 8009          and.l     #65535,D1
00004768  FFFF      
0000476A  2F01      8010          move.l    D1,-(A7)
0000476C  4879 0000 8011          pea       @m68kde~1_251.L
00004770  7970      
00004772  2F0C      8012          move.l    A4,-(A7)
00004774  4E95      8013          jsr       (A5)
00004776  DEFC 0010 8014          add.w     #16,A7
                    8015   ; strcatInstruction(TempString) ;
0000477A  2F0C      8016          move.l    A4,-(A7)
0000477C  4EB8 0CCC 8017          jsr       _strcatInstruction
00004780  584F      8018          addq.w    #4,A7
                    8019   DisassembleInstruction_141:
                    8020   ; }
                    8021   ; }
                    8022   ; /////////////////////////////////////////////////////////////////////////////////
                    8023   ; // if instruction is DBCC
                    8024   ; /////////////////////////////////////////////////////////////////////////////////
                    8025   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
00004782  2042      8026          move.l    D2,A0
00004784  3010      8027          move.w    (A0),D0
00004786  C07C F0F8 8028          and.w     #61688,D0
0000478A  0C40 50C8 8029          cmp.w     #20680,D0
0000478E  6600 0084 8030          bne       DisassembleInstruction_143
                    8031   ; {
                    8032   ; InstructionSize = 2;
00004792  24BC 0000 8033          move.l    #2,(A2)
00004796  0002      
                    8034   ; strcpy(Instruction,"DB") ;
00004798  4879 0000 8035          pea       @m68kde~1_252.L
0000479C  797E      
0000479E  4879 0B00 8036          pea       _Instruction.L
000047A2  04E2      
000047A4  4EB9 0000 8037          jsr       _strcpy
000047A8  5974      
000047AA  504F      8038          addq.w    #8,A7
                    8039   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
000047AC  2042      8040          move.l    D2,A0
000047AE  3010      8041          move.w    (A0),D0
000047B0  E040      8042          asr.w     #8,D0
000047B2  C07C 000F 8043          and.w     #15,D0
000047B6  1D40 FFE9 8044          move.b    D0,-23(A6)
                    8045   ; DecodeBranchCondition(Condition) ;
000047BA  122E FFE9 8046          move.b    -23(A6),D1
000047BE  C27C 00FF 8047          and.w     #255,D1
000047C2  C2BC 0000 8048          and.l     #65535,D1
000047C6  FFFF      
000047C8  2F01      8049          move.l    D1,-(A7)
000047CA  4EB8 397C 8050          jsr       _DecodeBranchCondition
000047CE  584F      8051          addq.w    #4,A7
                    8052   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
000047D0  2202      8053          move.l    D2,D1
000047D2  2042      8054          move.l    D2,A0
000047D4  2F00      8055          move.l    D0,-(A7)
000047D6  3028 0002 8056          move.w    2(A0),D0
000047DA  48C0      8057          ext.l     D0
000047DC  D280      8058          add.l     D0,D1
000047DE  201F      8059          move.l    (A7)+,D0
000047E0  5481      8060          addq.l    #2,D1
000047E2  2F01      8061          move.l    D1,-(A7)
000047E4  2042      8062          move.l    D2,A0
000047E6  3228 0002 8063          move.w    2(A0),D1
000047EA  48C1      8064          ext.l     D1
000047EC  2F01      8065          move.l    D1,-(A7)
000047EE  2042      8066          move.l    D2,A0
000047F0  3210      8067          move.w    (A0),D1
000047F2  C27C 0007 8068          and.w     #7,D1
000047F6  C2BC 0000 8069          and.l     #65535,D1
000047FA  FFFF      
000047FC  2F01      8070          move.l    D1,-(A7)
000047FE  4879 0000 8071          pea       @m68kde~1_253.L
00004802  7982      
00004804  2F0C      8072          move.l    A4,-(A7)
00004806  4E95      8073          jsr       (A5)
00004808  DEFC 0014 8074          add.w     #20,A7
                    8075   ; strcatInstruction(TempString) ;
0000480C  2F0C      8076          move.l    A4,-(A7)
0000480E  4EB8 0CCC 8077          jsr       _strcatInstruction
00004812  584F      8078          addq.w    #4,A7
                    8079   DisassembleInstruction_143:
                    8080   ; }
                    8081   ; /////////////////////////////////////////////////////////////////////////////////
                    8082   ; // if instruction is DIVS
                    8083   ; /////////////////////////////////////////////////////////////////////////////////
                    8084   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
00004814  2042      8085          move.l    D2,A0
00004816  3010      8086          move.w    (A0),D0
00004818  C07C F1C0 8087          and.w     #61888,D0
0000481C  0C40 81C0 8088          cmp.w     #33216,D0
00004820  6600 004A 8089          bne       DisassembleInstruction_145
                    8090   ; {
                    8091   ; InstructionSize = 1;
00004824  24BC 0000 8092          move.l    #1,(A2)
00004828  0001      
                    8093   ; strcpy(Instruction,"DIVS ") ;
0000482A  4879 0000 8094          pea       @m68kde~1_254.L
0000482E  799A      
00004830  4879 0B00 8095          pea       _Instruction.L
00004834  04E2      
00004836  4EB9 0000 8096          jsr       _strcpy
0000483A  5974      
0000483C  504F      8097          addq.w    #8,A7
                    8098   ; Decode6BitEA(OpCode,0,0,0) ;
0000483E  42A7      8099          clr.l     -(A7)
00004840  42A7      8100          clr.l     -(A7)
00004842  42A7      8101          clr.l     -(A7)
00004844  2F02      8102          move.l    D2,-(A7)
00004846  4EB8 34BE 8103          jsr       _Decode6BitEA
0000484A  DEFC 0010 8104          add.w     #16,A7
                    8105   ; strcatInstruction(",") ;
0000484E  4879 0000 8106          pea       @m68kde~1_189.L
00004852  77FA      
00004854  4EB8 0CCC 8107          jsr       _strcatInstruction
00004858  584F      8108          addq.w    #4,A7
                    8109   ; Decode3BitDataRegister(*OpCode) ;
0000485A  2042      8110          move.l    D2,A0
0000485C  3210      8111          move.w    (A0),D1
0000485E  C2BC 0000 8112          and.l     #65535,D1
00004862  FFFF      
00004864  2F01      8113          move.l    D1,-(A7)
00004866  4EB8 3286 8114          jsr       _Decode3BitDataRegister
0000486A  584F      8115          addq.w    #4,A7
                    8116   DisassembleInstruction_145:
                    8117   ; }
                    8118   ; /////////////////////////////////////////////////////////////////////////////////
                    8119   ; // if instruction is DIVU
                    8120   ; /////////////////////////////////////////////////////////////////////////////////
                    8121   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
0000486C  2042      8122          move.l    D2,A0
0000486E  3010      8123          move.w    (A0),D0
00004870  C07C F1C0 8124          and.w     #61888,D0
00004874  0C40 80C0 8125          cmp.w     #32960,D0
00004878  6600 004A 8126          bne       DisassembleInstruction_147
                    8127   ; {
                    8128   ; InstructionSize = 1;
0000487C  24BC 0000 8129          move.l    #1,(A2)
00004880  0001      
                    8130   ; strcpy(Instruction,"DIVU ") ;
00004882  4879 0000 8131          pea       @m68kde~1_255.L
00004886  79A0      
00004888  4879 0B00 8132          pea       _Instruction.L
0000488C  04E2      
0000488E  4EB9 0000 8133          jsr       _strcpy
00004892  5974      
00004894  504F      8134          addq.w    #8,A7
                    8135   ; Decode6BitEA(OpCode,0,0,0) ;
00004896  42A7      8136          clr.l     -(A7)
00004898  42A7      8137          clr.l     -(A7)
0000489A  42A7      8138          clr.l     -(A7)
0000489C  2F02      8139          move.l    D2,-(A7)
0000489E  4EB8 34BE 8140          jsr       _Decode6BitEA
000048A2  DEFC 0010 8141          add.w     #16,A7
                    8142   ; strcatInstruction(",") ;
000048A6  4879 0000 8143          pea       @m68kde~1_189.L
000048AA  77FA      
000048AC  4EB8 0CCC 8144          jsr       _strcatInstruction
000048B0  584F      8145          addq.w    #4,A7
                    8146   ; Decode3BitDataRegister(*OpCode) ;
000048B2  2042      8147          move.l    D2,A0
000048B4  3210      8148          move.w    (A0),D1
000048B6  C2BC 0000 8149          and.l     #65535,D1
000048BA  FFFF      
000048BC  2F01      8150          move.l    D1,-(A7)
000048BE  4EB8 3286 8151          jsr       _Decode3BitDataRegister
000048C2  584F      8152          addq.w    #4,A7
                    8153   DisassembleInstruction_147:
                    8154   ; }
                    8155   ; /////////////////////////////////////////////////////////////////////////////////
                    8156   ; // if instruction is EOR
                    8157   ; /////////////////////////////////////////////////////////////////////////////////
                    8158   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
000048C4  2042      8159          move.l    D2,A0
000048C6  3010      8160          move.w    (A0),D0
000048C8  C07C F000 8161          and.w     #61440,D0
000048CC  0C40 B000 8162          cmp.w     #45056,D0
000048D0  6600 004A 8163          bne       DisassembleInstruction_151
                    8164   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000048D4  2042      8165          move.l    D2,A0
000048D6  3010      8166          move.w    (A0),D0
000048D8  EC40      8167          asr.w     #6,D0
000048DA  C07C 0007 8168          and.w     #7,D0
000048DE  3600      8169          move.w    D0,D3
                    8170   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
000048E0  2042      8171          move.l    D2,A0
000048E2  3010      8172          move.w    (A0),D0
000048E4  E640      8173          asr.w     #3,D0
000048E6  C07C 0007 8174          and.w     #7,D0
000048EA  3D40 FFEC 8175          move.w    D0,-20(A6)
                    8176   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
000048EE  0C43 0004 8177          cmp.w     #4,D3
000048F2  6528      8178          blo.s     DisassembleInstruction_151
000048F4  0C43 0006 8179          cmp.w     #6,D3
000048F8  6222      8180          bhi.s     DisassembleInstruction_151
000048FA  302E FFEC 8181          move.w    -20(A6),D0
000048FE  0C40 0001 8182          cmp.w     #1,D0
00004902  6718      8183          beq.s     DisassembleInstruction_151
                    8184   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    8185   ; (EAMode != (unsigned short int)(0x0001)))
                    8186   ; {
                    8187   ; InstructionSize = 1;
00004904  24BC 0000 8188          move.l    #1,(A2)
00004908  0001      
                    8189   ; strcpyInstruction("EOR") ;
0000490A  4879 0000 8190          pea       @m68kde~1_256.L
0000490E  79A6      
00004910  4E93      8191          jsr       (A3)
00004912  584F      8192          addq.w    #4,A7
                    8193   ; Decode3BitOperandMode(OpCode);
00004914  2F02      8194          move.l    D2,-(A7)
00004916  4EB8 38E6 8195          jsr       _Decode3BitOperandMode
0000491A  584F      8196          addq.w    #4,A7
                    8197   DisassembleInstruction_151:
                    8198   ; }
                    8199   ; }
                    8200   ; /////////////////////////////////////////////////////////////////////////////////
                    8201   ; // if instruction is EOR to CCR
                    8202   ; /////////////////////////////////////////////////////////////////////////////////
                    8203   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
0000491C  2042      8204          move.l    D2,A0
0000491E  3010      8205          move.w    (A0),D0
00004920  0C40 0A3C 8206          cmp.w     #2620,D0
00004924  662C      8207          bne.s     DisassembleInstruction_153
                    8208   ; InstructionSize = 1;
00004926  24BC 0000 8209          move.l    #1,(A2)
0000492A  0001      
                    8210   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
0000492C  2042      8211          move.l    D2,A0
0000492E  3228 0002 8212          move.w    2(A0),D1
00004932  C27C 00FF 8213          and.w     #255,D1
00004936  C2BC 0000 8214          and.l     #65535,D1
0000493A  FFFF      
0000493C  2F01      8215          move.l    D1,-(A7)
0000493E  4879 0000 8216          pea       @m68kde~1_257.L
00004942  79AA      
00004944  4879 0B00 8217          pea       _Instruction.L
00004948  04E2      
0000494A  4E95      8218          jsr       (A5)
0000494C  DEFC 000C 8219          add.w     #12,A7
                    8220   ; InstructionSize += 1;
00004950  5292      8221          addq.l    #1,(A2)
                    8222   DisassembleInstruction_153:
                    8223   ; }
                    8224   ; /////////////////////////////////////////////////////////////////////////////////
                    8225   ; // if instruction is EORI #data,SR
                    8226   ; /////////////////////////////////////////////////////////////////////////////////
                    8227   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
00004952  2042      8228          move.l    D2,A0
00004954  3010      8229          move.w    (A0),D0
00004956  0C40 0A7C 8230          cmp.w     #2684,D0
0000495A  6622      8231          bne.s     DisassembleInstruction_155
                    8232   ; InstructionSize = 2;
0000495C  24BC 0000 8233          move.l    #2,(A2)
00004960  0002      
                    8234   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
00004962  2042      8235          move.l    D2,A0
00004964  3228 0002 8236          move.w    2(A0),D1
00004968  48C1      8237          ext.l     D1
0000496A  2F01      8238          move.l    D1,-(A7)
0000496C  4879 0000 8239          pea       @m68kde~1_258.L
00004970  79BA      
00004972  4879 0B00 8240          pea       _Instruction.L
00004976  04E2      
00004978  4E95      8241          jsr       (A5)
0000497A  DEFC 000C 8242          add.w     #12,A7
                    8243   DisassembleInstruction_155:
                    8244   ; }
                    8245   ; /////////////////////////////////////////////////////////////////////////////////
                    8246   ; // if instruction is EXG
                    8247   ; /////////////////////////////////////////////////////////////////////////////////
                    8248   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
0000497E  2042      8249          move.l    D2,A0
00004980  3010      8250          move.w    (A0),D0
00004982  C07C F100 8251          and.w     #61696,D0
00004986  0C40 C100 8252          cmp.w     #49408,D0
0000498A  6600 00E0 8253          bne       DisassembleInstruction_163
                    8254   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
0000498E  2042      8255          move.l    D2,A0
00004990  3010      8256          move.w    (A0),D0
00004992  E040      8257          asr.w     #8,D0
00004994  E240      8258          asr.w     #1,D0
00004996  C07C 0007 8259          and.w     #7,D0
0000499A  3D40 FFF0 8260          move.w    D0,-16(A6)
                    8261   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
0000499E  2042      8262          move.l    D2,A0
000049A0  3010      8263          move.w    (A0),D0
000049A2  C07C 0007 8264          and.w     #7,D0
000049A6  3D40 FFF2 8265          move.w    D0,-14(A6)
                    8266   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
000049AA  2042      8267          move.l    D2,A0
000049AC  3010      8268          move.w    (A0),D0
000049AE  E640      8269          asr.w     #3,D0
000049B0  C07C 001F 8270          and.w     #31,D0
000049B4  3D40 FFF4 8271          move.w    D0,-12(A6)
                    8272   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
000049B8  302E FFF4 8273          move.w    -12(A6),D0
000049BC  0C40 0008 8274          cmp.w     #8,D0
000049C0  6634      8275          bne.s     DisassembleInstruction_159
                    8276   ; InstructionSize = 1;
000049C2  24BC 0000 8277          move.l    #1,(A2)
000049C6  0001      
                    8278   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
000049C8  322E FFF2 8279          move.w    -14(A6),D1
000049CC  C2BC 0000 8280          and.l     #65535,D1
000049D0  FFFF      
000049D2  2F01      8281          move.l    D1,-(A7)
000049D4  322E FFF0 8282          move.w    -16(A6),D1
000049D8  C2BC 0000 8283          and.l     #65535,D1
000049DC  FFFF      
000049DE  2F01      8284          move.l    D1,-(A7)
000049E0  4879 0000 8285          pea       @m68kde~1_259.L
000049E4  79C8      
000049E6  4879 0B00 8286          pea       _Instruction.L
000049EA  04E2      
000049EC  4E95      8287          jsr       (A5)
000049EE  DEFC 0010 8288          add.w     #16,A7
000049F2  6000 0078 8289          bra       DisassembleInstruction_163
                    8290   DisassembleInstruction_159:
                    8291   ; }
                    8292   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
000049F6  302E FFF4 8293          move.w    -12(A6),D0
000049FA  0C40 0009 8294          cmp.w     #9,D0
000049FE  6632      8295          bne.s     DisassembleInstruction_161
                    8296   ; InstructionSize = 1;
00004A00  24BC 0000 8297          move.l    #1,(A2)
00004A04  0001      
                    8298   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
00004A06  322E FFF2 8299          move.w    -14(A6),D1
00004A0A  C2BC 0000 8300          and.l     #65535,D1
00004A0E  FFFF      
00004A10  2F01      8301          move.l    D1,-(A7)
00004A12  322E FFF0 8302          move.w    -16(A6),D1
00004A16  C2BC 0000 8303          and.l     #65535,D1
00004A1A  FFFF      
00004A1C  2F01      8304          move.l    D1,-(A7)
00004A1E  4879 0000 8305          pea       @m68kde~1_260.L
00004A22  79D4      
00004A24  4879 0B00 8306          pea       _Instruction.L
00004A28  04E2      
00004A2A  4E95      8307          jsr       (A5)
00004A2C  DEFC 0010 8308          add.w     #16,A7
00004A30  603A      8309          bra.s     DisassembleInstruction_163
                    8310   DisassembleInstruction_161:
                    8311   ; }
                    8312   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
00004A32  302E FFF4 8313          move.w    -12(A6),D0
00004A36  0C40 0011 8314          cmp.w     #17,D0
00004A3A  6630      8315          bne.s     DisassembleInstruction_163
                    8316   ; InstructionSize = 1;
00004A3C  24BC 0000 8317          move.l    #1,(A2)
00004A40  0001      
                    8318   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
00004A42  322E FFF2 8319          move.w    -14(A6),D1
00004A46  C2BC 0000 8320          and.l     #65535,D1
00004A4A  FFFF      
00004A4C  2F01      8321          move.l    D1,-(A7)
00004A4E  322E FFF0 8322          move.w    -16(A6),D1
00004A52  C2BC 0000 8323          and.l     #65535,D1
00004A56  FFFF      
00004A58  2F01      8324          move.l    D1,-(A7)
00004A5A  4879 0000 8325          pea       @m68kde~1_261.L
00004A5E  79E0      
00004A60  4879 0B00 8326          pea       _Instruction.L
00004A64  04E2      
00004A66  4E95      8327          jsr       (A5)
00004A68  DEFC 0010 8328          add.w     #16,A7
                    8329   DisassembleInstruction_163:
                    8330   ; }
                    8331   ; }
                    8332   ; /////////////////////////////////////////////////////////////////////////////////
                    8333   ; // if instruction is EXT
                    8334   ; /////////////////////////////////////////////////////////////////////////////////
                    8335   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
00004A6C  2042      8336          move.l    D2,A0
00004A6E  3010      8337          move.w    (A0),D0
00004A70  C07C FE38 8338          and.w     #65080,D0
00004A74  0C40 4800 8339          cmp.w     #18432,D0
00004A78  6600 0054 8340          bne       DisassembleInstruction_165
                    8341   ; {
                    8342   ; InstructionSize = 1;
00004A7C  24BC 0000 8343          move.l    #1,(A2)
00004A80  0001      
                    8344   ; strcpy(Instruction,"EXT") ;
00004A82  4879 0000 8345          pea       @m68kde~1_262.L
00004A86  79EC      
00004A88  4879 0B00 8346          pea       _Instruction.L
00004A8C  04E2      
00004A8E  4EB9 0000 8347          jsr       _strcpy
00004A92  5974      
00004A94  504F      8348          addq.w    #8,A7
                    8349   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
00004A96  2042      8350          move.l    D2,A0
00004A98  3010      8351          move.w    (A0),D0
00004A9A  C07C 00C0 8352          and.w     #192,D0
00004A9E  0C40 00C0 8353          cmp.w     #192,D0
00004AA2  660E      8354          bne.s     DisassembleInstruction_167
                    8355   ; strcatInstruction(".L ") ;
00004AA4  4879 0000 8356          pea       @m68kde~1_173.L
00004AA8  77B0      
00004AAA  4EB8 0CCC 8357          jsr       _strcatInstruction
00004AAE  584F      8358          addq.w    #4,A7
00004AB0  600C      8359          bra.s     DisassembleInstruction_168
                    8360   DisassembleInstruction_167:
                    8361   ; else
                    8362   ; strcatInstruction(".W ") ;
00004AB2  4879 0000 8363          pea       @m68kde~1_172.L
00004AB6  77AC      
00004AB8  4EB8 0CCC 8364          jsr       _strcatInstruction
00004ABC  584F      8365          addq.w    #4,A7
                    8366   DisassembleInstruction_168:
                    8367   ; Decode6BitEA(OpCode,0,0,0) ;
00004ABE  42A7      8368          clr.l     -(A7)
00004AC0  42A7      8369          clr.l     -(A7)
00004AC2  42A7      8370          clr.l     -(A7)
00004AC4  2F02      8371          move.l    D2,-(A7)
00004AC6  4EB8 34BE 8372          jsr       _Decode6BitEA
00004ACA  DEFC 0010 8373          add.w     #16,A7
                    8374   DisassembleInstruction_165:
                    8375   ; }
                    8376   ; /////////////////////////////////////////////////////////////////////////////////
                    8377   ; // if instruction is ILLEGAL $4afc
                    8378   ; /////////////////////////////////////////////////////////////////////////////////
                    8379   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
00004ACE  2042      8380          move.l    D2,A0
00004AD0  3010      8381          move.w    (A0),D0
00004AD2  0C40 4AFC 8382          cmp.w     #19196,D0
00004AD6  661A      8383          bne.s     DisassembleInstruction_169
                    8384   ; InstructionSize = 1;
00004AD8  24BC 0000 8385          move.l    #1,(A2)
00004ADC  0001      
                    8386   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
00004ADE  4879 0000 8387          pea       @m68kde~1_263.L
00004AE2  79F0      
00004AE4  4879 0B00 8388          pea       _Instruction.L
00004AE8  04E2      
00004AEA  4EB9 0000 8389          jsr       _strcpy
00004AEE  5974      
00004AF0  504F      8390          addq.w    #8,A7
                    8391   DisassembleInstruction_169:
                    8392   ; }
                    8393   ; /////////////////////////////////////////////////////////////////////////////////
                    8394   ; // if instruction is JMP
                    8395   ; /////////////////////////////////////////////////////////////////////////////////
                    8396   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
00004AF2  2042      8397          move.l    D2,A0
00004AF4  3010      8398          move.w    (A0),D0
00004AF6  C07C FFC0 8399          and.w     #65472,D0
00004AFA  0C40 4EC0 8400          cmp.w     #20160,D0
00004AFE  662A      8401          bne.s     DisassembleInstruction_171
                    8402   ; {
                    8403   ; InstructionSize = 1;
00004B00  24BC 0000 8404          move.l    #1,(A2)
00004B04  0001      
                    8405   ; strcpy(Instruction,"JMP ") ;
00004B06  4879 0000 8406          pea       @m68kde~1_264.L
00004B0A  7A00      
00004B0C  4879 0B00 8407          pea       _Instruction.L
00004B10  04E2      
00004B12  4EB9 0000 8408          jsr       _strcpy
00004B16  5974      
00004B18  504F      8409          addq.w    #8,A7
                    8410   ; Decode6BitEA(OpCode,0,0,0) ;
00004B1A  42A7      8411          clr.l     -(A7)
00004B1C  42A7      8412          clr.l     -(A7)
00004B1E  42A7      8413          clr.l     -(A7)
00004B20  2F02      8414          move.l    D2,-(A7)
00004B22  4EB8 34BE 8415          jsr       _Decode6BitEA
00004B26  DEFC 0010 8416          add.w     #16,A7
                    8417   DisassembleInstruction_171:
                    8418   ; }
                    8419   ; /////////////////////////////////////////////////////////////////////////////////
                    8420   ; // if instruction is JSR
                    8421   ; /////////////////////////////////////////////////////////////////////////////////
                    8422   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
00004B2A  2042      8423          move.l    D2,A0
00004B2C  3010      8424          move.w    (A0),D0
00004B2E  C07C FFC0 8425          and.w     #65472,D0
00004B32  0C40 4E80 8426          cmp.w     #20096,D0
00004B36  662A      8427          bne.s     DisassembleInstruction_173
                    8428   ; {
                    8429   ; InstructionSize = 1;
00004B38  24BC 0000 8430          move.l    #1,(A2)
00004B3C  0001      
                    8431   ; strcpy(Instruction,"JSR ") ;
00004B3E  4879 0000 8432          pea       @m68kde~1_265.L
00004B42  7A06      
00004B44  4879 0B00 8433          pea       _Instruction.L
00004B48  04E2      
00004B4A  4EB9 0000 8434          jsr       _strcpy
00004B4E  5974      
00004B50  504F      8435          addq.w    #8,A7
                    8436   ; Decode6BitEA(OpCode,0,0,0) ;
00004B52  42A7      8437          clr.l     -(A7)
00004B54  42A7      8438          clr.l     -(A7)
00004B56  42A7      8439          clr.l     -(A7)
00004B58  2F02      8440          move.l    D2,-(A7)
00004B5A  4EB8 34BE 8441          jsr       _Decode6BitEA
00004B5E  DEFC 0010 8442          add.w     #16,A7
                    8443   DisassembleInstruction_173:
                    8444   ; }
                    8445   ; /////////////////////////////////////////////////////////////////////////////////
                    8446   ; // if instruction is LEA
                    8447   ; /////////////////////////////////////////////////////////////////////////////////
                    8448   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
00004B62  2042      8449          move.l    D2,A0
00004B64  3010      8450          move.w    (A0),D0
00004B66  C07C F1C0 8451          and.w     #61888,D0
00004B6A  0C40 41C0 8452          cmp.w     #16832,D0
00004B6E  6600 0056 8453          bne       DisassembleInstruction_175
                    8454   ; {
                    8455   ; InstructionSize = 1;
00004B72  24BC 0000 8456          move.l    #1,(A2)
00004B76  0001      
                    8457   ; strcpy(Instruction,"LEA ") ;
00004B78  4879 0000 8458          pea       @m68kde~1_266.L
00004B7C  7A0C      
00004B7E  4879 0B00 8459          pea       _Instruction.L
00004B82  04E2      
00004B84  4EB9 0000 8460          jsr       _strcpy
00004B88  5974      
00004B8A  504F      8461          addq.w    #8,A7
                    8462   ; Decode6BitEA(OpCode,0,0,0) ;
00004B8C  42A7      8463          clr.l     -(A7)
00004B8E  42A7      8464          clr.l     -(A7)
00004B90  42A7      8465          clr.l     -(A7)
00004B92  2F02      8466          move.l    D2,-(A7)
00004B94  4EB8 34BE 8467          jsr       _Decode6BitEA
00004B98  DEFC 0010 8468          add.w     #16,A7
                    8469   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
00004B9C  2042      8470          move.l    D2,A0
00004B9E  3210      8471          move.w    (A0),D1
00004BA0  E041      8472          asr.w     #8,D1
00004BA2  E241      8473          asr.w     #1,D1
00004BA4  C27C 0007 8474          and.w     #7,D1
00004BA8  C2BC 0000 8475          and.l     #65535,D1
00004BAC  FFFF      
00004BAE  2F01      8476          move.l    D1,-(A7)
00004BB0  4879 0000 8477          pea       @m68kde~1_248.L
00004BB4  7960      
00004BB6  2F0C      8478          move.l    A4,-(A7)
00004BB8  4E95      8479          jsr       (A5)
00004BBA  DEFC 000C 8480          add.w     #12,A7
                    8481   ; strcatInstruction(TempString);
00004BBE  2F0C      8482          move.l    A4,-(A7)
00004BC0  4EB8 0CCC 8483          jsr       _strcatInstruction
00004BC4  584F      8484          addq.w    #4,A7
                    8485   DisassembleInstruction_175:
                    8486   ; }
                    8487   ; /////////////////////////////////////////////////////////////////////////////////
                    8488   ; // if instruction is LINK.W
                    8489   ; /////////////////////////////////////////////////////////////////////////////////
                    8490   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
00004BC6  2042      8491          move.l    D2,A0
00004BC8  3010      8492          move.w    (A0),D0
00004BCA  C07C FFF8 8493          and.w     #65528,D0
00004BCE  0C40 4E50 8494          cmp.w     #20048,D0
00004BD2  6600 0052 8495          bne       DisassembleInstruction_177
                    8496   ; {
                    8497   ; InstructionSize = 1;
00004BD6  24BC 0000 8498          move.l    #1,(A2)
00004BDA  0001      
                    8499   ; strcpy(Instruction,"LINK ") ;
00004BDC  4879 0000 8500          pea       @m68kde~1_267.L
00004BE0  7A12      
00004BE2  4879 0B00 8501          pea       _Instruction.L
00004BE6  04E2      
00004BE8  4EB9 0000 8502          jsr       _strcpy
00004BEC  5974      
00004BEE  504F      8503          addq.w    #8,A7
                    8504   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
00004BF0  2042      8505          move.l    D2,A0
00004BF2  3228 0002 8506          move.w    2(A0),D1
00004BF6  48C1      8507          ext.l     D1
00004BF8  2F01      8508          move.l    D1,-(A7)
00004BFA  2042      8509          move.l    D2,A0
00004BFC  3210      8510          move.w    (A0),D1
00004BFE  C27C 0007 8511          and.w     #7,D1
00004C02  C2BC 0000 8512          and.l     #65535,D1
00004C06  FFFF      
00004C08  2F01      8513          move.l    D1,-(A7)
00004C0A  4879 0000 8514          pea       @m68kde~1_268.L
00004C0E  7A18      
00004C10  2F0C      8515          move.l    A4,-(A7)
00004C12  4E95      8516          jsr       (A5)
00004C14  DEFC 0010 8517          add.w     #16,A7
                    8518   ; InstructionSize = 2 ;
00004C18  24BC 0000 8519          move.l    #2,(A2)
00004C1C  0002      
                    8520   ; strcatInstruction(TempString);
00004C1E  2F0C      8521          move.l    A4,-(A7)
00004C20  4EB8 0CCC 8522          jsr       _strcatInstruction
00004C24  584F      8523          addq.w    #4,A7
                    8524   DisassembleInstruction_177:
                    8525   ; }
                    8526   ; /////////////////////////////////////////////////////////////////////////////////
                    8527   ; // if instruction is MOVE, MOVEA
                    8528   ; /////////////////////////////////////////////////////////////////////////////////
                    8529   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
00004C26  2042      8530          move.l    D2,A0
00004C28  3010      8531          move.w    (A0),D0
00004C2A  C07C C000 8532          and.w     #49152,D0
00004C2E  6600 00F0 8533          bne       DisassembleInstruction_193
                    8534   ; {
                    8535   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
00004C32  2042      8536          move.l    D2,A0
00004C34  3010      8537          move.w    (A0),D0
00004C36  C07C 3000 8538          and.w     #12288,D0
00004C3A  E048      8539          lsr.w     #8,D0
00004C3C  E848      8540          lsr.w     #4,D0
00004C3E  3D40 FFE2 8541          move.w    D0,-30(A6)
                    8542   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
00004C42  2042      8543          move.l    D2,A0
00004C44  3010      8544          move.w    (A0),D0
00004C46  E640      8545          asr.w     #3,D0
00004C48  C07C 0007 8546          and.w     #7,D0
00004C4C  3600      8547          move.w    D0,D3
                    8548   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
00004C4E  2042      8549          move.l    D2,A0
00004C50  3010      8550          move.w    (A0),D0
00004C52  C07C 0007 8551          and.w     #7,D0
00004C56  3D40 FFF6 8552          move.w    D0,-10(A6)
                    8553   ; DataSize = 0 ;
00004C5A  7E00      8554          moveq     #0,D7
                    8555   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8556   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
00004C5C  0C43 0005 8557          cmp.w     #5,D3
00004C60  6706      8558          beq.s     DisassembleInstruction_183
00004C62  0C43 0006 8559          cmp.w     #6,D3
00004C66  6602      8560          bne.s     DisassembleInstruction_181
                    8561   DisassembleInstruction_183:
                    8562   ; DataSize = 1;  // source operands has 1 word after EA
00004C68  7E01      8563          moveq     #1,D7
                    8564   DisassembleInstruction_181:
                    8565   ; // if source addressing mode is a 16 or 32 bit address
                    8566   ; if((OpMode == (unsigned short int)(0x0007))) {
00004C6A  0C43 0007 8567          cmp.w     #7,D3
00004C6E  660C      8568          bne.s     DisassembleInstruction_187
                    8569   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
00004C70  302E FFF6 8570          move.w    -10(A6),D0
00004C74  6604      8571          bne.s     DisassembleInstruction_186
                    8572   ; DataSize = 1 ;
00004C76  7E01      8573          moveq     #1,D7
00004C78  6002      8574          bra.s     DisassembleInstruction_187
                    8575   DisassembleInstruction_186:
                    8576   ; else
                    8577   ; DataSize = 2 ;
00004C7A  7E02      8578          moveq     #2,D7
                    8579   DisassembleInstruction_187:
                    8580   ; }
                    8581   ; // if source addressing mode is # then figure out size
                    8582   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
00004C7C  0C43 0007 8583          cmp.w     #7,D3
00004C80  6624      8584          bne.s     DisassembleInstruction_191
00004C82  302E FFF6 8585          move.w    -10(A6),D0
00004C86  0C40 0004 8586          cmp.w     #4,D0
00004C8A  661A      8587          bne.s     DisassembleInstruction_191
                    8588   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
00004C8C  302E FFE2 8589          move.w    -30(A6),D0
00004C90  0C40 0001 8590          cmp.w     #1,D0
00004C94  670A      8591          beq.s     DisassembleInstruction_192
00004C96  302E FFE2 8592          move.w    -30(A6),D0
00004C9A  0C40 0003 8593          cmp.w     #3,D0
00004C9E  6604      8594          bne.s     DisassembleInstruction_190
                    8595   DisassembleInstruction_192:
                    8596   ; DataSize = 1;
00004CA0  7E01      8597          moveq     #1,D7
00004CA2  6002      8598          bra.s     DisassembleInstruction_191
                    8599   DisassembleInstruction_190:
                    8600   ; else
                    8601   ; DataSize = 2 ;
00004CA4  7E02      8602          moveq     #2,D7
                    8603   DisassembleInstruction_191:
                    8604   ; //printf("DataSize = %d",DataSize) ;
                    8605   ; }
                    8606   ; if(Size != 0)
00004CA6  302E FFE2 8607          move.w    -30(A6),D0
00004CAA  6700 0074 8608          beq       DisassembleInstruction_193
                    8609   ; {
                    8610   ; InstructionSize = 1;
00004CAE  24BC 0000 8611          move.l    #1,(A2)
00004CB2  0001      
                    8612   ; if(Size == 1)
00004CB4  302E FFE2 8613          move.w    -30(A6),D0
00004CB8  0C40 0001 8614          cmp.w     #1,D0
00004CBC  660C      8615          bne.s     DisassembleInstruction_195
                    8616   ; strcpyInstruction("MOVE.B ") ;
00004CBE  4879 0000 8617          pea       @m68kde~1_269.L
00004CC2  7A20      
00004CC4  4E93      8618          jsr       (A3)
00004CC6  584F      8619          addq.w    #4,A7
00004CC8  6020      8620          bra.s     DisassembleInstruction_198
                    8621   DisassembleInstruction_195:
                    8622   ; else if(Size == 2)
00004CCA  302E FFE2 8623          move.w    -30(A6),D0
00004CCE  0C40 0002 8624          cmp.w     #2,D0
00004CD2  660C      8625          bne.s     DisassembleInstruction_197
                    8626   ; strcpyInstruction("MOVE.L ") ;
00004CD4  4879 0000 8627          pea       @m68kde~1_270.L
00004CD8  7A28      
00004CDA  4E93      8628          jsr       (A3)
00004CDC  584F      8629          addq.w    #4,A7
00004CDE  600A      8630          bra.s     DisassembleInstruction_198
                    8631   DisassembleInstruction_197:
                    8632   ; else
                    8633   ; strcpyInstruction("MOVE.W ") ;
00004CE0  4879 0000 8634          pea       @m68kde~1_271.L
00004CE4  7A30      
00004CE6  4E93      8635          jsr       (A3)
00004CE8  584F      8636          addq.w    #4,A7
                    8637   DisassembleInstruction_198:
                    8638   ; Decode6BitEA(OpCode,0,0,1) ;
00004CEA  4878 0001 8639          pea       1
00004CEE  42A7      8640          clr.l     -(A7)
00004CF0  42A7      8641          clr.l     -(A7)
00004CF2  2F02      8642          move.l    D2,-(A7)
00004CF4  4EB8 34BE 8643          jsr       _Decode6BitEA
00004CF8  DEFC 0010 8644          add.w     #16,A7
                    8645   ; strcatInstruction(",") ;
00004CFC  4879 0000 8646          pea       @m68kde~1_189.L
00004D00  77FA      
00004D02  4EB8 0CCC 8647          jsr       _strcatInstruction
00004D06  584F      8648          addq.w    #4,A7
                    8649   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8650   ; // but subtract 1 to make the maths correct in the called function
                    8651   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004D08  42A7      8652          clr.l     -(A7)
00004D0A  CEBC 0000 8653          and.l     #65535,D7
00004D0E  FFFF      
00004D10  2F07      8654          move.l    D7,-(A7)
00004D12  4878 0002 8655          pea       2
00004D16  2F02      8656          move.l    D2,-(A7)
00004D18  4EB8 34BE 8657          jsr       _Decode6BitEA
00004D1C  DEFC 0010 8658          add.w     #16,A7
                    8659   DisassembleInstruction_193:
                    8660   ; }
                    8661   ; }
                    8662   ; /////////////////////////////////////////////////////////////////////////////////
                    8663   ; // if instruction is MOVE <EA>,CCR
                    8664   ; /////////////////////////////////////////////////////////////////////////////////
                    8665   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004D20  2042      8666          move.l    D2,A0
00004D22  3010      8667          move.w    (A0),D0
00004D24  C07C FFC0 8668          and.w     #65472,D0
00004D28  0C40 44C0 8669          cmp.w     #17600,D0
00004D2C  6636      8670          bne.s     DisassembleInstruction_199
                    8671   ; {
                    8672   ; InstructionSize = 1;
00004D2E  24BC 0000 8673          move.l    #1,(A2)
00004D32  0001      
                    8674   ; strcpy(Instruction,"MOVE ") ;
00004D34  4879 0000 8675          pea       @m68kde~1_272.L
00004D38  7A38      
00004D3A  4879 0B00 8676          pea       _Instruction.L
00004D3E  04E2      
00004D40  4EB9 0000 8677          jsr       _strcpy
00004D44  5974      
00004D46  504F      8678          addq.w    #8,A7
                    8679   ; Decode6BitEA(OpCode,0,0,0) ;
00004D48  42A7      8680          clr.l     -(A7)
00004D4A  42A7      8681          clr.l     -(A7)
00004D4C  42A7      8682          clr.l     -(A7)
00004D4E  2F02      8683          move.l    D2,-(A7)
00004D50  4EB8 34BE 8684          jsr       _Decode6BitEA
00004D54  DEFC 0010 8685          add.w     #16,A7
                    8686   ; strcatInstruction(",CCR") ;
00004D58  4879 0000 8687          pea       @m68kde~1_273.L
00004D5C  7A3E      
00004D5E  4EB8 0CCC 8688          jsr       _strcatInstruction
00004D62  584F      8689          addq.w    #4,A7
                    8690   DisassembleInstruction_199:
                    8691   ; }
                    8692   ; /////////////////////////////////////////////////////////////////////////////////
                    8693   ; // if instruction is MOVE SR,<EA>
                    8694   ; /////////////////////////////////////////////////////////////////////////////////
                    8695   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
00004D64  2042      8696          move.l    D2,A0
00004D66  3010      8697          move.w    (A0),D0
00004D68  C07C FFC0 8698          and.w     #65472,D0
00004D6C  0C40 40C0 8699          cmp.w     #16576,D0
00004D70  662A      8700          bne.s     DisassembleInstruction_201
                    8701   ; {
                    8702   ; InstructionSize = 1;
00004D72  24BC 0000 8703          move.l    #1,(A2)
00004D76  0001      
                    8704   ; strcpy(Instruction,"MOVE SR,") ;
00004D78  4879 0000 8705          pea       @m68kde~1_274.L
00004D7C  7A44      
00004D7E  4879 0B00 8706          pea       _Instruction.L
00004D82  04E2      
00004D84  4EB9 0000 8707          jsr       _strcpy
00004D88  5974      
00004D8A  504F      8708          addq.w    #8,A7
                    8709   ; Decode6BitEA(OpCode,0,0,0) ;
00004D8C  42A7      8710          clr.l     -(A7)
00004D8E  42A7      8711          clr.l     -(A7)
00004D90  42A7      8712          clr.l     -(A7)
00004D92  2F02      8713          move.l    D2,-(A7)
00004D94  4EB8 34BE 8714          jsr       _Decode6BitEA
00004D98  DEFC 0010 8715          add.w     #16,A7
                    8716   DisassembleInstruction_201:
                    8717   ; }
                    8718   ; /////////////////////////////////////////////////////////////////////////////////
                    8719   ; // if instruction is MOVE <EA>,SR
                    8720   ; /////////////////////////////////////////////////////////////////////////////////
                    8721   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
00004D9C  2042      8722          move.l    D2,A0
00004D9E  3010      8723          move.w    (A0),D0
00004DA0  C07C FFC0 8724          and.w     #65472,D0
00004DA4  0C40 46C0 8725          cmp.w     #18112,D0
00004DA8  6636      8726          bne.s     DisassembleInstruction_203
                    8727   ; {
                    8728   ; InstructionSize = 1;
00004DAA  24BC 0000 8729          move.l    #1,(A2)
00004DAE  0001      
                    8730   ; strcpy(Instruction,"MOVE ") ;
00004DB0  4879 0000 8731          pea       @m68kde~1_272.L
00004DB4  7A38      
00004DB6  4879 0B00 8732          pea       _Instruction.L
00004DBA  04E2      
00004DBC  4EB9 0000 8733          jsr       _strcpy
00004DC0  5974      
00004DC2  504F      8734          addq.w    #8,A7
                    8735   ; Decode6BitEA(OpCode,0,0,0) ;
00004DC4  42A7      8736          clr.l     -(A7)
00004DC6  42A7      8737          clr.l     -(A7)
00004DC8  42A7      8738          clr.l     -(A7)
00004DCA  2F02      8739          move.l    D2,-(A7)
00004DCC  4EB8 34BE 8740          jsr       _Decode6BitEA
00004DD0  DEFC 0010 8741          add.w     #16,A7
                    8742   ; strcatInstruction(",SR") ;
00004DD4  4879 0000 8743          pea       @m68kde~1_275.L
00004DD8  7A4E      
00004DDA  4EB8 0CCC 8744          jsr       _strcatInstruction
00004DDE  584F      8745          addq.w    #4,A7
                    8746   DisassembleInstruction_203:
                    8747   ; }
                    8748   ; /////////////////////////////////////////////////////////////////////////////////
                    8749   ; // if instruction is MOVE USP,An
                    8750   ; /////////////////////////////////////////////////////////////////////////////////
                    8751   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004DE0  2042      8752          move.l    D2,A0
00004DE2  3010      8753          move.w    (A0),D0
00004DE4  C07C FFF0 8754          and.w     #65520,D0
00004DE8  0C40 4E60 8755          cmp.w     #20064,D0
00004DEC  6600 0060 8756          bne       DisassembleInstruction_208
                    8757   ; {
                    8758   ; InstructionSize = 1;
00004DF0  24BC 0000 8759          move.l    #1,(A2)
00004DF4  0001      
                    8760   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004DF6  2042      8761          move.l    D2,A0
00004DF8  3010      8762          move.w    (A0),D0
00004DFA  C07C 0007 8763          and.w     #7,D0
00004DFE  3D40 FFEA 8764          move.w    D0,-22(A6)
                    8765   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004E02  2042      8766          move.l    D2,A0
00004E04  3010      8767          move.w    (A0),D0
00004E06  C07C 0008 8768          and.w     #8,D0
00004E0A  0C40 0008 8769          cmp.w     #8,D0
00004E0E  6620      8770          bne.s     DisassembleInstruction_207
                    8771   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004E10  322E FFEA 8772          move.w    -22(A6),D1
00004E14  C2BC 0000 8773          and.l     #65535,D1
00004E18  FFFF      
00004E1A  2F01      8774          move.l    D1,-(A7)
00004E1C  4879 0000 8775          pea       @m68kde~1_276.L
00004E20  7A52      
00004E22  4879 0B00 8776          pea       _Instruction.L
00004E26  04E2      
00004E28  4E95      8777          jsr       (A5)
00004E2A  DEFC 000C 8778          add.w     #12,A7
00004E2E  601E      8779          bra.s     DisassembleInstruction_208
                    8780   DisassembleInstruction_207:
                    8781   ; else
                    8782   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004E30  322E FFEA 8783          move.w    -22(A6),D1
00004E34  C2BC 0000 8784          and.l     #65535,D1
00004E38  FFFF      
00004E3A  2F01      8785          move.l    D1,-(A7)
00004E3C  4879 0000 8786          pea       @m68kde~1_277.L
00004E40  7A60      
00004E42  4879 0B00 8787          pea       _Instruction.L
00004E46  04E2      
00004E48  4E95      8788          jsr       (A5)
00004E4A  DEFC 000C 8789          add.w     #12,A7
                    8790   DisassembleInstruction_208:
                    8791   ; }
                    8792   ; /////////////////////////////////////////////////////////////////////////////////
                    8793   ; // if instruction is MOVEM
                    8794   ; /////////////////////////////////////////////////////////////////////////////////
                    8795   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004E4E  2042      8796          move.l    D2,A0
00004E50  3010      8797          move.w    (A0),D0
00004E52  C07C FB80 8798          and.w     #64384,D0
00004E56  0C40 4880 8799          cmp.w     #18560,D0
00004E5A  6600 01FC 8800          bne       DisassembleInstruction_230
                    8801   ; {
                    8802   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004E5E  2042      8803          move.l    D2,A0
00004E60  3010      8804          move.w    (A0),D0
00004E62  E640      8805          asr.w     #3,D0
00004E64  C07C 0007 8806          and.w     #7,D0
00004E68  3600      8807          move.w    D0,D3
                    8808   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004E6A  4A43      8809          tst.w     D3
00004E6C  6700 01EA 8810          beq       DisassembleInstruction_230
00004E70  0C43 0001 8811          cmp.w     #1,D3
00004E74  6700 01E2 8812          beq       DisassembleInstruction_230
00004E78  4A43      8813          tst.w     D3
00004E7A  6700 01DC 8814          beq       DisassembleInstruction_230
                    8815   ; (OpMode != (unsigned short int)(0x1)) &&
                    8816   ; (OpMode != (unsigned short int)(0x0)))
                    8817   ; {
                    8818   ; InstructionSize = 1;
00004E7E  24BC 0000 8819          move.l    #1,(A2)
00004E82  0001      
                    8820   ; strcpy(Instruction,"MOVEM") ;
00004E84  4879 0000 8821          pea       @m68kde~1_278.L
00004E88  7A6E      
00004E8A  4879 0B00 8822          pea       _Instruction.L
00004E8E  04E2      
00004E90  4EB9 0000 8823          jsr       _strcpy
00004E94  5974      
00004E96  504F      8824          addq.w    #8,A7
                    8825   ; InstructionSize ++ ;
00004E98  5292      8826          addq.l    #1,(A2)
                    8827   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004E9A  2042      8828          move.l    D2,A0
00004E9C  3010      8829          move.w    (A0),D0
00004E9E  C07C 0040 8830          and.w     #64,D0
00004EA2  660E      8831          bne.s     DisassembleInstruction_213
                    8832   ; strcatInstruction(".W ") ;
00004EA4  4879 0000 8833          pea       @m68kde~1_172.L
00004EA8  77AC      
00004EAA  4EB8 0CCC 8834          jsr       _strcatInstruction
00004EAE  584F      8835          addq.w    #4,A7
00004EB0  600C      8836          bra.s     DisassembleInstruction_214
                    8837   DisassembleInstruction_213:
                    8838   ; else
                    8839   ; strcatInstruction(".L ") ;
00004EB2  4879 0000 8840          pea       @m68kde~1_173.L
00004EB6  77B0      
00004EB8  4EB8 0CCC 8841          jsr       _strcatInstruction
00004EBC  584F      8842          addq.w    #4,A7
                    8843   DisassembleInstruction_214:
                    8844   ; // movem  reg,-(An) if bit 10 = 0
                    8845   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004EBE  2042      8846          move.l    D2,A0
00004EC0  3010      8847          move.w    (A0),D0
00004EC2  C07C 0400 8848          and.w     #1024,D0
00004EC6  6600 00D2 8849          bne       DisassembleInstruction_215
                    8850   ; {
                    8851   ; Mask = 0x8000 ;                     // bit 15 = 1
00004ECA  3D7C 8000 8852          move.w    #32768,-2(A6)
00004ECE  FFFE      
                    8853   ; DoneSlash = 0 ;
00004ED0  4246      8854          clr.w     D6
                    8855   ; for(i = 0; i < 16; i ++)    {
00004ED2  4284      8856          clr.l     D4
                    8857   DisassembleInstruction_217:
00004ED4  0C84 0000 8858          cmp.l     #16,D4
00004ED8  0010      
00004EDA  6C00 009E 8859          bge       DisassembleInstruction_219
                    8860   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004EDE  4879 0000 8861          pea       @m68kde~1_40.L
00004EE2  688C      
00004EE4  4EB9 0000 8862          jsr       _printf
00004EE8  5B46      
00004EEA  584F      8863          addq.w    #4,A7
                    8864   ; if((OpCode[1] & Mask) == Mask)    {
00004EEC  2042      8865          move.l    D2,A0
00004EEE  3028 0002 8866          move.w    2(A0),D0
00004EF2  C06E FFFE 8867          and.w     -2(A6),D0
00004EF6  B06E FFFE 8868          cmp.w     -2(A6),D0
00004EFA  6600 006E 8869          bne       DisassembleInstruction_220
                    8870   ; if(i < 8 )  {
00004EFE  0C84 0000 8871          cmp.l     #8,D4
00004F02  0008      
00004F04  6C2C      8872          bge.s     DisassembleInstruction_222
                    8873   ; if(DoneSlash == 0)  {
00004F06  4A46      8874          tst.w     D6
00004F08  6614      8875          bne.s     DisassembleInstruction_224
                    8876   ; sprintf(TempString, "D%d", i) ;
00004F0A  2F04      8877          move.l    D4,-(A7)
00004F0C  4879 0000 8878          pea       @m68kde~1_279.L
00004F10  7A74      
00004F12  2F0C      8879          move.l    A4,-(A7)
00004F14  4E95      8880          jsr       (A5)
00004F16  DEFC 000C 8881          add.w     #12,A7
                    8882   ; DoneSlash = 1;
00004F1A  7C01      8883          moveq     #1,D6
00004F1C  6010      8884          bra.s     DisassembleInstruction_225
                    8885   DisassembleInstruction_224:
                    8886   ; }
                    8887   ; else
                    8888   ; sprintf(TempString, "/D%d", i) ;
00004F1E  2F04      8889          move.l    D4,-(A7)
00004F20  4879 0000 8890          pea       @m68kde~1_280.L
00004F24  7A78      
00004F26  2F0C      8891          move.l    A4,-(A7)
00004F28  4E95      8892          jsr       (A5)
00004F2A  DEFC 000C 8893          add.w     #12,A7
                    8894   DisassembleInstruction_225:
00004F2E  6000 0032 8895          bra       DisassembleInstruction_227
                    8896   DisassembleInstruction_222:
                    8897   ; }
                    8898   ; else   {
                    8899   ; if(DoneSlash == 0)  {
00004F32  4A46      8900          tst.w     D6
00004F34  6618      8901          bne.s     DisassembleInstruction_226
                    8902   ; sprintf(TempString, "A%d", i-8) ;
00004F36  2204      8903          move.l    D4,D1
00004F38  5181      8904          subq.l    #8,D1
00004F3A  2F01      8905          move.l    D1,-(A7)
00004F3C  4879 0000 8906          pea       @m68kde~1_281.L
00004F40  7A7E      
00004F42  2F0C      8907          move.l    A4,-(A7)
00004F44  4E95      8908          jsr       (A5)
00004F46  DEFC 000C 8909          add.w     #12,A7
                    8910   ; DoneSlash = 1;
00004F4A  7C01      8911          moveq     #1,D6
00004F4C  6014      8912          bra.s     DisassembleInstruction_227
                    8913   DisassembleInstruction_226:
                    8914   ; }
                    8915   ; else
                    8916   ; sprintf(TempString, "/A%d", i-8) ;
00004F4E  2204      8917          move.l    D4,D1
00004F50  5181      8918          subq.l    #8,D1
00004F52  2F01      8919          move.l    D1,-(A7)
00004F54  4879 0000 8920          pea       @m68kde~1_282.L
00004F58  7A82      
00004F5A  2F0C      8921          move.l    A4,-(A7)
00004F5C  4E95      8922          jsr       (A5)
00004F5E  DEFC 000C 8923          add.w     #12,A7
                    8924   DisassembleInstruction_227:
                    8925   ; }
                    8926   ; strcatInstruction(TempString) ;
00004F62  2F0C      8927          move.l    A4,-(A7)
00004F64  4EB8 0CCC 8928          jsr       _strcatInstruction
00004F68  584F      8929          addq.w    #4,A7
                    8930   DisassembleInstruction_220:
                    8931   ; }
                    8932   ; Mask = Mask >> 1 ;
00004F6A  302E FFFE 8933          move.w    -2(A6),D0
00004F6E  E240      8934          asr.w     #1,D0
00004F70  3D40 FFFE 8935          move.w    D0,-2(A6)
00004F74  5284      8936          addq.l    #1,D4
00004F76  6000 FF5C 8937          bra       DisassembleInstruction_217
                    8938   DisassembleInstruction_219:
                    8939   ; }
                    8940   ; strcatInstruction(",") ;
00004F7A  4879 0000 8941          pea       @m68kde~1_189.L
00004F7E  77FA      
00004F80  4EB8 0CCC 8942          jsr       _strcatInstruction
00004F84  584F      8943          addq.w    #4,A7
                    8944   ; Decode6BitEA(OpCode,0,0,0) ;
00004F86  42A7      8945          clr.l     -(A7)
00004F88  42A7      8946          clr.l     -(A7)
00004F8A  42A7      8947          clr.l     -(A7)
00004F8C  2F02      8948          move.l    D2,-(A7)
00004F8E  4EB8 34BE 8949          jsr       _Decode6BitEA
00004F92  DEFC 0010 8950          add.w     #16,A7
00004F96  6000 00C0 8951          bra       DisassembleInstruction_230
                    8952   DisassembleInstruction_215:
                    8953   ; }
                    8954   ; //movem  (An)+,reg
                    8955   ; else    {
                    8956   ; Decode6BitEA(OpCode,0,0,0) ;
00004F9A  42A7      8957          clr.l     -(A7)
00004F9C  42A7      8958          clr.l     -(A7)
00004F9E  42A7      8959          clr.l     -(A7)
00004FA0  2F02      8960          move.l    D2,-(A7)
00004FA2  4EB8 34BE 8961          jsr       _Decode6BitEA
00004FA6  DEFC 0010 8962          add.w     #16,A7
                    8963   ; strcatInstruction(",") ;
00004FAA  4879 0000 8964          pea       @m68kde~1_189.L
00004FAE  77FA      
00004FB0  4EB8 0CCC 8965          jsr       _strcatInstruction
00004FB4  584F      8966          addq.w    #4,A7
                    8967   ; Mask = 0x0001 ;                     // bit 0 = 1
00004FB6  3D7C 0001 8968          move.w    #1,-2(A6)
00004FBA  FFFE      
                    8969   ; DoneSlash = 0 ;
00004FBC  4246      8970          clr.w     D6
                    8971   ; for(i = 0; i < 16 ; i ++)    {
00004FBE  4284      8972          clr.l     D4
                    8973   DisassembleInstruction_228:
00004FC0  0C84 0000 8974          cmp.l     #16,D4
00004FC4  0010      
00004FC6  6C00 0090 8975          bge       DisassembleInstruction_230
                    8976   ; if((OpCode[1] & Mask) == Mask)    {
00004FCA  2042      8977          move.l    D2,A0
00004FCC  3028 0002 8978          move.w    2(A0),D0
00004FD0  C06E FFFE 8979          and.w     -2(A6),D0
00004FD4  B06E FFFE 8980          cmp.w     -2(A6),D0
00004FD8  6600 006E 8981          bne       DisassembleInstruction_231
                    8982   ; if(i < 8)   {       // data registers in bits 7-0
00004FDC  0C84 0000 8983          cmp.l     #8,D4
00004FE0  0008      
00004FE2  6C2C      8984          bge.s     DisassembleInstruction_233
                    8985   ; if(DoneSlash == 0)  {
00004FE4  4A46      8986          tst.w     D6
00004FE6  6614      8987          bne.s     DisassembleInstruction_235
                    8988   ; sprintf(TempString, "D%d", i) ;
00004FE8  2F04      8989          move.l    D4,-(A7)
00004FEA  4879 0000 8990          pea       @m68kde~1_279.L
00004FEE  7A74      
00004FF0  2F0C      8991          move.l    A4,-(A7)
00004FF2  4E95      8992          jsr       (A5)
00004FF4  DEFC 000C 8993          add.w     #12,A7
                    8994   ; DoneSlash = 1;
00004FF8  7C01      8995          moveq     #1,D6
00004FFA  6010      8996          bra.s     DisassembleInstruction_236
                    8997   DisassembleInstruction_235:
                    8998   ; }
                    8999   ; else
                    9000   ; sprintf(TempString, "/D%d", i) ;
00004FFC  2F04      9001          move.l    D4,-(A7)
00004FFE  4879 0000 9002          pea       @m68kde~1_280.L
00005002  7A78      
00005004  2F0C      9003          move.l    A4,-(A7)
00005006  4E95      9004          jsr       (A5)
00005008  DEFC 000C 9005          add.w     #12,A7
                    9006   DisassembleInstruction_236:
0000500C  6000 0032 9007          bra       DisassembleInstruction_238
                    9008   DisassembleInstruction_233:
                    9009   ; }
                    9010   ; else    {
                    9011   ; if(DoneSlash == 0)  {
00005010  4A46      9012          tst.w     D6
00005012  6618      9013          bne.s     DisassembleInstruction_237
                    9014   ; sprintf(TempString, "A%d", i-8) ;
00005014  2204      9015          move.l    D4,D1
00005016  5181      9016          subq.l    #8,D1
00005018  2F01      9017          move.l    D1,-(A7)
0000501A  4879 0000 9018          pea       @m68kde~1_281.L
0000501E  7A7E      
00005020  2F0C      9019          move.l    A4,-(A7)
00005022  4E95      9020          jsr       (A5)
00005024  DEFC 000C 9021          add.w     #12,A7
                    9022   ; DoneSlash = 1;
00005028  7C01      9023          moveq     #1,D6
0000502A  6014      9024          bra.s     DisassembleInstruction_238
                    9025   DisassembleInstruction_237:
                    9026   ; }
                    9027   ; else
                    9028   ; sprintf(TempString, "/A%d", i-8) ;
0000502C  2204      9029          move.l    D4,D1
0000502E  5181      9030          subq.l    #8,D1
00005030  2F01      9031          move.l    D1,-(A7)
00005032  4879 0000 9032          pea       @m68kde~1_282.L
00005036  7A82      
00005038  2F0C      9033          move.l    A4,-(A7)
0000503A  4E95      9034          jsr       (A5)
0000503C  DEFC 000C 9035          add.w     #12,A7
                    9036   DisassembleInstruction_238:
                    9037   ; }
                    9038   ; strcatInstruction(TempString) ;
00005040  2F0C      9039          move.l    A4,-(A7)
00005042  4EB8 0CCC 9040          jsr       _strcatInstruction
00005046  584F      9041          addq.w    #4,A7
                    9042   DisassembleInstruction_231:
                    9043   ; }
                    9044   ; Mask = Mask << 1 ;
00005048  302E FFFE 9045          move.w    -2(A6),D0
0000504C  E340      9046          asl.w     #1,D0
0000504E  3D40 FFFE 9047          move.w    D0,-2(A6)
00005052  5284      9048          addq.l    #1,D4
00005054  6000 FF6A 9049          bra       DisassembleInstruction_228
                    9050   DisassembleInstruction_230:
                    9051   ; }
                    9052   ; }
                    9053   ; }
                    9054   ; }
                    9055   ; /////////////////////////////////////////////////////////////////////////////////
                    9056   ; // if instruction is MOVEP
                    9057   ; /////////////////////////////////////////////////////////////////////////////////
                    9058   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00005058  2042      9059          move.l    D2,A0
0000505A  3010      9060          move.w    (A0),D0
0000505C  C07C F038 9061          and.w     #61496,D0
00005060  0C40 0008 9062          cmp.w     #8,D0
00005064  6600 0112 9063          bne       DisassembleInstruction_247
                    9064   ; {
                    9065   ; InstructionSize = 1;
00005068  24BC 0000 9066          move.l    #1,(A2)
0000506C  0001      
                    9067   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
0000506E  2042      9068          move.l    D2,A0
00005070  3010      9069          move.w    (A0),D0
00005072  E040      9070          asr.w     #8,D0
00005074  E240      9071          asr.w     #1,D0
00005076  C07C 0007 9072          and.w     #7,D0
0000507A  3A00      9073          move.w    D0,D5
                    9074   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
0000507C  2042      9075          move.l    D2,A0
0000507E  3010      9076          move.w    (A0),D0
00005080  C07C 0007 9077          and.w     #7,D0
00005084  3D40 FFF8 9078          move.w    D0,-8(A6)
                    9079   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00005088  2042      9080          move.l    D2,A0
0000508A  3010      9081          move.w    (A0),D0
0000508C  EC40      9082          asr.w     #6,D0
0000508E  C07C 0007 9083          and.w     #7,D0
00005092  3600      9084          move.w    D0,D3
                    9085   ; InstructionSize++ ;
00005094  5292      9086          addq.l    #1,(A2)
                    9087   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00005096  0C43 0004 9088          cmp.w     #4,D3
0000509A  6634      9089          bne.s     DisassembleInstruction_241
                    9090   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
0000509C  CABC 0000 9091          and.l     #65535,D5
000050A0  FFFF      
000050A2  2F05      9092          move.l    D5,-(A7)
000050A4  322E FFF8 9093          move.w    -8(A6),D1
000050A8  C2BC 0000 9094          and.l     #65535,D1
000050AC  FFFF      
000050AE  2F01      9095          move.l    D1,-(A7)
000050B0  2042      9096          move.l    D2,A0
000050B2  3228 0002 9097          move.w    2(A0),D1
000050B6  48C1      9098          ext.l     D1
000050B8  2F01      9099          move.l    D1,-(A7)
000050BA  4879 0000 9100          pea       @m68kde~1_283.L
000050BE  7A88      
000050C0  4879 0B00 9101          pea       _Instruction.L
000050C4  04E2      
000050C6  4E95      9102          jsr       (A5)
000050C8  DEFC 0014 9103          add.w     #20,A7
000050CC  6000 00AA 9104          bra       DisassembleInstruction_247
                    9105   DisassembleInstruction_241:
                    9106   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
000050D0  0C43 0005 9107          cmp.w     #5,D3
000050D4  6634      9108          bne.s     DisassembleInstruction_243
                    9109   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
000050D6  CABC 0000 9110          and.l     #65535,D5
000050DA  FFFF      
000050DC  2F05      9111          move.l    D5,-(A7)
000050DE  322E FFF8 9112          move.w    -8(A6),D1
000050E2  C2BC 0000 9113          and.l     #65535,D1
000050E6  FFFF      
000050E8  2F01      9114          move.l    D1,-(A7)
000050EA  2042      9115          move.l    D2,A0
000050EC  3228 0002 9116          move.w    2(A0),D1
000050F0  48C1      9117          ext.l     D1
000050F2  2F01      9118          move.l    D1,-(A7)
000050F4  4879 0000 9119          pea       @m68kde~1_284.L
000050F8  7A9E      
000050FA  4879 0B00 9120          pea       _Instruction.L
000050FE  04E2      
00005100  4E95      9121          jsr       (A5)
00005102  DEFC 0014 9122          add.w     #20,A7
00005106  6000 0070 9123          bra       DisassembleInstruction_247
                    9124   DisassembleInstruction_243:
                    9125   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
0000510A  0C43 0006 9126          cmp.w     #6,D3
0000510E  6632      9127          bne.s     DisassembleInstruction_245
                    9128   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00005110  322E FFF8 9129          move.w    -8(A6),D1
00005114  C2BC 0000 9130          and.l     #65535,D1
00005118  FFFF      
0000511A  2F01      9131          move.l    D1,-(A7)
0000511C  2042      9132          move.l    D2,A0
0000511E  3228 0002 9133          move.w    2(A0),D1
00005122  48C1      9134          ext.l     D1
00005124  2F01      9135          move.l    D1,-(A7)
00005126  CABC 0000 9136          and.l     #65535,D5
0000512A  FFFF      
0000512C  2F05      9137          move.l    D5,-(A7)
0000512E  4879 0000 9138          pea       @m68kde~1_285.L
00005132  7AB4      
00005134  4879 0B00 9139          pea       _Instruction.L
00005138  04E2      
0000513A  4E95      9140          jsr       (A5)
0000513C  DEFC 0014 9141          add.w     #20,A7
00005140  6036      9142          bra.s     DisassembleInstruction_247
                    9143   DisassembleInstruction_245:
                    9144   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00005142  0C43 0007 9145          cmp.w     #7,D3
00005146  6630      9146          bne.s     DisassembleInstruction_247
                    9147   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00005148  322E FFF8 9148          move.w    -8(A6),D1
0000514C  C2BC 0000 9149          and.l     #65535,D1
00005150  FFFF      
00005152  2F01      9150          move.l    D1,-(A7)
00005154  2042      9151          move.l    D2,A0
00005156  3228 0002 9152          move.w    2(A0),D1
0000515A  48C1      9153          ext.l     D1
0000515C  2F01      9154          move.l    D1,-(A7)
0000515E  CABC 0000 9155          and.l     #65535,D5
00005162  FFFF      
00005164  2F05      9156          move.l    D5,-(A7)
00005166  4879 0000 9157          pea       @m68kde~1_286.L
0000516A  7ACA      
0000516C  4879 0B00 9158          pea       _Instruction.L
00005170  04E2      
00005172  4E95      9159          jsr       (A5)
00005174  DEFC 0014 9160          add.w     #20,A7
                    9161   DisassembleInstruction_247:
                    9162   ; }
                    9163   ; /////////////////////////////////////////////////////////////////////////////////
                    9164   ; // if instruction is MOVEQ
                    9165   ; /////////////////////////////////////////////////////////////////////////////////
                    9166   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00005178  2042      9167          move.l    D2,A0
0000517A  3010      9168          move.w    (A0),D0
0000517C  C07C F100 9169          and.w     #61696,D0
00005180  0C40 7000 9170          cmp.w     #28672,D0
00005184  6600 0040 9171          bne       DisassembleInstruction_249
                    9172   ; {
                    9173   ; InstructionSize = 1;
00005188  24BC 0000 9174          move.l    #1,(A2)
0000518C  0001      
                    9175   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
0000518E  2042      9176          move.l    D2,A0
00005190  3010      9177          move.w    (A0),D0
00005192  E040      9178          asr.w     #8,D0
00005194  E240      9179          asr.w     #1,D0
00005196  C07C 0007 9180          and.w     #7,D0
0000519A  3A00      9181          move.w    D0,D5
                    9182   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
0000519C  CABC 0000 9183          and.l     #65535,D5
000051A0  FFFF      
000051A2  2F05      9184          move.l    D5,-(A7)
000051A4  2042      9185          move.l    D2,A0
000051A6  3210      9186          move.w    (A0),D1
000051A8  C27C 00FF 9187          and.w     #255,D1
000051AC  C2BC 0000 9188          and.l     #65535,D1
000051B0  FFFF      
000051B2  2F01      9189          move.l    D1,-(A7)
000051B4  4879 0000 9190          pea       @m68kde~1_287.L
000051B8  7AE0      
000051BA  4879 0B00 9191          pea       _Instruction.L
000051BE  04E2      
000051C0  4E95      9192          jsr       (A5)
000051C2  DEFC 0010 9193          add.w     #16,A7
                    9194   DisassembleInstruction_249:
                    9195   ; }
                    9196   ; /////////////////////////////////////////////////////////////////////////////////
                    9197   ; // if instruction is MULS.W
                    9198   ; /////////////////////////////////////////////////////////////////////////////////
                    9199   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
000051C6  2042      9200          move.l    D2,A0
000051C8  3010      9201          move.w    (A0),D0
000051CA  C07C F1C0 9202          and.w     #61888,D0
000051CE  0C40 C1C0 9203          cmp.w     #49600,D0
000051D2  6600 004E 9204          bne       DisassembleInstruction_251
                    9205   ; {
                    9206   ; InstructionSize = 1;
000051D6  24BC 0000 9207          move.l    #1,(A2)
000051DA  0001      
                    9208   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
000051DC  2042      9209          move.l    D2,A0
000051DE  3010      9210          move.w    (A0),D0
000051E0  E040      9211          asr.w     #8,D0
000051E2  E240      9212          asr.w     #1,D0
000051E4  C07C 0007 9213          and.w     #7,D0
000051E8  3A00      9214          move.w    D0,D5
                    9215   ; strcpyInstruction("MULS ");
000051EA  4879 0000 9216          pea       @m68kde~1_288.L
000051EE  7AF0      
000051F0  4E93      9217          jsr       (A3)
000051F2  584F      9218          addq.w    #4,A7
                    9219   ; Decode6BitEA(OpCode,0,0,0) ;
000051F4  42A7      9220          clr.l     -(A7)
000051F6  42A7      9221          clr.l     -(A7)
000051F8  42A7      9222          clr.l     -(A7)
000051FA  2F02      9223          move.l    D2,-(A7)
000051FC  4EB8 34BE 9224          jsr       _Decode6BitEA
00005200  DEFC 0010 9225          add.w     #16,A7
                    9226   ; sprintf(TempString, ",D%d", DataRegister) ;
00005204  CABC 0000 9227          and.l     #65535,D5
00005208  FFFF      
0000520A  2F05      9228          move.l    D5,-(A7)
0000520C  4879 0000 9229          pea       @m68kde~1_244.L
00005210  7946      
00005212  2F0C      9230          move.l    A4,-(A7)
00005214  4E95      9231          jsr       (A5)
00005216  DEFC 000C 9232          add.w     #12,A7
                    9233   ; strcatInstruction(TempString);
0000521A  2F0C      9234          move.l    A4,-(A7)
0000521C  4EB8 0CCC 9235          jsr       _strcatInstruction
00005220  584F      9236          addq.w    #4,A7
                    9237   DisassembleInstruction_251:
                    9238   ; }
                    9239   ; /////////////////////////////////////////////////////////////////////////////////
                    9240   ; // if instruction is MULU.W
                    9241   ; /////////////////////////////////////////////////////////////////////////////////
                    9242   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00005222  2042      9243          move.l    D2,A0
00005224  3010      9244          move.w    (A0),D0
00005226  C07C F1C0 9245          and.w     #61888,D0
0000522A  0C40 C0C0 9246          cmp.w     #49344,D0
0000522E  6600 004E 9247          bne       DisassembleInstruction_253
                    9248   ; {
                    9249   ; InstructionSize = 1;
00005232  24BC 0000 9250          move.l    #1,(A2)
00005236  0001      
                    9251   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00005238  2042      9252          move.l    D2,A0
0000523A  3010      9253          move.w    (A0),D0
0000523C  E040      9254          asr.w     #8,D0
0000523E  E240      9255          asr.w     #1,D0
00005240  C07C 0007 9256          and.w     #7,D0
00005244  3A00      9257          move.w    D0,D5
                    9258   ; strcpyInstruction("MULU ");
00005246  4879 0000 9259          pea       @m68kde~1_289.L
0000524A  7AF6      
0000524C  4E93      9260          jsr       (A3)
0000524E  584F      9261          addq.w    #4,A7
                    9262   ; Decode6BitEA(OpCode,0,0,0) ;
00005250  42A7      9263          clr.l     -(A7)
00005252  42A7      9264          clr.l     -(A7)
00005254  42A7      9265          clr.l     -(A7)
00005256  2F02      9266          move.l    D2,-(A7)
00005258  4EB8 34BE 9267          jsr       _Decode6BitEA
0000525C  DEFC 0010 9268          add.w     #16,A7
                    9269   ; sprintf(TempString, ",D%d", DataRegister) ;
00005260  CABC 0000 9270          and.l     #65535,D5
00005264  FFFF      
00005266  2F05      9271          move.l    D5,-(A7)
00005268  4879 0000 9272          pea       @m68kde~1_244.L
0000526C  7946      
0000526E  2F0C      9273          move.l    A4,-(A7)
00005270  4E95      9274          jsr       (A5)
00005272  DEFC 000C 9275          add.w     #12,A7
                    9276   ; strcatInstruction(TempString);
00005276  2F0C      9277          move.l    A4,-(A7)
00005278  4EB8 0CCC 9278          jsr       _strcatInstruction
0000527C  584F      9279          addq.w    #4,A7
                    9280   DisassembleInstruction_253:
                    9281   ; }
                    9282   ; /////////////////////////////////////////////////////////////////////////////////
                    9283   ; // if instruction is NBCD <EA>
                    9284   ; /////////////////////////////////////////////////////////////////////////////////
                    9285   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
0000527E  2042      9286          move.l    D2,A0
00005280  3010      9287          move.w    (A0),D0
00005282  C07C FFC0 9288          and.w     #65472,D0
00005286  0C40 4800 9289          cmp.w     #18432,D0
0000528A  6620      9290          bne.s     DisassembleInstruction_255
                    9291   ; {
                    9292   ; InstructionSize = 1;
0000528C  24BC 0000 9293          move.l    #1,(A2)
00005290  0001      
                    9294   ; strcpyInstruction("NBCD ");
00005292  4879 0000 9295          pea       @m68kde~1_290.L
00005296  7AFC      
00005298  4E93      9296          jsr       (A3)
0000529A  584F      9297          addq.w    #4,A7
                    9298   ; Decode6BitEA(OpCode,0,0,0);
0000529C  42A7      9299          clr.l     -(A7)
0000529E  42A7      9300          clr.l     -(A7)
000052A0  42A7      9301          clr.l     -(A7)
000052A2  2F02      9302          move.l    D2,-(A7)
000052A4  4EB8 34BE 9303          jsr       _Decode6BitEA
000052A8  DEFC 0010 9304          add.w     #16,A7
                    9305   DisassembleInstruction_255:
                    9306   ; }
                    9307   ; /////////////////////////////////////////////////////////////////////////////////
                    9308   ; // if instruction is NEG <EA>
                    9309   ; /////////////////////////////////////////////////////////////////////////////////
                    9310   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
000052AC  2042      9311          move.l    D2,A0
000052AE  3010      9312          move.w    (A0),D0
000052B0  C07C FF00 9313          and.w     #65280,D0
000052B4  0C40 4400 9314          cmp.w     #17408,D0
000052B8  6600 0046 9315          bne       DisassembleInstruction_259
                    9316   ; {
                    9317   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
000052BC  2042      9318          move.l    D2,A0
000052BE  3010      9319          move.w    (A0),D0
000052C0  EC40      9320          asr.w     #6,D0
000052C2  C07C 0003 9321          and.w     #3,D0
000052C6  0C40 0003 9322          cmp.w     #3,D0
000052CA  6700 0034 9323          beq       DisassembleInstruction_259
                    9324   ; {
                    9325   ; InstructionSize = 1;
000052CE  24BC 0000 9326          move.l    #1,(A2)
000052D2  0001      
                    9327   ; strcpyInstruction("NEG");
000052D4  4879 0000 9328          pea       @m68kde~1_291.L
000052D8  7B02      
000052DA  4E93      9329          jsr       (A3)
000052DC  584F      9330          addq.w    #4,A7
                    9331   ; Decode2BitOperandSize(*OpCode) ;
000052DE  2042      9332          move.l    D2,A0
000052E0  3210      9333          move.w    (A0),D1
000052E2  C2BC 0000 9334          and.l     #65535,D1
000052E6  FFFF      
000052E8  2F01      9335          move.l    D1,-(A7)
000052EA  4EB8 322A 9336          jsr       _Decode2BitOperandSize
000052EE  584F      9337          addq.w    #4,A7
                    9338   ; Decode6BitEA(OpCode,0,0,0);
000052F0  42A7      9339          clr.l     -(A7)
000052F2  42A7      9340          clr.l     -(A7)
000052F4  42A7      9341          clr.l     -(A7)
000052F6  2F02      9342          move.l    D2,-(A7)
000052F8  4EB8 34BE 9343          jsr       _Decode6BitEA
000052FC  DEFC 0010 9344          add.w     #16,A7
                    9345   DisassembleInstruction_259:
                    9346   ; }
                    9347   ; }
                    9348   ; /////////////////////////////////////////////////////////////////////////////////
                    9349   ; // if instruction is NEGX <EA>
                    9350   ; /////////////////////////////////////////////////////////////////////////////////
                    9351   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00005300  2042      9352          move.l    D2,A0
00005302  3010      9353          move.w    (A0),D0
00005304  C07C FF00 9354          and.w     #65280,D0
00005308  0C40 4000 9355          cmp.w     #16384,D0
0000530C  6600 0046 9356          bne       DisassembleInstruction_263
                    9357   ; {
                    9358   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00005310  2042      9359          move.l    D2,A0
00005312  3010      9360          move.w    (A0),D0
00005314  EC40      9361          asr.w     #6,D0
00005316  C07C 0003 9362          and.w     #3,D0
0000531A  0C40 0003 9363          cmp.w     #3,D0
0000531E  6700 0034 9364          beq       DisassembleInstruction_263
                    9365   ; {
                    9366   ; InstructionSize = 1;
00005322  24BC 0000 9367          move.l    #1,(A2)
00005326  0001      
                    9368   ; strcpyInstruction("NEGX");
00005328  4879 0000 9369          pea       @m68kde~1_292.L
0000532C  7B06      
0000532E  4E93      9370          jsr       (A3)
00005330  584F      9371          addq.w    #4,A7
                    9372   ; Decode2BitOperandSize(*OpCode) ;
00005332  2042      9373          move.l    D2,A0
00005334  3210      9374          move.w    (A0),D1
00005336  C2BC 0000 9375          and.l     #65535,D1
0000533A  FFFF      
0000533C  2F01      9376          move.l    D1,-(A7)
0000533E  4EB8 322A 9377          jsr       _Decode2BitOperandSize
00005342  584F      9378          addq.w    #4,A7
                    9379   ; Decode6BitEA(OpCode,0,0,0);
00005344  42A7      9380          clr.l     -(A7)
00005346  42A7      9381          clr.l     -(A7)
00005348  42A7      9382          clr.l     -(A7)
0000534A  2F02      9383          move.l    D2,-(A7)
0000534C  4EB8 34BE 9384          jsr       _Decode6BitEA
00005350  DEFC 0010 9385          add.w     #16,A7
                    9386   DisassembleInstruction_263:
                    9387   ; }
                    9388   ; }
                    9389   ; /////////////////////////////////////////////////////////////////////////////////
                    9390   ; // if instruction is NOP
                    9391   ; /////////////////////////////////////////////////////////////////////////////////
                    9392   ; if(*OpCode == (unsigned short int)(0x4E71))
00005354  2042      9393          move.l    D2,A0
00005356  3010      9394          move.w    (A0),D0
00005358  0C40 4E71 9395          cmp.w     #20081,D0
0000535C  6610      9396          bne.s     DisassembleInstruction_265
                    9397   ; {
                    9398   ; InstructionSize = 1;
0000535E  24BC 0000 9399          move.l    #1,(A2)
00005362  0001      
                    9400   ; strcpyInstruction("NOP");
00005364  4879 0000 9401          pea       @m68kde~1_293.L
00005368  7B0C      
0000536A  4E93      9402          jsr       (A3)
0000536C  584F      9403          addq.w    #4,A7
                    9404   DisassembleInstruction_265:
                    9405   ; }
                    9406   ; /////////////////////////////////////////////////////////////////////////////////
                    9407   ; // if instruction is NOT <EA>
                    9408   ; /////////////////////////////////////////////////////////////////////////////////
                    9409   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
0000536E  2042      9410          move.l    D2,A0
00005370  3010      9411          move.w    (A0),D0
00005372  C07C FF00 9412          and.w     #65280,D0
00005376  0C40 4600 9413          cmp.w     #17920,D0
0000537A  6600 0046 9414          bne       DisassembleInstruction_269
                    9415   ; {
                    9416   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
0000537E  2042      9417          move.l    D2,A0
00005380  3010      9418          move.w    (A0),D0
00005382  EC40      9419          asr.w     #6,D0
00005384  C07C 0003 9420          and.w     #3,D0
00005388  0C40 0003 9421          cmp.w     #3,D0
0000538C  6700 0034 9422          beq       DisassembleInstruction_269
                    9423   ; {
                    9424   ; InstructionSize = 1;
00005390  24BC 0000 9425          move.l    #1,(A2)
00005394  0001      
                    9426   ; strcpyInstruction("NOT");
00005396  4879 0000 9427          pea       @m68kde~1_294.L
0000539A  7B10      
0000539C  4E93      9428          jsr       (A3)
0000539E  584F      9429          addq.w    #4,A7
                    9430   ; Decode2BitOperandSize(*OpCode) ;
000053A0  2042      9431          move.l    D2,A0
000053A2  3210      9432          move.w    (A0),D1
000053A4  C2BC 0000 9433          and.l     #65535,D1
000053A8  FFFF      
000053AA  2F01      9434          move.l    D1,-(A7)
000053AC  4EB8 322A 9435          jsr       _Decode2BitOperandSize
000053B0  584F      9436          addq.w    #4,A7
                    9437   ; Decode6BitEA(OpCode,0,0,0);
000053B2  42A7      9438          clr.l     -(A7)
000053B4  42A7      9439          clr.l     -(A7)
000053B6  42A7      9440          clr.l     -(A7)
000053B8  2F02      9441          move.l    D2,-(A7)
000053BA  4EB8 34BE 9442          jsr       _Decode6BitEA
000053BE  DEFC 0010 9443          add.w     #16,A7
                    9444   DisassembleInstruction_269:
                    9445   ; }
                    9446   ; }
                    9447   ; /////////////////////////////////////////////////////////////////////////////////
                    9448   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    9449   ; /////////////////////////////////////////////////////////////////////////////////
                    9450   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
000053C2  2042      9451          move.l    D2,A0
000053C4  3010      9452          move.w    (A0),D0
000053C6  C07C F000 9453          and.w     #61440,D0
000053CA  0C40 8000 9454          cmp.w     #32768,D0
000053CE  6600 0038 9455          bne       DisassembleInstruction_273
                    9456   ; {
                    9457   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000053D2  2042      9458          move.l    D2,A0
000053D4  3010      9459          move.w    (A0),D0
000053D6  EC40      9460          asr.w     #6,D0
000053D8  C07C 0007 9461          and.w     #7,D0
000053DC  3600      9462          move.w    D0,D3
                    9463   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
000053DE  0C43 0002 9464          cmp.w     #2,D3
000053E2  630C      9465          bls.s     DisassembleInstruction_275
000053E4  0C43 0004 9466          cmp.w     #4,D3
000053E8  651E      9467          blo.s     DisassembleInstruction_273
000053EA  0C43 0006 9468          cmp.w     #6,D3
000053EE  6218      9469          bhi.s     DisassembleInstruction_273
                    9470   DisassembleInstruction_275:
                    9471   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    9472   ; {
                    9473   ; InstructionSize = 1;
000053F0  24BC 0000 9474          move.l    #1,(A2)
000053F4  0001      
                    9475   ; strcpyInstruction("OR") ;
000053F6  4879 0000 9476          pea       @m68kde~1_295.L
000053FA  7B14      
000053FC  4E93      9477          jsr       (A3)
000053FE  584F      9478          addq.w    #4,A7
                    9479   ; Decode3BitOperandMode(OpCode) ;
00005400  2F02      9480          move.l    D2,-(A7)
00005402  4EB8 38E6 9481          jsr       _Decode3BitOperandMode
00005406  584F      9482          addq.w    #4,A7
                    9483   DisassembleInstruction_273:
                    9484   ; }
                    9485   ; }
                    9486   ; /////////////////////////////////////////////////////////////////////////////////
                    9487   ; // if instruction is ORI to CCR
                    9488   ; /////////////////////////////////////////////////////////////////////////////////
                    9489   ; if(*OpCode == (unsigned short int)(0x003C))   {
00005408  2042      9490          move.l    D2,A0
0000540A  3010      9491          move.w    (A0),D0
0000540C  0C40 003C 9492          cmp.w     #60,D0
00005410  662A      9493          bne.s     DisassembleInstruction_276
                    9494   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00005412  2042      9495          move.l    D2,A0
00005414  3228 0002 9496          move.w    2(A0),D1
00005418  C27C 00FF 9497          and.w     #255,D1
0000541C  C2BC 0000 9498          and.l     #65535,D1
00005420  FFFF      
00005422  2F01      9499          move.l    D1,-(A7)
00005424  4879 0000 9500          pea       @m68kde~1_296.L
00005428  7B18      
0000542A  4879 0B00 9501          pea       _Instruction.L
0000542E  04E2      
00005430  4E95      9502          jsr       (A5)
00005432  DEFC 000C 9503          add.w     #12,A7
                    9504   ; InstructionSize = 2;
00005436  24BC 0000 9505          move.l    #2,(A2)
0000543A  0002      
                    9506   DisassembleInstruction_276:
                    9507   ; }
                    9508   ; /////////////////////////////////////////////////////////////////////////////////
                    9509   ; // if instruction is ORI #data,SR
                    9510   ; /////////////////////////////////////////////////////////////////////////////////
                    9511   ; if(*OpCode  == (unsigned short int)(0x007c))
0000543C  2042      9512          move.l    D2,A0
0000543E  3010      9513          move.w    (A0),D0
00005440  0C40 007C 9514          cmp.w     #124,D0
00005444  6622      9515          bne.s     DisassembleInstruction_278
                    9516   ; {
                    9517   ; InstructionSize = 2;
00005446  24BC 0000 9518          move.l    #2,(A2)
0000544A  0002      
                    9519   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
0000544C  2042      9520          move.l    D2,A0
0000544E  3228 0002 9521          move.w    2(A0),D1
00005452  48C1      9522          ext.l     D1
00005454  2F01      9523          move.l    D1,-(A7)
00005456  4879 0000 9524          pea       @m68kde~1_297.L
0000545A  7B26      
0000545C  4879 0B00 9525          pea       _Instruction.L
00005460  04E2      
00005462  4E95      9526          jsr       (A5)
00005464  DEFC 000C 9527          add.w     #12,A7
                    9528   DisassembleInstruction_278:
                    9529   ; }
                    9530   ; /////////////////////////////////////////////////////////////////////////////////
                    9531   ; // if instruction is PEA
                    9532   ; /////////////////////////////////////////////////////////////////////////////////
                    9533   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
00005468  2042      9534          move.l    D2,A0
0000546A  3010      9535          move.w    (A0),D0
0000546C  C07C FFC0 9536          and.w     #65472,D0
00005470  0C40 4840 9537          cmp.w     #18496,D0
00005474  6620      9538          bne.s     DisassembleInstruction_280
                    9539   ; {
                    9540   ; InstructionSize = 1;
00005476  24BC 0000 9541          move.l    #1,(A2)
0000547A  0001      
                    9542   ; strcpyInstruction("PEA ");
0000547C  4879 0000 9543          pea       @m68kde~1_298.L
00005480  7B34      
00005482  4E93      9544          jsr       (A3)
00005484  584F      9545          addq.w    #4,A7
                    9546   ; Decode6BitEA(OpCode,0,0,0);
00005486  42A7      9547          clr.l     -(A7)
00005488  42A7      9548          clr.l     -(A7)
0000548A  42A7      9549          clr.l     -(A7)
0000548C  2F02      9550          move.l    D2,-(A7)
0000548E  4EB8 34BE 9551          jsr       _Decode6BitEA
00005492  DEFC 0010 9552          add.w     #16,A7
                    9553   DisassembleInstruction_280:
                    9554   ; }
                    9555   ; /////////////////////////////////////////////////////////////////////////////////
                    9556   ; // if instruction is reset
                    9557   ; /////////////////////////////////////////////////////////////////////////////////
                    9558   ; if(*OpCode  == (unsigned short int)(0x4E70))
00005496  2042      9559          move.l    D2,A0
00005498  3010      9560          move.w    (A0),D0
0000549A  0C40 4E70 9561          cmp.w     #20080,D0
0000549E  6616      9562          bne.s     DisassembleInstruction_282
                    9563   ; {
                    9564   ; InstructionSize = 1;
000054A0  24BC 0000 9565          move.l    #1,(A2)
000054A4  0001      
                    9566   ; sprintf(Instruction, "RESET");
000054A6  4879 0000 9567          pea       @m68kde~1_299.L
000054AA  7B3A      
000054AC  4879 0B00 9568          pea       _Instruction.L
000054B0  04E2      
000054B2  4E95      9569          jsr       (A5)
000054B4  504F      9570          addq.w    #8,A7
                    9571   DisassembleInstruction_282:
                    9572   ; }
                    9573   ; /////////////////////////////////////////////////////////////////////////////////
                    9574   ; // if instruction is RTE
                    9575   ; /////////////////////////////////////////////////////////////////////////////////
                    9576   ; if(*OpCode  == (unsigned short int)(0x4E73))
000054B6  2042      9577          move.l    D2,A0
000054B8  3010      9578          move.w    (A0),D0
000054BA  0C40 4E73 9579          cmp.w     #20083,D0
000054BE  6616      9580          bne.s     DisassembleInstruction_284
                    9581   ; {
                    9582   ; InstructionSize = 1;
000054C0  24BC 0000 9583          move.l    #1,(A2)
000054C4  0001      
                    9584   ; sprintf(Instruction, "RTE");
000054C6  4879 0000 9585          pea       @m68kde~1_300.L
000054CA  7B40      
000054CC  4879 0B00 9586          pea       _Instruction.L
000054D0  04E2      
000054D2  4E95      9587          jsr       (A5)
000054D4  504F      9588          addq.w    #8,A7
                    9589   DisassembleInstruction_284:
                    9590   ; }
                    9591   ; /////////////////////////////////////////////////////////////////////////////////
                    9592   ; // if instruction is RTR
                    9593   ; /////////////////////////////////////////////////////////////////////////////////
                    9594   ; if(*OpCode == (unsigned short int)(0x4E77))
000054D6  2042      9595          move.l    D2,A0
000054D8  3010      9596          move.w    (A0),D0
000054DA  0C40 4E77 9597          cmp.w     #20087,D0
000054DE  6610      9598          bne.s     DisassembleInstruction_286
                    9599   ; {
                    9600   ; InstructionSize = 1;
000054E0  24BC 0000 9601          move.l    #1,(A2)
000054E4  0001      
                    9602   ; strcpyInstruction("RTR");
000054E6  4879 0000 9603          pea       @m68kde~1_301.L
000054EA  7B44      
000054EC  4E93      9604          jsr       (A3)
000054EE  584F      9605          addq.w    #4,A7
                    9606   DisassembleInstruction_286:
                    9607   ; }
                    9608   ; /////////////////////////////////////////////////////////////////////////////////
                    9609   ; // if instruction is RTS
                    9610   ; /////////////////////////////////////////////////////////////////////////////////
                    9611   ; if(*OpCode == (unsigned short int)(0x4E75))
000054F0  2042      9612          move.l    D2,A0
000054F2  3010      9613          move.w    (A0),D0
000054F4  0C40 4E75 9614          cmp.w     #20085,D0
000054F8  6610      9615          bne.s     DisassembleInstruction_288
                    9616   ; {
                    9617   ; InstructionSize = 1;
000054FA  24BC 0000 9618          move.l    #1,(A2)
000054FE  0001      
                    9619   ; strcpyInstruction("RTS");
00005500  4879 0000 9620          pea       @m68kde~1_302.L
00005504  7B48      
00005506  4E93      9621          jsr       (A3)
00005508  584F      9622          addq.w    #4,A7
                    9623   DisassembleInstruction_288:
                    9624   ; }
                    9625   ; /////////////////////////////////////////////////////////////////////////////////
                    9626   ; // if instruction is STOP
                    9627   ; /////////////////////////////////////////////////////////////////////////////////
                    9628   ; if(*OpCode  == (unsigned short int)(0x4E72))
0000550A  2042      9629          move.l    D2,A0
0000550C  3010      9630          move.w    (A0),D0
0000550E  0C40 4E72 9631          cmp.w     #20082,D0
00005512  6622      9632          bne.s     DisassembleInstruction_290
                    9633   ; {
                    9634   ; InstructionSize = 2;
00005514  24BC 0000 9635          move.l    #2,(A2)
00005518  0002      
                    9636   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
0000551A  2042      9637          move.l    D2,A0
0000551C  3228 0002 9638          move.w    2(A0),D1
00005520  48C1      9639          ext.l     D1
00005522  2F01      9640          move.l    D1,-(A7)
00005524  4879 0000 9641          pea       @m68kde~1_303.L
00005528  7B4C      
0000552A  4879 0B00 9642          pea       _Instruction.L
0000552E  04E2      
00005530  4E95      9643          jsr       (A5)
00005532  DEFC 000C 9644          add.w     #12,A7
                    9645   DisassembleInstruction_290:
                    9646   ; }
                    9647   ; /////////////////////////////////////////////////////////////////////////////////
                    9648   ; // if instruction is SBCD
                    9649   ; /////////////////////////////////////////////////////////////////////////////////
                    9650   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
00005536  2042      9651          move.l    D2,A0
00005538  3010      9652          move.w    (A0),D0
0000553A  C07C F1F0 9653          and.w     #61936,D0
0000553E  0C40 8100 9654          cmp.w     #33024,D0
00005542  6600 0092 9655          bne       DisassembleInstruction_295
                    9656   ; {
                    9657   ; InstructionSize = 1;
00005546  24BC 0000 9658          move.l    #1,(A2)
0000554A  0001      
                    9659   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
0000554C  2042      9660          move.l    D2,A0
0000554E  3010      9661          move.w    (A0),D0
00005550  E040      9662          asr.w     #8,D0
00005552  E240      9663          asr.w     #1,D0
00005554  C07C 0007 9664          and.w     #7,D0
00005558  3D40 FFE0 9665          move.w    D0,-32(A6)
                    9666   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
0000555C  2042      9667          move.l    D2,A0
0000555E  3010      9668          move.w    (A0),D0
00005560  C07C 0007 9669          and.w     #7,D0
00005564  3D40 FFDE 9670          move.w    D0,-34(A6)
                    9671   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00005568  2042      9672          move.l    D2,A0
0000556A  3010      9673          move.w    (A0),D0
0000556C  E640      9674          asr.w     #3,D0
0000556E  48C0      9675          ext.l     D0
00005570  C0BC 0000 9676          and.l     #1,D0
00005574  0001      
00005576  2D40 FFE4 9677          move.l    D0,-28(A6)
                    9678   ; if(Mode == 0)
0000557A  202E FFE4 9679          move.l    -28(A6),D0
0000557E  662C      9680          bne.s     DisassembleInstruction_294
                    9681   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
00005580  322E FFE0 9682          move.w    -32(A6),D1
00005584  C2BC 0000 9683          and.l     #65535,D1
00005588  FFFF      
0000558A  2F01      9684          move.l    D1,-(A7)
0000558C  322E FFDE 9685          move.w    -34(A6),D1
00005590  C2BC 0000 9686          and.l     #65535,D1
00005594  FFFF      
00005596  2F01      9687          move.l    D1,-(A7)
00005598  4879 0000 9688          pea       @m68kde~1_304.L
0000559C  7B56      
0000559E  4879 0B00 9689          pea       _Instruction.L
000055A2  04E2      
000055A4  4E95      9690          jsr       (A5)
000055A6  DEFC 0010 9691          add.w     #16,A7
000055AA  602A      9692          bra.s     DisassembleInstruction_295
                    9693   DisassembleInstruction_294:
                    9694   ; else
                    9695   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
000055AC  322E FFE0 9696          move.w    -32(A6),D1
000055B0  C2BC 0000 9697          and.l     #65535,D1
000055B4  FFFF      
000055B6  2F01      9698          move.l    D1,-(A7)
000055B8  322E FFDE 9699          move.w    -34(A6),D1
000055BC  C2BC 0000 9700          and.l     #65535,D1
000055C0  FFFF      
000055C2  2F01      9701          move.l    D1,-(A7)
000055C4  4879 0000 9702          pea       @m68kde~1_305.L
000055C8  7B64      
000055CA  4879 0B00 9703          pea       _Instruction.L
000055CE  04E2      
000055D0  4E95      9704          jsr       (A5)
000055D2  DEFC 0010 9705          add.w     #16,A7
                    9706   DisassembleInstruction_295:
                    9707   ; }
                    9708   ; /////////////////////////////////////////////////////////////////////////////////
                    9709   ; // if instruction is Scc
                    9710   ; /////////////////////////////////////////////////////////////////////////////////
                    9711   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
000055D6  2042      9712          move.l    D2,A0
000055D8  3010      9713          move.w    (A0),D0
000055DA  C07C F0C0 9714          and.w     #61632,D0
000055DE  0C40 50C0 9715          cmp.w     #20672,D0
000055E2  6600 0060 9716          bne       DisassembleInstruction_298
                    9717   ; {
                    9718   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
000055E6  2042      9719          move.l    D2,A0
000055E8  3010      9720          move.w    (A0),D0
000055EA  E640      9721          asr.w     #3,D0
000055EC  C07C 0007 9722          and.w     #7,D0
000055F0  3D40 FFEC 9723          move.w    D0,-20(A6)
                    9724   ; if(EAMode != (unsigned short int)(0x0001))
000055F4  302E FFEC 9725          move.w    -20(A6),D0
000055F8  0C40 0001 9726          cmp.w     #1,D0
000055FC  6700 0046 9727          beq       DisassembleInstruction_298
                    9728   ; {
                    9729   ; InstructionSize = 1;
00005600  24BC 0000 9730          move.l    #1,(A2)
00005604  0001      
                    9731   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00005606  2042      9732          move.l    D2,A0
00005608  3010      9733          move.w    (A0),D0
0000560A  E040      9734          asr.w     #8,D0
0000560C  C07C 000F 9735          and.w     #15,D0
00005610  1D40 FFE9 9736          move.b    D0,-23(A6)
                    9737   ; strcpyInstruction("S") ;
00005614  4879 0000 9738          pea       @m68kde~1_306.L
00005618  7B78      
0000561A  4E93      9739          jsr       (A3)
0000561C  584F      9740          addq.w    #4,A7
                    9741   ; DecodeBranchCondition(Condition) ;
0000561E  122E FFE9 9742          move.b    -23(A6),D1
00005622  C27C 00FF 9743          and.w     #255,D1
00005626  C2BC 0000 9744          and.l     #65535,D1
0000562A  FFFF      
0000562C  2F01      9745          move.l    D1,-(A7)
0000562E  4EB8 397C 9746          jsr       _DecodeBranchCondition
00005632  584F      9747          addq.w    #4,A7
                    9748   ; Decode6BitEA(OpCode,0,0,0);
00005634  42A7      9749          clr.l     -(A7)
00005636  42A7      9750          clr.l     -(A7)
00005638  42A7      9751          clr.l     -(A7)
0000563A  2F02      9752          move.l    D2,-(A7)
0000563C  4EB8 34BE 9753          jsr       _Decode6BitEA
00005640  DEFC 0010 9754          add.w     #16,A7
                    9755   DisassembleInstruction_298:
                    9756   ; }
                    9757   ; }
                    9758   ; /////////////////////////////////////////////////////////////////////////////////
                    9759   ; // if instruction is SUB or SUBA
                    9760   ; /////////////////////////////////////////////////////////////////////////////////
                    9761   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
00005644  2042      9762          move.l    D2,A0
00005646  3010      9763          move.w    (A0),D0
00005648  C07C F000 9764          and.w     #61440,D0
0000564C  0C40 9000 9765          cmp.w     #36864,D0
00005650  6600 008C 9766          bne       DisassembleInstruction_303
                    9767   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00005654  2042      9768          move.l    D2,A0
00005656  3010      9769          move.w    (A0),D0
00005658  EC40      9770          asr.w     #6,D0
0000565A  C07C 0007 9771          and.w     #7,D0
0000565E  3600      9772          move.w    D0,D3
                    9773   ; InstructionSize = 1;
00005660  24BC 0000 9774          move.l    #1,(A2)
00005664  0001      
                    9775   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00005666  0C43 0003 9776          cmp.w     #3,D3
0000566A  6708      9777          beq.s     DisassembleInstruction_304
0000566C  0C43 0007 9778          cmp.w     #7,D3
00005670  6600 005A 9779          bne       DisassembleInstruction_302
                    9780   DisassembleInstruction_304:
                    9781   ; {
                    9782   ; if(OpMode == (unsigned short int)(0x0003))
00005674  0C43 0003 9783          cmp.w     #3,D3
00005678  660C      9784          bne.s     DisassembleInstruction_305
                    9785   ; strcpyInstruction("SUBA.W ") ;
0000567A  4879 0000 9786          pea       @m68kde~1_307.L
0000567E  7B7A      
00005680  4E93      9787          jsr       (A3)
00005682  584F      9788          addq.w    #4,A7
00005684  600A      9789          bra.s     DisassembleInstruction_306
                    9790   DisassembleInstruction_305:
                    9791   ; else
                    9792   ; strcpyInstruction("SUBA.L ") ;
00005686  4879 0000 9793          pea       @m68kde~1_308.L
0000568A  7B82      
0000568C  4E93      9794          jsr       (A3)
0000568E  584F      9795          addq.w    #4,A7
                    9796   DisassembleInstruction_306:
                    9797   ; Decode6BitEA(OpCode,0,0,0)  ;
00005690  42A7      9798          clr.l     -(A7)
00005692  42A7      9799          clr.l     -(A7)
00005694  42A7      9800          clr.l     -(A7)
00005696  2F02      9801          move.l    D2,-(A7)
00005698  4EB8 34BE 9802          jsr       _Decode6BitEA
0000569C  DEFC 0010 9803          add.w     #16,A7
                    9804   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000056A0  2042      9805          move.l    D2,A0
000056A2  3210      9806          move.w    (A0),D1
000056A4  E041      9807          asr.w     #8,D1
000056A6  E241      9808          asr.w     #1,D1
000056A8  C27C 0007 9809          and.w     #7,D1
000056AC  C2BC 0000 9810          and.l     #65535,D1
000056B0  FFFF      
000056B2  2F01      9811          move.l    D1,-(A7)
000056B4  4879 0000 9812          pea       @m68kde~1_211.L
000056B8  7876      
000056BA  2F0C      9813          move.l    A4,-(A7)
000056BC  4E95      9814          jsr       (A5)
000056BE  DEFC 000C 9815          add.w     #12,A7
                    9816   ; strcatInstruction(TempString) ;
000056C2  2F0C      9817          move.l    A4,-(A7)
000056C4  4EB8 0CCC 9818          jsr       _strcatInstruction
000056C8  584F      9819          addq.w    #4,A7
000056CA  6012      9820          bra.s     DisassembleInstruction_303
                    9821   DisassembleInstruction_302:
                    9822   ; }
                    9823   ; else {
                    9824   ; strcpyInstruction("SUB") ;
000056CC  4879 0000 9825          pea       @m68kde~1_309.L
000056D0  7B8A      
000056D2  4E93      9826          jsr       (A3)
000056D4  584F      9827          addq.w    #4,A7
                    9828   ; Decode3BitOperandMode(OpCode) ;
000056D6  2F02      9829          move.l    D2,-(A7)
000056D8  4EB8 38E6 9830          jsr       _Decode3BitOperandMode
000056DC  584F      9831          addq.w    #4,A7
                    9832   DisassembleInstruction_303:
                    9833   ; }
                    9834   ; }
                    9835   ; /////////////////////////////////////////////////////////////////////////////////
                    9836   ; // if instruction is SUBQ
                    9837   ; /////////////////////////////////////////////////////////////////////////////////
                    9838   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
000056DE  2042      9839          move.l    D2,A0
000056E0  3010      9840          move.w    (A0),D0
000056E2  C07C F100 9841          and.w     #61696,D0
000056E6  0C40 5100 9842          cmp.w     #20736,D0
000056EA  6600 0072 9843          bne       DisassembleInstruction_309
                    9844   ; {
                    9845   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000056EE  2042      9846          move.l    D2,A0
000056F0  3010      9847          move.w    (A0),D0
000056F2  EC40      9848          asr.w     #6,D0
000056F4  C07C 0003 9849          and.w     #3,D0
000056F8  3600      9850          move.w    D0,D3
                    9851   ; if(OpMode <= (unsigned short int)(0x0002))
000056FA  0C43 0002 9852          cmp.w     #2,D3
000056FE  6200 005E 9853          bhi       DisassembleInstruction_309
                    9854   ; {
                    9855   ; InstructionSize = 1;
00005702  24BC 0000 9856          move.l    #1,(A2)
00005706  0001      
                    9857   ; strcpyInstruction("SUBQ") ;
00005708  4879 0000 9858          pea       @m68kde~1_310.L
0000570C  7B8E      
0000570E  4E93      9859          jsr       (A3)
00005710  584F      9860          addq.w    #4,A7
                    9861   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005712  2042      9862          move.l    D2,A0
00005714  3210      9863          move.w    (A0),D1
00005716  C2BC 0000 9864          and.l     #65535,D1
0000571A  FFFF      
0000571C  2F01      9865          move.l    D1,-(A7)
0000571E  4EB8 322A 9866          jsr       _Decode2BitOperandSize
00005722  584F      9867          addq.w    #4,A7
                    9868   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00005724  2042      9869          move.l    D2,A0
00005726  3210      9870          move.w    (A0),D1
00005728  E041      9871          asr.w     #8,D1
0000572A  E241      9872          asr.w     #1,D1
0000572C  C27C 0007 9873          and.w     #7,D1
00005730  C2BC 0000 9874          and.l     #65535,D1
00005734  FFFF      
00005736  2F01      9875          move.l    D1,-(A7)
00005738  4879 0000 9876          pea       @m68kde~1_221.L
0000573C  78B6      
0000573E  2F0C      9877          move.l    A4,-(A7)
00005740  4E95      9878          jsr       (A5)
00005742  DEFC 000C 9879          add.w     #12,A7
                    9880   ; strcatInstruction(TempString) ;
00005746  2F0C      9881          move.l    A4,-(A7)
00005748  4EB8 0CCC 9882          jsr       _strcatInstruction
0000574C  584F      9883          addq.w    #4,A7
                    9884   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
0000574E  42A7      9885          clr.l     -(A7)
00005750  42A7      9886          clr.l     -(A7)
00005752  42A7      9887          clr.l     -(A7)
00005754  2F02      9888          move.l    D2,-(A7)
00005756  4EB8 34BE 9889          jsr       _Decode6BitEA
0000575A  DEFC 0010 9890          add.w     #16,A7
                    9891   DisassembleInstruction_309:
                    9892   ; }
                    9893   ; }
                    9894   ; /////////////////////////////////////////////////////////////////////////////////
                    9895   ; // if instruction is SUBX
                    9896   ; /////////////////////////////////////////////////////////////////////////////////
                    9897   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
0000575E  2042      9898          move.l    D2,A0
00005760  3010      9899          move.w    (A0),D0
00005762  C07C F130 9900          and.w     #61744,D0
00005766  0C40 9100 9901          cmp.w     #37120,D0
0000576A  6600 00A4 9902          bne       DisassembleInstruction_313
                    9903   ; {
                    9904   ; InstructionSize = 1;
0000576E  24BC 0000 9905          move.l    #1,(A2)
00005772  0001      
                    9906   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00005774  2042      9907          move.l    D2,A0
00005776  3010      9908          move.w    (A0),D0
00005778  EC40      9909          asr.w     #6,D0
0000577A  C07C 0003 9910          and.w     #3,D0
0000577E  3600      9911          move.w    D0,D3
                    9912   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
00005780  0C43 0003 9913          cmp.w     #3,D3
00005784  6700 008A 9914          beq       DisassembleInstruction_313
                    9915   ; {
                    9916   ; strcpyInstruction("SUBX") ;
00005788  4879 0000 9917          pea       @m68kde~1_311.L
0000578C  7B94      
0000578E  4E93      9918          jsr       (A3)
00005790  584F      9919          addq.w    #4,A7
                    9920   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005792  2042      9921          move.l    D2,A0
00005794  3210      9922          move.w    (A0),D1
00005796  C2BC 0000 9923          and.l     #65535,D1
0000579A  FFFF      
0000579C  2F01      9924          move.l    D1,-(A7)
0000579E  4EB8 322A 9925          jsr       _Decode2BitOperandSize
000057A2  584F      9926          addq.w    #4,A7
                    9927   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
000057A4  2042      9928          move.l    D2,A0
000057A6  3010      9929          move.w    (A0),D0
000057A8  C07C 0008 9930          and.w     #8,D0
000057AC  6600 0030 9931          bne       DisassembleInstruction_315
                    9932   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000057B0  2042      9933          move.l    D2,A0
000057B2  3210      9934          move.w    (A0),D1
000057B4  E041      9935          asr.w     #8,D1
000057B6  E241      9936          asr.w     #1,D1
000057B8  C27C 0007 9937          and.w     #7,D1
000057BC  48C1      9938          ext.l     D1
000057BE  2F01      9939          move.l    D1,-(A7)
000057C0  2042      9940          move.l    D2,A0
000057C2  3210      9941          move.w    (A0),D1
000057C4  C27C 0007 9942          and.w     #7,D1
000057C8  48C1      9943          ext.l     D1
000057CA  2F01      9944          move.l    D1,-(A7)
000057CC  4879 0000 9945          pea       @m68kde~1_312.L
000057D0  7B9A      
000057D2  2F0C      9946          move.l    A4,-(A7)
000057D4  4E95      9947          jsr       (A5)
000057D6  DEFC 0010 9948          add.w     #16,A7
000057DA  6000 002C 9949          bra       DisassembleInstruction_316
                    9950   DisassembleInstruction_315:
                    9951   ; else        // -(ax),-(ay) mode used
                    9952   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000057DE  2042      9953          move.l    D2,A0
000057E0  3210      9954          move.w    (A0),D1
000057E2  E041      9955          asr.w     #8,D1
000057E4  E241      9956          asr.w     #1,D1
000057E6  C27C 0007 9957          and.w     #7,D1
000057EA  48C1      9958          ext.l     D1
000057EC  2F01      9959          move.l    D1,-(A7)
000057EE  2042      9960          move.l    D2,A0
000057F0  3210      9961          move.w    (A0),D1
000057F2  C27C 0007 9962          and.w     #7,D1
000057F6  48C1      9963          ext.l     D1
000057F8  2F01      9964          move.l    D1,-(A7)
000057FA  4879 0000 9965          pea       @m68kde~1_313.L
000057FE  7BA4      
00005800  2F0C      9966          move.l    A4,-(A7)
00005802  4E95      9967          jsr       (A5)
00005804  DEFC 0010 9968          add.w     #16,A7
                    9969   DisassembleInstruction_316:
                    9970   ; strcatInstruction(TempString) ;
00005808  2F0C      9971          move.l    A4,-(A7)
0000580A  4EB8 0CCC 9972          jsr       _strcatInstruction
0000580E  584F      9973          addq.w    #4,A7
                    9974   DisassembleInstruction_313:
                    9975   ; }
                    9976   ; }
                    9977   ; /////////////////////////////////////////////////////////////////////////////////
                    9978   ; // if instruction is SWAP
                    9979   ; /////////////////////////////////////////////////////////////////////////////////
                    9980   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
00005810  2042      9981          move.l    D2,A0
00005812  3010      9982          move.w    (A0),D0
00005814  C07C FFF8 9983          and.w     #65528,D0
00005818  0C40 4840 9984          cmp.w     #18496,D0
0000581C  662A      9985          bne.s     DisassembleInstruction_317
                    9986   ; {
                    9987   ; InstructionSize = 1;
0000581E  24BC 0000 9988          move.l    #1,(A2)
00005822  0001      
                    9989   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
00005824  2042      9990          move.l    D2,A0
00005826  3010      9991          move.w    (A0),D0
00005828  C07C 0007 9992          and.w     #7,D0
0000582C  3A00      9993          move.w    D0,D5
                    9994   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
0000582E  CABC 0000 9995          and.l     #65535,D5
00005832  FFFF      
00005834  2F05      9996          move.l    D5,-(A7)
00005836  4879 0000 9997          pea       @m68kde~1_314.L
0000583A  7BB4      
0000583C  4879 0B00 9998          pea       _Instruction.L
00005840  04E2      
00005842  4E95      9999          jsr       (A5)
00005844  DEFC 000C 10000          add.w     #12,A7
                    10001   DisassembleInstruction_317:
                    10002   ; }
                    10003   ; /////////////////////////////////////////////////////////////////////////////////
                    10004   ; // if instruction is TAS
                    10005   ; /////////////////////////////////////////////////////////////////////////////////
                    10006   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
00005848  2042      10007          move.l    D2,A0
0000584A  3010      10008          move.w    (A0),D0
0000584C  C07C FFC0 10009          and.w     #65472,D0
00005850  0C40 4AC0 10010          cmp.w     #19136,D0
00005854  662A      10011          bne.s     DisassembleInstruction_321
                    10012   ; {
                    10013   ; if(*OpCode != (unsigned short int)(0x4AFC))
00005856  2042      10014          move.l    D2,A0
00005858  3010      10015          move.w    (A0),D0
0000585A  0C40 4AFC 10016          cmp.w     #19196,D0
0000585E  6720      10017          beq.s     DisassembleInstruction_321
                    10018   ; {
                    10019   ; InstructionSize = 1;
00005860  24BC 0000 10020          move.l    #1,(A2)
00005864  0001      
                    10021   ; strcpyInstruction("TAS ") ;
00005866  4879 0000 10022          pea       @m68kde~1_315.L
0000586A  7BBE      
0000586C  4E93      10023          jsr       (A3)
0000586E  584F      10024          addq.w    #4,A7
                    10025   ; Decode6BitEA(OpCode,0,0,0) ;
00005870  42A7      10026          clr.l     -(A7)
00005872  42A7      10027          clr.l     -(A7)
00005874  42A7      10028          clr.l     -(A7)
00005876  2F02      10029          move.l    D2,-(A7)
00005878  4EB8 34BE 10030          jsr       _Decode6BitEA
0000587C  DEFC 0010 10031          add.w     #16,A7
                    10032   DisassembleInstruction_321:
                    10033   ; }
                    10034   ; }
                    10035   ; /////////////////////////////////////////////////////////////////////////////////
                    10036   ; // if instruction is TRAP
                    10037   ; /////////////////////////////////////////////////////////////////////////////////
                    10038   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
00005880  2042      10039          move.l    D2,A0
00005882  3010      10040          move.w    (A0),D0
00005884  C07C FFF0 10041          and.w     #65520,D0
00005888  0C40 4E40 10042          cmp.w     #20032,D0
0000588C  6622      10043          bne.s     DisassembleInstruction_323
                    10044   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
0000588E  2042      10045          move.l    D2,A0
00005890  3210      10046          move.w    (A0),D1
00005892  C27C 000F 10047          and.w     #15,D1
00005896  C2BC 0000 10048          and.l     #65535,D1
0000589A  FFFF      
0000589C  2F01      10049          move.l    D1,-(A7)
0000589E  4879 0000 10050          pea       @m68kde~1_316.L
000058A2  7BC4      
000058A4  4879 0B00 10051          pea       _Instruction.L
000058A8  04E2      
000058AA  4E95      10052          jsr       (A5)
000058AC  DEFC 000C 10053          add.w     #12,A7
                    10054   DisassembleInstruction_323:
                    10055   ; }
                    10056   ; /////////////////////////////////////////////////////////////////////////////////
                    10057   ; // if instruction is TRAPV
                    10058   ; /////////////////////////////////////////////////////////////////////////////////
                    10059   ; if(*OpCode == (unsigned short int)(0x4E76))
000058B0  2042      10060          move.l    D2,A0
000058B2  3010      10061          move.w    (A0),D0
000058B4  0C40 4E76 10062          cmp.w     #20086,D0
000058B8  6610      10063          bne.s     DisassembleInstruction_325
                    10064   ; {
                    10065   ; InstructionSize = 1;
000058BA  24BC 0000 10066          move.l    #1,(A2)
000058BE  0001      
                    10067   ; strcpyInstruction("TRAPV") ;
000058C0  4879 0000 10068          pea       @m68kde~1_317.L
000058C4  7BCE      
000058C6  4E93      10069          jsr       (A3)
000058C8  584F      10070          addq.w    #4,A7
                    10071   DisassembleInstruction_325:
                    10072   ; }
                    10073   ; /////////////////////////////////////////////////////////////////////////////////
                    10074   ; // if instruction is TST
                    10075   ; /////////////////////////////////////////////////////////////////////////////////
                    10076   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
000058CA  2042      10077          move.l    D2,A0
000058CC  3010      10078          move.w    (A0),D0
000058CE  C07C FF00 10079          and.w     #65280,D0
000058D2  0C40 4A00 10080          cmp.w     #18944,D0
000058D6  6600 005A 10081          bne       DisassembleInstruction_329
                    10082   ; {
                    10083   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000058DA  2042      10084          move.l    D2,A0
000058DC  3010      10085          move.w    (A0),D0
000058DE  EC40      10086          asr.w     #6,D0
000058E0  C07C 0003 10087          and.w     #3,D0
000058E4  3D40 FFE2 10088          move.w    D0,-30(A6)
                    10089   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
000058E8  2042      10090          move.l    D2,A0
000058EA  3010      10091          move.w    (A0),D0
000058EC  0C40 4AFC 10092          cmp.w     #19196,D0
000058F0  6700 0040 10093          beq       DisassembleInstruction_329
000058F4  302E FFE2 10094          move.w    -30(A6),D0
000058F8  0C40 0003 10095          cmp.w     #3,D0
000058FC  6700 0034 10096          beq       DisassembleInstruction_329
                    10097   ; InstructionSize = 1;
00005900  24BC 0000 10098          move.l    #1,(A2)
00005904  0001      
                    10099   ; strcpyInstruction("TST") ;
00005906  4879 0000 10100          pea       @m68kde~1_318.L
0000590A  7BD4      
0000590C  4E93      10101          jsr       (A3)
0000590E  584F      10102          addq.w    #4,A7
                    10103   ; Decode2BitOperandSize(*OpCode) ;
00005910  2042      10104          move.l    D2,A0
00005912  3210      10105          move.w    (A0),D1
00005914  C2BC 0000 10106          and.l     #65535,D1
00005918  FFFF      
0000591A  2F01      10107          move.l    D1,-(A7)
0000591C  4EB8 322A 10108          jsr       _Decode2BitOperandSize
00005920  584F      10109          addq.w    #4,A7
                    10110   ; Decode6BitEA(OpCode,0,0,0) ;
00005922  42A7      10111          clr.l     -(A7)
00005924  42A7      10112          clr.l     -(A7)
00005926  42A7      10113          clr.l     -(A7)
00005928  2F02      10114          move.l    D2,-(A7)
0000592A  4EB8 34BE 10115          jsr       _Decode6BitEA
0000592E  DEFC 0010 10116          add.w     #16,A7
                    10117   DisassembleInstruction_329:
                    10118   ; }
                    10119   ; }
                    10120   ; /////////////////////////////////////////////////////////////////////////////////
                    10121   ; // if instruction is UNLK
                    10122   ; //////////////////////////////////////////////////////////
                    10123   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
00005932  2042      10124          move.l    D2,A0
00005934  3010      10125          move.w    (A0),D0
00005936  C07C FFF8 10126          and.w     #65528,D0
0000593A  0C40 4E58 10127          cmp.w     #20056,D0
0000593E  6628      10128          bne.s     DisassembleInstruction_331
                    10129   ; {
                    10130   ; InstructionSize = 1;
00005940  24BC 0000 10131          move.l    #1,(A2)
00005944  0001      
                    10132   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
00005946  2042      10133          move.l    D2,A0
00005948  3210      10134          move.w    (A0),D1
0000594A  C27C 0007 10135          and.w     #7,D1
0000594E  C2BC 0000 10136          and.l     #65535,D1
00005952  FFFF      
00005954  2F01      10137          move.l    D1,-(A7)
00005956  4879 0000 10138          pea       @m68kde~1_319.L
0000595A  7BD8      
0000595C  4879 0B00 10139          pea       _Instruction.L
00005960  04E2      
00005962  4E95      10140          jsr       (A5)
00005964  DEFC 000C 10141          add.w     #12,A7
                    10142   DisassembleInstruction_331:
                    10143   ; }
                    10144   ; FormatInstruction() ;
00005968  4EB8 3198 10145          jsr       _FormatInstruction
0000596C  4CDF 3CFC 10146          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005970  4E5E      10147          unlk      A6
00005972  4E75      10148          rts
                    10149   ; }
                    10150   ; C:\CYGWIN64\HOME\SABAS\M68K\PROGRAMS\DEBUGMONITORCODE\DEBUG MONITOR FILES\FLASHROUTINES.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    10151   _strcpy:
00005974  206F 0004 10152          move.l    (4,A7),A0
00005978  226F 0008 10153          move.l    (8,A7),A1
0000597C  2008      10154          move.l    A0,D0
                    10155   strcpy_1:
0000597E  10D9      10156          move.b    (A1)+,(A0)+
00005980  66FC      10157          bne.s     strcpy_1
00005982  4E75      10158          rts
                    10159   ULDIV:
00005984  4E56 0000 10160          link    A6,#0
00005988  48E7 C000 10161          movem.l D0/D1,-(A7)
0000598C  222E 0008 10162          move.l  8(A6),D1
00005990  202E 000C 10163          move.l  12(A6),D0
00005994  6036      10164          bra.s   ldiv_3
                    10165   LDIV:
00005996  4E56 0000 10166          link    A6,#0
0000599A  48E7 C000 10167          movem.l D0/D1,-(A7)
0000599E  222E 0008 10168          move.l  8(A6),D1
000059A2  202E 000C 10169          move.l  12(A6),D0
000059A6  4A80      10170          tst.l   D0
000059A8  6A0E      10171          bpl.s   ldiv_1
000059AA  4480      10172          neg.l   D0
000059AC  4A81      10173          tst.l   D1
000059AE  6A14      10174          bpl.s   ldiv_2
000059B0  4481      10175          neg.l   D1
000059B2  612A      10176          bsr.s   dodiv
000059B4  4481      10177          neg.l   D1
000059B6  6016      10178          bra.s   ldiv_4
                    10179   ldiv_1:
000059B8  4A81      10180          tst.l   D1
000059BA  6A10      10181          bpl.s   ldiv_3
000059BC  4481      10182          neg.l   D1
000059BE  611E      10183          bsr.s   dodiv
000059C0  4480      10184          neg.l   D0
000059C2  600A      10185          bra.s   ldiv_4
                    10186   ldiv_2:
000059C4  6118      10187          bsr.s   dodiv
000059C6  4480      10188          neg.l   D0
000059C8  4481      10189          neg.l   D1
000059CA  6002      10190          bra.s   ldiv_4
                    10191   ldiv_3:
000059CC  6110      10192          bsr.s   dodiv
                    10193   ldiv_4:
000059CE  2D40 0008 10194          move.l  D0,8(A6)
000059D2  2D41 000C 10195          move.l  D1,12(A6)
000059D6  4CDF 0003 10196          movem.l (A7)+,D0/D1
000059DA  4E5E      10197          unlk    A6
000059DC  4E75      10198          rts
                    10199   dodiv:
000059DE  0C81 0000 10200          cmpi.l  #$FFFF,D1
000059E2  FFFF      
000059E4  6236      10201          bhi.s   dodiv_2
000059E6  0C80 0000 10202          cmpi.l  #$FFFF,D0
000059EA  FFFF      
000059EC  6210      10203          bhi.s   dodiv_1
000059EE  80C1      10204          divu    D1,D0
000059F0  2200      10205          move.l  D0,D1
000059F2  4241      10206          clr.w   D1
000059F4  4841      10207          swap    D1
000059F6  0280 0000 10208          andi.l  #$FFFF,D0
000059FA  FFFF      
000059FC  4E75      10209          rts
                    10210   dodiv_1:
000059FE  48A7 A000 10211          movem.w D0/D2,-(A7)
00005A02  4240      10212          clr.w   D0
00005A04  4840      10213          swap    D0
00005A06  80C1      10214          divu    D1,D0
00005A08  3400      10215          move.w  D0,D2
00005A0A  301F      10216          move.w  (A7)+,D0
00005A0C  80C1      10217          divu    D1,D0
00005A0E  4840      10218          swap    D0
00005A10  4281      10219          clr.l   D1
00005A12  3200      10220          move.w  D0,D1
00005A14  3002      10221          move.w  D2,D0
00005A16  4840      10222          swap    D0
00005A18  341F      10223          move.w  (A7)+,D2
00005A1A  4E75      10224          rts
                    10225   dodiv_2:
00005A1C  48E7 3800 10226          movem.l D2/D3/D4,-(A7)
00005A20  2401      10227          move.l  D1,D2
00005A22  4242      10228          clr.w   D2
00005A24  4842      10229          swap    D2
00005A26  5282      10230          addq.l  #1,D2
00005A28  2600      10231          move.l  D0,D3
00005A2A  2801      10232          move.l  D1,D4
00005A2C  2202      10233          move.l  D2,D1
00005A2E  61CE      10234          bsr.s   dodiv_1
00005A30  2204      10235          move.l  D4,D1
00005A32  82C2      10236          divu    D2,D1
00005A34  80C1      10237          divu    D1,D0
00005A36  0280 0000 10238          andi.l  #$FFFF,D0
00005A3A  FFFF      
                    10239   dodiv_3:
00005A3C  2204      10240          move.l  D4,D1
00005A3E  2404      10241          move.l  D4,D2
00005A40  4842      10242          swap    D2
00005A42  C2C0      10243          mulu    D0,D1
00005A44  C4C0      10244          mulu    D0,D2
00005A46  4842      10245          swap    D2
00005A48  D282      10246          add.l   D2,D1
00005A4A  9283      10247          sub.l   D3,D1
00005A4C  620A      10248          bhi.s   dodiv_4
00005A4E  4481      10249          neg.l   D1
00005A50  B881      10250          cmp.l   D1,D4
00005A52  6208      10251          bhi.s   dodiv_5
00005A54  5280      10252          addq.l  #1,D0
00005A56  60E4      10253          bra.s   dodiv_3
                    10254   dodiv_4:
00005A58  5380      10255          subq.l  #1,D0
00005A5A  60E0      10256          bra.s   dodiv_3
                    10257   dodiv_5:
00005A5C  4CDF 001C 10258          movem.l (A7)+,D2/D3/D4
00005A60  4E75      10259          rts
                    10260   _putch:
00005A62  4E56 0000 10261          link      A6,#0
00005A66  2F02      10262          move.l    D2,-(A7)
00005A68  242E 0008 10263          move.l    8(A6),D2
00005A6C  0C82 0000 10264          cmp.l     #10,D2
00005A70  000A      
00005A72  660A      10265          bne.s     putch_1
00005A74  4878 000D 10266          pea       13
00005A78  4EB8 0B3C 10267          jsr       __putch
00005A7C  584F      10268          addq.w    #4,A7
                    10269   putch_1:
00005A7E  2F02      10270          move.l    D2,-(A7)
00005A80  4EB8 0B3C 10271          jsr       __putch
00005A84  584F      10272          addq.w    #4,A7
00005A86  2002      10273          move.l    D2,D0
00005A88  241F      10274          move.l    (A7)+,D2
00005A8A  4E5E      10275          unlk      A6
00005A8C  4E75      10276          rts
                    10277   _getch:
00005A8E  2F02      10278          move.l    D2,-(A7)
00005A90  2439 0B00 10279          move.l    __ungetbuf.L,D2
00005A94  00C0      
00005A96  2039 0B00 10280          move.l    __ungetbuf.L,D0
00005A9A  00C0      
00005A9C  0C80 FFFF 10281          cmp.l     #-1,D0
00005AA0  FFFF      
00005AA2  670C      10282          beq.s     getch_1
00005AA4  23FC FFFF 10283          move.l    #-1,__ungetbuf.L
00005AA8  FFFF 0B00 
00005AAC  00C0      
00005AAE  6010      10284          bra.s     getch_3
                    10285   getch_1:
00005AB0  4EB8 0B68 10286          jsr       __getch
00005AB4  2400      10287          move.l    D0,D2
00005AB6  0C80 0000 10288          cmp.l     #13,D0
00005ABA  000D      
00005ABC  6602      10289          bne.s     getch_3
00005ABE  740A      10290          moveq     #10,D2
                    10291   getch_3:
00005AC0  2002      10292          move.l    D2,D0
00005AC2  241F      10293          move.l    (A7)+,D2
00005AC4  4E75      10294          rts
                    10295   _tolower:
00005AC6  202F 0004 10296          move.l    4(A7),D0
00005ACA  0C80 0000 10297          cmp.l     #'A',D0
00005ACE  0041      
00005AD0  6D0E      10298          blt.s     tolower_1
00005AD2  0C80 0000 10299          cmp.l     #'Z',D0
00005AD6  005A      
00005AD8  6E06      10300          bgt.s     tolower_1
00005ADA  0680 0000 10301          add.l     #$20,D0
00005ADE  0020      
                    10302   tolower_1:
00005AE0  4E75      10303          rts
                    10304   _sprintf:
00005AE2  4E56 FFFC 10305          link      A6,#-4
00005AE6  2F02      10306          move.l    D2,-(A7)
00005AE8  41EE 000C 10307          lea       12(A6),A0
00005AEC  5848      10308          addq.w    #4,A0
00005AEE  2408      10309          move.l    A0,D2
00005AF0  2F02      10310          move.l    D2,-(A7)
00005AF2  2F2E 000C 10311          move.l    12(A6),-(A7)
00005AF6  2F2E 0008 10312          move.l    8(A6),-(A7)
00005AFA  4EB9 0000 10313          jsr       _doprint
00005AFE  5C1C      
00005B00  DEFC 000C 10314          add.w     #12,A7
00005B04  2D40 FFFC 10315          move.l    D0,-4(A6)
00005B08  4282      10316          clr.l     D2
00005B0A  202E FFFC 10317          move.l    -4(A6),D0
00005B0E  241F      10318          move.l    (A7)+,D2
00005B10  4E5E      10319          unlk      A6
00005B12  4E75      10320          rts
                    10321   _strcat:
00005B14  206F 0004 10322          move.l    (4,A7),A0
00005B18  226F 0008 10323          move.l    (8,A7),A1
00005B1C  2008      10324          move.l    A0,D0
                    10325   strcat_1:
00005B1E  4A18      10326          tst.b     (A0)+
00005B20  66FC      10327          bne.s     strcat_1
00005B22  5388      10328          subq.l    #1,A0
                    10329   strcat_2:
00005B24  10D9      10330          move.b    (A1)+,(A0)+
00005B26  66FC      10331          bne.s     strcat_2
00005B28  4E75      10332          rts
                    10333   _toupper:
00005B2A  202F 0004 10334          move.l    4(A7),D0
00005B2E  0C80 0000 10335          cmp.l     #'a',D0
00005B32  0061      
00005B34  6D0E      10336          blt.s     toupper_1
00005B36  0C80 0000 10337          cmp.l     #'z',D0
00005B3A  007A      
00005B3C  6E06      10338          bgt.s     toupper_1
00005B3E  0480 0000 10339          sub.l     #$20,D0
00005B42  0020      
                    10340   toupper_1:
00005B44  4E75      10341          rts
                    10342   _printf:
00005B46  4E56 FFFC 10343          link      A6,#-4
00005B4A  2F02      10344          move.l    D2,-(A7)
00005B4C  41EE 0008 10345          lea       8(A6),A0
00005B50  5848      10346          addq.w    #4,A0
00005B52  2408      10347          move.l    A0,D2
00005B54  2F02      10348          move.l    D2,-(A7)
00005B56  2F2E 0008 10349          move.l    8(A6),-(A7)
00005B5A  42A7      10350          clr.l     -(A7)
00005B5C  4EB9 0000 10351          jsr       _doprint
00005B60  5C1C      
00005B62  DEFC 000C 10352          add.w     #12,A7
00005B66  2D40 FFFC 10353          move.l    D0,-4(A6)
00005B6A  4282      10354          clr.l     D2
00005B6C  202E FFFC 10355          move.l    -4(A6),D0
00005B70  241F      10356          move.l    (A7)+,D2
00005B72  4E5E      10357          unlk      A6
00005B74  4E75      10358          rts
                    10359   @doprint_copy:
00005B76  4E56 0000 10360          link      A6,#0
00005B7A  206E 0008 10361          move.l    8(A6),A0
00005B7E  4A90      10362          tst.l     (A0)
00005B80  6710      10363          beq.s     @doprint_copy_1
00005B82  202E 000C 10364          move.l    12(A6),D0
00005B86  206E 0008 10365          move.l    8(A6),A0
00005B8A  2250      10366          move.l    (A0),A1
00005B8C  5290      10367          addq.l    #1,(A0)
00005B8E  1280      10368          move.b    D0,(A1)
00005B90  600A      10369          bra.s     @doprint_copy_2
                    10370   @doprint_copy_1:
00005B92  2F2E 000C 10371          move.l    12(A6),-(A7)
00005B96  4EB8 5A62 10372          jsr       _putch
00005B9A  584F      10373          addq.w    #4,A7
                    10374   @doprint_copy_2:
00005B9C  4E5E      10375          unlk      A6
00005B9E  4E75      10376          rts
                    10377   @doprint_getval:
00005BA0  4E56 0000 10378          link      A6,#0
00005BA4  48E7 3000 10379          movem.l   D2/D3,-(A7)
00005BA8  262E 0008 10380          move.l    8(A6),D3
00005BAC  4282      10381          clr.l     D2
00005BAE  2043      10382          move.l    D3,A0
00005BB0  2050      10383          move.l    (A0),A0
00005BB2  1010      10384          move.b    (A0),D0
00005BB4  0C00 002A 10385          cmp.b     #42,D0
00005BB8  6612      10386          bne.s     @doprint_getval_1
00005BBA  206E 000C 10387          move.l    12(A6),A0
00005BBE  2250      10388          move.l    (A0),A1
00005BC0  5890      10389          addq.l    #4,(A0)
00005BC2  2411      10390          move.l    (A1),D2
00005BC4  2043      10391          move.l    D3,A0
00005BC6  5290      10392          addq.l    #1,(A0)
00005BC8  6000 0048 10393          bra       @doprint_getval_5
                    10394   @doprint_getval_1:
00005BCC  7001      10395          moveq     #1,D0
00005BCE  2043      10396          move.l    D3,A0
00005BD0  2050      10397          move.l    (A0),A0
00005BD2  1210      10398          move.b    (A0),D1
00005BD4  4881      10399          ext.w     D1
00005BD6  48C1      10400          ext.l     D1
00005BD8  D081      10401          add.l     D1,D0
00005BDA  41F9 0000 10402          lea       __ctype.L,A0
00005BDE  7BEE      
00005BE0  1030 0800 10403          move.b    0(A0,D0.L),D0
00005BE4  C03C 0004 10404          and.b     #4,D0
00005BE8  6728      10405          beq.s     @doprint_getval_5
00005BEA  2F02      10406          move.l    D2,-(A7)
00005BEC  4878 000A 10407          pea       10
00005BF0  4EB9 0000 10408          jsr       LMUL
00005BF4  63B8      
00005BF6  2017      10409          move.l    (A7),D0
00005BF8  504F      10410          addq.w    #8,A7
00005BFA  2043      10411          move.l    D3,A0
00005BFC  2250      10412          move.l    (A0),A1
00005BFE  5290      10413          addq.l    #1,(A0)
00005C00  1211      10414          move.b    (A1),D1
00005C02  4881      10415          ext.w     D1
00005C04  48C1      10416          ext.l     D1
00005C06  D081      10417          add.l     D1,D0
00005C08  0480 0000 10418          sub.l     #48,D0
00005C0C  0030      
00005C0E  2400      10419          move.l    D0,D2
00005C10  60BA      10420          bra       @doprint_getval_1
                    10421   @doprint_getval_5:
00005C12  2002      10422          move.l    D2,D0
00005C14  4CDF 000C 10423          movem.l   (A7)+,D2/D3
00005C18  4E5E      10424          unlk      A6
00005C1A  4E75      10425          rts
                    10426   _doprint:
00005C1C  4E56 FFCC 10427          link      A6,#-52
00005C20  48E7 3F3C 10428          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00005C24  45EE 0008 10429          lea       8(A6),A2
00005C28  47F8 5B76 10430          lea       @doprint_copy.L,A3
00005C2C  49F9 0000 10431          lea       _ultoa.L,A4
00005C30  6344      
00005C32  4286      10432          clr.l     D6
                    10433   doprint_1:
00005C34  206E 000C 10434          move.l    12(A6),A0
00005C38  4A10      10435          tst.b     (A0)
00005C3A  6700 05EA 10436          beq       doprint_3
00005C3E  206E 000C 10437          move.l    12(A6),A0
00005C42  1010      10438          move.b    (A0),D0
00005C44  0C00 0025 10439          cmp.b     #37,D0
00005C48  671C      10440          beq.s     doprint_4
00005C4A  206E 000C 10441          move.l    12(A6),A0
00005C4E  52AE 000C 10442          addq.l    #1,12(A6)
00005C52  1210      10443          move.b    (A0),D1
00005C54  4881      10444          ext.w     D1
00005C56  48C1      10445          ext.l     D1
00005C58  2F01      10446          move.l    D1,-(A7)
00005C5A  2F0A      10447          move.l    A2,-(A7)
00005C5C  4E93      10448          jsr       (A3)
00005C5E  504F      10449          addq.w    #8,A7
00005C60  5286      10450          addq.l    #1,D6
00005C62  6000 05BE 10451          bra       doprint_2
                    10452   doprint_4:
00005C66  52AE 000C 10453          addq.l    #1,12(A6)
00005C6A  422E FFD3 10454          clr.b     -45(A6)
00005C6E  422E FFD2 10455          clr.b     -46(A6)
00005C72  422E FFD0 10456          clr.b     -48(A6)
00005C76  422E FFCF 10457          clr.b     -49(A6)
00005C7A  422E FFCE 10458          clr.b     -50(A6)
00005C7E  422E FFCD 10459          clr.b     -51(A6)
00005C82  42AE FFFC 10460          clr.l     -4(A6)
00005C86  7AFF      10461          moveq     #-1,D5
00005C88  41EE FFDC 10462          lea       -36(A6),A0
00005C8C  2608      10463          move.l    A0,D3
00005C8E  2408      10464          move.l    A0,D2
                    10465   doprint_6:
00005C90  206E 000C 10466          move.l    12(A6),A0
00005C94  1010      10467          move.b    (A0),D0
00005C96  4880      10468          ext.w     D0
00005C98  48C0      10469          ext.l     D0
00005C9A  0C80 0000 10470          cmp.l     #43,D0
00005C9E  002B      
00005CA0  6730      10471          beq.s     doprint_12
00005CA2  6E18      10472          bgt.s     doprint_15
00005CA4  0C80 0000 10473          cmp.l     #35,D0
00005CA8  0023      
00005CAA  6700 003E 10474          beq       doprint_14
00005CAE  6E00 0046 10475          bgt       doprint_9
00005CB2  0C80 0000 10476          cmp.l     #32,D0
00005CB6  0020      
00005CB8  6724      10477          beq.s     doprint_13
00005CBA  603A      10478          bra.s     doprint_9
                    10479   doprint_15:
00005CBC  0C80 0000 10480          cmp.l     #45,D0
00005CC0  002D      
00005CC2  6702      10481          beq.s     doprint_11
00005CC4  6030      10482          bra.s     doprint_9
                    10483   doprint_11:
00005CC6  1D7C 0001 10484          move.b    #1,-51(A6)
00005CCA  FFCD      
00005CCC  52AE 000C 10485          addq.l    #1,12(A6)
00005CD0  6026      10486          bra.s     doprint_7
                    10487   doprint_12:
00005CD2  1D7C 0001 10488          move.b    #1,-50(A6)
00005CD6  FFCE      
00005CD8  52AE 000C 10489          addq.l    #1,12(A6)
00005CDC  601A      10490          bra.s     doprint_7
                    10491   doprint_13:
00005CDE  1D7C 0001 10492          move.b    #1,-49(A6)
00005CE2  FFCF      
00005CE4  52AE 000C 10493          addq.l    #1,12(A6)
00005CE8  600E      10494          bra.s     doprint_7
                    10495   doprint_14:
00005CEA  1D7C 0001 10496          move.b    #1,-48(A6)
00005CEE  FFD0      
00005CF0  52AE 000C 10497          addq.l    #1,12(A6)
00005CF4  6002      10498          bra.s     doprint_7
                    10499   doprint_9:
00005CF6  6002      10500          bra.s     doprint_8
                    10501   doprint_7:
00005CF8  6096      10502          bra       doprint_6
                    10503   doprint_8:
00005CFA  206E 000C 10504          move.l    12(A6),A0
00005CFE  1010      10505          move.b    (A0),D0
00005D00  0C00 0030 10506          cmp.b     #48,D0
00005D04  660A      10507          bne.s     doprint_16
00005D06  52AE 000C 10508          addq.l    #1,12(A6)
00005D0A  1D7C 0001 10509          move.b    #1,-46(A6)
00005D0E  FFD2      
                    10510   doprint_16:
00005D10  486E 0010 10511          pea       16(A6)
00005D14  486E 000C 10512          pea       12(A6)
00005D18  4EB8 5BA0 10513          jsr       @doprint_getval
00005D1C  504F      10514          addq.w    #8,A7
00005D1E  2A40      10515          move.l    D0,A5
00005D20  206E 000C 10516          move.l    12(A6),A0
00005D24  1010      10517          move.b    (A0),D0
00005D26  0C00 002E 10518          cmp.b     #46,D0
00005D2A  6614      10519          bne.s     doprint_18
00005D2C  52AE 000C 10520          addq.l    #1,12(A6)
00005D30  486E 0010 10521          pea       16(A6)
00005D34  486E 000C 10522          pea       12(A6)
00005D38  4EB8 5BA0 10523          jsr       @doprint_getval
00005D3C  504F      10524          addq.w    #8,A7
00005D3E  2A00      10525          move.l    D0,D5
                    10526   doprint_18:
00005D40  206E 000C 10527          move.l    12(A6),A0
00005D44  1010      10528          move.b    (A0),D0
00005D46  0C00 006C 10529          cmp.b     #108,D0
00005D4A  660A      10530          bne.s     doprint_20
00005D4C  52AE 000C 10531          addq.l    #1,12(A6)
00005D50  1D7C 0001 10532          move.b    #1,-45(A6)
00005D54  FFD3      
                    10533   doprint_20:
00005D56  206E 000C 10534          move.l    12(A6),A0
00005D5A  1010      10535          move.b    (A0),D0
00005D5C  4880      10536          ext.w     D0
00005D5E  48C0      10537          ext.l     D0
00005D60  0C80 0000 10538          cmp.l     #111,D0
00005D64  006F      
00005D66  6700 00D8 10539          beq       doprint_27
00005D6A  6E34      10540          bgt.s     doprint_33
00005D6C  0C80 0000 10541          cmp.l     #100,D0
00005D70  0064      
00005D72  6700 0054 10542          beq       doprint_24
00005D76  6E1C      10543          bgt.s     doprint_34
00005D78  0C80 0000 10544          cmp.l     #99,D0
00005D7C  0063      
00005D7E  6700 0130 10545          beq       doprint_30
00005D82  6E00 0174 10546          bgt       doprint_22
00005D86  0C80 0000 10547          cmp.l     #88,D0
00005D8A  0058      
00005D8C  6700 00EA 10548          beq       doprint_28
00005D90  6000 0166 10549          bra       doprint_22
                    10550   doprint_34:
00005D94  0C80 0000 10551          cmp.l     #105,D0
00005D98  0069      
00005D9A  672C      10552          beq.s     doprint_24
00005D9C  6000 015A 10553          bra       doprint_22
                    10554   doprint_33:
00005DA0  0C80 0000 10555          cmp.l     #117,D0
00005DA4  0075      
00005DA6  6700 0060 10556          beq       doprint_26
00005DAA  6E0E      10557          bgt.s     doprint_35
00005DAC  0C80 0000 10558          cmp.l     #115,D0
00005DB0  0073      
00005DB2  6700 0124 10559          beq       doprint_31
00005DB6  6000 0140 10560          bra       doprint_22
                    10561   doprint_35:
00005DBA  0C80 0000 10562          cmp.l     #120,D0
00005DBE  0078      
00005DC0  6700 00B6 10563          beq       doprint_28
00005DC4  6000 0132 10564          bra       doprint_22
                    10565   doprint_24:
00005DC8  4A2E FFD3 10566          tst.b     -45(A6)
00005DCC  671C      10567          beq.s     doprint_36
00005DCE  4878 000A 10568          pea       10
00005DD2  2F03      10569          move.l    D3,-(A7)
00005DD4  206E 0010 10570          move.l    16(A6),A0
00005DD8  58AE 0010 10571          addq.l    #4,16(A6)
00005DDC  2F10      10572          move.l    (A0),-(A7)
00005DDE  4EB9 0000 10573          jsr       _ltoa
00005DE2  62C0      
00005DE4  DEFC 000C 10574          add.w     #12,A7
00005DE8  601A      10575          bra.s     doprint_37
                    10576   doprint_36:
00005DEA  4878 000A 10577          pea       10
00005DEE  2F03      10578          move.l    D3,-(A7)
00005DF0  206E 0010 10579          move.l    16(A6),A0
00005DF4  58AE 0010 10580          addq.l    #4,16(A6)
00005DF8  2F10      10581          move.l    (A0),-(A7)
00005DFA  4EB9 0000 10582          jsr       _ltoa
00005DFE  62C0      
00005E00  DEFC 000C 10583          add.w     #12,A7
                    10584   doprint_37:
00005E04  6000 0100 10585          bra       doprint_23
                    10586   doprint_26:
00005E08  4A2E FFD3 10587          tst.b     -45(A6)
00005E0C  6718      10588          beq.s     doprint_38
00005E0E  4878 000A 10589          pea       10
00005E12  2F03      10590          move.l    D3,-(A7)
00005E14  206E 0010 10591          move.l    16(A6),A0
00005E18  58AE 0010 10592          addq.l    #4,16(A6)
00005E1C  2F10      10593          move.l    (A0),-(A7)
00005E1E  4E94      10594          jsr       (A4)
00005E20  DEFC 000C 10595          add.w     #12,A7
00005E24  6016      10596          bra.s     doprint_39
                    10597   doprint_38:
00005E26  4878 000A 10598          pea       10
00005E2A  2F03      10599          move.l    D3,-(A7)
00005E2C  206E 0010 10600          move.l    16(A6),A0
00005E30  58AE 0010 10601          addq.l    #4,16(A6)
00005E34  2F10      10602          move.l    (A0),-(A7)
00005E36  4E94      10603          jsr       (A4)
00005E38  DEFC 000C 10604          add.w     #12,A7
                    10605   doprint_39:
00005E3C  6000 00C8 10606          bra       doprint_23
                    10607   doprint_27:
00005E40  4A2E FFD3 10608          tst.b     -45(A6)
00005E44  6718      10609          beq.s     doprint_40
00005E46  4878 0008 10610          pea       8
00005E4A  2F03      10611          move.l    D3,-(A7)
00005E4C  206E 0010 10612          move.l    16(A6),A0
00005E50  58AE 0010 10613          addq.l    #4,16(A6)
00005E54  2F10      10614          move.l    (A0),-(A7)
00005E56  4E94      10615          jsr       (A4)
00005E58  DEFC 000C 10616          add.w     #12,A7
00005E5C  6016      10617          bra.s     doprint_41
                    10618   doprint_40:
00005E5E  4878 0008 10619          pea       8
00005E62  2F03      10620          move.l    D3,-(A7)
00005E64  206E 0010 10621          move.l    16(A6),A0
00005E68  58AE 0010 10622          addq.l    #4,16(A6)
00005E6C  2F10      10623          move.l    (A0),-(A7)
00005E6E  4E94      10624          jsr       (A4)
00005E70  DEFC 000C 10625          add.w     #12,A7
                    10626   doprint_41:
00005E74  6000 0090 10627          bra       doprint_23
                    10628   doprint_28:
00005E78  4A2E FFD3 10629          tst.b     -45(A6)
00005E7C  6718      10630          beq.s     doprint_42
00005E7E  4878 0010 10631          pea       16
00005E82  2F03      10632          move.l    D3,-(A7)
00005E84  206E 0010 10633          move.l    16(A6),A0
00005E88  58AE 0010 10634          addq.l    #4,16(A6)
00005E8C  2F10      10635          move.l    (A0),-(A7)
00005E8E  4E94      10636          jsr       (A4)
00005E90  DEFC 000C 10637          add.w     #12,A7
00005E94  6016      10638          bra.s     doprint_43
                    10639   doprint_42:
00005E96  4878 0010 10640          pea       16
00005E9A  2F03      10641          move.l    D3,-(A7)
00005E9C  206E 0010 10642          move.l    16(A6),A0
00005EA0  58AE 0010 10643          addq.l    #4,16(A6)
00005EA4  2F10      10644          move.l    (A0),-(A7)
00005EA6  4E94      10645          jsr       (A4)
00005EA8  DEFC 000C 10646          add.w     #12,A7
                    10647   doprint_43:
00005EAC  6000 0058 10648          bra       doprint_23
                    10649   doprint_30:
00005EB0  206E 0010 10650          move.l    16(A6),A0
00005EB4  58AE 0010 10651          addq.l    #4,16(A6)
00005EB8  2010      10652          move.l    (A0),D0
00005EBA  2042      10653          move.l    D2,A0
00005EBC  5282      10654          addq.l    #1,D2
00005EBE  1080      10655          move.b    D0,(A0)
00005EC0  2042      10656          move.l    D2,A0
00005EC2  4210      10657          clr.b     (A0)
00005EC4  200D      10658          move.l    A5,D0
00005EC6  6704      10659          beq.s     doprint_44
00005EC8  200D      10660          move.l    A5,D0
00005ECA  6006      10661          bra.s     doprint_45
                    10662   doprint_44:
00005ECC  7001      10663          moveq     #1,D0
00005ECE  4880      10664          ext.w     D0
00005ED0  48C0      10665          ext.l     D0
                    10666   doprint_45:
00005ED2  2A00      10667          move.l    D0,D5
00005ED4  6000 0030 10668          bra       doprint_23
                    10669   doprint_31:
00005ED8  206E 0010 10670          move.l    16(A6),A0
00005EDC  58AE 0010 10671          addq.l    #4,16(A6)
00005EE0  2610      10672          move.l    (A0),D3
00005EE2  0C85 FFFF 10673          cmp.l     #-1,D5
00005EE6  FFFF      
00005EE8  660C      10674          bne.s     doprint_46
00005EEA  2F03      10675          move.l    D3,-(A7)
00005EEC  4EB9 0000 10676          jsr       _strlen
00005EF0  6446      
00005EF2  584F      10677          addq.w    #4,A7
00005EF4  2A00      10678          move.l    D0,D5
                    10679   doprint_46:
00005EF6  600E      10680          bra.s     doprint_23
                    10681   doprint_22:
00005EF8  206E 000C 10682          move.l    12(A6),A0
00005EFC  2242      10683          move.l    D2,A1
00005EFE  5282      10684          addq.l    #1,D2
00005F00  1290      10685          move.b    (A0),(A1)
00005F02  2042      10686          move.l    D2,A0
00005F04  4210      10687          clr.b     (A0)
                    10688   doprint_23:
00005F06  2F03      10689          move.l    D3,-(A7)
00005F08  4EB9 0000 10690          jsr       _strlen
00005F0C  6446      
00005F0E  584F      10691          addq.w    #4,A7
00005F10  1800      10692          move.b    D0,D4
00005F12  206E 000C 10693          move.l    12(A6),A0
00005F16  1010      10694          move.b    (A0),D0
00005F18  0C00 0073 10695          cmp.b     #115,D0
00005F1C  661C      10696          bne.s     doprint_48
00005F1E  0C85 0000 10697          cmp.l     #0,D5
00005F22  0000      
00005F24  6D14      10698          blt.s     doprint_48
00005F26  4884      10699          ext.w     D4
00005F28  48C4      10700          ext.l     D4
00005F2A  B885      10701          cmp.l     D5,D4
00005F2C  6F04      10702          ble.s     doprint_50
00005F2E  2005      10703          move.l    D5,D0
00005F30  6006      10704          bra.s     doprint_51
                    10705   doprint_50:
00005F32  1004      10706          move.b    D4,D0
00005F34  4880      10707          ext.w     D0
00005F36  48C0      10708          ext.l     D0
                    10709   doprint_51:
00005F38  1800      10710          move.b    D0,D4
                    10711   doprint_48:
00005F3A  206E 000C 10712          move.l    12(A6),A0
00005F3E  1010      10713          move.b    (A0),D0
00005F40  0C00 0058 10714          cmp.b     #88,D0
00005F44  6600 0026 10715          bne       doprint_56
00005F48  41EE FFDC 10716          lea       -36(A6),A0
00005F4C  2408      10717          move.l    A0,D2
                    10718   doprint_54:
00005F4E  2042      10719          move.l    D2,A0
00005F50  4A10      10720          tst.b     (A0)
00005F52  6718      10721          beq.s     doprint_56
00005F54  2042      10722          move.l    D2,A0
00005F56  1210      10723          move.b    (A0),D1
00005F58  4881      10724          ext.w     D1
00005F5A  48C1      10725          ext.l     D1
00005F5C  2F01      10726          move.l    D1,-(A7)
00005F5E  4EB8 5B2A 10727          jsr       _toupper
00005F62  584F      10728          addq.w    #4,A7
00005F64  2042      10729          move.l    D2,A0
00005F66  1080      10730          move.b    D0,(A0)
00005F68  5282      10731          addq.l    #1,D2
00005F6A  60E2      10732          bra       doprint_54
                    10733   doprint_56:
00005F6C  7E00      10734          moveq     #0,D7
00005F6E  41EE FFD4 10735          lea       -44(A6),A0
00005F72  2408      10736          move.l    A0,D2
00005F74  206E 000C 10737          move.l    12(A6),A0
00005F78  1010      10738          move.b    (A0),D0
00005F7A  0C00 0064 10739          cmp.b     #100,D0
00005F7E  670E      10740          beq.s     doprint_59
00005F80  206E 000C 10741          move.l    12(A6),A0
00005F84  1010      10742          move.b    (A0),D0
00005F86  0C00 0069 10743          cmp.b     #105,D0
00005F8A  6600 0068 10744          bne       doprint_65
                    10745   doprint_59:
00005F8E  102E FFCE 10746          move.b    -50(A6),D0
00005F92  4880      10747          ext.w     D0
00005F94  48C0      10748          ext.l     D0
00005F96  4A80      10749          tst.l     D0
00005F98  660C      10750          bne.s     doprint_62
00005F9A  2043      10751          move.l    D3,A0
00005F9C  1010      10752          move.b    (A0),D0
00005F9E  0C00 002D 10753          cmp.b     #45,D0
00005FA2  6600 0028 10754          bne       doprint_60
                    10755   doprint_62:
00005FA6  2043      10756          move.l    D3,A0
00005FA8  1010      10757          move.b    (A0),D0
00005FAA  0C00 002D 10758          cmp.b     #45,D0
00005FAE  660E      10759          bne.s     doprint_63
00005FB0  2043      10760          move.l    D3,A0
00005FB2  5283      10761          addq.l    #1,D3
00005FB4  2242      10762          move.l    D2,A1
00005FB6  5282      10763          addq.l    #1,D2
00005FB8  1290      10764          move.b    (A0),(A1)
00005FBA  5304      10765          subq.b    #1,D4
00005FBC  6008      10766          bra.s     doprint_64
                    10767   doprint_63:
00005FBE  2042      10768          move.l    D2,A0
00005FC0  5282      10769          addq.l    #1,D2
00005FC2  10BC 002B 10770          move.b    #43,(A0)
                    10771   doprint_64:
00005FC6  5287      10772          addq.l    #1,D7
00005FC8  6000 002A 10773          bra       doprint_65
                    10774   doprint_60:
00005FCC  4A2E FFCF 10775          tst.b     -49(A6)
00005FD0  6722      10776          beq.s     doprint_65
00005FD2  2043      10777          move.l    D3,A0
00005FD4  1010      10778          move.b    (A0),D0
00005FD6  0C00 002D 10779          cmp.b     #45,D0
00005FDA  660E      10780          bne.s     doprint_67
00005FDC  2043      10781          move.l    D3,A0
00005FDE  5283      10782          addq.l    #1,D3
00005FE0  2242      10783          move.l    D2,A1
00005FE2  5282      10784          addq.l    #1,D2
00005FE4  1290      10785          move.b    (A0),(A1)
00005FE6  5304      10786          subq.b    #1,D4
00005FE8  6008      10787          bra.s     doprint_68
                    10788   doprint_67:
00005FEA  2042      10789          move.l    D2,A0
00005FEC  5282      10790          addq.l    #1,D2
00005FEE  10BC 0020 10791          move.b    #32,(A0)
                    10792   doprint_68:
00005FF2  5287      10793          addq.l    #1,D7
                    10794   doprint_65:
00005FF4  4A2E FFD0 10795          tst.b     -48(A6)
00005FF8  6700 005A 10796          beq       doprint_77
00005FFC  206E 000C 10797          move.l    12(A6),A0
00006000  1010      10798          move.b    (A0),D0
00006002  4880      10799          ext.w     D0
00006004  48C0      10800          ext.l     D0
00006006  0C80 0000 10801          cmp.l     #111,D0
0000600A  006F      
0000600C  671A      10802          beq.s     doprint_73
0000600E  6E0C      10803          bgt.s     doprint_76
00006010  0C80 0000 10804          cmp.l     #88,D0
00006014  0058      
00006016  6710      10805          beq.s     doprint_73
00006018  6000 003A 10806          bra       doprint_77
                    10807   doprint_76:
0000601C  0C80 0000 10808          cmp.l     #120,D0
00006020  0078      
00006022  6704      10809          beq.s     doprint_73
00006024  6000 002E 10810          bra       doprint_77
                    10811   doprint_73:
00006028  2042      10812          move.l    D2,A0
0000602A  5282      10813          addq.l    #1,D2
0000602C  10BC 0030 10814          move.b    #48,(A0)
00006030  5287      10815          addq.l    #1,D7
00006032  206E 000C 10816          move.l    12(A6),A0
00006036  1010      10817          move.b    (A0),D0
00006038  0C00 0078 10818          cmp.b     #120,D0
0000603C  670C      10819          beq.s     doprint_79
0000603E  206E 000C 10820          move.l    12(A6),A0
00006042  1010      10821          move.b    (A0),D0
00006044  0C00 0058 10822          cmp.b     #88,D0
00006048  660A      10823          bne.s     doprint_77
                    10824   doprint_79:
0000604A  2042      10825          move.l    D2,A0
0000604C  5282      10826          addq.l    #1,D2
0000604E  10BC 0078 10827          move.b    #120,(A0)
00006052  5287      10828          addq.l    #1,D7
                    10829   doprint_77:
00006054  2042      10830          move.l    D2,A0
00006056  4210      10831          clr.b     (A0)
00006058  206E 000C 10832          move.l    12(A6),A0
0000605C  1010      10833          move.b    (A0),D0
0000605E  4880      10834          ext.w     D0
00006060  48C0      10835          ext.l     D0
00006062  0C80 0000 10836          cmp.l     #105,D0
00006066  0069      
00006068  6700 0076 10837          beq       doprint_82
0000606C  6E42      10838          bgt.s     doprint_93
0000606E  0C80 0000 10839          cmp.l     #99,D0
00006072  0063      
00006074  6700 0084 10840          beq       doprint_96
00006078  6E1C      10841          bgt.s     doprint_94
0000607A  0C80 0000 10842          cmp.l     #88,D0
0000607E  0058      
00006080  6700 005E 10843          beq       doprint_82
00006084  6E00 0184 10844          bgt       doprint_80
00006088  0C80 0000 10845          cmp.l     #69,D0
0000608C  0045      
0000608E  6700 0050 10846          beq       doprint_82
00006092  6000 0176 10847          bra       doprint_80
                    10848   doprint_94:
00006096  0C80 0000 10849          cmp.l     #101,D0
0000609A  0065      
0000609C  6700 0042 10850          beq       doprint_82
000060A0  6E00 0168 10851          bgt       doprint_80
000060A4  0C80 0000 10852          cmp.l     #100,D0
000060A8  0064      
000060AA  6734      10853          beq.s     doprint_82
000060AC  6000 015C 10854          bra       doprint_80
                    10855   doprint_93:
000060B0  0C80 0000 10856          cmp.l     #117,D0
000060B4  0075      
000060B6  6728      10857          beq.s     doprint_82
000060B8  6E1A      10858          bgt.s     doprint_95
000060BA  0C80 0000 10859          cmp.l     #115,D0
000060BE  0073      
000060C0  6700 0038 10860          beq       doprint_96
000060C4  6E00 0144 10861          bgt       doprint_80
000060C8  0C80 0000 10862          cmp.l     #111,D0
000060CC  006F      
000060CE  6710      10863          beq.s     doprint_82
000060D0  6000 0138 10864          bra       doprint_80
                    10865   doprint_95:
000060D4  0C80 0000 10866          cmp.l     #120,D0
000060D8  0078      
000060DA  6704      10867          beq.s     doprint_82
000060DC  6000 012C 10868          bra       doprint_80
                    10869   doprint_82:
000060E0  4A2E FFD2 10870          tst.b     -46(A6)
000060E4  6714      10871          beq.s     doprint_96
000060E6  4A2E FFCD 10872          tst.b     -51(A6)
000060EA  660E      10873          bne.s     doprint_96
000060EC  200D      10874          move.l    A5,D0
000060EE  9087      10875          sub.l     D7,D0
000060F0  4884      10876          ext.w     D4
000060F2  48C4      10877          ext.l     D4
000060F4  9084      10878          sub.l     D4,D0
000060F6  2D40 FFFC 10879          move.l    D0,-4(A6)
                    10880   doprint_96:
000060FA  202E FFFC 10881          move.l    -4(A6),D0
000060FE  0C80 0000 10882          cmp.l     #0,D0
00006102  0000      
00006104  6C04      10883          bge.s     doprint_98
00006106  42AE FFFC 10884          clr.l     -4(A6)
                    10885   doprint_98:
0000610A  4A2E FFCD 10886          tst.b     -51(A6)
0000610E  6600 0030 10887          bne       doprint_104
00006112  1004      10888          move.b    D4,D0
00006114  4880      10889          ext.w     D0
00006116  48C0      10890          ext.l     D0
00006118  D0AE FFFC 10891          add.l     -4(A6),D0
0000611C  D087      10892          add.l     D7,D0
0000611E  1D40 FFD1 10893          move.b    D0,-47(A6)
                    10894   doprint_102:
00006122  102E FFD1 10895          move.b    -47(A6),D0
00006126  4880      10896          ext.w     D0
00006128  48C0      10897          ext.l     D0
0000612A  220D      10898          move.l    A5,D1
0000612C  534D      10899          subq.w    #1,A5
0000612E  B081      10900          cmp.l     D1,D0
00006130  6C0E      10901          bge.s     doprint_104
00006132  4878 0020 10902          pea       32
00006136  2F0A      10903          move.l    A2,-(A7)
00006138  4E93      10904          jsr       (A3)
0000613A  504F      10905          addq.w    #8,A7
0000613C  5286      10906          addq.l    #1,D6
0000613E  60E2      10907          bra       doprint_102
                    10908   doprint_104:
00006140  41EE FFD4 10909          lea       -44(A6),A0
00006144  2408      10910          move.l    A0,D2
                    10911   doprint_105:
00006146  2042      10912          move.l    D2,A0
00006148  4A10      10913          tst.b     (A0)
0000614A  6716      10914          beq.s     doprint_107
0000614C  2042      10915          move.l    D2,A0
0000614E  5282      10916          addq.l    #1,D2
00006150  1210      10917          move.b    (A0),D1
00006152  4881      10918          ext.w     D1
00006154  48C1      10919          ext.l     D1
00006156  2F01      10920          move.l    D1,-(A7)
00006158  2F0A      10921          move.l    A2,-(A7)
0000615A  4E93      10922          jsr       (A3)
0000615C  504F      10923          addq.w    #8,A7
0000615E  5286      10924          addq.l    #1,D6
00006160  60E4      10925          bra       doprint_105
                    10926   doprint_107:
00006162  202E FFFC 10927          move.l    -4(A6),D0
00006166  1D40 FFD1 10928          move.b    D0,-47(A6)
                    10929   doprint_108:
0000616A  102E FFD1 10930          move.b    -47(A6),D0
0000616E  532E FFD1 10931          subq.b    #1,-47(A6)
00006172  4A00      10932          tst.b     D0
00006174  670E      10933          beq.s     doprint_110
00006176  4878 0030 10934          pea       48
0000617A  2F0A      10935          move.l    A2,-(A7)
0000617C  4E93      10936          jsr       (A3)
0000617E  504F      10937          addq.w    #8,A7
00006180  5286      10938          addq.l    #1,D6
00006182  60E6      10939          bra       doprint_108
                    10940   doprint_110:
00006184  2043      10941          move.l    D3,A0
00006186  4A10      10942          tst.b     (A0)
00006188  6700 0048 10943          beq       doprint_113
0000618C  206E 000C 10944          move.l    12(A6),A0
00006190  1010      10945          move.b    (A0),D0
00006192  4880      10946          ext.w     D0
00006194  48C0      10947          ext.l     D0
00006196  0C80 0000 10948          cmp.l     #115,D0
0000619A  0073      
0000619C  670C      10949          beq.s     doprint_116
0000619E  6E18      10950          bgt.s     doprint_119
000061A0  0C80 0000 10951          cmp.l     #99,D0
000061A4  0063      
000061A6  6702      10952          beq.s     doprint_116
000061A8  600E      10953          bra.s     doprint_119
                    10954   doprint_116:
000061AA  2005      10955          move.l    D5,D0
000061AC  5385      10956          subq.l    #1,D5
000061AE  0C80 0000 10957          cmp.l     #0,D0
000061B2  0000      
000061B4  6E02      10958          bgt.s     doprint_119
000061B6  6016      10959          bra.s     doprint_115
                    10960   doprint_119:
000061B8  2043      10961          move.l    D3,A0
000061BA  5283      10962          addq.l    #1,D3
000061BC  1210      10963          move.b    (A0),D1
000061BE  4881      10964          ext.w     D1
000061C0  48C1      10965          ext.l     D1
000061C2  2F01      10966          move.l    D1,-(A7)
000061C4  2F0A      10967          move.l    A2,-(A7)
000061C6  4E93      10968          jsr       (A3)
000061C8  504F      10969          addq.w    #8,A7
000061CA  5286      10970          addq.l    #1,D6
000061CC  6002      10971          bra.s     doprint_112
                    10972   doprint_115:
000061CE  6002      10973          bra.s     doprint_113
                    10974   doprint_112:
000061D0  60B2      10975          bra       doprint_110
                    10976   doprint_113:
000061D2  4A2E FFCD 10977          tst.b     -51(A6)
000061D6  6700 0030 10978          beq       doprint_125
000061DA  1004      10979          move.b    D4,D0
000061DC  4880      10980          ext.w     D0
000061DE  48C0      10981          ext.l     D0
000061E0  D0AE FFFC 10982          add.l     -4(A6),D0
000061E4  D087      10983          add.l     D7,D0
000061E6  1D40 FFD1 10984          move.b    D0,-47(A6)
                    10985   doprint_123:
000061EA  102E FFD1 10986          move.b    -47(A6),D0
000061EE  4880      10987          ext.w     D0
000061F0  48C0      10988          ext.l     D0
000061F2  220D      10989          move.l    A5,D1
000061F4  534D      10990          subq.w    #1,A5
000061F6  B081      10991          cmp.l     D1,D0
000061F8  6C0E      10992          bge.s     doprint_125
000061FA  4878 0020 10993          pea       32
000061FE  2F0A      10994          move.l    A2,-(A7)
00006200  4E93      10995          jsr       (A3)
00006202  504F      10996          addq.w    #8,A7
00006204  5386      10997          subq.l    #1,D6
00006206  60E2      10998          bra       doprint_123
                    10999   doprint_125:
00006208  6014      11000          bra.s     doprint_81
                    11001   doprint_80:
0000620A  206E 000C 11002          move.l    12(A6),A0
0000620E  1210      11003          move.b    (A0),D1
00006210  4881      11004          ext.w     D1
00006212  48C1      11005          ext.l     D1
00006214  2F01      11006          move.l    D1,-(A7)
00006216  2F0A      11007          move.l    A2,-(A7)
00006218  4E93      11008          jsr       (A3)
0000621A  504F      11009          addq.w    #8,A7
0000621C  5286      11010          addq.l    #1,D6
                    11011   doprint_81:
0000621E  52AE 000C 11012          addq.l    #1,12(A6)
                    11013   doprint_2:
00006222  6000 FA10 11014          bra       doprint_1
                    11015   doprint_3:
00006226  4A92      11016          tst.l     (A2)
00006228  6710      11017          beq.s     doprint_126
0000622A  4201      11018          clr.b     D1
0000622C  C2BC 0000 11019          and.l     #255,D1
00006230  00FF      
00006232  2F01      11020          move.l    D1,-(A7)
00006234  2F0A      11021          move.l    A2,-(A7)
00006236  4E93      11022          jsr       (A3)
00006238  504F      11023          addq.w    #8,A7
                    11024   doprint_126:
0000623A  2006      11025          move.l    D6,D0
0000623C  4CDF 3CFC 11026          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00006240  4E5E      11027          unlk      A6
00006242  4E75      11028          rts
                    11029   @itoa_convert:
00006244  4E56 0000 11030          link      A6,#0
00006248  48E7 3C00 11031          movem.l   D2/D3/D4/D5,-(A7)
0000624C  242E 0008 11032          move.l    8(A6),D2
00006250  262E 0010 11033          move.l    16(A6),D3
00006254  2A2E 000C 11034          move.l    12(A6),D5
00006258  2F05      11035          move.l    D5,-(A7)
0000625A  2F03      11036          move.l    D3,-(A7)
0000625C  4EB8 5984 11037          jsr       ULDIV
00006260  202F 0004 11038          move.l    4(A7),D0
00006264  504F      11039          addq.w    #8,A7
00006266  2800      11040          move.l    D0,D4
00006268  BA83      11041          cmp.l     D3,D5
0000626A  651C      11042          blo.s     @itoa_convert_1
0000626C  2F03      11043          move.l    D3,-(A7)
0000626E  2F05      11044          move.l    D5,-(A7)
00006270  2F03      11045          move.l    D3,-(A7)
00006272  4EB8 5984 11046          jsr       ULDIV
00006276  2217      11047          move.l    (A7),D1
00006278  504F      11048          addq.w    #8,A7
0000627A  2F01      11049          move.l    D1,-(A7)
0000627C  2F02      11050          move.l    D2,-(A7)
0000627E  4EB8 6244 11051          jsr       @itoa_convert
00006282  DEFC 000C 11052          add.w     #12,A7
00006286  2400      11053          move.l    D0,D2
                    11054   @itoa_convert_1:
00006288  0C84 0000 11055          cmp.l     #9,D4
0000628C  0009      
0000628E  6E0E      11056          bgt.s     @itoa_convert_3
00006290  2004      11057          move.l    D4,D0
00006292  7230      11058          moveq     #48,D1
00006294  C2BC 0000 11059          and.l     #255,D1
00006298  00FF      
0000629A  D081      11060          add.l     D1,D0
0000629C  6012      11061          bra.s     @itoa_convert_4
                    11062   @itoa_convert_3:
0000629E  2004      11063          move.l    D4,D0
000062A0  7261      11064          moveq     #97,D1
000062A2  C2BC 0000 11065          and.l     #255,D1
000062A6  00FF      
000062A8  D081      11066          add.l     D1,D0
000062AA  0480 0000 11067          sub.l     #10,D0
000062AE  000A      
                    11068   @itoa_convert_4:
000062B0  2042      11069          move.l    D2,A0
000062B2  1080      11070          move.b    D0,(A0)
000062B4  2002      11071          move.l    D2,D0
000062B6  5280      11072          addq.l    #1,D0
000062B8  4CDF 003C 11073          movem.l   (A7)+,D2/D3/D4/D5
000062BC  4E5E      11074          unlk      A6
000062BE  4E75      11075          rts
                    11076   _ltoa:
000062C0  4E56 0000 11077          link      A6,#0
000062C4  48E7 3C00 11078          movem.l   D2/D3/D4/D5,-(A7)
000062C8  242E 0008 11079          move.l    8(A6),D2
000062CC  262E 000C 11080          move.l    12(A6),D3
000062D0  2A2E 0010 11081          move.l    16(A6),D5
000062D4  2803      11082          move.l    D3,D4
000062D6  0C85 0000 11083          cmp.l     #2,D5
000062DA  0002      
000062DC  6D08      11084          blt.s     ltoa_3
000062DE  0C85 0000 11085          cmp.l     #36,D5
000062E2  0024      
000062E4  6F06      11086          ble.s     ltoa_1
                    11087   ltoa_3:
000062E6  2003      11088          move.l    D3,D0
000062E8  6000 0052 11089          bra       ltoa_4
                    11090   ltoa_1:
000062EC  0C85 0000 11091          cmp.l     #10,D5
000062F0  000A      
000062F2  6600 0032 11092          bne       ltoa_5
000062F6  0C82 0000 11093          cmp.l     #0,D2
000062FA  0000      
000062FC  6C28      11094          bge.s     ltoa_5
000062FE  2002      11095          move.l    D2,D0
00006300  4480      11096          neg.l     D0
00006302  2400      11097          move.l    D0,D2
00006304  0C82 0000 11098          cmp.l     #0,D2
00006308  0000      
0000630A  6C12      11099          bge.s     ltoa_7
0000630C  4879 0000 11100          pea       @itoa_1.L
00006310  7BE2      
00006312  2F03      11101          move.l    D3,-(A7)
00006314  4EB8 5974 11102          jsr       _strcpy
00006318  504F      11103          addq.w    #8,A7
0000631A  2003      11104          move.l    D3,D0
0000631C  601E      11105          bra.s     ltoa_4
                    11106   ltoa_7:
0000631E  2044      11107          move.l    D4,A0
00006320  5284      11108          addq.l    #1,D4
00006322  10BC 002D 11109          move.b    #45,(A0)
                    11110   ltoa_5:
00006326  2F05      11111          move.l    D5,-(A7)
00006328  2F02      11112          move.l    D2,-(A7)
0000632A  2F04      11113          move.l    D4,-(A7)
0000632C  4EB8 6244 11114          jsr       @itoa_convert
00006330  DEFC 000C 11115          add.w     #12,A7
00006334  2800      11116          move.l    D0,D4
00006336  2044      11117          move.l    D4,A0
00006338  4210      11118          clr.b     (A0)
0000633A  2003      11119          move.l    D3,D0
                    11120   ltoa_4:
0000633C  4CDF 003C 11121          movem.l   (A7)+,D2/D3/D4/D5
00006340  4E5E      11122          unlk      A6
00006342  4E75      11123          rts
                    11124   _ultoa:
00006344  4E56 0000 11125          link      A6,#0
00006348  48E7 3800 11126          movem.l   D2/D3/D4,-(A7)
0000634C  262E 0010 11127          move.l    16(A6),D3
00006350  282E 000C 11128          move.l    12(A6),D4
00006354  2404      11129          move.l    D4,D2
00006356  0C83 0000 11130          cmp.l     #2,D3
0000635A  0002      
0000635C  6D08      11131          blt.s     ultoa_3
0000635E  0C83 0000 11132          cmp.l     #36,D3
00006362  0024      
00006364  6F04      11133          ble.s     ultoa_1
                    11134   ultoa_3:
00006366  2004      11135          move.l    D4,D0
00006368  6018      11136          bra.s     ultoa_4
                    11137   ultoa_1:
0000636A  2F03      11138          move.l    D3,-(A7)
0000636C  2F2E 0008 11139          move.l    8(A6),-(A7)
00006370  2F02      11140          move.l    D2,-(A7)
00006372  4EB8 6244 11141          jsr       @itoa_convert
00006376  DEFC 000C 11142          add.w     #12,A7
0000637A  2400      11143          move.l    D0,D2
0000637C  2042      11144          move.l    D2,A0
0000637E  4210      11145          clr.b     (A0)
00006380  2004      11146          move.l    D4,D0
                    11147   ultoa_4:
00006382  4CDF 001C 11148          movem.l   (A7)+,D2/D3/D4
00006386  4E5E      11149          unlk      A6
00006388  4E75      11150          rts
                    11151   _itoa:
0000638A  4E56 0000 11152          link      A6,#0
0000638E  2F2E 0010 11153          move.l    16(A6),-(A7)
00006392  2F2E 000C 11154          move.l    12(A6),-(A7)
00006396  2F2E 0008 11155          move.l    8(A6),-(A7)
0000639A  4EB8 62C0 11156          jsr       _ltoa
0000639E  DEFC 000C 11157          add.w     #12,A7
000063A2  4E5E      11158          unlk      A6
000063A4  4E75      11159          rts
                    11160   ULMUL:
000063A6  4E56 0000 11161          link    A6,#0
000063AA  48E7 C000 11162          movem.l D0/D1,-(A7)
000063AE  222E 0008 11163          move.l  8(A6),D1
000063B2  202E 000C 11164          move.l  12(A6),D0
000063B6  602C      11165          bra.s   lmul_3
                    11166   LMUL:
000063B8  4E56 0000 11167          link    A6,#0
000063BC  48E7 C000 11168          movem.l D0/D1,-(A7)
000063C0  222E 0008 11169          move.l  8(A6),D1
000063C4  202E 000C 11170          move.l  12(A6),D0
000063C8  4A80      11171          tst.l   D0
000063CA  6A0A      11172          bpl.s   lmul_1
000063CC  4480      11173          neg.l   D0
000063CE  4A81      11174          tst.l   D1
000063D0  6A0A      11175          bpl.s   lmul_2
000063D2  4481      11176          neg.l   D1
000063D4  600E      11177          bra.s   lmul_3
                    11178   lmul_1:
000063D6  4A81      11179          tst.l   D1
000063D8  6A0A      11180          bpl.s   lmul_3
000063DA  4481      11181          neg.l   D1
                    11182   lmul_2:
000063DC  6114      11183          bsr.s   domul
000063DE  4481      11184          neg.l   D1
000063E0  4080      11185          negx.l  D0
000063E2  6002      11186          bra.s   lmul_4
                    11187   lmul_3:
000063E4  610C      11188          bsr.s   domul
                    11189   lmul_4:
000063E6  2D41 0008 11190          move.l  D1,8(A6)
000063EA  4CDF 0003 11191          movem.l (A7)+,D0/D1
000063EE  4E5E      11192          unlk    A6
000063F0  4E75      11193          rts
                    11194   domul:
000063F2  0C81 0000 11195          cmpi.l  #$FFFF,D1
000063F6  FFFF      
000063F8  620C      11196          bhi.s   domul_1
000063FA  0C80 0000 11197          cmpi.l  #$FFFF,D0
000063FE  FFFF      
00006400  620E      11198          bhi.s   domul_2
00006402  C2C0      11199          mulu    D0,D1
00006404  4E75      11200          rts
                    11201   domul_1:
00006406  0C80 0000 11202          cmpi.l  #$FFFF,D0
0000640A  FFFF      
0000640C  6218      11203          bhi.s   domul_4
0000640E  6002      11204          bra.s   domul_3
                    11205   domul_2
00006410  C141      11206          exg     D0,D1
                    11207   domul_3:
00006412  2F02      11208          move.l  D2,-(A7)
00006414  2401      11209          move.l  D1,D2
00006416  4842      11210          swap    D2
00006418  C2C0      11211          mulu    D0,D1
0000641A  C4C0      11212          mulu    D0,D2
0000641C  4842      11213          swap    D2
0000641E  4242      11214          clr.w   D2
00006420  D282      11215          add.l   D2,D1
00006422  241F      11216          move.l  (A7)+,D2
00006424  4E75      11217          rts
                    11218   domul_4:
00006426  48E7 3000 11219          movem.l D2/D3,-(A7)
0000642A  2401      11220          move.l  D1,D2
0000642C  2601      11221          move.l  D1,D3
0000642E  C2C0      11222          mulu    D0,D1
00006430  4842      11223          swap    D2
00006432  C4C0      11224          mulu    D0,D2
00006434  4840      11225          swap    D0
00006436  C6C0      11226          mulu    D0,D3
00006438  D483      11227          add.l   D3,D2
0000643A  4842      11228          swap    D2
0000643C  4242      11229          clr.w   D2
0000643E  D282      11230          add.l   D2,D1
00006440  4CDF 000C 11231          movem.l (A7)+,D2/D3
00006444  4E75      11232          rts
                    11233   _strlen:
00006446  206F 0004 11234          move.l    (4,A7),A0
0000644A  2248      11235          move.l    A0,A1
                    11236   strlen_1:
0000644C  4A19      11237          tst.b     (A1)+
0000644E  66FC      11238          bne       strlen_1
00006450  2009      11239          move.l    A1,D0
00006452  9088      11240          sub.l     A0,D0
00006454  5380      11241          subq.l    #1,D0
00006456  4E75      11242          rts
                    11243          section   const
                    11244   
                    11245   @m68kde~1_1:
00006458  0D0A 00   11246          dc.b      13,10,0
                    11247   @m68kde~1_2:
0000645C  0D53 7769 11248          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00006460  7463 6865 
00006464  7320 5357 
00006468  5B        
00006469  372D 305D 11249          dc.b      55,45,48,93,32,61,32,0
0000646D  203D 2000 
                    11250   @m68kde~1_3:
00006472  3000      11251          dc.b      48,0
                    11252   @m68kde~1_4:
00006474  3100      11253          dc.b      49,0
                    11254   @m68kde~1_5:
00006476  0D0A 456E 11255          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
0000647A  7465 7220 
0000647E  5374 6172 
00006482  74        
00006483  2041 6464 11256          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006487  7265 7373 
0000648B  3A20 00   
                    11257   @m68kde~1_6:
0000648E  0D0A 3C45 11258          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
00006492  5343 3E20 
00006496  3D20 4162 
0000649A  6F72      
0000649C  742C 2053 11259          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
000064A0  5041 4345 
000064A4  2074 6F20 
000064A8  436F      
000064AA  6E74 696E 11260          dc.b      110,116,105,110,117,101,0
000064AE  7565 00   
                    11261   @m68kde~1_7:
000064B2  0D0A 2530 11262          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
000064B6  3858 2020 
000064BA  2530 3458 
000064BE  2020 20   
000064C1  2020 2020 11263          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
000064C5  2020 2020 
000064C9  2020 2020 
000064CD  2020 20   
000064D0  2020 2020 11264          dc.b      32,32,32,32,32,32,37,115,0
000064D4  2020 2573 
000064D8  00        
                    11265   @m68kde~1_8:
000064DA  0D0A 2530 11266          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
000064DE  3858 2020 
000064E2  2530 3458 
000064E6  2025 30   
000064E9  3458 2020 11267          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
000064ED  2020 2020 
000064F1  2020 2020 
000064F5  2020 20   
000064F8  2020 2020 11268          dc.b      32,32,32,32,32,32,37,115,0
000064FC  2020 2573 
00006500  00        
                    11269   @m68kde~1_9:
00006502  0D0A 2530 11270          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006506  3858 2020 
0000650A  2530 3458 
0000650E  2025 30   
00006511  3458 2025 11271          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
00006515  3034 5820 
00006519  2020 2020 
0000651D  2020 20   
00006520  2020 2020 11272          dc.b      32,32,32,32,32,32,37,115,0
00006524  2020 2573 
00006528  00        
                    11273   @m68kde~1_10:
0000652A  0D0A 2530 11274          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
0000652E  3858 2020 
00006532  2530 3458 
00006536  2025 30   
00006539  3458 2025 11275          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
0000653D  3034 5820 
00006541  2530 3458 
00006545  2020 20   
00006548  2020 2020 11276          dc.b      32,32,32,32,32,32,37,115,0
0000654C  2020 2573 
00006550  00        
                    11277   @m68kde~1_11:
00006552  0D0A 2530 11278          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006556  3858 2020 
0000655A  2530 3458 
0000655E  2025 30   
00006561  3458 2025 11279          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
00006565  3034 5820 
00006569  2530 3458 
0000656D  2025 30   
00006570  3458 2020 11280          dc.b      52,88,32,32,32,32,37,115,0
00006574  2020 2573 
00006578  00        
                    11281   @m68kde~1_12:
0000657A  0D0A 4475 11282          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000657E  6D70 204D 
00006582  656D 6F72 
00006586  79        
00006587  2042 6C6F 11283          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
0000658B  636B 3A20 
0000658F  3C45 5343 
00006593  3E20      
00006595  746F 2041 11284          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00006599  626F 7274 
0000659D  2C20 3C53 
000065A1  50        
000065A2  4143 453E 11285          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000065A6  2074 6F20 
000065AA  436F 6E74 
000065AE  69        
000065AF  6E75 6500 11286          dc.b      110,117,101,0
                    11287   @m68kde~1_13:
000065B4  0D0A 2530 11288          dc.b      13,10,37,48,56,120,32,0
000065B8  3878 2000 
                    11289   @m68kde~1_14:
000065BC  2530 3258 11290          dc.b      37,48,50,88,0
000065C0  00        
                    11291   @m68kde~1_15:
000065C2  2020 00   11292          dc.b      32,32,0
                    11293   @m68kde~1_16:
000065C6  0D0A 4669 11294          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
000065CA  6C6C 204D 
000065CE  656D 6F72 
000065D2  79        
000065D3  2042 6C6F 11295          dc.b      32,66,108,111,99,107,0
000065D7  636B 00   
                    11296   @m68kde~1_17:
000065DA  0D0A 456E 11297          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000065DE  7465 7220 
000065E2  456E 6420 
000065E6  41        
000065E7  6464 7265 11298          dc.b      100,100,114,101,115,115,58,32,0
000065EB  7373 3A20 
000065EF  00        
                    11299   @m68kde~1_18:
000065F0  0D0A 456E 11300          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000065F4  7465 7220 
000065F8  4669 6C6C 
000065FC  20        
000065FD  4461 7461 11301          dc.b      68,97,116,97,58,32,0
00006601  3A20 00   
                    11302   @m68kde~1_19:
00006604  0D0A 4669 11303          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00006608  6C6C 696E 
0000660C  6720 4164 
00006610  64        
00006611  7265 7373 11304          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00006615  6573 205B 
00006619  2425 3038 
0000661D  58        
0000661E  202D 2024 11305          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00006622  2530 3858 
00006626  5D20 7769 
0000662A  7468      
0000662C  2024 2530 11306          dc.b      32,36,37,48,50,88,0
00006630  3258 00   
                    11307   @m68kde~1_20:
00006634  0D0A 5573 11308          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00006638  6520 4879 
0000663C  7065 7254 
00006640  65        
00006641  726D 696E 11309          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00006645  616C 2074 
00006649  6F20 5365 
0000664D  6E64 2054 11310          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00006651  6578 7420 
00006655  4669 6C65 
00006659  2028 2E68 11311          dc.b      32,40,46,104,101,120,41,13,10,0
0000665D  6578 290D 
00006661  0A00      
                    11312   @m68kde~1_21:
00006664  0D0A 4C6F 11313          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00006668  6164 2046 
0000666C  6169 6C65 
00006670  64        
00006671  2061 7420 11314          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00006675  4164 6472 
00006679  6573 7320 
0000667D  3D        
0000667E  205B 2425 11315          dc.b      32,91,36,37,48,56,88,93,13,10,0
00006682  3038 585D 
00006686  0D0A 00   
                    11316   @m68kde~1_22:
0000668A  0D0A 5375 11317          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
0000668E  6363 6573 
00006692  733A 2044 
00006696  6F        
00006697  776E 6C6F 11318          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000669B  6164 6564 
0000669F  2025 6420 
000066A3  6279 7465 11319          dc.b      98,121,116,101,115,13,10,0
000066A7  730D 0A00 
                    11320   @m68kde~1_23:
000066AC  0D0A 4578 11321          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
000066B0  616D 696E 
000066B4  6520 616E 
000066B8  64        
000066B9  2043 6861 11322          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
000066BD  6E67 6520 
000066C1  4D65 6D6F 
000066C5  72        
000066C6  7900      11323          dc.b      121,0
                    11324   @m68kde~1_24:
000066C8  0D0A 3C45 11325          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
000066CC  5343 3E20 
000066D0  746F 2053 
000066D4  746F      
000066D6  702C 203C 11326          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000066DA  5350 4143 
000066DE  453E 2074 
000066E2  6F20      
000066E4  4164 7661 11327          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000066E8  6E63 652C 
000066EC  2027 2D27 
000066F0  2074      
000066F2  6F20 476F 11328          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000066F6  2042 6163 
000066FA  6B2C 203C 
000066FE  4441      
00006700  5441 3E20 11329          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00006704  746F 2063 
00006708  6861 6E67 
0000670C  65        
0000670D  00        11330          dc.b      0
                    11331   @m68kde~1_25:
0000670E  0D0A 456E 11332          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00006712  7465 7220 
00006716  4164 6472 
0000671A  65        
0000671B  7373 3A20 11333          dc.b      115,115,58,32,0
0000671F  00        
                    11334   @m68kde~1_26:
00006720  0D0A 5B25 11335          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00006724  3038 785D 
00006728  203A 2025 
0000672C  3032 78   
0000672F  2020 00   11336          dc.b      32,32,0
                    11337   @m68kde~1_27:
00006732  0D0A 5761 11338          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00006736  726E 696E 
0000673A  6720 4368 
0000673E  61        
0000673F  6E67 6520 11339          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00006743  4661 696C 
00006747  6564 3A20 
0000674B  57        
0000674C  726F 7465 11340          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00006750  205B 2530 
00006754  3278 5D2C 
00006758  20        
00006759  5265 6164 11341          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
0000675D  205B 2530 
00006761  3278 5D00 
                    11342   @m68kde~1_28:
00006766  0D0A 5275 11343          dc.b      13,10,82,117,110,110,105,110,103,32,80,114,111
0000676A  6E6E 696E 
0000676E  6720 5072 
00006772  6F        
00006773  6772 616D 11344          dc.b      103,114,97,109,70,108,97,115,104,67,104,105
00006777  466C 6173 
0000677B  6843 6869 
0000677F  702E 2E2E 11345          dc.b      112,46,46,46,46,0
00006783  2E00      
                    11346   @m68kde~1_29:
00006786  0D0A 5072 11347          dc.b      13,10,80,114,111,103,114,97,109,70,108,97,115
0000678A  6F67 7261 
0000678E  6D46 6C61 
00006792  73        
00006793  6843 6869 11348          dc.b      104,67,104,105,112,40,41,32,67,111,109,112,108
00006797  7028 2920 
0000679B  436F 6D70 
0000679F  6C        
000067A0  6574 6564 11349          dc.b      101,116,101,100,33,0
000067A4  2100      
                    11350   @m68kde~1_30:
000067A6  0D0A 5275 11351          dc.b      13,10,82,117,110,110,105,110,103,32,70,108,97
000067AA  6E6E 696E 
000067AE  6720 466C 
000067B2  61        
000067B3  7368 4368 11352          dc.b      115,104,67,104,105,112,77,101,109,111,114,121
000067B7  6970 4D65 
000067BB  6D6F 7279 
000067BF  5465 7374 11353          dc.b      84,101,115,116,46,46,46,46,0
000067C3  2E2E 2E2E 
000067C7  00        
                    11354   @m68kde~1_31:
000067C8  0D0A 2046 11355          dc.b      13,10,32,70,108,97,115,104,32,67,104,105,112
000067CC  6C61 7368 
000067D0  2043 6869 
000067D4  70        
000067D5  204D 656D 11356          dc.b      32,77,101,109,111,114,121,32,84,101,115,116
000067D9  6F72 7920 
000067DD  5465 7374 
000067E1  2046 6169 11357          dc.b      32,70,97,105,108,101,100,33,0
000067E5  6C65 6421 
000067E9  00        
                    11358   @m68kde~1_32:
000067EA  0D0A 2046 11359          dc.b      13,10,32,70,97,105,108,101,100,32,97,116,32
000067EE  6169 6C65 
000067F2  6420 6174 
000067F6  20        
000067F7  2564 7468 11360          dc.b      37,100,116,104,32,66,121,116,101,33,0
000067FB  2042 7974 
000067FF  6521 00   
                    11361   @m68kde~1_33:
00006802  0D0A 466C 11362          dc.b      13,10,70,108,97,115,104,32,67,104,105,112,32
00006806  6173 6820 
0000680A  4368 6970 
0000680E  20        
0000680F  4D65 6D6F 11363          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
00006813  7279 2054 
00006817  6573 7420 
0000681B  5375 6363 11364          dc.b      83,117,99,99,101,115,115,102,117,108,33,0
0000681F  6573 7366 
00006823  756C 2100 
                    11365   @m68kde~1_34:
00006828  0D0A 4C6F 11366          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
0000682C  6164 696E 
00006830  6720 5072 
00006834  6F        
00006835  6772 616D 11367          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00006839  2046 726F 
0000683D  6D20 5350 
00006841  49        
00006842  2046 6C61 11368          dc.b      32,70,108,97,115,104,46,46,46,46,0
00006846  7368 2E2E 
0000684A  2E2E 00   
                    11369   @m68kde~1_35:
0000684E  0D0A 4C6F 11370          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00006852  6164 696E 
00006856  6720 5072 
0000685A  6F        
0000685B  6772 616D 11371          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
0000685F  2046 726F 
00006863  6D20 5350 
00006867  49        
00006868  2046 6C61 11372          dc.b      32,70,108,97,115,104,32,83,117,99,99,101,115
0000686C  7368 2053 
00006870  7563 6365 
00006874  73        
00006875  7366 756C 11373          dc.b      115,102,117,108,33,0
00006879  2100      
                    11374   @m68kde~1_36:
0000687C  2425 3038 11375          dc.b      36,37,48,56,88,32,32,0
00006880  5820 2000 
                    11376   @m68kde~1_37:
00006884  2000      11377          dc.b      32,0
                    11378   @m68kde~1_38:
00006886  2E00      11379          dc.b      46,0
                    11380   @m68kde~1_39:
00006888  2563 00   11381          dc.b      37,99,0
                    11382   @m68kde~1_40:
0000688C  00        11383          dc.b      0
                    11384   @m68kde~1_41:
0000688E  0D0A 0D0A 11385          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00006892  2044 3020 
00006896  3D20 2425 
0000689A  3038 58   
0000689D  2020 4130 11386          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000068A1  203D 2024 
000068A5  2530 3858 
000068A9  00        
                    11387   @m68kde~1_42:
000068AA  0D0A 2044 11388          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000068AE  3120 3D20 
000068B2  2425 3038 
000068B6  5820 20   
000068B9  4131 203D 11389          dc.b      65,49,32,61,32,36,37,48,56,88,0
000068BD  2024 2530 
000068C1  3858 00   
                    11390   @m68kde~1_43:
000068C4  0D0A 2044 11391          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000068C8  3220 3D20 
000068CC  2425 3038 
000068D0  5820 20   
000068D3  4132 203D 11392          dc.b      65,50,32,61,32,36,37,48,56,88,0
000068D7  2024 2530 
000068DB  3858 00   
                    11393   @m68kde~1_44:
000068DE  0D0A 2044 11394          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000068E2  3320 3D20 
000068E6  2425 3038 
000068EA  5820 20   
000068ED  4133 203D 11395          dc.b      65,51,32,61,32,36,37,48,56,88,0
000068F1  2024 2530 
000068F5  3858 00   
                    11396   @m68kde~1_45:
000068F8  0D0A 2044 11397          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000068FC  3420 3D20 
00006900  2425 3038 
00006904  5820 20   
00006907  4134 203D 11398          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000690B  2024 2530 
0000690F  3858 00   
                    11399   @m68kde~1_46:
00006912  0D0A 2044 11400          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00006916  3520 3D20 
0000691A  2425 3038 
0000691E  5820 20   
00006921  4135 203D 11401          dc.b      65,53,32,61,32,36,37,48,56,88,0
00006925  2024 2530 
00006929  3858 00   
                    11402   @m68kde~1_47:
0000692C  0D0A 2044 11403          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00006930  3620 3D20 
00006934  2425 3038 
00006938  5820 20   
0000693B  4136 203D 11404          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000693F  2024 2530 
00006943  3858 00   
                    11405   @m68kde~1_48:
00006946  0D0A 2044 11406          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
0000694A  3720 3D20 
0000694E  2425 3038 
00006952  5820 20   
00006955  4137 203D 11407          dc.b      65,55,32,61,32,36,37,48,56,88,0
00006959  2024 2530 
0000695D  3858 00   
                    11408   @m68kde~1_49:
00006960  0D0A 0D0A 11409          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00006964  5553 5020 
00006968  3D20 2425 
0000696C  3038 58   
0000696F  2020 2841 11410          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00006973  3729 2055 
00006977  7365 7220 
0000697B  5350      
0000697D  00        11411          dc.b      0
                    11412   @m68kde~1_50:
0000697E  0D0A 5353 11413          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00006982  5020 3D20 
00006986  2425 3038 
0000698A  5820 20   
0000698D  2841 3729 11414          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00006991  2053 7570 
00006995  6572 7669 
00006999  73        
0000699A  6F72 2053 11415          dc.b      111,114,32,83,80,0
0000699E  5000      
                    11416   @m68kde~1_51:
000069A0  0D0A 2053 11417          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000069A4  5220 3D20 
000069A8  2425 3034 
000069AC  5820 20   
000069AF  2000      11418          dc.b      32,0
                    11419   @m68kde~1_52:
000069B2  2020 205B 11420          dc.b      32,32,32,91,0
000069B6  00        
                    11421   @m68kde~1_53:
000069B8  0D0A 2050 11422          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000069BC  4320 3D20 
000069C0  2425 3038 
000069C4  5820 20   
000069C7  00        11423          dc.b      0
                    11424   @m68kde~1_54:
000069C8  2573 00   11425          dc.b      37,115,0
                    11426   @m68kde~1_55:
000069CC  5B42 5245 11427          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
000069D0  414B 504F 
000069D4  494E 545D 
000069D8  00        
                    11428   @m68kde~1_56:
000069DA  0D0A 5750 11429          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000069DE  2564 203D 
000069E2  2025 7300 
                    11430   @m68kde~1_57:
000069E6  0D0A 0D0A 11431          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000069EA  0D0A 0D0A 
000069EE  0D0A 0D0A 
000069F2  5369 6E   
000069F5  676C 6520 11432          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000069F9  5374 6570 
000069FD  2020 3A5B 
00006A01  4F        
00006A02  4E5D 00   11433          dc.b      78,93,0
                    11434   @m68kde~1_58:
00006A06  0D0A 4272 11435          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006A0A  6561 6B20 
00006A0E  506F 696E 
00006A12  74        
00006A13  7320 3A5B 11436          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00006A17  4469 7361 
00006A1B  626C 6564 
00006A1F  5D        
00006A20  00        11437          dc.b      0
                    11438   @m68kde~1_59:
00006A22  0D0A 5072 11439          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00006A26  6573 7320 
00006A2A  3C53 5041 
00006A2E  4345      
00006A30  3E20 746F 11440          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00006A34  2045 7865 
00006A38  6375 7465 
00006A3C  20        
00006A3D  4E65 7874 11441          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00006A41  2049 6E73 
00006A45  7472 7563 
00006A49  7469 6F6E 11442          dc.b      116,105,111,110,0
00006A4D  00        
                    11443   @m68kde~1_60:
00006A4E  0D0A 5072 11444          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006A52  6573 7320 
00006A56  3C45 5343 
00006A5A  3E20      
00006A5C  746F 2052 11445          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00006A60  6573 756D 
00006A64  6520 5072 
00006A68  6F67 7261 11446          dc.b      111,103,114,97,109,0
00006A6C  6D00      
                    11447   @m68kde~1_61:
00006A6E  0D0A 496C 11448          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00006A72  6C65 6761 
00006A76  6C20 4461 
00006A7A  74        
00006A7B  6120 5265 11449          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00006A7F  6769 7374 
00006A83  6572 203A 
00006A87  20        
00006A88  5573 6520 11450          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00006A8C  4430 2D44 
00006A90  372E 2E2E 
00006A94  2E2E      
00006A96  0D0A 00   11451          dc.b      13,10,0
                    11452   @m68kde~1_62:
00006A9A  0D0A 4425 11453          dc.b      13,10,68,37,99,32,61,32,0
00006A9E  6320 3D20 
00006AA2  00        
                    11454   @m68kde~1_63:
00006AA4  0D0A 496C 11455          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00006AA8  6C65 6761 
00006AAC  6C20 4164 
00006AB0  64        
00006AB1  7265 7373 11456          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00006AB5  2052 6567 
00006AB9  6973 7465 
00006ABD  7220 3A20 11457          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00006AC1  5573 6520 
00006AC5  4130 2D41 
00006AC9  372E      
00006ACB  2E2E 2E2E 11458          dc.b      46,46,46,46,13,10,0
00006ACF  0D0A 00   
                    11459   @m68kde~1_64:
00006AD2  0D0A 4125 11460          dc.b      13,10,65,37,99,32,61,32,0
00006AD6  6320 3D20 
00006ADA  00        
                    11461   @m68kde~1_65:
00006ADC  0D0A 5573 11462          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00006AE0  6572 2053 
00006AE4  5020 3D20 
00006AE8  00        
                    11463   @m68kde~1_66:
00006AEA  0D0A 496C 11464          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00006AEE  6C65 6761 
00006AF2  6C20 5265 
00006AF6  67        
00006AF7  6973 7465 11465          dc.b      105,115,116,101,114,46,46,46,46,0
00006AFB  722E 2E2E 
00006AFF  2E00      
                    11466   @m68kde~1_67:
00006B02  0D0A 5379 11467          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00006B06  7374 656D 
00006B0A  2053 5020 
00006B0E  3D        
00006B0F  2000      11468          dc.b      32,0
                    11469   @m68kde~1_68:
00006B12  0D0A 5043 11470          dc.b      13,10,80,67,32,61,32,0
00006B16  203D 2000 
                    11471   @m68kde~1_69:
00006B1A  0D0A 5352 11472          dc.b      13,10,83,82,32,61,32,0
00006B1E  203D 2000 
                    11473   @m68kde~1_70:
00006B22  0D0A 496C 11474          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00006B26  6C65 6761 
00006B2A  6C20 5265 
00006B2E  67        
00006B2F  6973 7465 11475          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00006B33  723A 2055 
00006B37  7365 2041 
00006B3B  30        
00006B3C  2D41 372C 11476          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00006B40  2044 302D 
00006B44  4437 2C20 
00006B48  5353 50   
00006B4B  2C20 5553 11477          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00006B4F  502C 2050 
00006B53  4320 6F72 
00006B57  2053      
00006B59  520D 0A00 11478          dc.b      82,13,10,0
                    11479   @m68kde~1_71:
00006B5E  0D0A 0D0A 11480          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00006B62  4E75 6D20 
00006B66  2020 2020 
00006B6A  4164      
00006B6C  6472 6573 11481          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00006B70  7320 2020 
00006B74  2020 2049 
00006B78  6E        
00006B79  7374 7275 11482          dc.b      115,116,114,117,99,116,105,111,110,0
00006B7D  6374 696F 
00006B81  6E00      
                    11483   @m68kde~1_72:
00006B84  0D0A 2D2D 11484          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00006B88  2D20 2020 
00006B8C  2020 2D2D 
00006B90  2D2D 2D   
00006B93  2D2D 2D2D 11485          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00006B97  2020 2020 
00006B9B  2D2D 2D2D 
00006B9F  2D2D 2D   
00006BA2  2D2D 2D2D 11486          dc.b      45,45,45,45,0
00006BA6  00        
                    11487   @m68kde~1_73:
00006BA8  0D0A 4E6F 11488          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00006BAC  2042 7265 
00006BB0  616B 506F 
00006BB4  69        
00006BB5  6E74 7320 11489          dc.b      110,116,115,32,83,101,116,0
00006BB9  5365 7400 
                    11490   @m68kde~1_74:
00006BBE  0D0A 2533 11491          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00006BC2  6420 2020 
00006BC6  2020 2425 
00006BCA  3038 78   
00006BCD  00        11492          dc.b      0
                    11493   @m68kde~1_75:
00006BCE  2020 2020 11494          dc.b      32,32,32,32,37,115,0
00006BD2  2573 00   
                    11495   @m68kde~1_76:
00006BD6  0D0A 4E75 11496          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00006BDA  6D20 2020 
00006BDE  2020 4164 
00006BE2  6472      
00006BE4  6573 7300 11497          dc.b      101,115,115,0
                    11498   @m68kde~1_77:
00006BE8  0D0A 2D2D 11499          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00006BEC  2D20 2020 
00006BF0  2020 2D2D 
00006BF4  2D2D 2D   
00006BF7  2D2D 2D2D 11500          dc.b      45,45,45,45,0
00006BFB  00        
                    11501   @m68kde~1_78:
00006BFC  0D0A 4E6F 11502          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00006C00  2057 6174 
00006C04  6368 506F 
00006C08  69        
00006C09  6E74 7320 11503          dc.b      110,116,115,32,83,101,116,0
00006C0D  5365 7400 
                    11504   @m68kde~1_79:
00006C12  0D0A 456E 11505          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00006C16  7465 7220 
00006C1A  4272 6561 
00006C1E  6B        
00006C1F  2050 6F69 11506          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006C23  6E74 204E 
00006C27  756D 6265 
00006C2B  72        
00006C2C  3A20 00   11507          dc.b      58,32,0
                    11508   @m68kde~1_80:
00006C30  0D0A 496C 11509          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00006C34  6C65 6761 
00006C38  6C20 5261 
00006C3C  6E        
00006C3D  6765 203A 11510          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00006C41  2055 7365 
00006C45  2030 202D 
00006C49  2037      
00006C4B  00        11511          dc.b      0
                    11512   @m68kde~1_81:
00006C4C  0D0A 4272 11513          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006C50  6561 6B20 
00006C54  506F 696E 
00006C58  74        
00006C59  2043 6C65 11514          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006C5D  6172 6564 
00006C61  2E2E 2E2E 
00006C65  2E        
00006C66  0D0A 00   11515          dc.b      13,10,0
                    11516   @m68kde~1_82:
00006C6A  0D0A 4272 11517          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006C6E  6561 6B20 
00006C72  506F 696E 
00006C76  74        
00006C77  2077 6173 11518          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00006C7B  6E27 7420 
00006C7F  5365 742E 
00006C83  2E        
00006C84  2E2E 2E00 11519          dc.b      46,46,46,0
                    11520   @m68kde~1_83:
00006C88  0D0A 456E 11521          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00006C8C  7465 7220 
00006C90  5761 7463 
00006C94  68        
00006C95  2050 6F69 11522          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006C99  6E74 204E 
00006C9D  756D 6265 
00006CA1  72        
00006CA2  3A20 00   11523          dc.b      58,32,0
                    11524   @m68kde~1_84:
00006CA6  0D0A 5761 11525          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006CAA  7463 6820 
00006CAE  506F 696E 
00006CB2  74        
00006CB3  2043 6C65 11526          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006CB7  6172 6564 
00006CBB  2E2E 2E2E 
00006CBF  2E        
00006CC0  0D0A 00   11527          dc.b      13,10,0
                    11528   @m68kde~1_85:
00006CC4  0D0A 5761 11529          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006CC8  7463 6820 
00006CCC  506F 696E 
00006CD0  74        
00006CD1  2057 6173 11530          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00006CD5  206E 6F74 
00006CD9  2053 6574 
00006CDD  2E        
00006CDE  2E2E 2E2E 11531          dc.b      46,46,46,46,0
00006CE2  00        
                    11532   @m68kde~1_86:
00006CE4  0D0A 4E6F 11533          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00006CE8  2046 5245 
00006CEC  4520 4272 
00006CF0  6561      
00006CF2  6B20 506F 11534          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00006CF6  696E 7473 
00006CFA  2E2E 2E2E 
00006CFE  2E        
00006CFF  00        11535          dc.b      0
                    11536   @m68kde~1_87:
00006D00  0D0A 4272 11537          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006D04  6561 6B20 
00006D08  506F 696E 
00006D0C  74        
00006D0D  2041 6464 11538          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006D11  7265 7373 
00006D15  3A20 00   
                    11539   @m68kde~1_88:
00006D18  0D0A 4572 11540          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006D1C  726F 7220 
00006D20  3A20 4272 
00006D24  65        
00006D25  616B 2050 11541          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006D29  6F69 6E74 
00006D2D  7320 4341 
00006D31  4E        
00006D32  4E4F 5420 11542          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00006D36  6265 2073 
00006D3A  6574 2061 
00006D3E  74        
00006D3F  204F 4444 11543          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00006D43  2061 6464 
00006D47  7265 7373 
00006D4B  65        
00006D4C  7300      11544          dc.b      115,0
                    11545   @m68kde~1_89:
00006D4E  0D0A 4572 11546          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006D52  726F 7220 
00006D56  3A20 4272 
00006D5A  65        
00006D5B  616B 2050 11547          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006D5F  6F69 6E74 
00006D63  7320 4341 
00006D67  4E        
00006D68  4E4F 5420 11548          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00006D6C  6265 2073 
00006D70  6574 2066 
00006D74  6F        
00006D75  7220 524F 11549          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00006D79  4D20 696E 
00006D7D  2052 616E 
00006D81  67        
00006D82  6520 3A20 11550          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00006D86  5B24 302D 
00006D8A  2430 3030 
00006D8E  3037 46   
00006D91  4646 5D00 11551          dc.b      70,70,93,0
                    11552   @m68kde~1_90:
00006D96  0D0A 4572 11553          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00006D9A  726F 723A 
00006D9E  2042 7265 
00006DA2  61        
00006DA3  6B20 506F 11554          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00006DA7  696E 7420 
00006DAB  416C 7265 
00006DAF  6164 7920 11555          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00006DB3  4578 6973 
00006DB7  7473 2061 
00006DBB  74        
00006DBC  2041 6464 11556          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00006DC0  7265 7373 
00006DC4  203A 2025 
00006DC8  30        
00006DC9  3878 0D0A 11557          dc.b      56,120,13,10,0
00006DCD  00        
                    11558   @m68kde~1_91:
00006DCE  0D0A 4272 11559          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006DD2  6561 6B20 
00006DD6  506F 696E 
00006DDA  74        
00006DDB  2053 6574 11560          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006DDF  2061 7420 
00006DE3  4164 6472 
00006DE7  65        
00006DE8  7373 3A20 11561          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
00006DEC  5B24 2530 
00006DF0  3878 5D2C 
00006DF4  2049      
00006DF6  6E73 7472 11562          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
00006DFA  7563 7469 
00006DFE  6F6E 203D 
00006E02  2025 7300 11563          dc.b      32,37,115,0
                    11564   @m68kde~1_92:
00006E06  0D0A 4E6F 11565          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00006E0A  2046 5245 
00006E0E  4520 5761 
00006E12  7463      
00006E14  6820 506F 11566          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00006E18  696E 7473 
00006E1C  2E2E 2E2E 
00006E20  2E        
00006E21  00        11567          dc.b      0
                    11568   @m68kde~1_93:
00006E22  0D0A 5761 11569          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006E26  7463 6820 
00006E2A  506F 696E 
00006E2E  74        
00006E2F  2041 6464 11570          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006E33  7265 7373 
00006E37  3A20 00   
                    11571   @m68kde~1_94:
00006E3A  0D0A 4572 11572          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00006E3E  726F 723A 
00006E42  2057 6174 
00006E46  63        
00006E47  6820 506F 11573          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00006E4B  696E 7420 
00006E4F  416C 7265 
00006E53  6164 7920 11574          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00006E57  5365 7420 
00006E5B  6174 2041 
00006E5F  64        
00006E60  6472 6573 11575          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00006E64  7320 3A20 
00006E68  2530 3878 
00006E6C  0D        
00006E6D  0A00      11576          dc.b      10,0
                    11577   @m68kde~1_95:
00006E70  0D0A 5761 11578          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006E74  7463 6820 
00006E78  506F 696E 
00006E7C  74        
00006E7D  2053 6574 11579          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006E81  2061 7420 
00006E85  4164 6472 
00006E89  65        
00006E8A  7373 3A20 11580          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00006E8E  5B24 2530 
00006E92  3878 5D00 
                    11581   @m68kde~1_96:
00006E96  0D0A 0D0A 11582          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00006E9A  0D0A 0D0A 
00006E9E  4042 5245 
00006EA2  414B 50   
00006EA5  4F49 4E54 11583          dc.b      79,73,78,84,0
00006EA9  00        
                    11584   @m68kde~1_97:
00006EAA  0D0A 5369 11585          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006EAE  6E67 6C65 
00006EB2  2053 7465 
00006EB6  70        
00006EB7  203A 205B 11586          dc.b      32,58,32,91,79,78,93,0
00006EBB  4F4E 5D00 
                    11587   @m68kde~1_98:
00006EC0  0D0A 4272 11588          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00006EC4  6561 6B50 
00006EC8  6F69 6E74 
00006ECC  73        
00006ECD  203A 205B 11589          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00006ED1  456E 6162 
00006ED5  6C65 645D 
00006ED9  00        
                    11590   @m68kde~1_99:
00006EDA  0D0A 5072 11591          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006EDE  6573 7320 
00006EE2  3C45 5343 
00006EE6  3E20      
00006EE8  746F 2052 11592          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006EEC  6573 756D 
00006EF0  6520 5573 
00006EF4  6572 2050 11593          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00006EF8  726F 6772 
00006EFC  616D 0D0A 
00006F00  00        
                    11594   @m68kde~1_100:
00006F02  0D0A 556E 11595          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00006F06  6B6E 6F77 
00006F0A  6E20 436F 
00006F0E  6D        
00006F0F  6D61 6E64 11596          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00006F13  2E2E 2E2E 
00006F17  2E0D 0A00 
                    11597   @m68kde~1_101:
00006F1C  0D0A 5072 11598          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00006F20  6F67 7261 
00006F24  6D20 456E 
00006F28  64        
00006F29  6564 2028 11599          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00006F2D  5452 4150 
00006F31  2023 3135 
00006F35  292E      
00006F37  2E2E 2E00 11600          dc.b      46,46,46,0
                    11601   @m68kde~1_102:
00006F3C  0D0A 4B69 11602          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00006F40  6C6C 2041 
00006F44  6C6C 2042 
00006F48  72        
00006F49  6561 6B20 11603          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00006F4D  506F 696E 
00006F51  7473 2E2E 
00006F55  2E        
00006F56  2879 2F6E 11604          dc.b      40,121,47,110,41,63,0
00006F5A  293F 00   
                    11605   @m68kde~1_103:
00006F5E  0D0A 4B69 11606          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00006F62  6C6C 2041 
00006F66  6C6C 2057 
00006F6A  61        
00006F6B  7463 6820 11607          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00006F6F  506F 696E 
00006F73  7473 2E2E 
00006F77  2E        
00006F78  2879 2F6E 11608          dc.b      40,121,47,110,41,63,0
00006F7C  293F 00   
                    11609   @m68kde~1_104:
00006F80  0D0A 2D2D 11610          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00006F84  2D2D 2D2D 
00006F88  2D2D 2D2D 
00006F8C  2D2D 2D   
00006F8F  2D2D 2D2D 11611          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006F93  2D2D 2D2D 
00006F97  2D2D 2D2D 
00006F9B  2D2D 2D   
00006F9E  2D2D 2D2D 11612          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006FA2  2D2D 2D2D 
00006FA6  2D2D 2D2D 
00006FAA  2D2D 2D   
00006FAD  2D2D 2D2D 11613          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006FB1  2D2D 2D2D 
00006FB5  2D2D 2D2D 
00006FB9  2D2D 2D   
00006FBC  2D2D 2D2D 11614          dc.b      45,45,45,45,45,45,0
00006FC0  2D2D 00   
                    11615   @m68kde~1_105:
00006FC4  0D0A 2020 11616          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00006FC8  4465 6275 
00006FCC  6767 6572 
00006FD0  20        
00006FD1  436F 6D6D 11617          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00006FD5  616E 6420 
00006FD9  5375 6D6D 
00006FDD  6172 7900 11618          dc.b      97,114,121,0
                    11619   @m68kde~1_106:
00006FE2  0D0A 2020 11620          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00006FE6  2E28 7265 
00006FEA  6729 2020 
00006FEE  2020      
00006FF0  2020 202D 11621          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00006FF4  2043 6861 
00006FF8  6E67 6520 
00006FFC  5265      
00006FFE  6769 7374 11622          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00007002  6572 733A 
00007006  2065 2E67 
0000700A  2041 302D 11623          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
0000700E  4137 2C44 
00007012  302D 4437 
00007016  2C50 43   
00007019  2C53 5350 11624          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
0000701D  2C55 5350 
00007021  2C53 5200 
                    11625   @m68kde~1_107:
00007026  0D0A 2020 11626          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
0000702A  4244 2F42 
0000702E  532F 4243 
00007032  2F42 4B   
00007035  2020 2D20 11627          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00007039  4272 6561 
0000703D  6B20 506F 
00007041  69        
00007042  6E74 3A20 11628          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00007046  4469 7370 
0000704A  6C61 792F 
0000704E  53        
0000704F  6574 2F43 11629          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00007053  6C65 6172 
00007057  2F4B 696C 
0000705B  6C        
0000705C  00        11630          dc.b      0
                    11631   @m68kde~1_108:
0000705E  0D0A 2020 11632          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00007062  4320 2020 
00007066  2020 2020 
0000706A  2020 20   
0000706D  2020 2D20 11633          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00007071  436F 7079 
00007075  2050 726F 
00007079  67        
0000707A  7261 6D20 11634          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
0000707E  6672 6F6D 
00007082  2046 6C61 
00007086  73        
00007087  6820 746F 11635          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
0000708B  204D 6169 
0000708F  6E20 4D65 
00007093  6D        
00007094  6F72 7900 11636          dc.b      111,114,121,0
                    11637   @m68kde~1_109:
00007098  0D0A 2020 11638          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
0000709C  4449 2020 
000070A0  2020 2020 
000070A4  2020 20   
000070A7  2020 2D20 11639          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
000070AB  4469 7361 
000070AF  7373 656D 
000070B3  62        
000070B4  6C65 2050 11640          dc.b      108,101,32,80,114,111,103,114,97,109,0
000070B8  726F 6772 
000070BC  616D 00   
                    11641   @m68kde~1_110:
000070C0  0D0A 2020 11642          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
000070C4  4455 2020 
000070C8  2020 2020 
000070CC  2020 20   
000070CF  2020 2D20 11643          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
000070D3  4475 6D70 
000070D7  204D 656D 
000070DB  6F        
000070DC  7279 2043 11644          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000070E0  6F6E 7465 
000070E4  6E74 7320 
000070E8  746F 2053 11645          dc.b      116,111,32,83,99,114,101,101,110,0
000070EC  6372 6565 
000070F0  6E00      
                    11646   @m68kde~1_111:
000070F2  0D0A 2020 11647          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
000070F6  4520 2020 
000070FA  2020 2020 
000070FE  2020 20   
00007101  2020 2D20 11648          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00007105  456E 7465 
00007109  7220 5374 
0000710D  72        
0000710E  696E 6720 11649          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00007112  696E 746F 
00007116  204D 656D 
0000711A  6F72 7900 11650          dc.b      111,114,121,0
                    11651   @m68kde~1_112:
0000711E  0D0A 2020 11652          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00007122  4620 2020 
00007126  2020 2020 
0000712A  2020 20   
0000712D  2020 2D20 11653          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00007131  4669 6C6C 
00007135  204D 656D 
00007139  6F        
0000713A  7279 2077 11654          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
0000713E  6974 6820 
00007142  4461 7461 
00007146  00        
                    11655   @m68kde~1_113:
00007148  0D0A 2020 11656          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
0000714C  4720 2020 
00007150  2020 2020 
00007154  2020 20   
00007157  2020 2D20 11657          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
0000715B  476F 2050 
0000715F  726F 6772 
00007163  61        
00007164  6D20 5374 11658          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00007168  6172 7469 
0000716C  6E67 2061 
00007170  74        
00007171  2041 6464 11659          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00007175  7265 7373 
00007179  3A20 2425 
0000717D  30        
0000717E  3858 00   11660          dc.b      56,88,0
                    11661   @m68kde~1_114:
00007182  0D0A 2020 11662          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00007186  4C20 2020 
0000718A  2020 2020 
0000718E  2020 20   
00007191  2020 2D20 11663          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00007195  4C6F 6164 
00007199  2050 726F 
0000719D  67        
0000719E  7261 6D20 11664          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000071A2  282E 4845 
000071A6  5820 6669 
000071AA  6C        
000071AB  6529 2066 11665          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
000071AF  726F 6D20 
000071B3  4C61 7074 
000071B7  6F        
000071B8  7000      11666          dc.b      112,0
                    11667   @m68kde~1_115:
000071BA  0D0A 2020 11668          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
000071BE  4D20 2020 
000071C2  2020 2020 
000071C6  2020 20   
000071C9  2020 2D20 11669          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
000071CD  4D65 6D6F 
000071D1  7279 2045 
000071D5  78        
000071D6  616D 696E 11670          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
000071DA  6520 616E 
000071DE  6420 4368 
000071E2  61        
000071E3  6E67 6500 11671          dc.b      110,103,101,0
                    11672   @m68kde~1_116:
000071E8  0D0A 2020 11673          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
000071EC  5020 2020 
000071F0  2020 2020 
000071F4  2020 20   
000071F7  2020 2D20 11674          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
000071FB  5072 6F67 
000071FF  7261 6D20 
00007203  46        
00007204  6C61 7368 11675          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00007208  204D 656D 
0000720C  6F72 7920 
00007210  7769 7468 11676          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00007214  2055 7365 
00007218  7220 5072 
0000721C  6F67 7261 11677          dc.b      111,103,114,97,109,0
00007220  6D00      
                    11678   @m68kde~1_117:
00007222  0D0A 2020 11679          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00007226  5220 2020 
0000722A  2020 2020 
0000722E  2020 20   
00007231  2020 2D20 11680          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00007235  4469 7370 
00007239  6C61 7920 
0000723D  36        
0000723E  3830 3030 11681          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00007242  2052 6567 
00007246  6973 7465 
0000724A  72        
0000724B  7300      11682          dc.b      115,0
                    11683   @m68kde~1_118:
0000724E  0D0A 2020 11684          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00007252  5320 2020 
00007256  2020 2020 
0000725A  2020 20   
0000725D  2020 2D20 11685          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00007261  546F 6767 
00007265  6C65 204F 
00007269  4E        
0000726A  2F4F 4646 11686          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
0000726E  2053 696E 
00007272  676C 6520 
00007276  53        
00007277  7465 7020 11687          dc.b      116,101,112,32,77,111,100,101,0
0000727B  4D6F 6465 
0000727F  00        
                    11688   @m68kde~1_119:
00007280  0D0A 2020 11689          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00007284  544D 2020 
00007288  2020 2020 
0000728C  2020 20   
0000728F  2020 2D20 11690          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00007293  5465 7374 
00007297  204D 656D 
0000729B  6F        
0000729C  7279 00   11691          dc.b      114,121,0
                    11692   @m68kde~1_120:
000072A0  0D0A 2020 11693          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000072A4  5453 2020 
000072A8  2020 2020 
000072AC  2020 20   
000072AF  2020 2D20 11694          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
000072B3  5465 7374 
000072B7  2053 7769 
000072BB  74        
000072BC  6368 6573 11695          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
000072C0  3A20 5357 
000072C4  372D 3000 
                    11696   @m68kde~1_121:
000072C8  0D0A 2020 11697          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
000072CC  5444 2020 
000072D0  2020 2020 
000072D4  2020 20   
000072D7  2020 2D20 11698          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
000072DB  5465 7374 
000072DF  2044 6973 
000072E3  70        
000072E4  6C61 7973 11699          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
000072E8  3A20 4C45 
000072EC  4473 2061 
000072F0  6E        
000072F1  6420 372D 11700          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
000072F5  5365 676D 
000072F9  656E 7400 
                    11701   @m68kde~1_122:
000072FE  0D0A 2020 11702          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00007302  5744 2F57 
00007306  532F 5743 
0000730A  2F57 4B   
0000730D  2020 2D20 11703          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00007311  5761 7463 
00007315  6820 506F 
00007319  696E      
0000731B  743A 2044 11704          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000731F  6973 706C 
00007323  6179 2F53 
00007327  65        
00007328  742F 436C 11705          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
0000732C  6561 722F 
00007330  4B69 6C6C 
00007334  00        
                    11706   @m68kde~1_123:
00007336  0D0A 2300 11707          dc.b      13,10,35,0
                    11708   @m68kde~1_124:
0000733A  0D0A 5072 11709          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000733E  6F67 7261 
00007342  6D20 5275 
00007346  6E        
00007347  6E69 6E67 11710          dc.b      110,105,110,103,46,46,46,46,46,0
0000734B  2E2E 2E2E 
0000734F  2E00      
                    11711   @m68kde~1_125:
00007352  0D0A 5072 11712          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00007356  6573 7320 
0000735A  3C52 4553 
0000735E  4554      
00007360  3E20 6275 11713          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00007364  7474 6F6E 
00007368  203C 4B65 
0000736C  79        
0000736D  303E 206F 11714          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00007371  6E20 4445 
00007375  3120 746F 
00007379  2073      
0000737B  746F 7000 11715          dc.b      116,111,112,0
                    11716   @m68kde~1_126:
00007380  0D0A 4572 11717          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00007384  726F 723A 
00007388  2050 7265 
0000738C  73        
0000738D  7320 2747 11718          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00007391  2720 6669 
00007395  7273 7420 
00007399  74        
0000739A  6F20 7374 11719          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
0000739E  6172 7420 
000073A2  7072 6F67 
000073A6  7261 6D00 11720          dc.b      114,97,109,0
                    11721   @m68kde~1_127:
000073AA  0D0A 5369 11722          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000073AE  6E67 6C65 
000073B2  2053 7465 
000073B6  70        
000073B7  2020 3A5B 11723          dc.b      32,32,58,91,79,78,93,0
000073BB  4F4E 5D00 
                    11724   @m68kde~1_128:
000073C0  0D0A 5072 11725          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
000073C4  6573 7320 
000073C8  2747 2720 
000073CC  74        
000073CD  6F20 5472 11726          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
000073D1  6163 6520 
000073D5  5072 6F67 
000073D9  72        
000073DA  616D 2066 11727          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
000073DE  726F 6D20 
000073E2  6164 6472 
000073E6  6573 7320 11728          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000073EA  2425 582E 
000073EE  2E2E 2E2E 
000073F2  00        
                    11729   @m68kde~1_129:
000073F4  0D0A 5075 11730          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
000073F8  7368 203C 
000073FC  5245 5345 
00007400  5420      
00007402  4275 7474 11731          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00007406  6F6E 3E20 
0000740A  746F 2053 
0000740E  74        
0000740F  6F70 2E2E 11732          dc.b      111,112,46,46,46,46,46,0
00007413  2E2E 2E00 
                    11733   @m68kde~1_130:
00007418  0D0A 5369 11734          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000741C  6E67 6C65 
00007420  2053 7465 
00007424  70        
00007425  203A 205B 11735          dc.b      32,58,32,91,79,70,70,93,0
00007429  4F46 465D 
0000742D  00        
                    11736   @m68kde~1_131:
0000742E  0D0A 4272 11737          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007432  6561 6B20 
00007436  506F 696E 
0000743A  74        
0000743B  7320 3A5B 11738          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000743F  456E 6162 
00007443  6C65 645D 
00007447  00        
                    11739   @m68kde~1_132:
00007448  0D0A 5072 11740          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000744C  6573 7320 
00007450  3C45 5343 
00007454  3E20      
00007456  746F 2052 11741          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000745A  6573 756D 
0000745E  6520 5573 
00007462  6572 2050 11742          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00007466  726F 6772 
0000746A  616D 2E2E 
0000746E  2E        
0000746F  2E2E 00   11743          dc.b      46,46,0
                    11744   @m68kde~1_133:
00007472  0D0A 5369 11745          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007476  6E67 6C65 
0000747A  2053 7465 
0000747E  70        
0000747F  2020 3A5B 11746          dc.b      32,32,58,91,79,70,70,93,0
00007483  4F46 465D 
00007487  00        
                    11747   @m68kde~1_134:
00007488  0D0A 0D0A 11748          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000748C  5072 6F67 
00007490  7261 6D20 
00007494  41        
00007495  424F 5254 11749          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00007499  2021 2121 
0000749D  2121 210D 
000074A1  0A00      
                    11750   @m68kde~1_135:
000074A4  2573 0D0A 11751          dc.b      37,115,13,10,0
000074A8  00        
                    11752   @m68kde~1_136:
000074AA  0D0A 0D0A 11753          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000074AE  5072 6F67 
000074B2  7261 6D20 
000074B6  41        
000074B7  424F 5254 11754          dc.b      66,79,82,84,32,33,33,33,33,33,0
000074BB  2021 2121 
000074BF  2121 00   
                    11755   @m68kde~1_137:
000074C2  0D0A 556E 11756          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
000074C6  6861 6E64 
000074CA  6C65 6420 
000074CE  49        
000074CF  6E74 6572 11757          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000074D3  7275 7074 
000074D7  3A20 4952 
000074DB  5125 6420 11758          dc.b      81,37,100,32,33,33,33,33,33,0
000074DF  2121 2121 
000074E3  2100      
                    11759   @m68kde~1_138:
000074E6  4144 4452 11760          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000074EA  4553 5320 
000074EE  4552 524F 
000074F2  523A 20   
000074F5  3136 206F 11761          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000074F9  7220 3332 
000074FD  2042 6974 
00007501  2054      
00007503  7261 6E73 11762          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00007507  6665 7220 
0000750B  746F 2F66 
0000750F  726F 6D20 11763          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00007513  616E 204F 
00007517  4444 2041 
0000751B  64        
0000751C  6472 6573 11764          dc.b      100,114,101,115,115,46,46,46,46,0
00007520  732E 2E2E 
00007524  2E00      
                    11765   @m68kde~1_139:
00007526  556E 6861 11766          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
0000752A  6E64 6C65 
0000752E  6420 5472 
00007532  6170 2021 11767          dc.b      97,112,32,33,33,33,33,33,0
00007536  2121 2121 
0000753A  00        
                    11768   @m68kde~1_140:
0000753C  4255 5320 11769          dc.b      66,85,83,32,69,114,114,111,114,33,0
00007540  4572 726F 
00007544  7221 00   
                    11770   @m68kde~1_141:
00007548  4144 4452 11771          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000754C  4553 5320 
00007550  4572 726F 
00007554  7221      
00007556  00        11772          dc.b      0
                    11773   @m68kde~1_142:
00007558  494C 4C45 11774          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000755C  4741 4C20 
00007560  494E 5354 
00007564  5255 43   
00007567  5449 4F4E 11775          dc.b      84,73,79,78,0
0000756B  00        
                    11776   @m68kde~1_143:
0000756C  4449 5649 11777          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00007570  4445 2042 
00007574  5920 5A45 
00007578  524F 00   
                    11778   @m68kde~1_144:
0000757C  2743 484B 11779          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00007580  2720 494E 
00007584  5354 5255 
00007588  4354 49   
0000758B  4F4E 00   11780          dc.b      79,78,0
                    11781   @m68kde~1_145:
0000758E  5452 4150 11782          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00007592  5620 494E 
00007596  5354 5255 
0000759A  4354 49   
0000759D  4F4E 00   11783          dc.b      79,78,0
                    11784   @m68kde~1_146:
000075A0  5052 4956 11785          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000075A4  494C 4547 
000075A8  4520 5649 
000075AC  4F4C 41   
000075AF  5449 4F4E 11786          dc.b      84,73,79,78,0
000075B3  00        
                    11787   @m68kde~1_147:
000075B4  554E 494E 11788          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000075B8  4954 4941 
000075BC  4C49 5345 
000075C0  4420 49   
000075C3  5251 00   11789          dc.b      82,81,0
                    11790   @m68kde~1_148:
000075C6  5350 5552 11791          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
000075CA  494F 5553 
000075CE  2049 5251 
000075D2  00        
                    11792   @m68kde~1_149:
000075D4  0D0A 5374 11793          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000075D8  6172 7420 
000075DC  4164 6472 
000075E0  65        
000075E1  7373 2069 11794          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000075E5  6E20 4D65 
000075E9  6D6F 7279 
000075ED  3A20 00   11795          dc.b      58,32,0
                    11796   @m68kde~1_150:
000075F0  0D0A 456E 11797          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000075F4  7465 7220 
000075F8  5374 7269 
000075FC  6E        
000075FD  6720 2845 11798          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00007601  5343 2074 
00007605  6F20 656E 
00007609  64        
0000760A  2920 3A00 11799          dc.b      41,32,58,0
                    11800   @m68kde~1_151:
0000760E  5065 7266 11801          dc.b      80,101,114,102,111,114,109,105,110,103,32,77
00007612  6F72 6D69 
00007616  6E67 204D 
0000761A  656D 6F72 11802          dc.b      101,109,111,114,121,32,84,101,115,116,33,0
0000761E  7920 5465 
00007622  7374 2100 
                    11803   @m68kde~1_152:
00007626  0D0A 5374 11804          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
0000762A  6172 7420 
0000762E  4164 6472 
00007632  65        
00007633  7373 3A20 11805          dc.b      115,115,58,32,0
00007637  00        
                    11806   @m68kde~1_153:
00007638  0D0A 456E 11807          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
0000763C  6420 4164 
00007640  6472 6573 
00007644  73        
00007645  3A20 00   11808          dc.b      58,32,0
                    11809   @m68kde~1_154:
00007648  0D0A 4D65 11810          dc.b      13,10,77,101,109,111,114,121,32,84,101,115,116
0000764C  6D6F 7279 
00007650  2054 6573 
00007654  74        
00007655  2046 6169 11811          dc.b      32,70,97,105,108,101,100,33,0
00007659  6C65 6421 
0000765D  00        
                    11812   @m68kde~1_155:
0000765E  0D0A 4164 11813          dc.b      13,10,65,100,100,114,101,115,115,32,61,32,37
00007662  6472 6573 
00007666  7320 3D20 
0000766A  25        
0000766B  7500      11814          dc.b      117,0
                    11815   @m68kde~1_156:
0000766E  0D0A 4461 11816          dc.b      13,10,68,97,116,97,32,87,114,105,116,116,101
00007672  7461 2057 
00007676  7269 7474 
0000767A  65        
0000767B  6E20 746F 11817          dc.b      110,32,116,111,32,97,100,100,114,101,115,115
0000767F  2061 6464 
00007683  7265 7373 
00007687  203D 2025 11818          dc.b      32,61,32,37,117,0
0000768B  7500      
                    11819   @m68kde~1_157:
0000768E  0D0A 4461 11820          dc.b      13,10,68,97,116,97,32,102,111,117,110,100,32
00007692  7461 2066 
00007696  6F75 6E64 
0000769A  20        
0000769B  696E 2061 11821          dc.b      105,110,32,97,100,100,114,101,115,115,32,61
0000769F  6464 7265 
000076A3  7373 203D 
000076A7  2025 7500 11822          dc.b      32,37,117,0
                    11823   @m68kde~1_158:
000076AC  4D65 6D6F 11824          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
000076B0  7279 2054 
000076B4  6573 7420 
000076B8  4661 696C 11825          dc.b      70,97,105,108,101,100,33,0
000076BC  6564 2100 
                    11826   @m68kde~1_159:
000076C0  0D0A 4D65 11827          dc.b      13,10,77,101,109,111,114,121,32,84,101,115,116
000076C4  6D6F 7279 
000076C8  2054 6573 
000076CC  74        
000076CD  2053 7563 11828          dc.b      32,83,117,99,99,101,115,115,102,117,108,0
000076D1  6365 7373 
000076D5  6675 6C00 
                    11829   @m68kde~1_160:
000076DA  4D65 6D6F 11830          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
000076DE  7279 2054 
000076E2  6573 7420 
000076E6  5375 6363 11831          dc.b      83,117,99,99,101,115,115,102,117,108,33,0
000076EA  6573 7366 
000076EE  756C 2100 
                    11832   @m68kde~1_161:
000076F2  0D0A 6320 11833          dc.b      13,10,99,32,61,32,37,117,32,10,0
000076F6  3D20 2575 
000076FA  200A 00   
                    11834   @m68kde~1_162:
000076FE  5265 6164 11835          dc.b      82,101,97,100,32,98,97,99,107,32,68,97,116,97
00007702  2062 6163 
00007706  6B20 4461 
0000770A  7461      
0000770C  2028 6173 11836          dc.b      32,40,97,115,32,117,45,99,104,97,114,41,32,61
00007710  2075 2D63 
00007714  6861 7229 
00007718  203D      
0000771A  2025 7520 11837          dc.b      32,37,117,32,10,0
0000771E  0A00      
                    11838   @m68kde~1_163:
00007720  0D0A 4368 11839          dc.b      13,10,67,104,105,112,32,69,114,97,115,101,100
00007724  6970 2045 
00007728  7261 7365 
0000772C  64        
0000772D  2100      11840          dc.b      33,0
                    11841   @m68kde~1_164:
00007730  4445 312D 11842          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00007734  3638 6B20 
00007738  4275 6720 
0000773C  5631      
0000773E  2E37 3700 11843          dc.b      46,55,55,0
                    11844   @m68kde~1_165:
00007742  436F 7079 11845          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00007746  7269 6768 
0000774A  7420 2843 
0000774E  2920 504A 11846          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00007752  2044 6176 
00007756  6965 7320 
0000775A  3230      
0000775C  3136 00   11847          dc.b      49,54,0
                    11848   @m68kde~1_166:
00007760  4D6F 6861 11849          dc.b      77,111,104,97,109,101,100,32,65,98,111,117,101
00007764  6D65 6420 
00007768  4162 6F75 
0000776C  65        
0000776D  6C6D 6167 11850          dc.b      108,109,97,103,100,0
00007771  6400      
                    11851   @m68kde~1_167:
00007774  5374 6420 11852          dc.b      83,116,100,32,35,58,32,51,56,53,56,53,49,52
00007778  233A 2033 
0000777C  3835 3835 
00007780  3134      
00007782  3800      11853          dc.b      56,0
                    11854   @m68kde~1_168:
00007784  0D0A 5275 11855          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00007788  6E6E 696E 
0000778C  672E 2E2E 
00007790  2E        
00007791  2E00      11856          dc.b      46,0
                    11857   @m68kde~1_169:
00007794  5275 6E6E 11858          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00007798  696E 672E 
0000779C  2E2E 2E2E 
000077A0  00        
                    11859   @m68kde~1_170:
000077A2  0D0A 2573 11860          dc.b      13,10,37,115,0
000077A6  00        
                    11861   @m68kde~1_171:
000077A8  2E42 2000 11862          dc.b      46,66,32,0
                    11863   @m68kde~1_172:
000077AC  2E57 2000 11864          dc.b      46,87,32,0
                    11865   @m68kde~1_173:
000077B0  2E4C 2000 11866          dc.b      46,76,32,0
                    11867   @m68kde~1_174:
000077B4  2324 2558 11868          dc.b      35,36,37,88,0
000077B8  00        
                    11869   @m68kde~1_175:
000077BA  2800      11870          dc.b      40,0
                    11871   @m68kde~1_176:
000077BC  2900      11872          dc.b      41,0
                    11873   @m68kde~1_177:
000077BE  292B 00   11874          dc.b      41,43,0
                    11875   @m68kde~1_178:
000077C2  2D28 00   11876          dc.b      45,40,0
                    11877   @m68kde~1_179:
000077C6  2564 2841 11878          dc.b      37,100,40,65,37,100,41,0
000077CA  2564 2900 
                    11879   @m68kde~1_180:
000077CE  2564 2841 11880          dc.b      37,100,40,65,37,100,44,0
000077D2  2564 2C00 
                    11881   @m68kde~1_181:
000077D6  4400      11882          dc.b      68,0
                    11883   @m68kde~1_182:
000077D8  4100      11884          dc.b      65,0
                    11885   @m68kde~1_183:
000077DA  2564 00   11886          dc.b      37,100,0
                    11887   @m68kde~1_184:
000077DE  2E57 2900 11888          dc.b      46,87,41,0
                    11889   @m68kde~1_185:
000077E2  2E4C 2900 11890          dc.b      46,76,41,0
                    11891   @m68kde~1_186:
000077E6  2425 5800 11892          dc.b      36,37,88,0
                    11893   @m68kde~1_187:
000077EA  2564 2850 11894          dc.b      37,100,40,80,67,41,0
000077EE  4329 00   
                    11895   @m68kde~1_188:
000077F2  2564 2850 11896          dc.b      37,100,40,80,67,44,0
000077F6  432C 00   
                    11897   @m68kde~1_189:
000077FA  2C00      11898          dc.b      44,0
                    11899   @m68kde~1_190:
000077FC  4343 00   11900          dc.b      67,67,0
                    11901   @m68kde~1_191:
00007800  4353 00   11902          dc.b      67,83,0
                    11903   @m68kde~1_192:
00007804  4551 00   11904          dc.b      69,81,0
                    11905   @m68kde~1_193:
00007808  4745 00   11906          dc.b      71,69,0
                    11907   @m68kde~1_194:
0000780C  4754 00   11908          dc.b      71,84,0
                    11909   @m68kde~1_195:
00007810  4849 00   11910          dc.b      72,73,0
                    11911   @m68kde~1_196:
00007814  4C45 00   11912          dc.b      76,69,0
                    11913   @m68kde~1_197:
00007818  4C53 00   11914          dc.b      76,83,0
                    11915   @m68kde~1_198:
0000781C  4C54 00   11916          dc.b      76,84,0
                    11917   @m68kde~1_199:
00007820  4D49 00   11918          dc.b      77,73,0
                    11919   @m68kde~1_200:
00007824  4E45 00   11920          dc.b      78,69,0
                    11921   @m68kde~1_201:
00007828  504C 00   11922          dc.b      80,76,0
                    11923   @m68kde~1_202:
0000782C  5653 00   11924          dc.b      86,83,0
                    11925   @m68kde~1_203:
00007830  5643 00   11926          dc.b      86,67,0
                    11927   @m68kde~1_204:
00007834  5241 00   11928          dc.b      82,65,0
                    11929   @m68kde~1_205:
00007838  5352 00   11930          dc.b      83,82,0
                    11931   @m68kde~1_206:
0000783C  556E 6B6E 11932          dc.b      85,110,107,110,111,119,110,0
00007840  6F77 6E00 
                    11933   @m68kde~1_207:
00007844  4142 4344 11934          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
00007848  2044 2564 
0000784C  2C44 2564 
00007850  00        
                    11935   @m68kde~1_208:
00007852  4142 4344 11936          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007856  202D 2841 
0000785A  2564 292C 
0000785E  2D28 41   
00007861  2564 2900 11937          dc.b      37,100,41,0
                    11938   @m68kde~1_209:
00007866  4144 4441 11939          dc.b      65,68,68,65,46,87,32,0
0000786A  2E57 2000 
                    11940   @m68kde~1_210:
0000786E  4144 4441 11941          dc.b      65,68,68,65,46,76,32,0
00007872  2E4C 2000 
                    11942   @m68kde~1_211:
00007876  2C41 2558 11943          dc.b      44,65,37,88,0
0000787A  00        
                    11944   @m68kde~1_212:
0000787C  4144 4400 11945          dc.b      65,68,68,0
                    11946   @m68kde~1_213:
00007880  4144 4449 11947          dc.b      65,68,68,73,0
00007884  00        
                    11948   @m68kde~1_214:
00007886  414E 4449 11949          dc.b      65,78,68,73,0
0000788A  00        
                    11950   @m68kde~1_215:
0000788C  434D 5049 11951          dc.b      67,77,80,73,0
00007890  00        
                    11952   @m68kde~1_216:
00007892  454F 5249 11953          dc.b      69,79,82,73,0
00007896  00        
                    11954   @m68kde~1_217:
00007898  4F52 4900 11955          dc.b      79,82,73,0
                    11956   @m68kde~1_218:
0000789C  5355 4249 11957          dc.b      83,85,66,73,0
000078A0  00        
                    11958   @m68kde~1_219:
000078A2  414E 4449 11959          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
000078A6  2023 2425 
000078AA  582C 5352 
000078AE  00        
                    11960   @m68kde~1_220:
000078B0  4144 4451 11961          dc.b      65,68,68,81,0
000078B4  00        
                    11962   @m68kde~1_221:
000078B6  2325 3158 11963          dc.b      35,37,49,88,44,0
000078BA  2C00      
                    11964   @m68kde~1_222:
000078BC  4144 4458 11965          dc.b      65,68,68,88,0
000078C0  00        
                    11966   @m68kde~1_223:
000078C2  4425 582C 11967          dc.b      68,37,88,44,68,37,88,0
000078C6  4425 5800 
                    11968   @m68kde~1_224:
000078CA  2D28 4125 11969          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
000078CE  5829 2C2D 
000078D2  2841 2558 
000078D6  2900      
                    11970   @m68kde~1_225:
000078D8  414E 4400 11971          dc.b      65,78,68,0
                    11972   @m68kde~1_226:
000078DC  414E 4449 11973          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
000078E0  2023 2425 
000078E4  3258 2C43 
000078E8  4352 00   
                    11974   @m68kde~1_227:
000078EC  4153 4C00 11975          dc.b      65,83,76,0
                    11976   @m68kde~1_228:
000078F0  4153 5200 11977          dc.b      65,83,82,0
                    11978   @m68kde~1_229:
000078F4  4C53 4C00 11979          dc.b      76,83,76,0
                    11980   @m68kde~1_230:
000078F8  4C53 5200 11981          dc.b      76,83,82,0
                    11982   @m68kde~1_231:
000078FC  524F 4C00 11983          dc.b      82,79,76,0
                    11984   @m68kde~1_232:
00007900  524F 5200 11985          dc.b      82,79,82,0
                    11986   @m68kde~1_233:
00007904  524F 584C 11987          dc.b      82,79,88,76,0
00007908  00        
                    11988   @m68kde~1_234:
0000790A  524F 5852 11989          dc.b      82,79,88,82,0
0000790E  00        
                    11990   @m68kde~1_235:
00007910  2324 2558 11991          dc.b      35,36,37,88,44,68,37,88,0
00007914  2C44 2558 
00007918  00        
                    11992   @m68kde~1_236:
0000791A  4200      11993          dc.b      66,0
                    11994   @m68kde~1_237:
0000791C  4243 4847 11995          dc.b      66,67,72,71,32,0
00007920  2000      
                    11996   @m68kde~1_238:
00007922  4425 642C 11997          dc.b      68,37,100,44,0
00007926  00        
                    11998   @m68kde~1_239:
00007928  2324 2558 11999          dc.b      35,36,37,88,44,0
0000792C  2C00      
                    12000   @m68kde~1_240:
0000792E  4243 4C52 12001          dc.b      66,67,76,82,32,0
00007932  2000      
                    12002   @m68kde~1_241:
00007934  4253 4554 12003          dc.b      66,83,69,84,32,0
00007938  2000      
                    12004   @m68kde~1_242:
0000793A  4254 5354 12005          dc.b      66,84,83,84,32,0
0000793E  2000      
                    12006   @m68kde~1_243:
00007940  4348 4B20 12007          dc.b      67,72,75,32,0
00007944  00        
                    12008   @m68kde~1_244:
00007946  2C44 2564 12009          dc.b      44,68,37,100,0
0000794A  00        
                    12010   @m68kde~1_245:
0000794C  434C 5200 12011          dc.b      67,76,82,0
                    12012   @m68kde~1_246:
00007950  434D 5041 12013          dc.b      67,77,80,65,46,87,32,0
00007954  2E57 2000 
                    12014   @m68kde~1_247:
00007958  434D 5041 12015          dc.b      67,77,80,65,46,76,32,0
0000795C  2E4C 2000 
                    12016   @m68kde~1_248:
00007960  2C41 2564 12017          dc.b      44,65,37,100,0
00007964  00        
                    12018   @m68kde~1_249:
00007966  434D 5000 12019          dc.b      67,77,80,0
                    12020   @m68kde~1_250:
0000796A  434D 504D 12021          dc.b      67,77,80,77,0
0000796E  00        
                    12022   @m68kde~1_251:
00007970  2841 2564 12023          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
00007974  292B 2C28 
00007978  4125 6429 
0000797C  2B00      
                    12024   @m68kde~1_252:
0000797E  4442 00   12025          dc.b      68,66,0
                    12026   @m68kde~1_253:
00007982  4425 642C 12027          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
00007986  252B 6428 
0000798A  5043 2920 
0000798E  746F      
00007990  2041 6464 12028          dc.b      32,65,100,100,114,58,36,37,88,0
00007994  723A 2425 
00007998  5800      
                    12029   @m68kde~1_254:
0000799A  4449 5653 12030          dc.b      68,73,86,83,32,0
0000799E  2000      
                    12031   @m68kde~1_255:
000079A0  4449 5655 12032          dc.b      68,73,86,85,32,0
000079A4  2000      
                    12033   @m68kde~1_256:
000079A6  454F 5200 12034          dc.b      69,79,82,0
                    12035   @m68kde~1_257:
000079AA  454F 5249 12036          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
000079AE  2023 2425 
000079B2  3258 2C43 
000079B6  4352 00   
                    12037   @m68kde~1_258:
000079BA  454F 5249 12038          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
000079BE  2023 2425 
000079C2  582C 5352 
000079C6  00        
                    12039   @m68kde~1_259:
000079C8  4558 4720 12040          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
000079CC  4425 642C 
000079D0  4425 6400 
                    12041   @m68kde~1_260:
000079D4  4558 4720 12042          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
000079D8  4125 642C 
000079DC  4125 6400 
                    12043   @m68kde~1_261:
000079E0  4558 4720 12044          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
000079E4  4425 642C 
000079E8  4125 6400 
                    12045   @m68kde~1_262:
000079EC  4558 5400 12046          dc.b      69,88,84,0
                    12047   @m68kde~1_263:
000079F0  494C 4C45 12048          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
000079F4  4741 4C20 
000079F8  2824 3441 
000079FC  4643 29   
000079FF  00        12049          dc.b      0
                    12050   @m68kde~1_264:
00007A00  4A4D 5020 12051          dc.b      74,77,80,32,0
00007A04  00        
                    12052   @m68kde~1_265:
00007A06  4A53 5220 12053          dc.b      74,83,82,32,0
00007A0A  00        
                    12054   @m68kde~1_266:
00007A0C  4C45 4120 12055          dc.b      76,69,65,32,0
00007A10  00        
                    12056   @m68kde~1_267:
00007A12  4C49 4E4B 12057          dc.b      76,73,78,75,32,0
00007A16  2000      
                    12058   @m68kde~1_268:
00007A18  4125 642C 12059          dc.b      65,37,100,44,35,37,100,0
00007A1C  2325 6400 
                    12060   @m68kde~1_269:
00007A20  4D4F 5645 12061          dc.b      77,79,86,69,46,66,32,0
00007A24  2E42 2000 
                    12062   @m68kde~1_270:
00007A28  4D4F 5645 12063          dc.b      77,79,86,69,46,76,32,0
00007A2C  2E4C 2000 
                    12064   @m68kde~1_271:
00007A30  4D4F 5645 12065          dc.b      77,79,86,69,46,87,32,0
00007A34  2E57 2000 
                    12066   @m68kde~1_272:
00007A38  4D4F 5645 12067          dc.b      77,79,86,69,32,0
00007A3C  2000      
                    12068   @m68kde~1_273:
00007A3E  2C43 4352 12069          dc.b      44,67,67,82,0
00007A42  00        
                    12070   @m68kde~1_274:
00007A44  4D4F 5645 12071          dc.b      77,79,86,69,32,83,82,44,0
00007A48  2053 522C 
00007A4C  00        
                    12072   @m68kde~1_275:
00007A4E  2C53 5200 12073          dc.b      44,83,82,0
                    12074   @m68kde~1_276:
00007A52  4D4F 5645 12075          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
00007A56  2055 5350 
00007A5A  2C41 2564 
00007A5E  00        
                    12076   @m68kde~1_277:
00007A60  4D4F 5645 12077          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
00007A64  2041 2564 
00007A68  2C55 5350 
00007A6C  00        
                    12078   @m68kde~1_278:
00007A6E  4D4F 5645 12079          dc.b      77,79,86,69,77,0
00007A72  4D00      
                    12080   @m68kde~1_279:
00007A74  4425 6400 12081          dc.b      68,37,100,0
                    12082   @m68kde~1_280:
00007A78  2F44 2564 12083          dc.b      47,68,37,100,0
00007A7C  00        
                    12084   @m68kde~1_281:
00007A7E  4125 6400 12085          dc.b      65,37,100,0
                    12086   @m68kde~1_282:
00007A82  2F41 2564 12087          dc.b      47,65,37,100,0
00007A86  00        
                    12088   @m68kde~1_283:
00007A88  4D4F 5645 12089          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
00007A8C  502E 5720 
00007A90  2425 5828 
00007A94  4125 64   
00007A97  292C 4425 12090          dc.b      41,44,68,37,100,0
00007A9B  6400      
                    12091   @m68kde~1_284:
00007A9E  4D4F 5645 12092          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
00007AA2  502E 4C20 
00007AA6  2425 5828 
00007AAA  4125 64   
00007AAD  292C 4425 12093          dc.b      41,44,68,37,100,0
00007AB1  6400      
                    12094   @m68kde~1_285:
00007AB4  4D4F 5645 12095          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
00007AB8  502E 5720 
00007ABC  4425 642C 
00007AC0  2425 58   
00007AC3  2841 2564 12096          dc.b      40,65,37,100,41,0
00007AC7  2900      
                    12097   @m68kde~1_286:
00007ACA  4D4F 5645 12098          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
00007ACE  502E 4C20 
00007AD2  4425 642C 
00007AD6  2425 58   
00007AD9  2841 2564 12099          dc.b      40,65,37,100,41,0
00007ADD  2900      
                    12100   @m68kde~1_287:
00007AE0  4D4F 5645 12101          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
00007AE4  5120 2324 
00007AE8  2558 2C44 
00007AEC  2564 00   
                    12102   @m68kde~1_288:
00007AF0  4D55 4C53 12103          dc.b      77,85,76,83,32,0
00007AF4  2000      
                    12104   @m68kde~1_289:
00007AF6  4D55 4C55 12105          dc.b      77,85,76,85,32,0
00007AFA  2000      
                    12106   @m68kde~1_290:
00007AFC  4E42 4344 12107          dc.b      78,66,67,68,32,0
00007B00  2000      
                    12108   @m68kde~1_291:
00007B02  4E45 4700 12109          dc.b      78,69,71,0
                    12110   @m68kde~1_292:
00007B06  4E45 4758 12111          dc.b      78,69,71,88,0
00007B0A  00        
                    12112   @m68kde~1_293:
00007B0C  4E4F 5000 12113          dc.b      78,79,80,0
                    12114   @m68kde~1_294:
00007B10  4E4F 5400 12115          dc.b      78,79,84,0
                    12116   @m68kde~1_295:
00007B14  4F52 00   12117          dc.b      79,82,0
                    12118   @m68kde~1_296:
00007B18  4F52 4920 12119          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
00007B1C  2324 2532 
00007B20  582C 4343 
00007B24  5200      
                    12120   @m68kde~1_297:
00007B26  4F52 4920 12121          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
00007B2A  2023 2425 
00007B2E  582C 5352 
00007B32  00        
                    12122   @m68kde~1_298:
00007B34  5045 4120 12123          dc.b      80,69,65,32,0
00007B38  00        
                    12124   @m68kde~1_299:
00007B3A  5245 5345 12125          dc.b      82,69,83,69,84,0
00007B3E  5400      
                    12126   @m68kde~1_300:
00007B40  5254 4500 12127          dc.b      82,84,69,0
                    12128   @m68kde~1_301:
00007B44  5254 5200 12129          dc.b      82,84,82,0
                    12130   @m68kde~1_302:
00007B48  5254 5300 12131          dc.b      82,84,83,0
                    12132   @m68kde~1_303:
00007B4C  5354 4F50 12133          dc.b      83,84,79,80,32,35,36,37,88,0
00007B50  2023 2425 
00007B54  5800      
                    12134   @m68kde~1_304:
00007B56  5342 4344 12135          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
00007B5A  2044 2564 
00007B5E  2C44 2564 
00007B62  00        
                    12136   @m68kde~1_305:
00007B64  5342 4344 12137          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007B68  202D 2841 
00007B6C  2564 292C 
00007B70  2D28 41   
00007B73  2564 2900 12138          dc.b      37,100,41,0
                    12139   @m68kde~1_306:
00007B78  5300      12140          dc.b      83,0
                    12141   @m68kde~1_307:
00007B7A  5355 4241 12142          dc.b      83,85,66,65,46,87,32,0
00007B7E  2E57 2000 
                    12143   @m68kde~1_308:
00007B82  5355 4241 12144          dc.b      83,85,66,65,46,76,32,0
00007B86  2E4C 2000 
                    12145   @m68kde~1_309:
00007B8A  5355 4200 12146          dc.b      83,85,66,0
                    12147   @m68kde~1_310:
00007B8E  5355 4251 12148          dc.b      83,85,66,81,0
00007B92  00        
                    12149   @m68kde~1_311:
00007B94  5355 4258 12150          dc.b      83,85,66,88,0
00007B98  00        
                    12151   @m68kde~1_312:
00007B9A  4425 3158 12152          dc.b      68,37,49,88,44,68,37,49,88,0
00007B9E  2C44 2531 
00007BA2  5800      
                    12153   @m68kde~1_313:
00007BA4  2D28 4125 12154          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
00007BA8  3158 292C 
00007BAC  2D28 4125 
00007BB0  3158 29   
00007BB3  00        12155          dc.b      0
                    12156   @m68kde~1_314:
00007BB4  5357 4150 12157          dc.b      83,87,65,80,32,68,37,100,0
00007BB8  2044 2564 
00007BBC  00        
                    12158   @m68kde~1_315:
00007BBE  5441 5320 12159          dc.b      84,65,83,32,0
00007BC2  00        
                    12160   @m68kde~1_316:
00007BC4  5452 4150 12161          dc.b      84,82,65,80,32,35,37,100,0
00007BC8  2023 2564 
00007BCC  00        
                    12162   @m68kde~1_317:
00007BCE  5452 4150 12163          dc.b      84,82,65,80,86,0
00007BD2  5600      
                    12164   @m68kde~1_318:
00007BD4  5453 5400 12165          dc.b      84,83,84,0
                    12166   @m68kde~1_319:
00007BD8  554E 4C4B 12167          dc.b      85,78,76,75,32,65,37,100,0
00007BDC  2041 2564 
00007BE0  00        
                    12168   @itoa_1:
00007BE2  2D32 3134 12169          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00007BE6  3734 3833 
00007BEA  3634 3800 
                    12170   __ctype:
00007BEE  0040 4040 12171          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00007BF2  4040 4040 
00007BF6  4040 5050 
00007BFA  5050 50   
00007BFD  4040 4040 12172          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00007C01  4040 4040 
00007C05  4040 4040 
00007C09  4040 40   
00007C0C  4040 40D0 12173          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00007C10  A0A0 A0A0 
00007C14  A0A0 A0A0 
00007C18  A0A0 A0A0 12174          dc.b      160,160,160,160,160,160,160,140,140,140,140
00007C1C  A0A0 A08C 
00007C20  8C8C 8C   
00007C23  8C8C 8C8C 12175          dc.b      140,140,140,140,140,140,160,160,160,160,160
00007C27  8C8C A0A0 
00007C2B  A0A0 A0   
00007C2E  A0A0 8A8A 12176          dc.b      160,160,138,138,138,138,138,138,130,130,130
00007C32  8A8A 8A8A 
00007C36  8282 82   
00007C39  8282 8282 12177          dc.b      130,130,130,130,130,130,130,130,130,130,130
00007C3D  8282 8282 
00007C41  8282 82   
00007C44  8282 8282 12178          dc.b      130,130,130,130,130,130,160,160,160,160,160
00007C48  8282 A0A0 
00007C4C  A0A0 A0   
00007C4F  A089 8989 12179          dc.b      160,137,137,137,137,137,137,129,129,129,129
00007C53  8989 8981 
00007C57  8181 81   
00007C5A  8181 8181 12180          dc.b      129,129,129,129,129,129,129,129,129,129,129
00007C5E  8181 8181 
00007C62  8181 81   
00007C65  8181 8181 12181          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00007C69  81A0 A0A0 
00007C6D  A040 0000 
00007C71  00        
00007C72  0000 0000 12182          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007C76  0000 0000 
00007C7A  0000 0000 
00007C7E  0000 0000 
00007C82  0000 0000 
00007C86  0000      
00007C88  0000 0000 12183          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007C8C  0000 0000 
00007C90  0000 0000 
00007C94  0000 0000 
00007C98  0000 0000 
00007C9C  0000      
00007C9E  0000 0000 12184          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007CA2  0000 0000 
00007CA6  0000 0000 
00007CAA  0000 0000 
00007CAE  0000 0000 
00007CB2  0000      
00007CB4  0000 0000 12185          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007CB8  0000 0000 
00007CBC  0000 0000 
00007CC0  0000 0000 
00007CC4  0000 0000 
00007CC8  0000      
00007CCA  0000 0000 12186          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007CCE  0000 0000 
00007CD2  0000 0000 
00007CD6  0000 0000 
00007CDA  0000 0000 
00007CDE  0000      
00007CE0  0000 0000 12187          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007CE4  0000 0000 
00007CE8  0000 0000 
00007CEC  0000 00   
                    12188          section   data
00007CF0            12189                   align
          0000 7CF0 12190   DataStart       equ       *
                    12191   
                    12192   *********************************************************************************************************
                    12193   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    12194   * to ram as part of the CStart routine in this file
                    12195   *********************************************************************************************************
                    12196   
                    12197          section   bss
00007CF0            12198                   align
          0000 7CF0 12199   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    12200   
                    12201   *********************************************************************************************************
                    12202   * Section for Uninitialised Data held in ROM as constants
                    12203   *********************************************************************************************************
                    12204   
0B000000            12205                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0000 12206   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    12207   
                    12208   
0B000000            12209   bss             org       bss
                    12210   
                    12211   *********************************************************************************************************
                    12212   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    12213   * install the exception handler using the C function InstallExceptionHandler()
                    12214   *********************************************************************************************************
                    12215   
                    12216   
                    12217   
0B000000            12218   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            12219   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            12220   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            12221   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            12222   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            12223   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            12224   VCheck           ds.l    1      ditto
0B00001C            12225   VTrapV           ds.l    1      ditto
0B000020            12226   VPrivilege       ds.l    1      ditto
0B000024            12227   VTrace           ds.l    1
0B000028            12228   VLine1010emul    ds.l    1
0B00002C            12229   VLine1111emul    ds.l    1
0B000030            12230   VUnassigned1     ds.l    1
0B000034            12231   VUnassigned2     ds.l    1
0B000038            12232   VUnassigned3     ds.l    1
0B00003C            12233   VUninit_IRQ      ds.l    1
0B000040            12234   VUnassigned4     ds.l    1
0B000044            12235   VUnassigned5     ds.l    1
0B000048            12236   VUnassigned6     ds.l    1
0B00004C            12237   VUnassigned7     ds.l    1
0B000050            12238   VUnassigned8     ds.l    1
0B000054            12239   VUnassigned9     ds.l    1
0B000058            12240   VUnassigned10    ds.l    1
0B00005C            12241   VUnassigned11    ds.l    1
0B000060            12242   VSpuriousIRQ     ds.l    1
                    12243   
                    12244   * Interrupt handlers Vector 25-31
0B000064            12245   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            12246   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            12247   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            12248   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            12249   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            12250   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            12251   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    12252   
                    12253   * Trap Handler vectors 32-47
0B000080            12254   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            12255   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            12256   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            12257   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            12258   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            12259   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            12260   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            12261   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            12262   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            12263   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            12264   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            12265   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            12266   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            12267   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            12268   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            12269   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    12270   
                    12271   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    12272   
                    12273   ***********************************************************************************************************
                    12274   * Other Variables
                    12275   ***********************************************************************************************************
                    12276   *__DebugA5       ds.l    1
                    12277   *__UserA5        ds.l    1
                    12278   
                    12279   ***********************************************************************************************************
0B0000C0            12280   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            12281   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            12282   __heap:         ds.l    0       ; pointers for malloc functions
                    12283   
                    12284   *__himem:       ds.l    himem            ; highest memory location + 1
                    12285   *__stklen:      ds.l    stklen           ; default stack size
                    12286   
                    12287   *********************************************************************************************************
                    12288   * Section for Heap
                    12289   *********************************************************************************************************
                    12290   
                    12291   _i:
0B0000C4            12292          ds.b      4
                    12293   _x:
0B0000C8            12294          ds.b      4
                    12295   _y:
0B0000CC            12296          ds.b      4
                    12297   _z:
0B0000D0            12298          ds.b      4
                    12299   _PortA_Count:
0B0000D4            12300          ds.b      4
                    12301   _Trace:
0B0000D8            12302          ds.b      4
                    12303   _GoFlag:
0B0000DC            12304          ds.b      4
                    12305   _Echo:
0B0000E0            12306          ds.b      4
                    12307   _d0:
0B0000E4            12308          ds.b      4
                    12309   _d1:
0B0000E8            12310          ds.b      4
                    12311   _d2:
0B0000EC            12312          ds.b      4
                    12313   _d3:
0B0000F0            12314          ds.b      4
                    12315   _d4:
0B0000F4            12316          ds.b      4
                    12317   _d5:
0B0000F8            12318          ds.b      4
                    12319   _d6:
0B0000FC            12320          ds.b      4
                    12321   _d7:
0B000100            12322          ds.b      4
                    12323   _a0:
0B000104            12324          ds.b      4
                    12325   _a1:
0B000108            12326          ds.b      4
                    12327   _a2:
0B00010C            12328          ds.b      4
                    12329   _a3:
0B000110            12330          ds.b      4
                    12331   _a4:
0B000114            12332          ds.b      4
                    12333   _a5:
0B000118            12334          ds.b      4
                    12335   _a6:
0B00011C            12336          ds.b      4
                    12337   _PC:
0B000120            12338          ds.b      4
                    12339   _SSP:
0B000124            12340          ds.b      4
                    12341   _USP:
0B000128            12342          ds.b      4
                    12343   _SR:
0B00012C            12344          ds.b      2
                    12345   _BreakPointAddress:
0B00012E            12346          ds.b      32
                    12347   _BreakPointInstruction:
0B00014E            12348          ds.b      16
                    12349   _BreakPointSetOrCleared:
0B00015E            12350          ds.b      32
                    12351   _InstructionSize:
0B00017E            12352          ds.b      4
                    12353   _WatchPointAddress:
0B000182            12354          ds.b      32
                    12355   _WatchPointSetOrCleared:
0B0001A2            12356          ds.b      32
                    12357   _WatchPointString:
0B0001C2            12358          ds.b      800
                    12359   _Instruction:
0B0004E2            12360          ds.b      100
                    12361   _TempString:
0B000546            12362          ds.b      100
                    12363          section   heap
0B0005AA            12364                   align
          0B00 05AA 12365   bssEnd          equ *                   end of storage space for unitialised variables
                    12366   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 05AA 12367   heap   equ       *
0B0005AA            12368                    align
          0000 0000

Assembly errors: 0
