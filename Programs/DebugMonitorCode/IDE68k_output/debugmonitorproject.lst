680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 01 Mar 2019      Time: 20:26:30          Source: C:\CYGWIN64\HOME\SABAS\M68K\PROGRAMS\DEBUGMONITORCODE\IDE68K_OUTPUT\DEBUGMONITORPROJECT.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05AA 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2E22      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2484      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\CYGWIN64\HOME\SABAS\M68K\PROGRAMS\DEBUGMONITORCODE\DEBUG MONITOR FILES\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /*************************************************************
                     478   ; ** SPI Controller registers
                     479   ; **************************************************************/
                     480   ; // SPI Registers
                     481   ; #define SPI_Control         (*(volatile unsigned char *)(0x00408020))
                     482   ; #define SPI_Status          (*(volatile unsigned char *)(0x00408022))
                     483   ; #define SPI_Data            (*(volatile unsigned char *)(0x00408024))
                     484   ; #define SPI_Ext             (*(volatile unsigned char *)(0x00408026))
                     485   ; #define SPI_CS              (*(volatile unsigned char *)(0x00408028))
                     486   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                     487   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF
                     488   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     489   ; unsigned int i, x, y, z, PortA_Count;
                     490   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     491   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     492   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     493   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     494   ; unsigned int PC, SSP, USP ;
                     495   ; unsigned short int SR;
                     496   ; // Breakpoint variables
                     497   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     498   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     499   ; unsigned int BreakPointSetOrCleared[8] ;
                     500   ; unsigned int InstructionSize ;
                     501   ; // watchpoint variables
                     502   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     503   ; unsigned int WatchPointSetOrCleared[8] ;
                     504   ; char WatchPointString[8][100] ;
                     505   ; // for disassembly of program
                     506   ; char    Instruction[100] ;
                     507   ; char    TempString[100] ;
                     508   ; /************************************************************************************
                     509   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     510   ; ************************************************************************************/
                     511   ; void Wait1ms(void)
                     512   ; {
                     513   _Wait1ms:
00000932  2F02       514          move.l    D2,-(A7)
                     515   ; long int  i ;
                     516   ; for(i = 0; i < 1000; i ++)
00000934  4282       517          clr.l     D2
                     518   Wait1ms_1:
00000936  0C82 0000  519          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       520          bge.s     Wait1ms_3
0000093E  5282       521          addq.l    #1,D2
00000940  60F4       522          bra       Wait1ms_1
                     523   Wait1ms_3:
00000942  241F       524          move.l    (A7)+,D2
00000944  4E75       525          rts
                     526   ; ;
                     527   ; }
                     528   ; /************************************************************************************
                     529   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     530   ; **************************************************************************************/
                     531   ; void Wait3ms(void)
                     532   ; {
                     533   _Wait3ms:
00000946  2F02       534          move.l    D2,-(A7)
                     535   ; int i ;
                     536   ; for(i = 0; i < 3; i++)
00000948  4282       537          clr.l     D2
                     538   Wait3ms_1:
0000094A  0C82 0000  539          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       540          bge.s     Wait3ms_3
                     541   ; Wait1ms() ;
00000952  4EB8 0932  542          jsr       _Wait1ms
00000956  5282       543          addq.l    #1,D2
00000958  60F0       544          bra       Wait3ms_1
                     545   Wait3ms_3:
0000095A  241F       546          move.l    (A7)+,D2
0000095C  4E75       547          rts
                     548   ; }
                     549   ; /*********************************************************************************************
                     550   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     551   ; *********************************************************************************************/
                     552   ; void Init_LCD(void)
                     553   ; {
                     554   _Init_LCD:
                     555   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  556          move.b    #12,4194336
00000962  0040 0020 
                     557   ; Wait3ms() ;
00000966  4EB8 0946  558          jsr       _Wait3ms
                     559   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  560          move.b    #56,4194336
0000096E  0040 0020 
                     561   ; Wait3ms() ;
00000972  4EB8 0946  562          jsr       _Wait3ms
00000976  4E75       563          rts
                     564   ; }
                     565   ; /******************************************************************************
                     566   ; *subroutine to output a single character held in d1 to the LCD display
                     567   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     568   ; *current cursor position
                     569   ; *******************************************************************************/
                     570   ; void Outchar(int c)
                     571   ; {
                     572   _Outchar:
00000978  4E56 0000  573          link      A6,#0
                     574   ; LCDdata = (char)(c);
0000097C  202E 0008  575          move.l    8(A6),D0
00000980  13C0 0040  576          move.b    D0,4194338
00000984  0022      
                     577   ; Wait1ms() ;
00000986  4EB8 0932  578          jsr       _Wait1ms
0000098A  4E5E       579          unlk      A6
0000098C  4E75       580          rts
                     581   ; }
                     582   ; /**********************************************************************************
                     583   ; *subroutine to output a message at the current cursor position of the LCD display
                     584   ; ************************************************************************************/
                     585   ; void OutMess(char *theMessage)
                     586   ; {
                     587   _OutMess:
0000098E  4E56 FFFC  588          link      A6,#-4
                     589   ; char c ;
                     590   ; while((c = *theMessage++) != (char)(0))
                     591   OutMess_1:
00000992  206E 0008  592          move.l    8(A6),A0
00000996  52AE 0008  593          addq.l    #1,8(A6)
0000099A  1D50 FFFF  594          move.b    (A0),-1(A6)
0000099E  1010       595          move.b    (A0),D0
000009A0  6712       596          beq.s     OutMess_3
                     597   ; Outchar(c) ;
000009A2  122E FFFF  598          move.b    -1(A6),D1
000009A6  4881       599          ext.w     D1
000009A8  48C1       600          ext.l     D1
000009AA  2F01       601          move.l    D1,-(A7)
000009AC  4EB8 0978  602          jsr       _Outchar
000009B0  584F       603          addq.w    #4,A7
000009B2  60DE       604          bra       OutMess_1
                     605   OutMess_3:
000009B4  4E5E       606          unlk      A6
000009B6  4E75       607          rts
                     608   ; }
                     609   ; /******************************************************************************
                     610   ; *subroutine to clear the line by issuing 24 space characters
                     611   ; *******************************************************************************/
                     612   ; void Clearln(void)
                     613   ; {
                     614   _Clearln:
000009B8  2F02       615          move.l    D2,-(A7)
                     616   ; unsigned char i ;
                     617   ; for(i = 0; i < 24; i ++)
000009BA  4202       618          clr.b     D2
                     619   Clearln_1:
000009BC  0C02 0018  620          cmp.b     #24,D2
000009C0  640E       621          bhs.s     Clearln_3
                     622   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  623          pea       32
000009C6  4EB8 0978  624          jsr       _Outchar
000009CA  584F       625          addq.w    #4,A7
000009CC  5202       626          addq.b    #1,D2
000009CE  60EC       627          bra       Clearln_1
                     628   Clearln_3:
000009D0  241F       629          move.l    (A7)+,D2
000009D2  4E75       630          rts
                     631   ; }
                     632   ; /******************************************************************************
                     633   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     634   ; *******************************************************************************/
                     635   ; void Oline0(char *theMessage)
                     636   ; {
                     637   _Oline0:
000009D4  4E56 0000  638          link      A6,#0
                     639   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  640          move.b    #128,4194336
000009DC  0040 0020 
                     641   ; Wait3ms();
000009E0  4EB8 0946  642          jsr       _Wait3ms
                     643   ; Clearln() ;
000009E4  4EB8 09B8  644          jsr       _Clearln
                     645   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  646          move.b    #128,4194336
000009EC  0040 0020 
                     647   ; Wait3ms() ;
000009F0  4EB8 0946  648          jsr       _Wait3ms
                     649   ; OutMess(theMessage) ;
000009F4  2F2E 0008  650          move.l    8(A6),-(A7)
000009F8  4EB8 098E  651          jsr       _OutMess
000009FC  584F       652          addq.w    #4,A7
000009FE  4E5E       653          unlk      A6
00000A00  4E75       654          rts
                     655   ; }
                     656   ; /******************************************************************************
                     657   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     658   ; *******************************************************************************/
                     659   ; void Oline1(char *theMessage)
                     660   ; {
                     661   _Oline1:
00000A02  4E56 0000  662          link      A6,#0
                     663   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  664          move.b    #192,4194336
00000A0A  0040 0020 
                     665   ; Wait3ms();
00000A0E  4EB8 0946  666          jsr       _Wait3ms
                     667   ; Clearln() ;
00000A12  4EB8 09B8  668          jsr       _Clearln
                     669   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  670          move.b    #192,4194336
00000A1A  0040 0020 
                     671   ; Wait3ms() ;
00000A1E  4EB8 0946  672          jsr       _Wait3ms
                     673   ; OutMess(theMessage) ;
00000A22  2F2E 0008  674          move.l    8(A6),-(A7)
00000A26  4EB8 098E  675          jsr       _OutMess
00000A2A  584F       676          addq.w    #4,A7
00000A2C  4E5E       677          unlk      A6
00000A2E  4E75       678          rts
                     679   ; }
                     680   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     681   ; {
                     682   _InstallExceptionHandler:
00000A30  4E56 FFFC  683          link      A6,#-4
                     684   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  685          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     686   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  687          move.l    -4(A6),A0
00000A40  202E 000C  688          move.l    12(A6),D0
00000A44  E588       689          lsl.l     #2,D0
00000A46  21AE 0008  690          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       691          unlk      A6
00000A4E  4E75       692          rts
                     693   ; }
                     694   ; void TestLEDS(void)
                     695   ; {
                     696   _TestLEDS:
00000A50  48E7 3000  697          movem.l   D2/D3,-(A7)
                     698   ; int delay ;
                     699   ; unsigned char count = 0 ;
00000A54  4202       700          clr.b     D2
                     701   ; while(1)    {
                     702   TestLEDS_1:
                     703   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       704          move.b    D2,D0
00000A58  E908       705          lsl.b     #4,D0
00000A5A  1202       706          move.b    D2,D1
00000A5C  C23C 000F  707          and.b     #15,D1
00000A60  D001       708          add.b     D1,D0
00000A62  13C0 0040  709          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  710          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  711          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  712          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  713          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  714          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  715          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  716          move.b    D0,4194304
00000A90  0000      
                     717   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       718          clr.l     D3
                     719   TestLEDS_4:
00000A94  0C83 0003  720          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       721          bge.s     TestLEDS_6
00000A9C  5283       722          addq.l    #1,D3
00000A9E  60F4       723          bra       TestLEDS_4
                     724   TestLEDS_6:
                     725   ; ;
                     726   ; count ++;
00000AA0  5202       727          addq.b    #1,D2
00000AA2  60B2       728          bra       TestLEDS_1
                     729   ; }
                     730   ; }
                     731   ; void SwitchTest(void)
                     732   ; {
                     733   _SwitchTest:
00000AA4  48E7 3020  734          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  735          lea       _printf.L,A2
00000AAC  5A98      
                     736   ; int i, switches = 0 ;
00000AAE  4283       737          clr.l     D3
                     738   ; printf("\r\n") ;
00000AB0  4879 0000  739          pea       @m68kde~1_1.L
00000AB4  63AA      
00000AB6  4E92       740          jsr       (A2)
00000AB8  584F       741          addq.w    #4,A7
                     742   ; while(1)    {
                     743   SwitchTest_1:
                     744   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  745          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  746          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       747          lsl.l     #8,D0
00000AC8  1239 0040  748          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  749          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       750          or.l      D1,D0
00000AD6  2600       751          move.l    D0,D3
                     752   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  753          pea       @m68kde~1_2.L
00000ADC  63AE      
00000ADE  4E92       754          jsr       (A2)
00000AE0  584F       755          addq.w    #4,A7
                     756   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  757          move.l    #128,D2
00000AE6  0080      
                     758   SwitchTest_4:
00000AE8  0C82 0000  759          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       760          ble.s     SwitchTest_6
                     761   ; if((switches & i) == 0)
00000AF0  2003       762          move.l    D3,D0
00000AF2  C082       763          and.l     D2,D0
00000AF4  660C       764          bne.s     SwitchTest_7
                     765   ; printf("0") ;
00000AF6  4879 0000  766          pea       @m68kde~1_3.L
00000AFA  63C4      
00000AFC  4E92       767          jsr       (A2)
00000AFE  584F       768          addq.w    #4,A7
00000B00  600A       769          bra.s     SwitchTest_8
                     770   SwitchTest_7:
                     771   ; else
                     772   ; printf("1") ;
00000B02  4879 0000  773          pea       @m68kde~1_4.L
00000B06  63C6      
00000B08  4E92       774          jsr       (A2)
00000B0A  584F       775          addq.w    #4,A7
                     776   SwitchTest_8:
00000B0C  E282       777          asr.l     #1,D2
00000B0E  60D8       778          bra       SwitchTest_4
                     779   SwitchTest_6:
00000B10  60A8       780          bra       SwitchTest_1
                     781   ; }
                     782   ; }
                     783   ; }
                     784   ; /*********************************************************************************************
                     785   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     786   ; *********************************************************************************************/
                     787   ; void Init_RS232(void)
                     788   ; {
                     789   _Init_RS232:
                     790   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  791          move.b    #21,4194368
00000B16  0040 0040 
                     792   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  793          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       794          rts
                     795   ; }
                     796   ; int kbhit(void)
                     797   ; {
                     798   _kbhit:
                     799   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  800          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  801          and.b     #1,D0
00000B2E  0C00 0001  802          cmp.b     #1,D0
00000B32  6604       803          bne.s     kbhit_1
                     804   ; return 1 ;
00000B34  7001       805          moveq     #1,D0
00000B36  6002       806          bra.s     kbhit_3
                     807   kbhit_1:
                     808   ; else
                     809   ; return 0 ;
00000B38  4280       810          clr.l     D0
                     811   kbhit_3:
00000B3A  4E75       812          rts
                     813   ; }
                     814   ; /*********************************************************************************************************
                     815   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     816   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     817   ; **  to allow the board to communicate with HyperTerminal Program
                     818   ; **
                     819   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     820   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     821   ; **  call _putch() also
                     822   ; *********************************************************************************************************/
                     823   ; int _putch( int c)
                     824   ; {
                     825   __putch:
00000B3C  4E56 0000  826          link      A6,#0
                     827   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     828   _putch_1:
00000B40  1039 0040  829          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  830          and.b     #2,D0
00000B4A  0C00 0002  831          cmp.b     #2,D0
00000B4E  6702       832          beq.s     _putch_3
00000B50  60EE       833          bra       _putch_1
                     834   _putch_3:
                     835   ; ;
                     836   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  837          move.l    8(A6),D0
00000B56  C03C 007F  838          and.b     #127,D0
00000B5A  13C0 0040  839          move.b    D0,4194370
00000B5E  0042      
                     840   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  841          move.l    8(A6),D0
00000B64  4E5E       842          unlk      A6
00000B66  4E75       843          rts
                     844   ; }
                     845   ; /*********************************************************************************************************
                     846   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     847   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     848   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     849   ; **
                     850   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     851   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     852   ; **  call _getch() also
                     853   ; *********************************************************************************************************/
                     854   ; int _getch( void )
                     855   ; {
                     856   __getch:
00000B68  2F02       857          move.l    D2,-(A7)
                     858   ; int c ;
                     859   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     860   _getch_1:
00000B6A  1039 0040  861          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  862          and.b     #1,D0
00000B74  0C00 0001  863          cmp.b     #1,D0
00000B78  6702       864          beq.s     _getch_3
00000B7A  60EE       865          bra       _getch_1
                     866   _getch_3:
                     867   ; ;
                     868   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  869          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  870          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  871          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       872          move.l    D0,D2
                     873   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     874   ; if(Echo)
00000B90  4AB9 0B00  875          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       876          beq.s     _getch_4
                     877   ; _putch(c);
00000B98  2F02       878          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  879          jsr       __putch
00000B9E  584F       880          addq.w    #4,A7
                     881   _getch_4:
                     882   ; return c ;
00000BA0  2002       883          move.l    D2,D0
00000BA2  241F       884          move.l    (A7)+,D2
00000BA4  4E75       885          rts
                     886   ; }
                     887   ; // flush the input stream for any unread characters
                     888   ; void FlushKeyboard(void)
                     889   ; {
                     890   _FlushKeyboard:
00000BA6  4E56 FFFC  891          link      A6,#-4
                     892   ; char c ;
                     893   ; while(1)    {
                     894   FlushKeyboard_1:
                     895   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  896          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  897          and.b     #1,D0
00000BB4  0C00 0001  898          cmp.b     #1,D0
00000BB8  6610       899          bne.s     FlushKeyboard_4
                     900   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  901          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  902          and.b     #127,D0
00000BC4  1D40 FFFF  903          move.b    D0,-1(A6)
00000BC8  6002       904          bra.s     FlushKeyboard_5
                     905   FlushKeyboard_4:
                     906   ; else
                     907   ; return ;
00000BCA  6002       908          bra.s     FlushKeyboard_6
                     909   FlushKeyboard_5:
00000BCC  60DC       910          bra       FlushKeyboard_1
                     911   FlushKeyboard_6:
00000BCE  4E5E       912          unlk      A6
00000BD0  4E75       913          rts
                     914   ; }
                     915   ; }
                     916   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     917   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     918   ; char xtod(int c)
                     919   ; {
                     920   _xtod:
00000BD2  4E56 0000  921          link      A6,#0
00000BD6  2F02       922          move.l    D2,-(A7)
00000BD8  242E 0008  923          move.l    8(A6),D2
                     924   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  925          cmp.b     #57,D2
00000BE0  6E08       926          bgt.s     xtod_1
                     927   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       928          move.b    D2,D0
00000BE4  0400 0030  929          sub.b     #48,D0
00000BE8  6014       930          bra.s     xtod_3
                     931   xtod_1:
                     932   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  933          cmp.b     #70,D2
00000BEE  6F08       934          ble.s     xtod_4
                     935   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       936          move.b    D2,D0
00000BF2  0400 0057  937          sub.b     #87,D0
00000BF6  6006       938          bra.s     xtod_3
                     939   xtod_4:
                     940   ; else
                     941   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       942          move.b    D2,D0
00000BFA  0400 0037  943          sub.b     #55,D0
                     944   xtod_3:
00000BFE  241F       945          move.l    (A7)+,D2
00000C00  4E5E       946          unlk      A6
00000C02  4E75       947          rts
                     948   ; }
                     949   ; int Get2HexDigits(char *CheckSumPtr)
                     950   ; {
                     951   _Get2HexDigits:
00000C04  4E56 0000  952          link      A6,#0
00000C08  2F02       953          move.l    D2,-(A7)
                     954   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       955          move.l    D0,-(A7)
00000C0C  4EB8 0B68  956          jsr       __getch
00000C10  2200       957          move.l    D0,D1
00000C12  201F       958          move.l    (A7)+,D0
00000C14  2F01       959          move.l    D1,-(A7)
00000C16  4EB8 0BD2  960          jsr       _xtod
00000C1A  584F       961          addq.w    #4,A7
00000C1C  C0BC 0000  962          and.l     #255,D0
00000C20  00FF      
00000C22  E980       963          asl.l     #4,D0
00000C24  2F00       964          move.l    D0,-(A7)
00000C26  2F01       965          move.l    D1,-(A7)
00000C28  4EB8 0B68  966          jsr       __getch
00000C2C  221F       967          move.l    (A7)+,D1
00000C2E  2F00       968          move.l    D0,-(A7)
00000C30  4EB8 0BD2  969          jsr       _xtod
00000C34  584F       970          addq.w    #4,A7
00000C36  2200       971          move.l    D0,D1
00000C38  201F       972          move.l    (A7)+,D0
00000C3A  C2BC 0000  973          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       974          or.l      D1,D0
00000C42  2400       975          move.l    D0,D2
                     976   ; if(CheckSumPtr)
00000C44  4AAE 0008  977          tst.l     8(A6)
00000C48  6706       978          beq.s     Get2HexDigits_1
                     979   ; *CheckSumPtr += i ;
00000C4A  206E 0008  980          move.l    8(A6),A0
00000C4E  D510       981          add.b     D2,(A0)
                     982   Get2HexDigits_1:
                     983   ; return i ;
00000C50  2002       984          move.l    D2,D0
00000C52  241F       985          move.l    (A7)+,D2
00000C54  4E5E       986          unlk      A6
00000C56  4E75       987          rts
                     988   ; }
                     989   ; int Get4HexDigits(char *CheckSumPtr)
                     990   ; {
                     991   _Get4HexDigits:
00000C58  4E56 0000  992          link      A6,#0
                     993   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  994          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  995          jsr       _Get2HexDigits
00000C64  584F       996          addq.w    #4,A7
00000C66  E180       997          asl.l     #8,D0
00000C68  2F00       998          move.l    D0,-(A7)
00000C6A  2F2E 0008  999          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04 1000          jsr       _Get2HexDigits
00000C72  584F      1001          addq.w    #4,A7
00000C74  2200      1002          move.l    D0,D1
00000C76  201F      1003          move.l    (A7)+,D0
00000C78  8081      1004          or.l      D1,D0
00000C7A  4E5E      1005          unlk      A6
00000C7C  4E75      1006          rts
                    1007   ; }
                    1008   ; int Get6HexDigits(char *CheckSumPtr)
                    1009   ; {
                    1010   _Get6HexDigits:
00000C7E  4E56 0000 1011          link      A6,#0
                    1012   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1013          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1014          jsr       _Get4HexDigits
00000C8A  584F      1015          addq.w    #4,A7
00000C8C  E180      1016          asl.l     #8,D0
00000C8E  2F00      1017          move.l    D0,-(A7)
00000C90  2F2E 0008 1018          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1019          jsr       _Get2HexDigits
00000C98  584F      1020          addq.w    #4,A7
00000C9A  2200      1021          move.l    D0,D1
00000C9C  201F      1022          move.l    (A7)+,D0
00000C9E  8081      1023          or.l      D1,D0
00000CA0  4E5E      1024          unlk      A6
00000CA2  4E75      1025          rts
                    1026   ; }
                    1027   ; int Get8HexDigits(char *CheckSumPtr)
                    1028   ; {
                    1029   _Get8HexDigits:
00000CA4  4E56 0000 1030          link      A6,#0
                    1031   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1032          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1033          jsr       _Get4HexDigits
00000CB0  584F      1034          addq.w    #4,A7
00000CB2  E180      1035          asl.l     #8,D0
00000CB4  E180      1036          asl.l     #8,D0
00000CB6  2F00      1037          move.l    D0,-(A7)
00000CB8  2F2E 0008 1038          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1039          jsr       _Get4HexDigits
00000CC0  584F      1040          addq.w    #4,A7
00000CC2  2200      1041          move.l    D0,D1
00000CC4  201F      1042          move.l    (A7)+,D0
00000CC6  8081      1043          or.l      D1,D0
00000CC8  4E5E      1044          unlk      A6
00000CCA  4E75      1045          rts
                    1046   ; }
                    1047   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1048   _strcatInstruction:
00000CCC  4E56 0000 1049          link      A6,#0
00000CD0  2F2E 0008 1050          move.l    8(A6),-(A7)
00000CD4  4879 0B00 1051          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1052          jsr       _strcat
00000CDE  5A66      
00000CE0  504F      1053          addq.w    #8,A7
00000CE2  4E5E      1054          unlk      A6
00000CE4  4E75      1055          rts
                    1056   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1057   _strcpyInstruction:
00000CE6  4E56 0000 1058          link      A6,#0
00000CEA  2F2E 0008 1059          move.l    8(A6),-(A7)
00000CEE  4879 0B00 1060          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1061          jsr       _strcpy
00000CF8  58C6      
00000CFA  504F      1062          addq.w    #8,A7
00000CFC  4E5E      1063          unlk      A6
00000CFE  4E75      1064          rts
                    1065   ; void DisassembleProgram(void )
                    1066   ; {
                    1067   _DisassembleProgram:
00000D00  4E56 FFF8 1068          link      A6,#-8
00000D04  48E7 3038 1069          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0B00 1070          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1071          lea       _printf.L,A3
00000D12  5A98      
00000D14  49F9 0B00 1072          lea       _Instruction.L,A4
00000D18  04E2      
                    1073   ; char c ;
                    1074   ; int i, j ;
                    1075   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1076   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1077          pea       @m68kde~1_5.L
00000D1E  63C8      
00000D20  4E93      1078          jsr       (A3)
00000D22  584F      1079          addq.w    #4,A7
                    1080   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1081          clr.l     -(A7)
00000D26  4EB8 0CA4 1082          jsr       _Get8HexDigits
00000D2A  584F      1083          addq.w    #4,A7
00000D2C  2400      1084          move.l    D0,D2
                    1085   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1086          pea       @m68kde~1_6.L
00000D32  63E0      
00000D34  4E93      1087          jsr       (A3)
00000D36  584F      1088          addq.w    #4,A7
                    1089   ; while(1)    {
                    1090   DisassembleProgram_1:
                    1091   ; for(i = 0; i < 20; i ++)
00000D38  4283      1092          clr.l     D3
                    1093   DisassembleProgram_4:
00000D3A  0C83 0000 1094          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1095          bge       DisassembleProgram_6
                    1096   ; {
                    1097   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1098          move.l    #1,(A2)
00000D48  0001      
                    1099   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1100          move.l    D2,-(A7)
00000D4C  4EB9 0000 1101          jsr       _DisassembleInstruction
00000D50  3A24      
00000D52  584F      1102          addq.w    #4,A7
                    1103   ; if(InstructionSize == 1)
00000D54  2012      1104          move.l    (A2),D0
00000D56  0C80 0000 1105          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1106          bne.s     DisassembleProgram_7
                    1107   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1108          move.l    A4,-(A7)
00000D60  2042      1109          move.l    D2,A0
00000D62  3210      1110          move.w    (A0),D1
00000D64  C2BC 0000 1111          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1112          move.l    D1,-(A7)
00000D6C  2F02      1113          move.l    D2,-(A7)
00000D6E  4879 0000 1114          pea       @m68kde~1_7.L
00000D72  6404      
00000D74  4E93      1115          jsr       (A3)
00000D76  DEFC 0010 1116          add.w     #16,A7
00000D7A  6000 0138 1117          bra       DisassembleProgram_15
                    1118   DisassembleProgram_7:
                    1119   ; else if(InstructionSize == 2)
00000D7E  2012      1120          move.l    (A2),D0
00000D80  0C80 0000 1121          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1122          bne.s     DisassembleProgram_9
                    1123   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1124          move.l    A4,-(A7)
00000D8A  2042      1125          move.l    D2,A0
00000D8C  3228 0002 1126          move.w    2(A0),D1
00000D90  C2BC 0000 1127          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1128          move.l    D1,-(A7)
00000D98  2042      1129          move.l    D2,A0
00000D9A  3210      1130          move.w    (A0),D1
00000D9C  C2BC 0000 1131          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1132          move.l    D1,-(A7)
00000DA4  2F02      1133          move.l    D2,-(A7)
00000DA6  4879 0000 1134          pea       @m68kde~1_8.L
00000DAA  642C      
00000DAC  4E93      1135          jsr       (A3)
00000DAE  DEFC 0014 1136          add.w     #20,A7
00000DB2  6000 0100 1137          bra       DisassembleProgram_15
                    1138   DisassembleProgram_9:
                    1139   ; else if(InstructionSize == 3)
00000DB6  2012      1140          move.l    (A2),D0
00000DB8  0C80 0000 1141          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1142          bne       DisassembleProgram_11
                    1143   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1144          move.l    A4,-(A7)
00000DC4  2042      1145          move.l    D2,A0
00000DC6  3228 0004 1146          move.w    4(A0),D1
00000DCA  C2BC 0000 1147          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1148          move.l    D1,-(A7)
00000DD2  2042      1149          move.l    D2,A0
00000DD4  3228 0002 1150          move.w    2(A0),D1
00000DD8  C2BC 0000 1151          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1152          move.l    D1,-(A7)
00000DE0  2042      1153          move.l    D2,A0
00000DE2  3210      1154          move.w    (A0),D1
00000DE4  C2BC 0000 1155          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1156          move.l    D1,-(A7)
00000DEC  2F02      1157          move.l    D2,-(A7)
00000DEE  4879 0000 1158          pea       @m68kde~1_9.L
00000DF2  6454      
00000DF4  4E93      1159          jsr       (A3)
00000DF6  DEFC 0018 1160          add.w     #24,A7
00000DFA  6000 00B8 1161          bra       DisassembleProgram_15
                    1162   DisassembleProgram_11:
                    1163   ; else if(InstructionSize == 4)
00000DFE  2012      1164          move.l    (A2),D0
00000E00  0C80 0000 1165          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1166          bne       DisassembleProgram_13
                    1167   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1168          move.l    A4,-(A7)
00000E0C  2042      1169          move.l    D2,A0
00000E0E  3228 0006 1170          move.w    6(A0),D1
00000E12  C2BC 0000 1171          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1172          move.l    D1,-(A7)
00000E1A  2042      1173          move.l    D2,A0
00000E1C  3228 0004 1174          move.w    4(A0),D1
00000E20  C2BC 0000 1175          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1176          move.l    D1,-(A7)
00000E28  2042      1177          move.l    D2,A0
00000E2A  3228 0002 1178          move.w    2(A0),D1
00000E2E  C2BC 0000 1179          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1180          move.l    D1,-(A7)
00000E36  2042      1181          move.l    D2,A0
00000E38  3210      1182          move.w    (A0),D1
00000E3A  C2BC 0000 1183          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1184          move.l    D1,-(A7)
00000E42  2F02      1185          move.l    D2,-(A7)
00000E44  4879 0000 1186          pea       @m68kde~1_10.L
00000E48  647C      
00000E4A  4E93      1187          jsr       (A3)
00000E4C  DEFC 001C 1188          add.w     #28,A7
00000E50  6000 0062 1189          bra       DisassembleProgram_15
                    1190   DisassembleProgram_13:
                    1191   ; else if(InstructionSize == 5)
00000E54  2012      1192          move.l    (A2),D0
00000E56  0C80 0000 1193          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1194          bne       DisassembleProgram_15
                    1195   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1196          move.l    A4,-(A7)
00000E62  2042      1197          move.l    D2,A0
00000E64  3228 0008 1198          move.w    8(A0),D1
00000E68  C2BC 0000 1199          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1200          move.l    D1,-(A7)
00000E70  2042      1201          move.l    D2,A0
00000E72  3228 0006 1202          move.w    6(A0),D1
00000E76  C2BC 0000 1203          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1204          move.l    D1,-(A7)
00000E7E  2042      1205          move.l    D2,A0
00000E80  3228 0004 1206          move.w    4(A0),D1
00000E84  C2BC 0000 1207          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1208          move.l    D1,-(A7)
00000E8C  2042      1209          move.l    D2,A0
00000E8E  3228 0002 1210          move.w    2(A0),D1
00000E92  C2BC 0000 1211          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1212          move.l    D1,-(A7)
00000E9A  2042      1213          move.l    D2,A0
00000E9C  3210      1214          move.w    (A0),D1
00000E9E  C2BC 0000 1215          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1216          move.l    D1,-(A7)
00000EA6  2F02      1217          move.l    D2,-(A7)
00000EA8  4879 0000 1218          pea       @m68kde~1_11.L
00000EAC  64A4      
00000EAE  4E93      1219          jsr       (A3)
00000EB0  DEFC 0020 1220          add.w     #32,A7
                    1221   DisassembleProgram_15:
                    1222   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1223          move.l    (A2),D0
00000EB6  E388      1224          lsl.l     #1,D0
00000EB8  D480      1225          add.l     D0,D2
00000EBA  5283      1226          addq.l    #1,D3
00000EBC  6000 FE7C 1227          bra       DisassembleProgram_4
                    1228   DisassembleProgram_6:
                    1229   ; }
                    1230   ; c = _getch() ;
00000EC0  4EB8 0B68 1231          jsr       __getch
00000EC4  1D40 FFFB 1232          move.b    D0,-5(A6)
                    1233   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1234          move.b    -5(A6),D0
00000ECC  0C00 001B 1235          cmp.b     #27,D0
00000ED0  6602      1236          bne.s     DisassembleProgram_17
                    1237   ; return ;
00000ED2  6004      1238          bra.s     DisassembleProgram_19
                    1239   DisassembleProgram_17:
00000ED4  6000 FE62 1240          bra       DisassembleProgram_1
                    1241   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1242          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1243          unlk      A6
00000EDE  4E75      1244          rts
                    1245   ; }
                    1246   ; }
                    1247   ; void DumpMemory(void)   // simple dump memory fn
                    1248   ; {
                    1249   _DumpMemory:
00000EE0  48E7 3C30 1250          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1251          lea       _printf.L,A2
00000EE8  5A98      
00000EEA  47F9 0000 1252          lea       _putch.L,A3
00000EEE  59B4      
                    1253   ; int i, j ;
                    1254   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1255   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1256          pea       @m68kde~1_12.L
00000EF4  64CC      
00000EF6  4E92      1257          jsr       (A2)
00000EF8  584F      1258          addq.w    #4,A7
                    1259   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1260          pea       @m68kde~1_5.L
00000EFE  63C8      
00000F00  4E92      1261          jsr       (A2)
00000F02  584F      1262          addq.w    #4,A7
                    1263   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1264          clr.l     -(A7)
00000F06  4EB8 0CA4 1265          jsr       _Get8HexDigits
00000F0A  584F      1266          addq.w    #4,A7
00000F0C  2600      1267          move.l    D0,D3
                    1268   ; while(1)    {
                    1269   DumpMemory_1:
                    1270   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1271          clr.l     D5
                    1272   DumpMemory_4:
00000F10  0C85 0000 1273          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1274          bge       DumpMemory_6
                    1275   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1276          move.l    D3,-(A7)
00000F1C  4879 0000 1277          pea       @m68kde~1_13.L
00000F20  6506      
00000F22  4E92      1278          jsr       (A2)
00000F24  504F      1279          addq.w    #8,A7
                    1280   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1281          clr.l     D2
                    1282   DumpMemory_7:
00000F28  0C82 0000 1283          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1284          bge.s     DumpMemory_9
                    1285   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1286          move.l    D3,A0
00000F32  1230 2800 1287          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1288          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1289          move.l    D1,-(A7)
00000F3E  4879 0000 1290          pea       @m68kde~1_14.L
00000F42  650E      
00000F44  4E92      1291          jsr       (A2)
00000F46  504F      1292          addq.w    #8,A7
                    1293   ; putchar(' ') ;
00000F48  4878 0020 1294          pea       32
00000F4C  4E93      1295          jsr       (A3)
00000F4E  584F      1296          addq.w    #4,A7
00000F50  5282      1297          addq.l    #1,D2
00000F52  60D4      1298          bra       DumpMemory_7
                    1299   DumpMemory_9:
                    1300   ; }
                    1301   ; // now display the data as ASCII at the end
                    1302   ; printf("  ") ;
00000F54  4879 0000 1303          pea       @m68kde~1_15.L
00000F58  6514      
00000F5A  4E92      1304          jsr       (A2)
00000F5C  584F      1305          addq.w    #4,A7
                    1306   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1307          clr.l     D2
                    1308   DumpMemory_10:
00000F60  0C82 0000 1309          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1310          bge       DumpMemory_12
                    1311   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1312          move.l    D3,A0
00000F6C  1030 2800 1313          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1314          and.b     #127,D0
00000F74  1800      1315          move.b    D0,D4
                    1316   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1317          cmp.b     #127,D4
00000F7A  6206      1318          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1319          cmp.b     #32,D4
00000F80  640A      1320          bhs.s     DumpMemory_13
                    1321   DumpMemory_15:
                    1322   ; putchar('.') ;
00000F82  4878 002E 1323          pea       46
00000F86  4E93      1324          jsr       (A3)
00000F88  584F      1325          addq.w    #4,A7
00000F8A  6012      1326          bra.s     DumpMemory_14
                    1327   DumpMemory_13:
                    1328   ; else
                    1329   ; putchar(RamPtr[j]) ;
00000F8C  2043      1330          move.l    D3,A0
00000F8E  1230 2800 1331          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1332          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1333          move.l    D1,-(A7)
00000F9A  4E93      1334          jsr       (A3)
00000F9C  584F      1335          addq.w    #4,A7
                    1336   DumpMemory_14:
00000F9E  5282      1337          addq.l    #1,D2
00000FA0  60BE      1338          bra       DumpMemory_10
                    1339   DumpMemory_12:
                    1340   ; }
                    1341   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1342          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1343          addq.l    #1,D5
00000FAA  6000 FF64 1344          bra       DumpMemory_4
                    1345   DumpMemory_6:
                    1346   ; }
                    1347   ; printf("\r\n") ;
00000FAE  4879 0000 1348          pea       @m68kde~1_1.L
00000FB2  63AA      
00000FB4  4E92      1349          jsr       (A2)
00000FB6  584F      1350          addq.w    #4,A7
                    1351   ; c = _getch() ;
00000FB8  4EB8 0B68 1352          jsr       __getch
00000FBC  1800      1353          move.b    D0,D4
                    1354   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1355          cmp.b     #27,D4
00000FC2  6602      1356          bne.s     DumpMemory_16
                    1357   ; break ;
00000FC4  6004      1358          bra.s     DumpMemory_3
                    1359   DumpMemory_16:
00000FC6  6000 FF46 1360          bra       DumpMemory_1
                    1361   DumpMemory_3:
00000FCA  4CDF 0C3C 1362          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1363          rts
                    1364   ; }
                    1365   ; }
                    1366   ; void FillMemory()
                    1367   ; {
                    1368   _FillMemory:
00000FD0  48E7 3820 1369          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1370          lea       _printf.L,A2
00000FD8  5A98      
                    1371   ; char *StartRamPtr, *EndRamPtr ;
                    1372   ; unsigned char FillData ;
                    1373   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1374          pea       @m68kde~1_16.L
00000FDE  6518      
00000FE0  4E92      1375          jsr       (A2)
00000FE2  584F      1376          addq.w    #4,A7
                    1377   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1378          pea       @m68kde~1_5.L
00000FE8  63C8      
00000FEA  4E92      1379          jsr       (A2)
00000FEC  584F      1380          addq.w    #4,A7
                    1381   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1382          clr.l     -(A7)
00000FF0  4EB8 0CA4 1383          jsr       _Get8HexDigits
00000FF4  584F      1384          addq.w    #4,A7
00000FF6  2400      1385          move.l    D0,D2
                    1386   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1387          pea       @m68kde~1_17.L
00000FFC  652C      
00000FFE  4E92      1388          jsr       (A2)
00001000  584F      1389          addq.w    #4,A7
                    1390   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1391          clr.l     -(A7)
00001004  4EB8 0CA4 1392          jsr       _Get8HexDigits
00001008  584F      1393          addq.w    #4,A7
0000100A  2800      1394          move.l    D0,D4
                    1395   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1396          pea       @m68kde~1_18.L
00001010  6542      
00001012  4E92      1397          jsr       (A2)
00001014  584F      1398          addq.w    #4,A7
                    1399   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1400          clr.l     -(A7)
00001018  4EB8 0C04 1401          jsr       _Get2HexDigits
0000101C  584F      1402          addq.w    #4,A7
0000101E  1600      1403          move.b    D0,D3
                    1404   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1405          and.l     #255,D3
00001024  00FF      
00001026  2F03      1406          move.l    D3,-(A7)
00001028  2F04      1407          move.l    D4,-(A7)
0000102A  2F02      1408          move.l    D2,-(A7)
0000102C  4879 0000 1409          pea       @m68kde~1_19.L
00001030  6556      
00001032  4E92      1410          jsr       (A2)
00001034  DEFC 0010 1411          add.w     #16,A7
                    1412   ; while(StartRamPtr < EndRamPtr)
                    1413   FillMemory_1:
00001038  B484      1414          cmp.l     D4,D2
0000103A  6408      1415          bhs.s     FillMemory_3
                    1416   ; *StartRamPtr++ = FillData ;
0000103C  2042      1417          move.l    D2,A0
0000103E  5282      1418          addq.l    #1,D2
00001040  1083      1419          move.b    D3,(A0)
00001042  60F4      1420          bra       FillMemory_1
                    1421   FillMemory_3:
00001044  4CDF 041C 1422          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1423          rts
                    1424   ; }
                    1425   ; void Load_SRecordFile()
                    1426   ; {
                    1427   _Load_SRecordFile:
0000104A  4E56 FFDC 1428          link      A6,#-36
0000104E  48E7 3F3C 1429          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1430          lea       -6(A6),A2
00001056  47F8 0C04 1431          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1432          lea       _printf.L,A4
0000105E  5A98      
                    1433   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1434          clr.l     -18(A6)
00001064  3A7C 0000 1435          move.w    #0,A5
                    1436   ; int result, ByteCount ;
                    1437   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1438   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1439   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1440          moveq     #0,D7
                    1441   ; AddressFail = 0 ;
0000106A  42AE FFEA 1442          clr.l     -22(A6)
                    1443   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0B00 1444          clr.l     _Echo.L
00001072  00E0      
                    1445   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1446          pea       @m68kde~1_20.L
00001078  6586      
0000107A  4E94      1447          jsr       (A4)
0000107C  584F      1448          addq.w    #4,A7
                    1449   ; while(1)    {
                    1450   Load_SRecordFile_1:
                    1451   ; CheckSum = 0 ;
0000107E  4212      1452          clr.b     (A2)
                    1453   ; do {
                    1454   Load_SRecordFile_4:
                    1455   ; c = toupper(_getch()) ;
00001080  2F00      1456          move.l    D0,-(A7)
00001082  4EB8 0B68 1457          jsr       __getch
00001086  2200      1458          move.l    D0,D1
00001088  201F      1459          move.l    (A7)+,D0
0000108A  2F01      1460          move.l    D1,-(A7)
0000108C  4EB9 0000 1461          jsr       _toupper
00001090  5A7C      
00001092  584F      1462          addq.w    #4,A7
00001094  1C00      1463          move.b    D0,D6
                    1464   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1465          cmp.b     #27,D6
0000109A  6604      1466          bne.s     Load_SRecordFile_6
                    1467   ; return;
0000109C  6000 0132 1468          bra       Load_SRecordFile_8
                    1469   Load_SRecordFile_6:
000010A0  0C06 0053 1470          cmp.b     #83,D6
000010A4  66DA      1471          bne       Load_SRecordFile_4
                    1472   ; }while(c != (char)('S'));   // wait for S start of header
                    1473   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1474          jsr       __getch
000010AA  1600      1475          move.b    D0,D3
                    1476   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1477          cmp.b     #48,D3
000010B0  6706      1478          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1479          cmp.b     #53,D3
000010B6  6604      1480          bne.s     Load_SRecordFile_9
                    1481   Load_SRecordFile_11:
                    1482   ; continue ;
000010B8  6000 00D2 1483          bra       Load_SRecordFile_23
                    1484   Load_SRecordFile_9:
                    1485   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1486          cmp.b     #55,D3
000010C0  6D04      1487          blt.s     Load_SRecordFile_12
                    1488   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1489          bra       Load_SRecordFile_3
                    1490   Load_SRecordFile_12:
                    1491   ; // get the bytecount
                    1492   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1493          move.l    A2,-(A7)
000010C8  4E93      1494          jsr       (A3)
000010CA  584F      1495          addq.w    #4,A7
000010CC  2D40 FFF6 1496          move.l    D0,-10(A6)
                    1497   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1498   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1499          cmp.b     #49,D3
000010D4  660E      1500          bne.s     Load_SRecordFile_14
                    1501   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1502          moveq     #2,D5
                    1503   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1504          move.l    A2,-(A7)
000010DA  4EB8 0C58 1505          jsr       _Get4HexDigits
000010DE  584F      1506          addq.w    #4,A7
000010E0  2800      1507          move.l    D0,D4
000010E2  6020      1508          bra.s     Load_SRecordFile_17
                    1509   Load_SRecordFile_14:
                    1510   ; }
                    1511   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1512          cmp.b     #50,D3
000010E8  660E      1513          bne.s     Load_SRecordFile_16
                    1514   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1515          moveq     #3,D5
                    1516   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1517          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1518          jsr       _Get6HexDigits
000010F2  584F      1519          addq.w    #4,A7
000010F4  2800      1520          move.l    D0,D4
000010F6  600C      1521          bra.s     Load_SRecordFile_17
                    1522   Load_SRecordFile_16:
                    1523   ; }
                    1524   ; else    {
                    1525   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1526          moveq     #4,D5
                    1527   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1528          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1529          jsr       _Get8HexDigits
00001100  584F      1530          addq.w    #4,A7
00001102  2800      1531          move.l    D0,D4
                    1532   Load_SRecordFile_17:
                    1533   ; }
                    1534   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1535          move.l    D4,-4(A6)
                    1536   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1537          move.l    -10(A6),D0
0000110C  9085      1538          sub.l     D5,D0
0000110E  5380      1539          subq.l    #1,D0
00001110  2D40 FFE2 1540          move.l    D0,-30(A6)
                    1541   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1542          clr.l     D2
                    1543   Load_SRecordFile_18:
00001116  B4AE FFE2 1544          cmp.l     -30(A6),D2
0000111A  6C1E      1545          bge.s     Load_SRecordFile_20
                    1546   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1547          move.l    A2,-(A7)
0000111E  4E93      1548          jsr       (A3)
00001120  584F      1549          addq.w    #4,A7
00001122  2D40 FFDE 1550          move.l    D0,-34(A6)
                    1551   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1552          move.l    -34(A6),D0
0000112A  206E FFFC 1553          move.l    -4(A6),A0
0000112E  52AE FFFC 1554          addq.l    #1,-4(A6)
00001132  1080      1555          move.b    D0,(A0)
                    1556   ; ByteTotal++;
00001134  524D      1557          addq.w    #1,A5
00001136  5282      1558          addq.l    #1,D2
00001138  60DC      1559          bra       Load_SRecordFile_18
                    1560   Load_SRecordFile_20:
                    1561   ; }
                    1562   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1563   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1564          clr.l     -(A7)
0000113C  4E93      1565          jsr       (A3)
0000113E  584F      1566          addq.w    #4,A7
00001140  1D40 FFFB 1567          move.b    D0,-5(A6)
                    1568   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1569          move.b    (A2),D0
00001146  4600      1570          not.b     D0
00001148  4880      1571          ext.w     D0
0000114A  C07C 00FF 1572          and.w     #255,D0
0000114E  122E FFFB 1573          move.b    -5(A6),D1
00001152  4881      1574          ext.w     D1
00001154  C27C 00FF 1575          and.w     #255,D1
00001158  B041      1576          cmp.w     D1,D0
0000115A  6708      1577          beq.s     Load_SRecordFile_21
                    1578   ; LoadFailed = 1 ;
0000115C  7E01      1579          moveq     #1,D7
                    1580   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1581          move.l    D4,-26(A6)
                    1582   ; break;
00001162  602C      1583          bra.s     Load_SRecordFile_3
                    1584   Load_SRecordFile_21:
                    1585   ; }
                    1586   ; SRecordCount++ ;
00001164  52AE FFEE 1587          addq.l    #1,-18(A6)
                    1588   ; // display feedback on progress
                    1589   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1590          move.l    -18(A6),-(A7)
0000116C  4878 0019 1591          pea       25
00001170  4EB9 0000 1592          jsr       LDIV
00001174  58E8      
00001176  202F 0004 1593          move.l    4(A7),D0
0000117A  504F      1594          addq.w    #8,A7
0000117C  4A80      1595          tst.l     D0
0000117E  660C      1596          bne.s     Load_SRecordFile_23
                    1597   ; putchar('.') ;
00001180  4878 002E 1598          pea       46
00001184  4EB9 0000 1599          jsr       _putch
00001188  59B4      
0000118A  584F      1600          addq.w    #4,A7
                    1601   Load_SRecordFile_23:
0000118C  6000 FEF0 1602          bra       Load_SRecordFile_1
                    1603   Load_SRecordFile_3:
                    1604   ; }
                    1605   ; if(LoadFailed == 1) {
00001190  0C87 0000 1606          cmp.l     #1,D7
00001194  0001      
00001196  6610      1607          bne.s     Load_SRecordFile_25
                    1608   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1609          move.l    -26(A6),-(A7)
0000119C  4879 0000 1610          pea       @m68kde~1_21.L
000011A0  65B6      
000011A2  4E94      1611          jsr       (A4)
000011A4  504F      1612          addq.w    #8,A7
000011A6  600C      1613          bra.s     Load_SRecordFile_26
                    1614   Load_SRecordFile_25:
                    1615   ; }
                    1616   ; else
                    1617   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1618          move.l    A5,-(A7)
000011AA  4879 0000 1619          pea       @m68kde~1_22.L
000011AE  65DC      
000011B0  4E94      1620          jsr       (A4)
000011B2  504F      1621          addq.w    #8,A7
                    1622   Load_SRecordFile_26:
                    1623   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1624   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1625          clr.l     D2
                    1626   Load_SRecordFile_27:
000011B6  0C82 0006 1627          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1628          bge.s     Load_SRecordFile_29
000011BE  5282      1629          addq.l    #1,D2
000011C0  60F4      1630          bra       Load_SRecordFile_27
                    1631   Load_SRecordFile_29:
                    1632   ; ;
                    1633   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1634          jsr       _FlushKeyboard
                    1635   ; Echo = 1;
000011C6  23FC 0000 1636          move.l    #1,_Echo.L
000011CA  0001 0B00 
000011CE  00E0      
                    1637   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1638          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1639          unlk      A6
000011D6  4E75      1640          rts
                    1641   ; }
                    1642   ; void MemoryChange(void)
                    1643   ; {
                    1644   _MemoryChange:
000011D8  48E7 3820 1645          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1646          lea       _printf.L,A2
000011E0  5A98      
                    1647   ; unsigned char *RamPtr,c ; // pointer to memory
                    1648   ; int Data ;
                    1649   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1650          pea       @m68kde~1_23.L
000011E6  65FE      
000011E8  4E92      1651          jsr       (A2)
000011EA  584F      1652          addq.w    #4,A7
                    1653   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1654          pea       @m68kde~1_24.L
000011F0  661A      
000011F2  4E92      1655          jsr       (A2)
000011F4  584F      1656          addq.w    #4,A7
                    1657   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1658          pea       @m68kde~1_25.L
000011FA  6660      
000011FC  4E92      1659          jsr       (A2)
000011FE  584F      1660          addq.w    #4,A7
                    1661   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1662          clr.l     -(A7)
00001202  4EB8 0CA4 1663          jsr       _Get8HexDigits
00001206  584F      1664          addq.w    #4,A7
00001208  2600      1665          move.l    D0,D3
                    1666   ; while(1)    {
                    1667   MemoryChange_1:
                    1668   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1669          move.l    D3,A0
0000120C  1210      1670          move.b    (A0),D1
0000120E  C2BC 0000 1671          and.l     #255,D1
00001212  00FF      
00001214  2F01      1672          move.l    D1,-(A7)
00001216  2F03      1673          move.l    D3,-(A7)
00001218  4879 0000 1674          pea       @m68kde~1_26.L
0000121C  6672      
0000121E  4E92      1675          jsr       (A2)
00001220  DEFC 000C 1676          add.w     #12,A7
                    1677   ; c = tolower(_getch()) ;
00001224  2F00      1678          move.l    D0,-(A7)
00001226  4EB8 0B68 1679          jsr       __getch
0000122A  2200      1680          move.l    D0,D1
0000122C  201F      1681          move.l    (A7)+,D0
0000122E  2F01      1682          move.l    D1,-(A7)
00001230  4EB9 0000 1683          jsr       _tolower
00001234  5A18      
00001236  584F      1684          addq.w    #4,A7
00001238  1400      1685          move.b    D0,D2
                    1686   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1687          cmp.b     #27,D2
0000123E  6604      1688          bne.s     MemoryChange_4
                    1689   ; return ;                                // abort on escape
00001240  6000 0090 1690          bra       MemoryChange_6
                    1691   MemoryChange_4:
                    1692   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1693          cmp.b     #48,D2
00001248  6506      1694          blo.s     MemoryChange_10
0000124A  0C02 0039 1695          cmp.b     #57,D2
0000124E  6310      1696          bls.s     MemoryChange_9
                    1697   MemoryChange_10:
00001250  0C02 0061 1698          cmp.b     #97,D2
00001254  6500 006E 1699          blo       MemoryChange_7
00001258  0C02 0066 1700          cmp.b     #102,D2
0000125C  6200 0066 1701          bhi       MemoryChange_7
                    1702   MemoryChange_9:
                    1703   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1704          and.l     #255,D2
00001264  00FF      
00001266  2F02      1705          move.l    D2,-(A7)
00001268  4EB8 0BD2 1706          jsr       _xtod
0000126C  584F      1707          addq.w    #4,A7
0000126E  C0BC 0000 1708          and.l     #255,D0
00001272  00FF      
00001274  E980      1709          asl.l     #4,D0
00001276  2F00      1710          move.l    D0,-(A7)
00001278  2F01      1711          move.l    D1,-(A7)
0000127A  4EB8 0B68 1712          jsr       __getch
0000127E  221F      1713          move.l    (A7)+,D1
00001280  2F00      1714          move.l    D0,-(A7)
00001282  4EB8 0BD2 1715          jsr       _xtod
00001286  584F      1716          addq.w    #4,A7
00001288  2200      1717          move.l    D0,D1
0000128A  201F      1718          move.l    (A7)+,D0
0000128C  C2BC 0000 1719          and.l     #255,D1
00001290  00FF      
00001292  8081      1720          or.l      D1,D0
00001294  2800      1721          move.l    D0,D4
                    1722   ; *RamPtr = (char)(Data) ;
00001296  2043      1723          move.l    D3,A0
00001298  1084      1724          move.b    D4,(A0)
                    1725   ; if(*RamPtr != Data) {
0000129A  2043      1726          move.l    D3,A0
0000129C  1010      1727          move.b    (A0),D0
0000129E  C0BC 0000 1728          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1729          cmp.l     D4,D0
000012A6  671A      1730          beq.s     MemoryChange_11
                    1731   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1732          move.l    D3,A0
000012AA  1210      1733          move.b    (A0),D1
000012AC  C2BC 0000 1734          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1735          move.l    D1,-(A7)
000012B4  2F04      1736          move.l    D4,-(A7)
000012B6  4879 0000 1737          pea       @m68kde~1_27.L
000012BA  6684      
000012BC  4E92      1738          jsr       (A2)
000012BE  DEFC 000C 1739          add.w     #12,A7
                    1740   MemoryChange_11:
000012C2  6008      1741          bra.s     MemoryChange_13
                    1742   MemoryChange_7:
                    1743   ; }
                    1744   ; }
                    1745   ; else if(c == (char)('-'))
000012C4  0C02 002D 1746          cmp.b     #45,D2
000012C8  6602      1747          bne.s     MemoryChange_13
                    1748   ; RamPtr -= 2 ; ;
000012CA  5583      1749          subq.l    #2,D3
                    1750   MemoryChange_13:
                    1751   ; RamPtr ++ ;
000012CC  5283      1752          addq.l    #1,D3
000012CE  6000 FF3A 1753          bra       MemoryChange_1
                    1754   MemoryChange_6:
000012D2  4CDF 041C 1755          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1756          rts
                    1757   ; }
                    1758   ; }
                    1759   ; /*******************************************************************
                    1760   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1761   ; ********************************************************************/
                    1762   ; void ProgramFlashChip(void)
                    1763   ; {
                    1764   _ProgramFlashChip:
000012D8  4E56 FFFC 1765          link      A6,#-4
000012DC  48E7 3C20 1766          movem.l   D2/D3/D4/D5/A2,-(A7)
000012E0  45F9 0000 1767          lea       _WaitForSPITransmitComplete.L,A2
000012E4  2BCE      
                    1768   ; //
                    1769   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1770   ; unsigned char *RamPtr;
                    1771   ; unsigned char DataByte, x;
                    1772   ; unsigned char FlashAddressByte1, FlashAddressByte2, FlashAddressByte3;
                    1773   ; int FlashAddress = 0;
000012E6  4285      1774          clr.l     D5
                    1775   ; int count = 0;
000012E8  4284      1776          clr.l     D4
                    1777   ; printf("\r\nRunning ProgramFlashChip()!");
000012EA  4879 0000 1778          pea       @m68kde~1_28.L
000012EE  66B8      
000012F0  4EB9 0000 1779          jsr       _printf
000012F4  5A98      
000012F6  584F      1780          addq.w    #4,A7
                    1781   ; SPI_Init();
000012F8  4EB9 0000 1782          jsr       _SPI_Init
000012FC  2BA6      
                    1783   ; ChipErase();
000012FE  4EB9 0000 1784          jsr       _ChipErase
00001302  2DDC      
                    1785   ; for(RamPtr=0x08000000;RamPtr<=0x08040000;RamPtr++){
00001304  263C 0800 1786          move.l    #134217728,D3
00001308  0000      
                    1787   ProgramFlashChip_1:
0000130A  0C83 0804 1788          cmp.l     #134479872,D3
0000130E  0000      
00001310  6200 00D0 1789          bhi       ProgramFlashChip_3
                    1790   ; if(count == 0){
00001314  4A84      1791          tst.l     D4
00001316  6600 0082 1792          bne       ProgramFlashChip_4
                    1793   ; FlashAddressByte1= (FlashAddress >> 16) & 0xFF;
0000131A  2005      1794          move.l    D5,D0
0000131C  E080      1795          asr.l     #8,D0
0000131E  E080      1796          asr.l     #8,D0
00001320  C0BC 0000 1797          and.l     #255,D0
00001324  00FF      
00001326  1D40 FFFD 1798          move.b    D0,-3(A6)
                    1799   ; FlashAddressByte2 = (FlashAddress >> 8) & 0xFF;
0000132A  2005      1800          move.l    D5,D0
0000132C  E080      1801          asr.l     #8,D0
0000132E  C0BC 0000 1802          and.l     #255,D0
00001332  00FF      
00001334  1D40 FFFE 1803          move.b    D0,-2(A6)
                    1804   ; FlashAddressByte3 = FlashAddress & 0xFF;
00001338  2005      1805          move.l    D5,D0
0000133A  C0BC 0000 1806          and.l     #255,D0
0000133E  00FF      
00001340  1D40 FFFF 1807          move.b    D0,-1(A6)
                    1808   ; DisableBlockProtect();
00001344  4EB9 0000 1809          jsr       _DisableBlockProtect
00001348  2C08      
                    1810   ; WriteEnable();
0000134A  4EB9 0000 1811          jsr       _WriteEnable
0000134E  2BDC      
                    1812   ; // Enable SPI Chip Select
                    1813   ; Enable_SPI_CS();
00001350  13FC 00FE 1814          move.b    #254,4227112
00001354  0040 8028 
                    1815   ; // Send Write Command to Chip
                    1816   ; SPI_Data = 2;
00001358  13FC 0002 1817          move.b    #2,4227108
0000135C  0040 8024 
                    1818   ; WaitForSPITransmitComplete();
00001360  4E92      1819          jsr       (A2)
                    1820   ; x = SPI_Data;
00001362  1439 0040 1821          move.b    4227108,D2
00001366  8024      
                    1822   ; // Send 24-bit Address that we stored c in
                    1823   ; SPI_Data = FlashAddressByte1; // 24-bit address - 1st Byte
00001368  13EE FFFD 1824          move.b    -3(A6),4227108
0000136C  0040 8024 
                    1825   ; WaitForSPITransmitComplete();
00001370  4E92      1826          jsr       (A2)
                    1827   ; x = SPI_Data;
00001372  1439 0040 1828          move.b    4227108,D2
00001376  8024      
                    1829   ; SPI_Data = FlashAddressByte2; // 24-bit address - 2nd Byte
00001378  13EE FFFE 1830          move.b    -2(A6),4227108
0000137C  0040 8024 
                    1831   ; WaitForSPITransmitComplete();
00001380  4E92      1832          jsr       (A2)
                    1833   ; x = SPI_Data;
00001382  1439 0040 1834          move.b    4227108,D2
00001386  8024      
                    1835   ; SPI_Data = FlashAddressByte3; // 24-bit address - 3rd Byte
00001388  13EE FFFF 1836          move.b    -1(A6),4227108
0000138C  0040 8024 
                    1837   ; WaitForSPITransmitComplete();
00001390  4E92      1838          jsr       (A2)
                    1839   ; x = SPI_Data;
00001392  1439 0040 1840          move.b    4227108,D2
00001396  8024      
00001398  6030      1841          bra.s     ProgramFlashChip_6
                    1842   ProgramFlashChip_4:
                    1843   ; } else if(count == 255){
0000139A  0C84 0000 1844          cmp.l     #255,D4
0000139E  00FF      
000013A0  6628      1845          bne.s     ProgramFlashChip_6
                    1846   ; SPI_Data = *RamPtr;
000013A2  2043      1847          move.l    D3,A0
000013A4  13D0 0040 1848          move.b    (A0),4227108
000013A8  8024      
                    1849   ; WaitForSPITransmitComplete();
000013AA  4E92      1850          jsr       (A2)
                    1851   ; x=SPI_Data;
000013AC  1439 0040 1852          move.b    4227108,D2
000013B0  8024      
                    1853   ; //  Disable Chip Select
                    1854   ; Disable_SPI_CS();
000013B2  13FC 00FF 1855          move.b    #255,4227112
000013B6  0040 8028 
                    1856   ; // Poll Chip Status register for write completion
                    1857   ; WaitWriteCommandCompletion();
000013BA  4EB9 0000 1858          jsr       _WaitWriteCommandCompletion
000013BE  2C48      
                    1859   ; FlashAddress += 256;
000013C0  0685 0000 1860          add.l     #256,D5
000013C4  0100      
                    1861   ; count = 0;
000013C6  4284      1862          clr.l     D4
                    1863   ; continue;
000013C8  6012      1864          bra.s     ProgramFlashChip_2
                    1865   ProgramFlashChip_6:
                    1866   ; }
                    1867   ; SPI_Data = *RamPtr;
000013CA  2043      1868          move.l    D3,A0
000013CC  13D0 0040 1869          move.b    (A0),4227108
000013D0  8024      
                    1870   ; WaitForSPITransmitComplete();
000013D2  4E92      1871          jsr       (A2)
                    1872   ; x=SPI_Data;
000013D4  1439 0040 1873          move.b    4227108,D2
000013D8  8024      
                    1874   ; count ++;
000013DA  5284      1875          addq.l    #1,D4
                    1876   ProgramFlashChip_2:
000013DC  5283      1877          addq.l    #1,D3
000013DE  6000 FF2A 1878          bra       ProgramFlashChip_1
                    1879   ProgramFlashChip_3:
                    1880   ; }
                    1881   ; //  Disable Chip Select
                    1882   ; Disable_SPI_CS();
000013E2  13FC 00FF 1883          move.b    #255,4227112
000013E6  0040 8028 
                    1884   ; // Poll Chip Status register for write completion
                    1885   ; WaitWriteCommandCompletion();
000013EA  4EB9 0000 1886          jsr       _WaitWriteCommandCompletion
000013EE  2C48      
                    1887   ; printf("\r\nProgramFlashChip() Completed!");
000013F0  4879 0000 1888          pea       @m68kde~1_29.L
000013F4  66D6      
000013F6  4EB9 0000 1889          jsr       _printf
000013FA  5A98      
000013FC  584F      1890          addq.w    #4,A7
                    1891   ; FlashChipMemoryTest();
000013FE  4EB9 0000 1892          jsr       _FlashChipMemoryTest
00001402  140C      
00001404  4CDF 043C 1893          movem.l   (A7)+,D2/D3/D4/D5/A2
00001408  4E5E      1894          unlk      A6
0000140A  4E75      1895          rts
                    1896   ; }
                    1897   ; void FlashChipMemoryTest(void){
                    1898   _FlashChipMemoryTest:
0000140C  4E56 FFFC 1899          link      A6,#-4
00001410  48E7 3030 1900          movem.l   D2/D3/A2/A3,-(A7)
00001414  45F9 0000 1901          lea       _WaitForSPITransmitComplete.L,A2
00001418  2BCE      
0000141A  47F9 0000 1902          lea       _printf.L,A3
0000141E  5A98      
                    1903   ; unsigned char *RamPtr;
                    1904   ; unsigned char x, ReadByte;
                    1905   ; unsigned char FlashAddressByte1, FlashAddressByte2, FlashAddressByte3;
                    1906   ; FlashAddressByte1 = FlashAddressByte2 = FlashAddressByte3 = 0;
00001420  422E FFFF 1907          clr.b     -1(A6)
00001424  422E FFFE 1908          clr.b     -2(A6)
00001428  422E FFFD 1909          clr.b     -3(A6)
                    1910   ; printf("\r\nRunning FlashChipMemoryTest()!");
0000142C  4879 0000 1911          pea       @m68kde~1_30.L
00001430  66F6      
00001432  4E93      1912          jsr       (A3)
00001434  584F      1913          addq.w    #4,A7
                    1914   ; // Enable SPI Chip Select
                    1915   ; Enable_SPI_CS();
00001436  13FC 00FE 1916          move.b    #254,4227112
0000143A  0040 8028 
                    1917   ; // Send Read Command to Chip
                    1918   ; SPI_Data = 3;
0000143E  13FC 0003 1919          move.b    #3,4227108
00001442  0040 8024 
                    1920   ; WaitForSPITransmitComplete();
00001446  4E92      1921          jsr       (A2)
                    1922   ; x = SPI_Data;
00001448  1639 0040 1923          move.b    4227108,D3
0000144C  8024      
                    1924   ; // Send 24-bit Address that we stored c in
                    1925   ; SPI_Data = FlashAddressByte1; // 24-bit address - 1st Byte
0000144E  13EE FFFD 1926          move.b    -3(A6),4227108
00001452  0040 8024 
                    1927   ; WaitForSPITransmitComplete();
00001456  4E92      1928          jsr       (A2)
                    1929   ; x = SPI_Data;
00001458  1639 0040 1930          move.b    4227108,D3
0000145C  8024      
                    1931   ; SPI_Data = FlashAddressByte2; // 24-bit address - 2nd Byte
0000145E  13EE FFFE 1932          move.b    -2(A6),4227108
00001462  0040 8024 
                    1933   ; WaitForSPITransmitComplete();
00001466  4E92      1934          jsr       (A2)
                    1935   ; x = SPI_Data;
00001468  1639 0040 1936          move.b    4227108,D3
0000146C  8024      
                    1937   ; SPI_Data = FlashAddressByte3; // 24-bit address - 3rd Byte
0000146E  13EE FFFF 1938          move.b    -1(A6),4227108
00001472  0040 8024 
                    1939   ; WaitForSPITransmitComplete();
00001476  4E92      1940          jsr       (A2)
                    1941   ; x = SPI_Data;
00001478  1639 0040 1942          move.b    4227108,D3
0000147C  8024      
                    1943   ; for(RamPtr=0x08000000;RamPtr<=0x08040000;RamPtr++){
0000147E  243C 0800 1944          move.l    #134217728,D2
00001482  0000      
                    1945   FlashChipMemoryTest_1:
00001484  0C82 0804 1946          cmp.l     #134479872,D2
00001488  0000      
0000148A  6200 004A 1947          bhi       FlashChipMemoryTest_3
                    1948   ; SPI_Data = 0xFF;          // Send Dummy byte
0000148E  13FC 00FF 1949          move.b    #255,4227108
00001492  0040 8024 
                    1950   ; WaitForSPITransmitComplete();
00001496  4E92      1951          jsr       (A2)
                    1952   ; ReadByte = SPI_Data;
00001498  1D79 0040 1953          move.b    4227108,-4(A6)
0000149C  8024 FFFC 
                    1954   ; if(ReadByte != *RamPtr){
000014A0  2042      1955          move.l    D2,A0
000014A2  102E FFFC 1956          move.b    -4(A6),D0
000014A6  B010      1957          cmp.b     (A0),D0
000014A8  6728      1958          beq.s     FlashChipMemoryTest_4
                    1959   ; printf("\r\n Flash Chip Memory Test Failed!");
000014AA  4879 0000 1960          pea       @m68kde~1_31.L
000014AE  6718      
000014B0  4E93      1961          jsr       (A3)
000014B2  584F      1962          addq.w    #4,A7
                    1963   ; printf("\r\n Failed at %dth Byte!", RamPtr - 0x08000000);
000014B4  2202      1964          move.l    D2,D1
000014B6  0481 0800 1965          sub.l     #134217728,D1
000014BA  0000      
000014BC  2F01      1966          move.l    D1,-(A7)
000014BE  4879 0000 1967          pea       @m68kde~1_32.L
000014C2  673A      
000014C4  4E93      1968          jsr       (A3)
000014C6  504F      1969          addq.w    #8,A7
                    1970   ; Disable_SPI_CS();
000014C8  13FC 00FF 1971          move.b    #255,4227112
000014CC  0040 8028 
                    1972   ; return;
000014D0  6016      1973          bra.s     FlashChipMemoryTest_6
                    1974   FlashChipMemoryTest_4:
000014D2  5282      1975          addq.l    #1,D2
000014D4  60AE      1976          bra       FlashChipMemoryTest_1
                    1977   FlashChipMemoryTest_3:
                    1978   ; }
                    1979   ; }
                    1980   ; // Disable SPI Chip Select
                    1981   ; Disable_SPI_CS();
000014D6  13FC 00FF 1982          move.b    #255,4227112
000014DA  0040 8028 
                    1983   ; printf("\r\n Flash Chip Memory Test Successful!");
000014DE  4879 0000 1984          pea       @m68kde~1_33.L
000014E2  6752      
000014E4  4E93      1985          jsr       (A3)
000014E6  584F      1986          addq.w    #4,A7
                    1987   FlashChipMemoryTest_6:
000014E8  4CDF 0C0C 1988          movem.l   (A7)+,D2/D3/A2/A3
000014EC  4E5E      1989          unlk      A6
000014EE  4E75      1990          rts
                    1991   ; }
                    1992   ; /*************************************************************************
                    1993   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1994   ; **************************************************************************/
                    1995   ; void LoadFromFlashChip(void)
                    1996   ; {
                    1997   _LoadFromFlashChip:
                    1998   ; printf("\r\nLoading Program From SPI Flash....") ;
000014F0  4879 0000 1999          pea       @m68kde~1_34.L
000014F4  6778      
000014F6  4EB9 0000 2000          jsr       _printf
000014FA  5A98      
000014FC  584F      2001          addq.w    #4,A7
000014FE  4E75      2002          rts
                    2003   ; //
                    2004   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    2005   ; //
                    2006   ; }
                    2007   ; // get rid of excess spaces
                    2008   ; void FormatInstructionForTrace(void)
                    2009   ; {
                    2010   _FormatInstructionForTrace:
00001500  4E56 FF9C 2011          link      A6,#-100
00001504  48E7 3C20 2012          movem.l   D2/D3/D4/D5/A2,-(A7)
00001508  45EE FF9C 2013          lea       -100(A6),A2
                    2014   ; unsigned short int i ;
                    2015   ; char c, temp[100], *iptr, *tempptr ;
                    2016   ; for(i=0; i < 100; i++)
0000150C  4244      2017          clr.w     D4
                    2018   FormatInstructionForTrace_1:
0000150E  0C44 0064 2019          cmp.w     #100,D4
00001512  640E      2020          bhs.s     FormatInstructionForTrace_3
                    2021   ; temp[i] = 0 ;
00001514  C8BC 0000 2022          and.l     #65535,D4
00001518  FFFF      
0000151A  4232 4800 2023          clr.b     0(A2,D4.L)
0000151E  5244      2024          addq.w    #1,D4
00001520  60EC      2025          bra       FormatInstructionForTrace_1
                    2026   FormatInstructionForTrace_3:
                    2027   ; iptr = Instruction ;
00001522  41F9 0B00 2028          lea       _Instruction.L,A0
00001526  04E2      
00001528  2408      2029          move.l    A0,D2
                    2030   ; tempptr = temp ;
0000152A  2A0A      2031          move.l    A2,D5
                    2032   ; do{
                    2033   FormatInstructionForTrace_4:
                    2034   ; c = *iptr++ ;
0000152C  2042      2035          move.l    D2,A0
0000152E  5282      2036          addq.l    #1,D2
00001530  1610      2037          move.b    (A0),D3
                    2038   ; *tempptr++ = c ;  // copy chars over
00001532  2045      2039          move.l    D5,A0
00001534  5285      2040          addq.l    #1,D5
00001536  1083      2041          move.b    D3,(A0)
                    2042   ; if(c == ' ')  {   // if copied space
00001538  0C03 0020 2043          cmp.b     #32,D3
0000153C  6622      2044          bne.s     FormatInstructionForTrace_6
                    2045   ; while(*iptr == ' ') {
                    2046   FormatInstructionForTrace_8:
0000153E  2042      2047          move.l    D2,A0
00001540  1010      2048          move.b    (A0),D0
00001542  0C00 0020 2049          cmp.b     #32,D0
00001546  660C      2050          bne.s     FormatInstructionForTrace_10
                    2051   ; if(*iptr == 0)  // if end of string then done
00001548  2042      2052          move.l    D2,A0
0000154A  1010      2053          move.b    (A0),D0
0000154C  6602      2054          bne.s     FormatInstructionForTrace_11
                    2055   ; break ;
0000154E  6004      2056          bra.s     FormatInstructionForTrace_10
                    2057   FormatInstructionForTrace_11:
                    2058   ; iptr++ ; // skip over remaining spaces
00001550  5282      2059          addq.l    #1,D2
00001552  60EA      2060          bra       FormatInstructionForTrace_8
                    2061   FormatInstructionForTrace_10:
                    2062   ; }
                    2063   ; strcat(tempptr,iptr) ;
00001554  2F02      2064          move.l    D2,-(A7)
00001556  2F05      2065          move.l    D5,-(A7)
00001558  4EB9 0000 2066          jsr       _strcat
0000155C  5A66      
0000155E  504F      2067          addq.w    #8,A7
                    2068   FormatInstructionForTrace_6:
00001560  4A03      2069          tst.b     D3
00001562  66C8      2070          bne       FormatInstructionForTrace_4
                    2071   ; }
                    2072   ; }while(c != 0) ;
                    2073   ; strcpyInstruction(temp) ;
00001564  2F0A      2074          move.l    A2,-(A7)
00001566  4EB8 0CE6 2075          jsr       _strcpyInstruction
0000156A  584F      2076          addq.w    #4,A7
0000156C  4CDF 043C 2077          movem.l   (A7)+,D2/D3/D4/D5/A2
00001570  4E5E      2078          unlk      A6
00001572  4E75      2079          rts
                    2080   ; }
                    2081   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2082   ; // IMPORTANT
                    2083   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2084   ; // has to be done with an interrupt (IRQ Level 6)
                    2085   ; //
                    2086   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2087   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2088   ; //
                    2089   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2090   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2091   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2092   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2093   ; // program area
                    2094   ; //
                    2095   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2096   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2097   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2098   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2099   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2100   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2101   ; void DumpRegisters()
                    2102   ; {
                    2103   _DumpRegisters:
00001574  48E7 3F3C 2104          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001578  45F9 0000 2105          lea       _putch.L,A2
0000157C  59B4      
0000157E  47F9 0000 2106          lea       _printf.L,A3
00001582  5A98      
00001584  49F9 0B00 2107          lea       _SR.L,A4
00001588  012C      
0000158A  4BF9 0B00 2108          lea       _WatchPointString.L,A5
0000158E  01C2      
                    2109   ; short i, x, j, k ;
                    2110   ; unsigned char c, *BytePointer;
                    2111   ; // buld up strings for displaying watchpoints
                    2112   ; for(x = 0; x < (short)(8); x++)
00001590  4242      2113          clr.w     D2
                    2114   DumpRegisters_1:
00001592  0C42 0008 2115          cmp.w     #8,D2
00001596  6C00 01C6 2116          bge       DumpRegisters_3
                    2117   ; {
                    2118   ; if(WatchPointSetOrCleared[x] == 1)
0000159A  48C2      2119          ext.l     D2
0000159C  2002      2120          move.l    D2,D0
0000159E  E588      2121          lsl.l     #2,D0
000015A0  41F9 0B00 2122          lea       _WatchPointSetOrCleared.L,A0
000015A4  01A2      
000015A6  2030 0800 2123          move.l    0(A0,D0.L),D0
000015AA  0C80 0000 2124          cmp.l     #1,D0
000015AE  0001      
000015B0  6600 0186 2125          bne       DumpRegisters_4
                    2126   ; {
                    2127   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
000015B4  48C2      2128          ext.l     D2
000015B6  2202      2129          move.l    D2,D1
000015B8  E589      2130          lsl.l     #2,D1
000015BA  41F9 0B00 2131          lea       _WatchPointAddress.L,A0
000015BE  0182      
000015C0  2F30 1800 2132          move.l    0(A0,D1.L),-(A7)
000015C4  4879 0000 2133          pea       @m68kde~1_35.L
000015C8  679E      
000015CA  220D      2134          move.l    A5,D1
000015CC  48C2      2135          ext.l     D2
000015CE  2F00      2136          move.l    D0,-(A7)
000015D0  2002      2137          move.l    D2,D0
000015D2  C1FC 0064 2138          muls      #100,D0
000015D6  D280      2139          add.l     D0,D1
000015D8  201F      2140          move.l    (A7)+,D0
000015DA  2F01      2141          move.l    D1,-(A7)
000015DC  4EB9 0000 2142          jsr       _sprintf
000015E0  5A34      
000015E2  DEFC 000C 2143          add.w     #12,A7
                    2144   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000015E6  48C2      2145          ext.l     D2
000015E8  2002      2146          move.l    D2,D0
000015EA  E588      2147          lsl.l     #2,D0
000015EC  41F9 0B00 2148          lea       _WatchPointAddress.L,A0
000015F0  0182      
000015F2  2A30 0800 2149          move.l    0(A0,D0.L),D5
                    2150   ; for(j = 0; j < (short)(16); j+=2)
000015F6  4243      2151          clr.w     D3
                    2152   DumpRegisters_6:
000015F8  0C43 0010 2153          cmp.w     #16,D3
000015FC  6C00 0082 2154          bge       DumpRegisters_8
                    2155   ; {
                    2156   ; for(k = 0; k < (short)(2); k++)
00001600  4246      2157          clr.w     D6
                    2158   DumpRegisters_9:
00001602  0C46 0002 2159          cmp.w     #2,D6
00001606  6C00 0052 2160          bge       DumpRegisters_11
                    2161   ; {
                    2162   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000160A  2045      2163          move.l    D5,A0
0000160C  48C3      2164          ext.l     D3
0000160E  2203      2165          move.l    D3,D1
00001610  48C6      2166          ext.l     D6
00001612  D286      2167          add.l     D6,D1
00001614  1230 1800 2168          move.b    0(A0,D1.L),D1
00001618  C2BC 0000 2169          and.l     #255,D1
0000161C  00FF      
0000161E  2F01      2170          move.l    D1,-(A7)
00001620  4879 0000 2171          pea       @m68kde~1_14.L
00001624  650E      
00001626  4879 0B00 2172          pea       _TempString.L
0000162A  0546      
0000162C  4EB9 0000 2173          jsr       _sprintf
00001630  5A34      
00001632  DEFC 000C 2174          add.w     #12,A7
                    2175   ; strcat(WatchPointString[x], TempString) ;
00001636  4879 0B00 2176          pea       _TempString.L
0000163A  0546      
0000163C  220D      2177          move.l    A5,D1
0000163E  48C2      2178          ext.l     D2
00001640  2F00      2179          move.l    D0,-(A7)
00001642  2002      2180          move.l    D2,D0
00001644  C1FC 0064 2181          muls      #100,D0
00001648  D280      2182          add.l     D0,D1
0000164A  201F      2183          move.l    (A7)+,D0
0000164C  2F01      2184          move.l    D1,-(A7)
0000164E  4EB9 0000 2185          jsr       _strcat
00001652  5A66      
00001654  504F      2186          addq.w    #8,A7
00001656  5246      2187          addq.w    #1,D6
00001658  60A8      2188          bra       DumpRegisters_9
                    2189   DumpRegisters_11:
                    2190   ; }
                    2191   ; strcat(WatchPointString[x]," ") ;
0000165A  4879 0000 2192          pea       @m68kde~1_36.L
0000165E  67A6      
00001660  220D      2193          move.l    A5,D1
00001662  48C2      2194          ext.l     D2
00001664  2F00      2195          move.l    D0,-(A7)
00001666  2002      2196          move.l    D2,D0
00001668  C1FC 0064 2197          muls      #100,D0
0000166C  D280      2198          add.l     D0,D1
0000166E  201F      2199          move.l    (A7)+,D0
00001670  2F01      2200          move.l    D1,-(A7)
00001672  4EB9 0000 2201          jsr       _strcat
00001676  5A66      
00001678  504F      2202          addq.w    #8,A7
0000167A  5443      2203          addq.w    #2,D3
0000167C  6000 FF7A 2204          bra       DumpRegisters_6
                    2205   DumpRegisters_8:
                    2206   ; }
                    2207   ; strcat(WatchPointString[x], "  ") ;
00001680  4879 0000 2208          pea       @m68kde~1_15.L
00001684  6514      
00001686  220D      2209          move.l    A5,D1
00001688  48C2      2210          ext.l     D2
0000168A  2F00      2211          move.l    D0,-(A7)
0000168C  2002      2212          move.l    D2,D0
0000168E  C1FC 0064 2213          muls      #100,D0
00001692  D280      2214          add.l     D0,D1
00001694  201F      2215          move.l    (A7)+,D0
00001696  2F01      2216          move.l    D1,-(A7)
00001698  4EB9 0000 2217          jsr       _strcat
0000169C  5A66      
0000169E  504F      2218          addq.w    #8,A7
                    2219   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000016A0  48C2      2220          ext.l     D2
000016A2  2002      2221          move.l    D2,D0
000016A4  E588      2222          lsl.l     #2,D0
000016A6  41F9 0B00 2223          lea       _WatchPointAddress.L,A0
000016AA  0182      
000016AC  2A30 0800 2224          move.l    0(A0,D0.L),D5
                    2225   ; for(j = 0; j < (short)(16); j++)
000016B0  4243      2226          clr.w     D3
                    2227   DumpRegisters_12:
000016B2  0C43 0010 2228          cmp.w     #16,D3
000016B6  6C00 007E 2229          bge       DumpRegisters_14
                    2230   ; {
                    2231   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000016BA  2045      2232          move.l    D5,A0
000016BC  48C3      2233          ext.l     D3
000016BE  1030 3800 2234          move.b    0(A0,D3.L),D0
000016C2  C03C 007F 2235          and.b     #127,D0
000016C6  1E00      2236          move.b    D0,D7
                    2237   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000016C8  0C07 007F 2238          cmp.b     #127,D7
000016CC  6206      2239          bhi.s     DumpRegisters_17
000016CE  0C07 0020 2240          cmp.b     #32,D7
000016D2  6416      2241          bhs.s     DumpRegisters_15
                    2242   DumpRegisters_17:
                    2243   ; sprintf(TempString, ".") ;
000016D4  4879 0000 2244          pea       @m68kde~1_37.L
000016D8  67A8      
000016DA  4879 0B00 2245          pea       _TempString.L
000016DE  0546      
000016E0  4EB9 0000 2246          jsr       _sprintf
000016E4  5A34      
000016E6  504F      2247          addq.w    #8,A7
000016E8  6026      2248          bra.s     DumpRegisters_16
                    2249   DumpRegisters_15:
                    2250   ; else
                    2251   ; sprintf(TempString, "%c", BytePointer[j]) ;
000016EA  2045      2252          move.l    D5,A0
000016EC  48C3      2253          ext.l     D3
000016EE  1230 3800 2254          move.b    0(A0,D3.L),D1
000016F2  C2BC 0000 2255          and.l     #255,D1
000016F6  00FF      
000016F8  2F01      2256          move.l    D1,-(A7)
000016FA  4879 0000 2257          pea       @m68kde~1_38.L
000016FE  67AA      
00001700  4879 0B00 2258          pea       _TempString.L
00001704  0546      
00001706  4EB9 0000 2259          jsr       _sprintf
0000170A  5A34      
0000170C  DEFC 000C 2260          add.w     #12,A7
                    2261   DumpRegisters_16:
                    2262   ; strcat(WatchPointString[x], TempString) ;
00001710  4879 0B00 2263          pea       _TempString.L
00001714  0546      
00001716  220D      2264          move.l    A5,D1
00001718  48C2      2265          ext.l     D2
0000171A  2F00      2266          move.l    D0,-(A7)
0000171C  2002      2267          move.l    D2,D0
0000171E  C1FC 0064 2268          muls      #100,D0
00001722  D280      2269          add.l     D0,D1
00001724  201F      2270          move.l    (A7)+,D0
00001726  2F01      2271          move.l    D1,-(A7)
00001728  4EB9 0000 2272          jsr       _strcat
0000172C  5A66      
0000172E  504F      2273          addq.w    #8,A7
00001730  5243      2274          addq.w    #1,D3
00001732  6000 FF7E 2275          bra       DumpRegisters_12
                    2276   DumpRegisters_14:
00001736  6020      2277          bra.s     DumpRegisters_5
                    2278   DumpRegisters_4:
                    2279   ; }
                    2280   ; }
                    2281   ; else
                    2282   ; strcpy(WatchPointString[x], "") ;
00001738  4879 0000 2283          pea       @m68kde~1_39.L
0000173C  67AE      
0000173E  220D      2284          move.l    A5,D1
00001740  48C2      2285          ext.l     D2
00001742  2F00      2286          move.l    D0,-(A7)
00001744  2002      2287          move.l    D2,D0
00001746  C1FC 0064 2288          muls      #100,D0
0000174A  D280      2289          add.l     D0,D1
0000174C  201F      2290          move.l    (A7)+,D0
0000174E  2F01      2291          move.l    D1,-(A7)
00001750  4EB9 0000 2292          jsr       _strcpy
00001754  58C6      
00001756  504F      2293          addq.w    #8,A7
                    2294   DumpRegisters_5:
00001758  5242      2295          addq.w    #1,D2
0000175A  6000 FE36 2296          bra       DumpRegisters_1
                    2297   DumpRegisters_3:
                    2298   ; }
                    2299   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
0000175E  2F39 0B00 2300          move.l    _a0.L,-(A7)
00001762  0104      
00001764  2F39 0B00 2301          move.l    _d0.L,-(A7)
00001768  00E4      
0000176A  4879 0000 2302          pea       @m68kde~1_40.L
0000176E  67B0      
00001770  4E93      2303          jsr       (A3)
00001772  DEFC 000C 2304          add.w     #12,A7
                    2305   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001776  2F39 0B00 2306          move.l    _a1.L,-(A7)
0000177A  0108      
0000177C  2F39 0B00 2307          move.l    _d1.L,-(A7)
00001780  00E8      
00001782  4879 0000 2308          pea       @m68kde~1_41.L
00001786  67CC      
00001788  4E93      2309          jsr       (A3)
0000178A  DEFC 000C 2310          add.w     #12,A7
                    2311   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
0000178E  2F39 0B00 2312          move.l    _a2.L,-(A7)
00001792  010C      
00001794  2F39 0B00 2313          move.l    _d2.L,-(A7)
00001798  00EC      
0000179A  4879 0000 2314          pea       @m68kde~1_42.L
0000179E  67E6      
000017A0  4E93      2315          jsr       (A3)
000017A2  DEFC 000C 2316          add.w     #12,A7
                    2317   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000017A6  2F39 0B00 2318          move.l    _a3.L,-(A7)
000017AA  0110      
000017AC  2F39 0B00 2319          move.l    _d3.L,-(A7)
000017B0  00F0      
000017B2  4879 0000 2320          pea       @m68kde~1_43.L
000017B6  6800      
000017B8  4E93      2321          jsr       (A3)
000017BA  DEFC 000C 2322          add.w     #12,A7
                    2323   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000017BE  2F39 0B00 2324          move.l    _a4.L,-(A7)
000017C2  0114      
000017C4  2F39 0B00 2325          move.l    _d4.L,-(A7)
000017C8  00F4      
000017CA  4879 0000 2326          pea       @m68kde~1_44.L
000017CE  681A      
000017D0  4E93      2327          jsr       (A3)
000017D2  DEFC 000C 2328          add.w     #12,A7
                    2329   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000017D6  2F39 0B00 2330          move.l    _a5.L,-(A7)
000017DA  0118      
000017DC  2F39 0B00 2331          move.l    _d5.L,-(A7)
000017E0  00F8      
000017E2  4879 0000 2332          pea       @m68kde~1_45.L
000017E6  6834      
000017E8  4E93      2333          jsr       (A3)
000017EA  DEFC 000C 2334          add.w     #12,A7
                    2335   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000017EE  2F39 0B00 2336          move.l    _a6.L,-(A7)
000017F2  011C      
000017F4  2F39 0B00 2337          move.l    _d6.L,-(A7)
000017F8  00FC      
000017FA  4879 0000 2338          pea       @m68kde~1_46.L
000017FE  684E      
00001800  4E93      2339          jsr       (A3)
00001802  DEFC 000C 2340          add.w     #12,A7
                    2341   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001806  3214      2342          move.w    (A4),D1
00001808  C27C 2000 2343          and.w     #8192,D1
0000180C  0C41 2000 2344          cmp.w     #8192,D1
00001810  6608      2345          bne.s     DumpRegisters_18
00001812  2239 0B00 2346          move.l    _SSP.L,D1
00001816  0124      
00001818  6006      2347          bra.s     DumpRegisters_19
                    2348   DumpRegisters_18:
0000181A  2239 0B00 2349          move.l    _USP.L,D1
0000181E  0128      
                    2350   DumpRegisters_19:
00001820  2F01      2351          move.l    D1,-(A7)
00001822  2F39 0B00 2352          move.l    _d7.L,-(A7)
00001826  0100      
00001828  4879 0000 2353          pea       @m68kde~1_47.L
0000182C  6868      
0000182E  4E93      2354          jsr       (A3)
00001830  DEFC 000C 2355          add.w     #12,A7
                    2356   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001834  2F39 0B00 2357          move.l    _USP.L,-(A7)
00001838  0128      
0000183A  4879 0000 2358          pea       @m68kde~1_48.L
0000183E  6882      
00001840  4E93      2359          jsr       (A3)
00001842  504F      2360          addq.w    #8,A7
                    2361   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001844  2F39 0B00 2362          move.l    _SSP.L,-(A7)
00001848  0124      
0000184A  4879 0000 2363          pea       @m68kde~1_49.L
0000184E  68A0      
00001850  4E93      2364          jsr       (A3)
00001852  504F      2365          addq.w    #8,A7
                    2366   ; printf("\r\n SR = $%04X   ",SR) ;
00001854  3214      2367          move.w    (A4),D1
00001856  C2BC 0000 2368          and.l     #65535,D1
0000185A  FFFF      
0000185C  2F01      2369          move.l    D1,-(A7)
0000185E  4879 0000 2370          pea       @m68kde~1_50.L
00001862  68C2      
00001864  4E93      2371          jsr       (A3)
00001866  504F      2372          addq.w    #8,A7
                    2373   ; // display the status word in characters etc.
                    2374   ; printf("   [") ;
00001868  4879 0000 2375          pea       @m68kde~1_51.L
0000186C  68D4      
0000186E  4E93      2376          jsr       (A3)
00001870  584F      2377          addq.w    #4,A7
                    2378   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001872  3014      2379          move.w    (A4),D0
00001874  C07C 8000 2380          and.w     #32768,D0
00001878  0C40 8000 2381          cmp.w     #32768,D0
0000187C  660A      2382          bne.s     DumpRegisters_20
0000187E  4878 0054 2383          pea       84
00001882  4E92      2384          jsr       (A2)
00001884  584F      2385          addq.w    #4,A7
00001886  6008      2386          bra.s     DumpRegisters_21
                    2387   DumpRegisters_20:
00001888  4878 002D 2388          pea       45
0000188C  4E92      2389          jsr       (A2)
0000188E  584F      2390          addq.w    #4,A7
                    2391   DumpRegisters_21:
                    2392   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001890  3014      2393          move.w    (A4),D0
00001892  C07C 2000 2394          and.w     #8192,D0
00001896  0C40 2000 2395          cmp.w     #8192,D0
0000189A  660A      2396          bne.s     DumpRegisters_22
0000189C  4878 0053 2397          pea       83
000018A0  4E92      2398          jsr       (A2)
000018A2  584F      2399          addq.w    #4,A7
000018A4  6008      2400          bra.s     DumpRegisters_23
                    2401   DumpRegisters_22:
000018A6  4878 0055 2402          pea       85
000018AA  4E92      2403          jsr       (A2)
000018AC  584F      2404          addq.w    #4,A7
                    2405   DumpRegisters_23:
                    2406   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000018AE  3014      2407          move.w    (A4),D0
000018B0  C07C 0400 2408          and.w     #1024,D0
000018B4  0C40 0400 2409          cmp.w     #1024,D0
000018B8  660A      2410          bne.s     DumpRegisters_24
000018BA  4878 0031 2411          pea       49
000018BE  4E92      2412          jsr       (A2)
000018C0  584F      2413          addq.w    #4,A7
000018C2  6008      2414          bra.s     DumpRegisters_25
                    2415   DumpRegisters_24:
000018C4  4878 0030 2416          pea       48
000018C8  4E92      2417          jsr       (A2)
000018CA  584F      2418          addq.w    #4,A7
                    2419   DumpRegisters_25:
                    2420   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000018CC  3014      2421          move.w    (A4),D0
000018CE  C07C 0200 2422          and.w     #512,D0
000018D2  0C40 0200 2423          cmp.w     #512,D0
000018D6  660A      2424          bne.s     DumpRegisters_26
000018D8  4878 0031 2425          pea       49
000018DC  4E92      2426          jsr       (A2)
000018DE  584F      2427          addq.w    #4,A7
000018E0  6008      2428          bra.s     DumpRegisters_27
                    2429   DumpRegisters_26:
000018E2  4878 0030 2430          pea       48
000018E6  4E92      2431          jsr       (A2)
000018E8  584F      2432          addq.w    #4,A7
                    2433   DumpRegisters_27:
                    2434   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000018EA  3014      2435          move.w    (A4),D0
000018EC  C07C 0100 2436          and.w     #256,D0
000018F0  0C40 0100 2437          cmp.w     #256,D0
000018F4  660A      2438          bne.s     DumpRegisters_28
000018F6  4878 0031 2439          pea       49
000018FA  4E92      2440          jsr       (A2)
000018FC  584F      2441          addq.w    #4,A7
000018FE  6008      2442          bra.s     DumpRegisters_29
                    2443   DumpRegisters_28:
00001900  4878 0030 2444          pea       48
00001904  4E92      2445          jsr       (A2)
00001906  584F      2446          addq.w    #4,A7
                    2447   DumpRegisters_29:
                    2448   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001908  3014      2449          move.w    (A4),D0
0000190A  C07C 0010 2450          and.w     #16,D0
0000190E  0C40 0010 2451          cmp.w     #16,D0
00001912  660A      2452          bne.s     DumpRegisters_30
00001914  4878 0058 2453          pea       88
00001918  4E92      2454          jsr       (A2)
0000191A  584F      2455          addq.w    #4,A7
0000191C  6008      2456          bra.s     DumpRegisters_31
                    2457   DumpRegisters_30:
0000191E  4878 002D 2458          pea       45
00001922  4E92      2459          jsr       (A2)
00001924  584F      2460          addq.w    #4,A7
                    2461   DumpRegisters_31:
                    2462   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001926  3014      2463          move.w    (A4),D0
00001928  C07C 0008 2464          and.w     #8,D0
0000192C  0C40 0008 2465          cmp.w     #8,D0
00001930  660A      2466          bne.s     DumpRegisters_32
00001932  4878 004E 2467          pea       78
00001936  4E92      2468          jsr       (A2)
00001938  584F      2469          addq.w    #4,A7
0000193A  6008      2470          bra.s     DumpRegisters_33
                    2471   DumpRegisters_32:
0000193C  4878 002D 2472          pea       45
00001940  4E92      2473          jsr       (A2)
00001942  584F      2474          addq.w    #4,A7
                    2475   DumpRegisters_33:
                    2476   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001944  3014      2477          move.w    (A4),D0
00001946  C07C 0004 2478          and.w     #4,D0
0000194A  0C40 0004 2479          cmp.w     #4,D0
0000194E  660A      2480          bne.s     DumpRegisters_34
00001950  4878 005A 2481          pea       90
00001954  4E92      2482          jsr       (A2)
00001956  584F      2483          addq.w    #4,A7
00001958  6008      2484          bra.s     DumpRegisters_35
                    2485   DumpRegisters_34:
0000195A  4878 002D 2486          pea       45
0000195E  4E92      2487          jsr       (A2)
00001960  584F      2488          addq.w    #4,A7
                    2489   DumpRegisters_35:
                    2490   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001962  3014      2491          move.w    (A4),D0
00001964  C07C 0002 2492          and.w     #2,D0
00001968  0C40 0002 2493          cmp.w     #2,D0
0000196C  660A      2494          bne.s     DumpRegisters_36
0000196E  4878 0056 2495          pea       86
00001972  4E92      2496          jsr       (A2)
00001974  584F      2497          addq.w    #4,A7
00001976  6008      2498          bra.s     DumpRegisters_37
                    2499   DumpRegisters_36:
00001978  4878 002D 2500          pea       45
0000197C  4E92      2501          jsr       (A2)
0000197E  584F      2502          addq.w    #4,A7
                    2503   DumpRegisters_37:
                    2504   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001980  3014      2505          move.w    (A4),D0
00001982  C07C 0001 2506          and.w     #1,D0
00001986  0C40 0001 2507          cmp.w     #1,D0
0000198A  660A      2508          bne.s     DumpRegisters_38
0000198C  4878 0043 2509          pea       67
00001990  4E92      2510          jsr       (A2)
00001992  584F      2511          addq.w    #4,A7
00001994  6008      2512          bra.s     DumpRegisters_39
                    2513   DumpRegisters_38:
00001996  4878 002D 2514          pea       45
0000199A  4E92      2515          jsr       (A2)
0000199C  584F      2516          addq.w    #4,A7
                    2517   DumpRegisters_39:
                    2518   ; putchar(']') ;
0000199E  4878 005D 2519          pea       93
000019A2  4E92      2520          jsr       (A2)
000019A4  584F      2521          addq.w    #4,A7
                    2522   ; printf("\r\n PC = $%08X  ", PC) ;
000019A6  2F39 0B00 2523          move.l    _PC.L,-(A7)
000019AA  0120      
000019AC  4879 0000 2524          pea       @m68kde~1_52.L
000019B0  68DA      
000019B2  4E93      2525          jsr       (A3)
000019B4  504F      2526          addq.w    #8,A7
                    2527   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000019B6  2039 0B00 2528          move.l    _PC.L,D0
000019BA  0120      
000019BC  2040      2529          move.l    D0,A0
000019BE  3010      2530          move.w    (A0),D0
000019C0  0C40 4E4E 2531          cmp.w     #20046,D0
000019C4  6724      2532          beq.s     DumpRegisters_40
                    2533   ; DisassembleInstruction(PC) ;
000019C6  2F39 0B00 2534          move.l    _PC.L,-(A7)
000019CA  0120      
000019CC  4EB9 0000 2535          jsr       _DisassembleInstruction
000019D0  3A24      
000019D2  584F      2536          addq.w    #4,A7
                    2537   ; FormatInstructionForTrace() ;
000019D4  4EB8 1500 2538          jsr       _FormatInstructionForTrace
                    2539   ; printf("%s", Instruction) ;
000019D8  4879 0B00 2540          pea       _Instruction.L
000019DC  04E2      
000019DE  4879 0000 2541          pea       @m68kde~1_53.L
000019E2  68EA      
000019E4  4E93      2542          jsr       (A3)
000019E6  504F      2543          addq.w    #8,A7
000019E8  600A      2544          bra.s     DumpRegisters_41
                    2545   DumpRegisters_40:
                    2546   ; }
                    2547   ; else
                    2548   ; printf("[BREAKPOINT]") ;
000019EA  4879 0000 2549          pea       @m68kde~1_54.L
000019EE  68EE      
000019F0  4E93      2550          jsr       (A3)
000019F2  584F      2551          addq.w    #4,A7
                    2552   DumpRegisters_41:
                    2553   ; printf("\r\n") ;
000019F4  4879 0000 2554          pea       @m68kde~1_1.L
000019F8  63AA      
000019FA  4E93      2555          jsr       (A3)
000019FC  584F      2556          addq.w    #4,A7
                    2557   ; for(i=0; i < 8; i++)    {
000019FE  4244      2558          clr.w     D4
                    2559   DumpRegisters_42:
00001A00  0C44 0008 2560          cmp.w     #8,D4
00001A04  6C00 0040 2561          bge       DumpRegisters_44
                    2562   ; if(WatchPointSetOrCleared[i] == 1)
00001A08  48C4      2563          ext.l     D4
00001A0A  2004      2564          move.l    D4,D0
00001A0C  E588      2565          lsl.l     #2,D0
00001A0E  41F9 0B00 2566          lea       _WatchPointSetOrCleared.L,A0
00001A12  01A2      
00001A14  2030 0800 2567          move.l    0(A0,D0.L),D0
00001A18  0C80 0000 2568          cmp.l     #1,D0
00001A1C  0001      
00001A1E  6622      2569          bne.s     DumpRegisters_45
                    2570   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001A20  220D      2571          move.l    A5,D1
00001A22  48C4      2572          ext.l     D4
00001A24  2F00      2573          move.l    D0,-(A7)
00001A26  2004      2574          move.l    D4,D0
00001A28  C1FC 0064 2575          muls      #100,D0
00001A2C  D280      2576          add.l     D0,D1
00001A2E  201F      2577          move.l    (A7)+,D0
00001A30  2F01      2578          move.l    D1,-(A7)
00001A32  48C4      2579          ext.l     D4
00001A34  2F04      2580          move.l    D4,-(A7)
00001A36  4879 0000 2581          pea       @m68kde~1_55.L
00001A3A  68FC      
00001A3C  4E93      2582          jsr       (A3)
00001A3E  DEFC 000C 2583          add.w     #12,A7
                    2584   DumpRegisters_45:
00001A42  5244      2585          addq.w    #1,D4
00001A44  60BA      2586          bra       DumpRegisters_42
                    2587   DumpRegisters_44:
00001A46  4CDF 3CFC 2588          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001A4A  4E75      2589          rts
                    2590   ; }
                    2591   ; }
                    2592   ; // Trace Exception Handler
                    2593   ; void DumpRegistersandPause(void)
                    2594   ; {
                    2595   _DumpRegistersandPause:
00001A4C  2F0A      2596          move.l    A2,-(A7)
00001A4E  45F9 0000 2597          lea       _printf.L,A2
00001A52  5A98      
                    2598   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001A54  4879 0000 2599          pea       @m68kde~1_56.L
00001A58  6908      
00001A5A  4E92      2600          jsr       (A2)
00001A5C  584F      2601          addq.w    #4,A7
                    2602   ; printf("\r\nBreak Points :[Disabled]") ;
00001A5E  4879 0000 2603          pea       @m68kde~1_57.L
00001A62  6928      
00001A64  4E92      2604          jsr       (A2)
00001A66  584F      2605          addq.w    #4,A7
                    2606   ; DumpRegisters() ;
00001A68  4EB8 1574 2607          jsr       _DumpRegisters
                    2608   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001A6C  4879 0000 2609          pea       @m68kde~1_58.L
00001A70  6944      
00001A72  4E92      2610          jsr       (A2)
00001A74  584F      2611          addq.w    #4,A7
                    2612   ; printf("\r\nPress <ESC> to Resume Program") ;
00001A76  4879 0000 2613          pea       @m68kde~1_59.L
00001A7A  6970      
00001A7C  4E92      2614          jsr       (A2)
00001A7E  584F      2615          addq.w    #4,A7
                    2616   ; menu() ;
00001A80  4EB9 0000 2617          jsr       _menu
00001A84  26B6      
00001A86  245F      2618          move.l    (A7)+,A2
00001A88  4E75      2619          rts
                    2620   ; }
                    2621   ; void ChangeRegisters(void)
                    2622   ; {
                    2623   _ChangeRegisters:
00001A8A  4E56 FFFC 2624          link      A6,#-4
00001A8E  48E7 303C 2625          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001A92  45F9 0000 2626          lea       _printf.L,A2
00001A96  5A98      
00001A98  47EE FFFC 2627          lea       -4(A6),A3
00001A9C  49F8 0CA4 2628          lea       _Get8HexDigits.L,A4
00001AA0  4BF8 0B68 2629          lea       __getch.L,A5
                    2630   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2631   ; int reg_val ;
                    2632   ; char c, reg[3] ;
                    2633   ; reg[0] = tolower(_getch()) ;
00001AA4  2F00      2634          move.l    D0,-(A7)
00001AA6  4E95      2635          jsr       (A5)
00001AA8  2200      2636          move.l    D0,D1
00001AAA  201F      2637          move.l    (A7)+,D0
00001AAC  2F01      2638          move.l    D1,-(A7)
00001AAE  4EB9 0000 2639          jsr       _tolower
00001AB2  5A18      
00001AB4  584F      2640          addq.w    #4,A7
00001AB6  1680      2641          move.b    D0,(A3)
                    2642   ; reg[1] = c = tolower(_getch()) ;
00001AB8  2F00      2643          move.l    D0,-(A7)
00001ABA  4E95      2644          jsr       (A5)
00001ABC  2200      2645          move.l    D0,D1
00001ABE  201F      2646          move.l    (A7)+,D0
00001AC0  2F01      2647          move.l    D1,-(A7)
00001AC2  4EB9 0000 2648          jsr       _tolower
00001AC6  5A18      
00001AC8  584F      2649          addq.w    #4,A7
00001ACA  1400      2650          move.b    D0,D2
00001ACC  1740 0001 2651          move.b    D0,1(A3)
                    2652   ; if(reg[0] == (char)('d'))  {    // change data register
00001AD0  1013      2653          move.b    (A3),D0
00001AD2  0C00 0064 2654          cmp.b     #100,D0
00001AD6  6600 00AE 2655          bne       ChangeRegisters_1
                    2656   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001ADA  102B 0001 2657          move.b    1(A3),D0
00001ADE  0C00 0037 2658          cmp.b     #55,D0
00001AE2  6E0A      2659          bgt.s     ChangeRegisters_5
00001AE4  102B 0001 2660          move.b    1(A3),D0
00001AE8  0C00 0030 2661          cmp.b     #48,D0
00001AEC  6C0E      2662          bge.s     ChangeRegisters_3
                    2663   ChangeRegisters_5:
                    2664   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001AEE  4879 0000 2665          pea       @m68kde~1_60.L
00001AF2  6990      
00001AF4  4E92      2666          jsr       (A2)
00001AF6  584F      2667          addq.w    #4,A7
                    2668   ; return ;
00001AF8  6000 0244 2669          bra       ChangeRegisters_6
                    2670   ChangeRegisters_3:
                    2671   ; }
                    2672   ; else {
                    2673   ; printf("\r\nD%c = ", c) ;
00001AFC  4882      2674          ext.w     D2
00001AFE  48C2      2675          ext.l     D2
00001B00  2F02      2676          move.l    D2,-(A7)
00001B02  4879 0000 2677          pea       @m68kde~1_61.L
00001B06  69BC      
00001B08  4E92      2678          jsr       (A2)
00001B0A  504F      2679          addq.w    #8,A7
                    2680   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001B0C  42A7      2681          clr.l     -(A7)
00001B0E  4E94      2682          jsr       (A4)
00001B10  584F      2683          addq.w    #4,A7
00001B12  2600      2684          move.l    D0,D3
                    2685   ; }
                    2686   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2687   ; if(c == (char)('0'))
00001B14  0C02 0030 2688          cmp.b     #48,D2
00001B18  660A      2689          bne.s     ChangeRegisters_7
                    2690   ; d0 = reg_val ;
00001B1A  23C3 0B00 2691          move.l    D3,_d0.L
00001B1E  00E4      
00001B20  6000 0060 2692          bra       ChangeRegisters_20
                    2693   ChangeRegisters_7:
                    2694   ; else if(c == (char)('1'))
00001B24  0C02 0031 2695          cmp.b     #49,D2
00001B28  660A      2696          bne.s     ChangeRegisters_9
                    2697   ; d1 = reg_val ;
00001B2A  23C3 0B00 2698          move.l    D3,_d1.L
00001B2E  00E8      
00001B30  6000 0050 2699          bra       ChangeRegisters_20
                    2700   ChangeRegisters_9:
                    2701   ; else if(c == (char)('2'))
00001B34  0C02 0032 2702          cmp.b     #50,D2
00001B38  660A      2703          bne.s     ChangeRegisters_11
                    2704   ; d2 = reg_val ;
00001B3A  23C3 0B00 2705          move.l    D3,_d2.L
00001B3E  00EC      
00001B40  6000 0040 2706          bra       ChangeRegisters_20
                    2707   ChangeRegisters_11:
                    2708   ; else if(c == (char)('3'))
00001B44  0C02 0033 2709          cmp.b     #51,D2
00001B48  6608      2710          bne.s     ChangeRegisters_13
                    2711   ; d3 = reg_val ;
00001B4A  23C3 0B00 2712          move.l    D3,_d3.L
00001B4E  00F0      
00001B50  6030      2713          bra.s     ChangeRegisters_20
                    2714   ChangeRegisters_13:
                    2715   ; else if(c == (char)('4'))
00001B52  0C02 0034 2716          cmp.b     #52,D2
00001B56  6608      2717          bne.s     ChangeRegisters_15
                    2718   ; d4 = reg_val ;
00001B58  23C3 0B00 2719          move.l    D3,_d4.L
00001B5C  00F4      
00001B5E  6022      2720          bra.s     ChangeRegisters_20
                    2721   ChangeRegisters_15:
                    2722   ; else if(c == (char)('5'))
00001B60  0C02 0035 2723          cmp.b     #53,D2
00001B64  6608      2724          bne.s     ChangeRegisters_17
                    2725   ; d5 = reg_val ;
00001B66  23C3 0B00 2726          move.l    D3,_d5.L
00001B6A  00F8      
00001B6C  6014      2727          bra.s     ChangeRegisters_20
                    2728   ChangeRegisters_17:
                    2729   ; else if(c == (char)('6'))
00001B6E  0C02 0036 2730          cmp.b     #54,D2
00001B72  6608      2731          bne.s     ChangeRegisters_19
                    2732   ; d6 = reg_val ;
00001B74  23C3 0B00 2733          move.l    D3,_d6.L
00001B78  00FC      
00001B7A  6006      2734          bra.s     ChangeRegisters_20
                    2735   ChangeRegisters_19:
                    2736   ; else
                    2737   ; d7 = reg_val ;
00001B7C  23C3 0B00 2738          move.l    D3,_d7.L
00001B80  0100      
                    2739   ChangeRegisters_20:
00001B82  6000 01B6 2740          bra       ChangeRegisters_51
                    2741   ChangeRegisters_1:
                    2742   ; }
                    2743   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001B86  1013      2744          move.b    (A3),D0
00001B88  0C00 0061 2745          cmp.b     #97,D0
00001B8C  6600 00A6 2746          bne       ChangeRegisters_21
                    2747   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001B90  0C02 0037 2748          cmp.b     #55,D2
00001B94  6E06      2749          bgt.s     ChangeRegisters_25
00001B96  0C02 0030 2750          cmp.b     #48,D2
00001B9A  6C0E      2751          bge.s     ChangeRegisters_23
                    2752   ChangeRegisters_25:
                    2753   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001B9C  4879 0000 2754          pea       @m68kde~1_62.L
00001BA0  69C6      
00001BA2  4E92      2755          jsr       (A2)
00001BA4  584F      2756          addq.w    #4,A7
                    2757   ; return ;
00001BA6  6000 0196 2758          bra       ChangeRegisters_6
                    2759   ChangeRegisters_23:
                    2760   ; }
                    2761   ; else {
                    2762   ; printf("\r\nA%c = ", c) ;
00001BAA  4882      2763          ext.w     D2
00001BAC  48C2      2764          ext.l     D2
00001BAE  2F02      2765          move.l    D2,-(A7)
00001BB0  4879 0000 2766          pea       @m68kde~1_63.L
00001BB4  69F4      
00001BB6  4E92      2767          jsr       (A2)
00001BB8  504F      2768          addq.w    #8,A7
                    2769   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001BBA  42A7      2770          clr.l     -(A7)
00001BBC  4E94      2771          jsr       (A4)
00001BBE  584F      2772          addq.w    #4,A7
00001BC0  2600      2773          move.l    D0,D3
                    2774   ; }
                    2775   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2776   ; if(c == (char)('0'))
00001BC2  0C02 0030 2777          cmp.b     #48,D2
00001BC6  660A      2778          bne.s     ChangeRegisters_26
                    2779   ; a0 = reg_val ;
00001BC8  23C3 0B00 2780          move.l    D3,_a0.L
00001BCC  0104      
00001BCE  6000 0060 2781          bra       ChangeRegisters_39
                    2782   ChangeRegisters_26:
                    2783   ; else if(c == (char)('1'))
00001BD2  0C02 0031 2784          cmp.b     #49,D2
00001BD6  660A      2785          bne.s     ChangeRegisters_28
                    2786   ; a1 = reg_val ;
00001BD8  23C3 0B00 2787          move.l    D3,_a1.L
00001BDC  0108      
00001BDE  6000 0050 2788          bra       ChangeRegisters_39
                    2789   ChangeRegisters_28:
                    2790   ; else if(c == (char)('2'))
00001BE2  0C02 0032 2791          cmp.b     #50,D2
00001BE6  660A      2792          bne.s     ChangeRegisters_30
                    2793   ; a2 = reg_val ;
00001BE8  23C3 0B00 2794          move.l    D3,_a2.L
00001BEC  010C      
00001BEE  6000 0040 2795          bra       ChangeRegisters_39
                    2796   ChangeRegisters_30:
                    2797   ; else if(c == (char)('3'))
00001BF2  0C02 0033 2798          cmp.b     #51,D2
00001BF6  6608      2799          bne.s     ChangeRegisters_32
                    2800   ; a3 = reg_val ;
00001BF8  23C3 0B00 2801          move.l    D3,_a3.L
00001BFC  0110      
00001BFE  6030      2802          bra.s     ChangeRegisters_39
                    2803   ChangeRegisters_32:
                    2804   ; else if(c == (char)('4'))
00001C00  0C02 0034 2805          cmp.b     #52,D2
00001C04  6608      2806          bne.s     ChangeRegisters_34
                    2807   ; a4 = reg_val ;
00001C06  23C3 0B00 2808          move.l    D3,_a4.L
00001C0A  0114      
00001C0C  6022      2809          bra.s     ChangeRegisters_39
                    2810   ChangeRegisters_34:
                    2811   ; else if(c == (char)('5'))
00001C0E  0C02 0035 2812          cmp.b     #53,D2
00001C12  6608      2813          bne.s     ChangeRegisters_36
                    2814   ; a5 = reg_val ;
00001C14  23C3 0B00 2815          move.l    D3,_a5.L
00001C18  0118      
00001C1A  6014      2816          bra.s     ChangeRegisters_39
                    2817   ChangeRegisters_36:
                    2818   ; else if(c == (char)('6'))
00001C1C  0C02 0036 2819          cmp.b     #54,D2
00001C20  6608      2820          bne.s     ChangeRegisters_38
                    2821   ; a6 = reg_val ;
00001C22  23C3 0B00 2822          move.l    D3,_a6.L
00001C26  011C      
00001C28  6006      2823          bra.s     ChangeRegisters_39
                    2824   ChangeRegisters_38:
                    2825   ; else
                    2826   ; USP = reg_val ;
00001C2A  23C3 0B00 2827          move.l    D3,_USP.L
00001C2E  0128      
                    2828   ChangeRegisters_39:
00001C30  6000 0108 2829          bra       ChangeRegisters_51
                    2830   ChangeRegisters_21:
                    2831   ; }
                    2832   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001C34  1013      2833          move.b    (A3),D0
00001C36  0C00 0075 2834          cmp.b     #117,D0
00001C3A  6600 004E 2835          bne       ChangeRegisters_40
00001C3E  0C02 0073 2836          cmp.b     #115,D2
00001C42  6600 0046 2837          bne       ChangeRegisters_40
                    2838   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001C46  2F00      2839          move.l    D0,-(A7)
00001C48  4E95      2840          jsr       (A5)
00001C4A  2200      2841          move.l    D0,D1
00001C4C  201F      2842          move.l    (A7)+,D0
00001C4E  2F01      2843          move.l    D1,-(A7)
00001C50  4EB9 0000 2844          jsr       _tolower
00001C54  5A18      
00001C56  584F      2845          addq.w    #4,A7
00001C58  0C80 0000 2846          cmp.l     #112,D0
00001C5C  0070      
00001C5E  6618      2847          bne.s     ChangeRegisters_42
                    2848   ; printf("\r\nUser SP = ") ;
00001C60  4879 0000 2849          pea       @m68kde~1_64.L
00001C64  69FE      
00001C66  4E92      2850          jsr       (A2)
00001C68  584F      2851          addq.w    #4,A7
                    2852   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C6A  42A7      2853          clr.l     -(A7)
00001C6C  4E94      2854          jsr       (A4)
00001C6E  584F      2855          addq.w    #4,A7
00001C70  23C0 0B00 2856          move.l    D0,_USP.L
00001C74  0128      
00001C76  600E      2857          bra.s     ChangeRegisters_43
                    2858   ChangeRegisters_42:
                    2859   ; }
                    2860   ; else {
                    2861   ; printf("\r\nIllegal Register....") ;
00001C78  4879 0000 2862          pea       @m68kde~1_65.L
00001C7C  6A0C      
00001C7E  4E92      2863          jsr       (A2)
00001C80  584F      2864          addq.w    #4,A7
                    2865   ; return ;
00001C82  6000 00BA 2866          bra       ChangeRegisters_6
                    2867   ChangeRegisters_43:
00001C86  6000 00B2 2868          bra       ChangeRegisters_51
                    2869   ChangeRegisters_40:
                    2870   ; }
                    2871   ; }
                    2872   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001C8A  1013      2873          move.b    (A3),D0
00001C8C  0C00 0073 2874          cmp.b     #115,D0
00001C90  6600 004E 2875          bne       ChangeRegisters_44
00001C94  0C02 0073 2876          cmp.b     #115,D2
00001C98  6600 0046 2877          bne       ChangeRegisters_44
                    2878   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001C9C  2F00      2879          move.l    D0,-(A7)
00001C9E  4E95      2880          jsr       (A5)
00001CA0  2200      2881          move.l    D0,D1
00001CA2  201F      2882          move.l    (A7)+,D0
00001CA4  2F01      2883          move.l    D1,-(A7)
00001CA6  4EB9 0000 2884          jsr       _tolower
00001CAA  5A18      
00001CAC  584F      2885          addq.w    #4,A7
00001CAE  0C80 0000 2886          cmp.l     #112,D0
00001CB2  0070      
00001CB4  6618      2887          bne.s     ChangeRegisters_46
                    2888   ; printf("\r\nSystem SP = ") ;
00001CB6  4879 0000 2889          pea       @m68kde~1_66.L
00001CBA  6A24      
00001CBC  4E92      2890          jsr       (A2)
00001CBE  584F      2891          addq.w    #4,A7
                    2892   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001CC0  42A7      2893          clr.l     -(A7)
00001CC2  4E94      2894          jsr       (A4)
00001CC4  584F      2895          addq.w    #4,A7
00001CC6  23C0 0B00 2896          move.l    D0,_SSP.L
00001CCA  0124      
00001CCC  600E      2897          bra.s     ChangeRegisters_47
                    2898   ChangeRegisters_46:
                    2899   ; }
                    2900   ; else {
                    2901   ; printf("\r\nIllegal Register....") ;
00001CCE  4879 0000 2902          pea       @m68kde~1_65.L
00001CD2  6A0C      
00001CD4  4E92      2903          jsr       (A2)
00001CD6  584F      2904          addq.w    #4,A7
                    2905   ; return ;
00001CD8  6000 0064 2906          bra       ChangeRegisters_6
                    2907   ChangeRegisters_47:
00001CDC  6000 005C 2908          bra       ChangeRegisters_51
                    2909   ChangeRegisters_44:
                    2910   ; }
                    2911   ; }
                    2912   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001CE0  1013      2913          move.b    (A3),D0
00001CE2  0C00 0070 2914          cmp.b     #112,D0
00001CE6  6620      2915          bne.s     ChangeRegisters_48
00001CE8  0C02 0063 2916          cmp.b     #99,D2
00001CEC  661A      2917          bne.s     ChangeRegisters_48
                    2918   ; printf("\r\nPC = ") ;
00001CEE  4879 0000 2919          pea       @m68kde~1_67.L
00001CF2  6A34      
00001CF4  4E92      2920          jsr       (A2)
00001CF6  584F      2921          addq.w    #4,A7
                    2922   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001CF8  42A7      2923          clr.l     -(A7)
00001CFA  4E94      2924          jsr       (A4)
00001CFC  584F      2925          addq.w    #4,A7
00001CFE  23C0 0B00 2926          move.l    D0,_PC.L
00001D02  0120      
00001D04  6000 0034 2927          bra       ChangeRegisters_51
                    2928   ChangeRegisters_48:
                    2929   ; }
                    2930   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001D08  1013      2931          move.b    (A3),D0
00001D0A  0C00 0073 2932          cmp.b     #115,D0
00001D0E  6620      2933          bne.s     ChangeRegisters_50
00001D10  0C02 0072 2934          cmp.b     #114,D2
00001D14  661A      2935          bne.s     ChangeRegisters_50
                    2936   ; printf("\r\nSR = ") ;
00001D16  4879 0000 2937          pea       @m68kde~1_68.L
00001D1A  6A3C      
00001D1C  4E92      2938          jsr       (A2)
00001D1E  584F      2939          addq.w    #4,A7
                    2940   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001D20  42A7      2941          clr.l     -(A7)
00001D22  4EB8 0C58 2942          jsr       _Get4HexDigits
00001D26  584F      2943          addq.w    #4,A7
00001D28  33C0 0B00 2944          move.w    D0,_SR.L
00001D2C  012C      
00001D2E  600A      2945          bra.s     ChangeRegisters_51
                    2946   ChangeRegisters_50:
                    2947   ; }
                    2948   ; else
                    2949   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001D30  4879 0000 2950          pea       @m68kde~1_69.L
00001D34  6A44      
00001D36  4E92      2951          jsr       (A2)
00001D38  584F      2952          addq.w    #4,A7
                    2953   ChangeRegisters_51:
                    2954   ; DumpRegisters() ;
00001D3A  4EB8 1574 2955          jsr       _DumpRegisters
                    2956   ChangeRegisters_6:
00001D3E  4CDF 3C0C 2957          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001D42  4E5E      2958          unlk      A6
00001D44  4E75      2959          rts
                    2960   ; }
                    2961   ; void BreakPointDisplay(void)
                    2962   ; {
                    2963   _BreakPointDisplay:
00001D46  48E7 3030 2964          movem.l   D2/D3/A2/A3,-(A7)
00001D4A  45F9 0000 2965          lea       _printf.L,A2
00001D4E  5A98      
00001D50  47F9 0B00 2966          lea       _BreakPointAddress.L,A3
00001D54  012E      
                    2967   ; int i, BreakPointsSet = 0 ;
00001D56  4283      2968          clr.l     D3
                    2969   ; // any break points  set
                    2970   ; for(i = 0; i < 8; i++)  {
00001D58  4282      2971          clr.l     D2
                    2972   BreakPointDisplay_1:
00001D5A  0C82 0000 2973          cmp.l     #8,D2
00001D5E  0008      
00001D60  6C1C      2974          bge.s     BreakPointDisplay_3
                    2975   ; if(BreakPointSetOrCleared[i] == 1)
00001D62  2002      2976          move.l    D2,D0
00001D64  E588      2977          lsl.l     #2,D0
00001D66  41F9 0B00 2978          lea       _BreakPointSetOrCleared.L,A0
00001D6A  015E      
00001D6C  2030 0800 2979          move.l    0(A0,D0.L),D0
00001D70  0C80 0000 2980          cmp.l     #1,D0
00001D74  0001      
00001D76  6602      2981          bne.s     BreakPointDisplay_4
                    2982   ; BreakPointsSet = 1;
00001D78  7601      2983          moveq     #1,D3
                    2984   BreakPointDisplay_4:
00001D7A  5282      2985          addq.l    #1,D2
00001D7C  60DC      2986          bra       BreakPointDisplay_1
                    2987   BreakPointDisplay_3:
                    2988   ; }
                    2989   ; if(BreakPointsSet == 1) {
00001D7E  0C83 0000 2990          cmp.l     #1,D3
00001D82  0001      
00001D84  6616      2991          bne.s     BreakPointDisplay_6
                    2992   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001D86  4879 0000 2993          pea       @m68kde~1_70.L
00001D8A  6A80      
00001D8C  4E92      2994          jsr       (A2)
00001D8E  584F      2995          addq.w    #4,A7
                    2996   ; printf("\r\n---     ---------    -----------") ;
00001D90  4879 0000 2997          pea       @m68kde~1_71.L
00001D94  6AA6      
00001D96  4E92      2998          jsr       (A2)
00001D98  584F      2999          addq.w    #4,A7
00001D9A  600A      3000          bra.s     BreakPointDisplay_7
                    3001   BreakPointDisplay_6:
                    3002   ; }
                    3003   ; else
                    3004   ; printf("\r\nNo BreakPoints Set") ;
00001D9C  4879 0000 3005          pea       @m68kde~1_72.L
00001DA0  6ACA      
00001DA2  4E92      3006          jsr       (A2)
00001DA4  584F      3007          addq.w    #4,A7
                    3008   BreakPointDisplay_7:
                    3009   ; for(i = 0; i < 8; i++)  {
00001DA6  4282      3010          clr.l     D2
                    3011   BreakPointDisplay_8:
00001DA8  0C82 0000 3012          cmp.l     #8,D2
00001DAC  0008      
00001DAE  6C00 0080 3013          bge       BreakPointDisplay_10
                    3014   ; // put opcode back to disassemble it, then put break point back
                    3015   ; if(BreakPointSetOrCleared[i] == 1)  {
00001DB2  2002      3016          move.l    D2,D0
00001DB4  E588      3017          lsl.l     #2,D0
00001DB6  41F9 0B00 3018          lea       _BreakPointSetOrCleared.L,A0
00001DBA  015E      
00001DBC  2030 0800 3019          move.l    0(A0,D0.L),D0
00001DC0  0C80 0000 3020          cmp.l     #1,D0
00001DC4  0001      
00001DC6  6600 0062 3021          bne       BreakPointDisplay_11
                    3022   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001DCA  2002      3023          move.l    D2,D0
00001DCC  E388      3024          lsl.l     #1,D0
00001DCE  41F9 0B00 3025          lea       _BreakPointInstruction.L,A0
00001DD2  014E      
00001DD4  2202      3026          move.l    D2,D1
00001DD6  E589      3027          lsl.l     #2,D1
00001DD8  2233 1800 3028          move.l    0(A3,D1.L),D1
00001DDC  2241      3029          move.l    D1,A1
00001DDE  32B0 0800 3030          move.w    0(A0,D0.L),(A1)
                    3031   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001DE2  2202      3032          move.l    D2,D1
00001DE4  E589      3033          lsl.l     #2,D1
00001DE6  2F33 1800 3034          move.l    0(A3,D1.L),-(A7)
00001DEA  4EB9 0000 3035          jsr       _DisassembleInstruction
00001DEE  3A24      
00001DF0  584F      3036          addq.w    #4,A7
                    3037   ; FormatInstructionForTrace() ;
00001DF2  4EB8 1500 3038          jsr       _FormatInstructionForTrace
                    3039   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001DF6  2002      3040          move.l    D2,D0
00001DF8  E588      3041          lsl.l     #2,D0
00001DFA  2033 0800 3042          move.l    0(A3,D0.L),D0
00001DFE  2040      3043          move.l    D0,A0
00001E00  30BC 4E4E 3044          move.w    #20046,(A0)
                    3045   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001E04  2202      3046          move.l    D2,D1
00001E06  E589      3047          lsl.l     #2,D1
00001E08  2F33 1800 3048          move.l    0(A3,D1.L),-(A7)
00001E0C  2F02      3049          move.l    D2,-(A7)
00001E0E  4879 0000 3050          pea       @m68kde~1_73.L
00001E12  6AE0      
00001E14  4E92      3051          jsr       (A2)
00001E16  DEFC 000C 3052          add.w     #12,A7
                    3053   ; printf("    %s", Instruction);
00001E1A  4879 0B00 3054          pea       _Instruction.L
00001E1E  04E2      
00001E20  4879 0000 3055          pea       @m68kde~1_74.L
00001E24  6AF0      
00001E26  4E92      3056          jsr       (A2)
00001E28  504F      3057          addq.w    #8,A7
                    3058   BreakPointDisplay_11:
00001E2A  5282      3059          addq.l    #1,D2
00001E2C  6000 FF7A 3060          bra       BreakPointDisplay_8
                    3061   BreakPointDisplay_10:
                    3062   ; }
                    3063   ; }
                    3064   ; printf("\r\n") ;
00001E30  4879 0000 3065          pea       @m68kde~1_1.L
00001E34  63AA      
00001E36  4E92      3066          jsr       (A2)
00001E38  584F      3067          addq.w    #4,A7
00001E3A  4CDF 0C0C 3068          movem.l   (A7)+,D2/D3/A2/A3
00001E3E  4E75      3069          rts
                    3070   ; }
                    3071   ; void WatchPointDisplay(void)
                    3072   ; {
                    3073   _WatchPointDisplay:
00001E40  48E7 3020 3074          movem.l   D2/D3/A2,-(A7)
00001E44  45F9 0000 3075          lea       _printf.L,A2
00001E48  5A98      
                    3076   ; int i ;
                    3077   ; int WatchPointsSet = 0 ;
00001E4A  4283      3078          clr.l     D3
                    3079   ; // any watchpoints set
                    3080   ; for(i = 0; i < 8; i++)  {
00001E4C  4282      3081          clr.l     D2
                    3082   WatchPointDisplay_1:
00001E4E  0C82 0000 3083          cmp.l     #8,D2
00001E52  0008      
00001E54  6C1C      3084          bge.s     WatchPointDisplay_3
                    3085   ; if(WatchPointSetOrCleared[i] == 1)
00001E56  2002      3086          move.l    D2,D0
00001E58  E588      3087          lsl.l     #2,D0
00001E5A  41F9 0B00 3088          lea       _WatchPointSetOrCleared.L,A0
00001E5E  01A2      
00001E60  2030 0800 3089          move.l    0(A0,D0.L),D0
00001E64  0C80 0000 3090          cmp.l     #1,D0
00001E68  0001      
00001E6A  6602      3091          bne.s     WatchPointDisplay_4
                    3092   ; WatchPointsSet = 1;
00001E6C  7601      3093          moveq     #1,D3
                    3094   WatchPointDisplay_4:
00001E6E  5282      3095          addq.l    #1,D2
00001E70  60DC      3096          bra       WatchPointDisplay_1
                    3097   WatchPointDisplay_3:
                    3098   ; }
                    3099   ; if(WatchPointsSet == 1) {
00001E72  0C83 0000 3100          cmp.l     #1,D3
00001E76  0001      
00001E78  6616      3101          bne.s     WatchPointDisplay_6
                    3102   ; printf("\r\nNum     Address") ;
00001E7A  4879 0000 3103          pea       @m68kde~1_75.L
00001E7E  6AF8      
00001E80  4E92      3104          jsr       (A2)
00001E82  584F      3105          addq.w    #4,A7
                    3106   ; printf("\r\n---     ---------") ;
00001E84  4879 0000 3107          pea       @m68kde~1_76.L
00001E88  6B0A      
00001E8A  4E92      3108          jsr       (A2)
00001E8C  584F      3109          addq.w    #4,A7
00001E8E  600A      3110          bra.s     WatchPointDisplay_7
                    3111   WatchPointDisplay_6:
                    3112   ; }
                    3113   ; else
                    3114   ; printf("\r\nNo WatchPoints Set") ;
00001E90  4879 0000 3115          pea       @m68kde~1_77.L
00001E94  6B1E      
00001E96  4E92      3116          jsr       (A2)
00001E98  584F      3117          addq.w    #4,A7
                    3118   WatchPointDisplay_7:
                    3119   ; for(i = 0; i < 8; i++)  {
00001E9A  4282      3120          clr.l     D2
                    3121   WatchPointDisplay_8:
00001E9C  0C82 0000 3122          cmp.l     #8,D2
00001EA0  0008      
00001EA2  6C00 0038 3123          bge       WatchPointDisplay_10
                    3124   ; if(WatchPointSetOrCleared[i] == 1)
00001EA6  2002      3125          move.l    D2,D0
00001EA8  E588      3126          lsl.l     #2,D0
00001EAA  41F9 0B00 3127          lea       _WatchPointSetOrCleared.L,A0
00001EAE  01A2      
00001EB0  2030 0800 3128          move.l    0(A0,D0.L),D0
00001EB4  0C80 0000 3129          cmp.l     #1,D0
00001EB8  0001      
00001EBA  661C      3130          bne.s     WatchPointDisplay_11
                    3131   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001EBC  2202      3132          move.l    D2,D1
00001EBE  E589      3133          lsl.l     #2,D1
00001EC0  41F9 0B00 3134          lea       _WatchPointAddress.L,A0
00001EC4  0182      
00001EC6  2F30 1800 3135          move.l    0(A0,D1.L),-(A7)
00001ECA  2F02      3136          move.l    D2,-(A7)
00001ECC  4879 0000 3137          pea       @m68kde~1_73.L
00001ED0  6AE0      
00001ED2  4E92      3138          jsr       (A2)
00001ED4  DEFC 000C 3139          add.w     #12,A7
                    3140   WatchPointDisplay_11:
00001ED8  5282      3141          addq.l    #1,D2
00001EDA  60C0      3142          bra       WatchPointDisplay_8
                    3143   WatchPointDisplay_10:
                    3144   ; }
                    3145   ; printf("\r\n") ;
00001EDC  4879 0000 3146          pea       @m68kde~1_1.L
00001EE0  63AA      
00001EE2  4E92      3147          jsr       (A2)
00001EE4  584F      3148          addq.w    #4,A7
00001EE6  4CDF 040C 3149          movem.l   (A7)+,D2/D3/A2
00001EEA  4E75      3150          rts
                    3151   ; }
                    3152   ; void BreakPointClear(void)
                    3153   ; {
                    3154   _BreakPointClear:
00001EEC  4E56 FFFC 3155          link      A6,#-4
00001EF0  48E7 2020 3156          movem.l   D2/A2,-(A7)
00001EF4  45F9 0000 3157          lea       _printf.L,A2
00001EF8  5A98      
                    3158   ; unsigned int i ;
                    3159   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3160   ; BreakPointDisplay() ;
00001EFA  4EB8 1D46 3161          jsr       _BreakPointDisplay
                    3162   ; printf("\r\nEnter Break Point Number: ") ;
00001EFE  4879 0000 3163          pea       @m68kde~1_78.L
00001F02  6B34      
00001F04  4E92      3164          jsr       (A2)
00001F06  584F      3165          addq.w    #4,A7
                    3166   ; i = xtod(_getch()) ;           // get break pointer number
00001F08  2F00      3167          move.l    D0,-(A7)
00001F0A  4EB8 0B68 3168          jsr       __getch
00001F0E  2200      3169          move.l    D0,D1
00001F10  201F      3170          move.l    (A7)+,D0
00001F12  2F01      3171          move.l    D1,-(A7)
00001F14  4EB8 0BD2 3172          jsr       _xtod
00001F18  584F      3173          addq.w    #4,A7
00001F1A  C0BC 0000 3174          and.l     #255,D0
00001F1E  00FF      
00001F20  2400      3175          move.l    D0,D2
                    3176   ; if((i < 0) || (i > 7))   {
00001F22  0C82 0000 3177          cmp.l     #0,D2
00001F26  0000      
00001F28  6508      3178          blo.s     BreakPointClear_3
00001F2A  0C82 0000 3179          cmp.l     #7,D2
00001F2E  0007      
00001F30  630E      3180          bls.s     BreakPointClear_1
                    3181   BreakPointClear_3:
                    3182   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001F32  4879 0000 3183          pea       @m68kde~1_79.L
00001F36  6B52      
00001F38  4E92      3184          jsr       (A2)
00001F3A  584F      3185          addq.w    #4,A7
                    3186   ; return ;
00001F3C  6000 0080 3187          bra       BreakPointClear_4
                    3188   BreakPointClear_1:
                    3189   ; }
                    3190   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001F40  2002      3191          move.l    D2,D0
00001F42  E588      3192          lsl.l     #2,D0
00001F44  41F9 0B00 3193          lea       _BreakPointSetOrCleared.L,A0
00001F48  015E      
00001F4A  2030 0800 3194          move.l    0(A0,D0.L),D0
00001F4E  0C80 0000 3195          cmp.l     #1,D0
00001F52  0001      
00001F54  6600 005A 3196          bne       BreakPointClear_5
                    3197   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001F58  2002      3198          move.l    D2,D0
00001F5A  E588      3199          lsl.l     #2,D0
00001F5C  41F9 0B00 3200          lea       _BreakPointAddress.L,A0
00001F60  012E      
00001F62  2D70 0800 3201          move.l    0(A0,D0.L),-4(A6)
00001F66  FFFC      
                    3202   ; BreakPointAddress[i] = 0 ;
00001F68  2002      3203          move.l    D2,D0
00001F6A  E588      3204          lsl.l     #2,D0
00001F6C  41F9 0B00 3205          lea       _BreakPointAddress.L,A0
00001F70  012E      
00001F72  42B0 0800 3206          clr.l     0(A0,D0.L)
                    3207   ; BreakPointSetOrCleared[i] = 0 ;
00001F76  2002      3208          move.l    D2,D0
00001F78  E588      3209          lsl.l     #2,D0
00001F7A  41F9 0B00 3210          lea       _BreakPointSetOrCleared.L,A0
00001F7E  015E      
00001F80  42B0 0800 3211          clr.l     0(A0,D0.L)
                    3212   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F84  2002      3213          move.l    D2,D0
00001F86  E388      3214          lsl.l     #1,D0
00001F88  41F9 0B00 3215          lea       _BreakPointInstruction.L,A0
00001F8C  014E      
00001F8E  226E FFFC 3216          move.l    -4(A6),A1
00001F92  32B0 0800 3217          move.w    0(A0,D0.L),(A1)
                    3218   ; BreakPointInstruction[i] = 0 ;
00001F96  2002      3219          move.l    D2,D0
00001F98  E388      3220          lsl.l     #1,D0
00001F9A  41F9 0B00 3221          lea       _BreakPointInstruction.L,A0
00001F9E  014E      
00001FA0  4270 0800 3222          clr.w     0(A0,D0.L)
                    3223   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001FA4  4879 0000 3224          pea       @m68kde~1_80.L
00001FA8  6B6E      
00001FAA  4E92      3225          jsr       (A2)
00001FAC  584F      3226          addq.w    #4,A7
00001FAE  600A      3227          bra.s     BreakPointClear_6
                    3228   BreakPointClear_5:
                    3229   ; }
                    3230   ; else
                    3231   ; printf("\r\nBreak Point wasn't Set.....") ;
00001FB0  4879 0000 3232          pea       @m68kde~1_81.L
00001FB4  6B8C      
00001FB6  4E92      3233          jsr       (A2)
00001FB8  584F      3234          addq.w    #4,A7
                    3235   BreakPointClear_6:
                    3236   ; BreakPointDisplay() ;
00001FBA  4EB8 1D46 3237          jsr       _BreakPointDisplay
                    3238   ; return ;
                    3239   BreakPointClear_4:
00001FBE  4CDF 0404 3240          movem.l   (A7)+,D2/A2
00001FC2  4E5E      3241          unlk      A6
00001FC4  4E75      3242          rts
                    3243   ; }
                    3244   ; void WatchPointClear(void)
                    3245   ; {
                    3246   _WatchPointClear:
00001FC6  48E7 2020 3247          movem.l   D2/A2,-(A7)
00001FCA  45F9 0000 3248          lea       _printf.L,A2
00001FCE  5A98      
                    3249   ; unsigned int i ;
                    3250   ; WatchPointDisplay() ;
00001FD0  4EB8 1E40 3251          jsr       _WatchPointDisplay
                    3252   ; printf("\r\nEnter Watch Point Number: ") ;
00001FD4  4879 0000 3253          pea       @m68kde~1_82.L
00001FD8  6BAA      
00001FDA  4E92      3254          jsr       (A2)
00001FDC  584F      3255          addq.w    #4,A7
                    3256   ; i = xtod(_getch()) ;           // get watch pointer number
00001FDE  2F00      3257          move.l    D0,-(A7)
00001FE0  4EB8 0B68 3258          jsr       __getch
00001FE4  2200      3259          move.l    D0,D1
00001FE6  201F      3260          move.l    (A7)+,D0
00001FE8  2F01      3261          move.l    D1,-(A7)
00001FEA  4EB8 0BD2 3262          jsr       _xtod
00001FEE  584F      3263          addq.w    #4,A7
00001FF0  C0BC 0000 3264          and.l     #255,D0
00001FF4  00FF      
00001FF6  2400      3265          move.l    D0,D2
                    3266   ; if((i < 0) || (i > 7))   {
00001FF8  0C82 0000 3267          cmp.l     #0,D2
00001FFC  0000      
00001FFE  6508      3268          blo.s     WatchPointClear_3
00002000  0C82 0000 3269          cmp.l     #7,D2
00002004  0007      
00002006  630E      3270          bls.s     WatchPointClear_1
                    3271   WatchPointClear_3:
                    3272   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00002008  4879 0000 3273          pea       @m68kde~1_79.L
0000200C  6B52      
0000200E  4E92      3274          jsr       (A2)
00002010  584F      3275          addq.w    #4,A7
                    3276   ; return ;
00002012  6000 004E 3277          bra       WatchPointClear_4
                    3278   WatchPointClear_1:
                    3279   ; }
                    3280   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00002016  2002      3281          move.l    D2,D0
00002018  E588      3282          lsl.l     #2,D0
0000201A  41F9 0B00 3283          lea       _WatchPointSetOrCleared.L,A0
0000201E  01A2      
00002020  2030 0800 3284          move.l    0(A0,D0.L),D0
00002024  0C80 0000 3285          cmp.l     #1,D0
00002028  0001      
0000202A  6628      3286          bne.s     WatchPointClear_5
                    3287   ; WatchPointAddress[i] = 0 ;
0000202C  2002      3288          move.l    D2,D0
0000202E  E588      3289          lsl.l     #2,D0
00002030  41F9 0B00 3290          lea       _WatchPointAddress.L,A0
00002034  0182      
00002036  42B0 0800 3291          clr.l     0(A0,D0.L)
                    3292   ; WatchPointSetOrCleared[i] = 0 ;
0000203A  2002      3293          move.l    D2,D0
0000203C  E588      3294          lsl.l     #2,D0
0000203E  41F9 0B00 3295          lea       _WatchPointSetOrCleared.L,A0
00002042  01A2      
00002044  42B0 0800 3296          clr.l     0(A0,D0.L)
                    3297   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00002048  4879 0000 3298          pea       @m68kde~1_83.L
0000204C  6BC8      
0000204E  4E92      3299          jsr       (A2)
00002050  584F      3300          addq.w    #4,A7
00002052  600A      3301          bra.s     WatchPointClear_6
                    3302   WatchPointClear_5:
                    3303   ; }
                    3304   ; else
                    3305   ; printf("\r\nWatch Point Was not Set.....") ;
00002054  4879 0000 3306          pea       @m68kde~1_84.L
00002058  6BE6      
0000205A  4E92      3307          jsr       (A2)
0000205C  584F      3308          addq.w    #4,A7
                    3309   WatchPointClear_6:
                    3310   ; WatchPointDisplay() ;
0000205E  4EB8 1E40 3311          jsr       _WatchPointDisplay
                    3312   ; return ;
                    3313   WatchPointClear_4:
00002062  4CDF 0404 3314          movem.l   (A7)+,D2/A2
00002066  4E75      3315          rts
                    3316   ; }
                    3317   ; void DisableBreakPoints(void)
                    3318   ; {
                    3319   _DisableBreakPoints:
00002068  4E56 FFFC 3320          link      A6,#-4
0000206C  2F02      3321          move.l    D2,-(A7)
                    3322   ; int i ;
                    3323   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3324   ; for(i = 0; i < 8; i++)  {
0000206E  4282      3325          clr.l     D2
                    3326   DisableBreakPoints_1:
00002070  0C82 0000 3327          cmp.l     #8,D2
00002074  0008      
00002076  6C00 003E 3328          bge       DisableBreakPoints_3
                    3329   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
0000207A  2002      3330          move.l    D2,D0
0000207C  E588      3331          lsl.l     #2,D0
0000207E  41F9 0B00 3332          lea       _BreakPointSetOrCleared.L,A0
00002082  015E      
00002084  2030 0800 3333          move.l    0(A0,D0.L),D0
00002088  0C80 0000 3334          cmp.l     #1,D0
0000208C  0001      
0000208E  6622      3335          bne.s     DisableBreakPoints_4
                    3336   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002090  2002      3337          move.l    D2,D0
00002092  E588      3338          lsl.l     #2,D0
00002094  41F9 0B00 3339          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2D70 0800 3340          move.l    0(A0,D0.L),-4(A6)
0000209E  FFFC      
                    3341   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
000020A0  2002      3342          move.l    D2,D0
000020A2  E388      3343          lsl.l     #1,D0
000020A4  41F9 0B00 3344          lea       _BreakPointInstruction.L,A0
000020A8  014E      
000020AA  226E FFFC 3345          move.l    -4(A6),A1
000020AE  32B0 0800 3346          move.w    0(A0,D0.L),(A1)
                    3347   DisableBreakPoints_4:
000020B2  5282      3348          addq.l    #1,D2
000020B4  60BA      3349          bra       DisableBreakPoints_1
                    3350   DisableBreakPoints_3:
000020B6  241F      3351          move.l    (A7)+,D2
000020B8  4E5E      3352          unlk      A6
000020BA  4E75      3353          rts
                    3354   ; }
                    3355   ; }
                    3356   ; }
                    3357   ; void EnableBreakPoints(void)
                    3358   ; {
                    3359   _EnableBreakPoints:
000020BC  4E56 FFFC 3360          link      A6,#-4
000020C0  2F02      3361          move.l    D2,-(A7)
                    3362   ; int i ;
                    3363   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3364   ; for(i = 0; i < 8; i++)  {
000020C2  4282      3365          clr.l     D2
                    3366   EnableBreakPoints_1:
000020C4  0C82 0000 3367          cmp.l     #8,D2
000020C8  0008      
000020CA  6C32      3368          bge.s     EnableBreakPoints_3
                    3369   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
000020CC  2002      3370          move.l    D2,D0
000020CE  E588      3371          lsl.l     #2,D0
000020D0  41F9 0B00 3372          lea       _BreakPointSetOrCleared.L,A0
000020D4  015E      
000020D6  2030 0800 3373          move.l    0(A0,D0.L),D0
000020DA  0C80 0000 3374          cmp.l     #1,D0
000020DE  0001      
000020E0  6618      3375          bne.s     EnableBreakPoints_4
                    3376   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000020E2  2002      3377          move.l    D2,D0
000020E4  E588      3378          lsl.l     #2,D0
000020E6  41F9 0B00 3379          lea       _BreakPointAddress.L,A0
000020EA  012E      
000020EC  2D70 0800 3380          move.l    0(A0,D0.L),-4(A6)
000020F0  FFFC      
                    3381   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
000020F2  206E FFFC 3382          move.l    -4(A6),A0
000020F6  30BC 4E4E 3383          move.w    #20046,(A0)
                    3384   EnableBreakPoints_4:
000020FA  5282      3385          addq.l    #1,D2
000020FC  60C6      3386          bra       EnableBreakPoints_1
                    3387   EnableBreakPoints_3:
000020FE  241F      3388          move.l    (A7)+,D2
00002100  4E5E      3389          unlk      A6
00002102  4E75      3390          rts
                    3391   ; }
                    3392   ; }
                    3393   ; }
                    3394   ; void KillAllBreakPoints(void)
                    3395   ; {
                    3396   _KillAllBreakPoints:
00002104  4E56 FFFC 3397          link      A6,#-4
00002108  2F02      3398          move.l    D2,-(A7)
                    3399   ; int i ;
                    3400   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3401   ; for(i = 0; i < 8; i++)  {
0000210A  4282      3402          clr.l     D2
                    3403   KillAllBreakPoints_1:
0000210C  0C82 0000 3404          cmp.l     #8,D2
00002110  0008      
00002112  6C00 0052 3405          bge       KillAllBreakPoints_3
                    3406   ; // clear BP
                    3407   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002116  2002      3408          move.l    D2,D0
00002118  E588      3409          lsl.l     #2,D0
0000211A  41F9 0B00 3410          lea       _BreakPointAddress.L,A0
0000211E  012E      
00002120  2D70 0800 3411          move.l    0(A0,D0.L),-4(A6)
00002124  FFFC      
                    3412   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002126  2002      3413          move.l    D2,D0
00002128  E388      3414          lsl.l     #1,D0
0000212A  41F9 0B00 3415          lea       _BreakPointInstruction.L,A0
0000212E  014E      
00002130  226E FFFC 3416          move.l    -4(A6),A1
00002134  32B0 0800 3417          move.w    0(A0,D0.L),(A1)
                    3418   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002138  2002      3419          move.l    D2,D0
0000213A  E588      3420          lsl.l     #2,D0
0000213C  41F9 0B00 3421          lea       _BreakPointAddress.L,A0
00002140  012E      
00002142  42B0 0800 3422          clr.l     0(A0,D0.L)
                    3423   ; BreakPointInstruction[i] = 0 ;
00002146  2002      3424          move.l    D2,D0
00002148  E388      3425          lsl.l     #1,D0
0000214A  41F9 0B00 3426          lea       _BreakPointInstruction.L,A0
0000214E  014E      
00002150  4270 0800 3427          clr.w     0(A0,D0.L)
                    3428   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002154  2002      3429          move.l    D2,D0
00002156  E588      3430          lsl.l     #2,D0
00002158  41F9 0B00 3431          lea       _BreakPointSetOrCleared.L,A0
0000215C  015E      
0000215E  42B0 0800 3432          clr.l     0(A0,D0.L)
00002162  5282      3433          addq.l    #1,D2
00002164  60A6      3434          bra       KillAllBreakPoints_1
                    3435   KillAllBreakPoints_3:
00002166  241F      3436          move.l    (A7)+,D2
00002168  4E5E      3437          unlk      A6
0000216A  4E75      3438          rts
                    3439   ; }
                    3440   ; //BreakPointDisplay() ;       // display the break points
                    3441   ; }
                    3442   ; void KillAllWatchPoints(void)
                    3443   ; {
                    3444   _KillAllWatchPoints:
0000216C  2F02      3445          move.l    D2,-(A7)
                    3446   ; int i ;
                    3447   ; for(i = 0; i < 8; i++)  {
0000216E  4282      3448          clr.l     D2
                    3449   KillAllWatchPoints_1:
00002170  0C82 0000 3450          cmp.l     #8,D2
00002174  0008      
00002176  6C20      3451          bge.s     KillAllWatchPoints_3
                    3452   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002178  2002      3453          move.l    D2,D0
0000217A  E588      3454          lsl.l     #2,D0
0000217C  41F9 0B00 3455          lea       _WatchPointAddress.L,A0
00002180  0182      
00002182  42B0 0800 3456          clr.l     0(A0,D0.L)
                    3457   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002186  2002      3458          move.l    D2,D0
00002188  E588      3459          lsl.l     #2,D0
0000218A  41F9 0B00 3460          lea       _WatchPointSetOrCleared.L,A0
0000218E  01A2      
00002190  42B0 0800 3461          clr.l     0(A0,D0.L)
00002194  5282      3462          addq.l    #1,D2
00002196  60D8      3463          bra       KillAllWatchPoints_1
                    3464   KillAllWatchPoints_3:
00002198  241F      3465          move.l    (A7)+,D2
0000219A  4E75      3466          rts
                    3467   ; }
                    3468   ; //WatchPointDisplay() ;       // display the break points
                    3469   ; }
                    3470   ; void SetBreakPoint(void)
                    3471   ; {
                    3472   _SetBreakPoint:
0000219C  4E56 FFFC 3473          link      A6,#-4
000021A0  48E7 3830 3474          movem.l   D2/D3/D4/A2/A3,-(A7)
000021A4  45F9 0000 3475          lea       _printf.L,A2
000021A8  5A98      
000021AA  47F9 0B00 3476          lea       _BreakPointSetOrCleared.L,A3
000021AE  015E      
                    3477   ; int i ;
                    3478   ; int BPNumber;
                    3479   ; int BPAddress;
                    3480   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3481   ; // see if any free break points
                    3482   ; for(i = 0; i < 8; i ++) {
000021B0  4282      3483          clr.l     D2
                    3484   SetBreakPoint_1:
000021B2  0C82 0000 3485          cmp.l     #8,D2
000021B6  0008      
000021B8  6C10      3486          bge.s     SetBreakPoint_3
                    3487   ; if( BreakPointSetOrCleared[i] == 0)
000021BA  2002      3488          move.l    D2,D0
000021BC  E588      3489          lsl.l     #2,D0
000021BE  2033 0800 3490          move.l    0(A3,D0.L),D0
000021C2  6602      3491          bne.s     SetBreakPoint_4
                    3492   ; break ;         // if spare BP found allow user to set it
000021C4  6004      3493          bra.s     SetBreakPoint_3
                    3494   SetBreakPoint_4:
000021C6  5282      3495          addq.l    #1,D2
000021C8  60E8      3496          bra       SetBreakPoint_1
                    3497   SetBreakPoint_3:
                    3498   ; }
                    3499   ; if(i == 8) {
000021CA  0C82 0000 3500          cmp.l     #8,D2
000021CE  0008      
000021D0  660E      3501          bne.s     SetBreakPoint_6
                    3502   ; printf("\r\nNo FREE Break Points.....") ;
000021D2  4879 0000 3503          pea       @m68kde~1_85.L
000021D6  6C06      
000021D8  4E92      3504          jsr       (A2)
000021DA  584F      3505          addq.w    #4,A7
                    3506   ; return ;
000021DC  6000 00EC 3507          bra       SetBreakPoint_15
                    3508   SetBreakPoint_6:
                    3509   ; }
                    3510   ; printf("\r\nBreak Point Address: ") ;
000021E0  4879 0000 3511          pea       @m68kde~1_86.L
000021E4  6C22      
000021E6  4E92      3512          jsr       (A2)
000021E8  584F      3513          addq.w    #4,A7
                    3514   ; BPAddress = Get8HexDigits(0) ;
000021EA  42A7      3515          clr.l     -(A7)
000021EC  4EB8 0CA4 3516          jsr       _Get8HexDigits
000021F0  584F      3517          addq.w    #4,A7
000021F2  2600      3518          move.l    D0,D3
                    3519   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
000021F4  2803      3520          move.l    D3,D4
                    3521   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
000021F6  2003      3522          move.l    D3,D0
000021F8  C0BC 0000 3523          and.l     #1,D0
000021FC  0001      
000021FE  0C80 0000 3524          cmp.l     #1,D0
00002202  0001      
00002204  660E      3525          bne.s     SetBreakPoint_9
                    3526   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002206  4879 0000 3527          pea       @m68kde~1_87.L
0000220A  6C3A      
0000220C  4E92      3528          jsr       (A2)
0000220E  584F      3529          addq.w    #4,A7
                    3530   ; return ;
00002210  6000 00B8 3531          bra       SetBreakPoint_15
                    3532   SetBreakPoint_9:
                    3533   ; }
                    3534   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002214  0C83 0000 3535          cmp.l     #32768,D3
00002218  8000      
0000221A  640E      3536          bhs.s     SetBreakPoint_11
                    3537   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000221C  4879 0000 3538          pea       @m68kde~1_88.L
00002220  6C70      
00002222  4E92      3539          jsr       (A2)
00002224  584F      3540          addq.w    #4,A7
                    3541   ; return ;
00002226  6000 00A2 3542          bra       SetBreakPoint_15
                    3543   SetBreakPoint_11:
                    3544   ; }
                    3545   ; // search for first free bp or existing same BP
                    3546   ; for(i = 0; i < 8; i++)  {
0000222A  4282      3547          clr.l     D2
                    3548   SetBreakPoint_13:
0000222C  0C82 0000 3549          cmp.l     #8,D2
00002230  0008      
00002232  6C00 0096 3550          bge       SetBreakPoint_15
                    3551   ; if(BreakPointAddress[i] == BPAddress)   {
00002236  2002      3552          move.l    D2,D0
00002238  E588      3553          lsl.l     #2,D0
0000223A  41F9 0B00 3554          lea       _BreakPointAddress.L,A0
0000223E  012E      
00002240  B6B0 0800 3555          cmp.l     0(A0,D0.L),D3
00002244  6610      3556          bne.s     SetBreakPoint_16
                    3557   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002246  2F03      3558          move.l    D3,-(A7)
00002248  4879 0000 3559          pea       @m68kde~1_89.L
0000224C  6CB8      
0000224E  4E92      3560          jsr       (A2)
00002250  504F      3561          addq.w    #8,A7
                    3562   ; return ;
00002252  6000 0076 3563          bra       SetBreakPoint_15
                    3564   SetBreakPoint_16:
                    3565   ; }
                    3566   ; if(BreakPointSetOrCleared[i] == 0) {
00002256  2002      3567          move.l    D2,D0
00002258  E588      3568          lsl.l     #2,D0
0000225A  2033 0800 3569          move.l    0(A3,D0.L),D0
0000225E  6600 0064 3570          bne       SetBreakPoint_18
                    3571   ; // set BP here
                    3572   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002262  2002      3573          move.l    D2,D0
00002264  E588      3574          lsl.l     #2,D0
00002266  27BC 0000 3575          move.l    #1,0(A3,D0.L)
0000226A  0001 0800 
                    3576   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
0000226E  2044      3577          move.l    D4,A0
00002270  2002      3578          move.l    D2,D0
00002272  E388      3579          lsl.l     #1,D0
00002274  43F9 0B00 3580          lea       _BreakPointInstruction.L,A1
00002278  014E      
0000227A  3390 0800 3581          move.w    (A0),0(A1,D0.L)
                    3582   ; DisassembleInstruction(ProgramBreakPointAddress) ;
0000227E  2F04      3583          move.l    D4,-(A7)
00002280  4EB9 0000 3584          jsr       _DisassembleInstruction
00002284  3A24      
00002286  584F      3585          addq.w    #4,A7
                    3586   ; FormatInstructionForTrace() ;
00002288  4EB8 1500 3587          jsr       _FormatInstructionForTrace
                    3588   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
0000228C  4879 0B00 3589          pea       _Instruction.L
00002290  04E2      
00002292  2F04      3590          move.l    D4,-(A7)
00002294  4879 0000 3591          pea       @m68kde~1_90.L
00002298  6CF0      
0000229A  4E92      3592          jsr       (A2)
0000229C  DEFC 000C 3593          add.w     #12,A7
                    3594   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
000022A0  2044      3595          move.l    D4,A0
000022A2  30BC 4E4E 3596          move.w    #20046,(A0)
                    3597   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000022A6  2002      3598          move.l    D2,D0
000022A8  E588      3599          lsl.l     #2,D0
000022AA  41F9 0B00 3600          lea       _BreakPointAddress.L,A0
000022AE  012E      
000022B0  2183 0800 3601          move.l    D3,0(A0,D0.L)
                    3602   ; printf("\r\n") ;
000022B4  4879 0000 3603          pea       @m68kde~1_1.L
000022B8  63AA      
000022BA  4E92      3604          jsr       (A2)
000022BC  584F      3605          addq.w    #4,A7
                    3606   ; BreakPointDisplay() ;       // display the break points
000022BE  4EB8 1D46 3607          jsr       _BreakPointDisplay
                    3608   ; return ;
000022C2  6006      3609          bra.s     SetBreakPoint_15
                    3610   SetBreakPoint_18:
000022C4  5282      3611          addq.l    #1,D2
000022C6  6000 FF64 3612          bra       SetBreakPoint_13
                    3613   SetBreakPoint_15:
000022CA  4CDF 0C1C 3614          movem.l   (A7)+,D2/D3/D4/A2/A3
000022CE  4E5E      3615          unlk      A6
000022D0  4E75      3616          rts
                    3617   ; }
                    3618   ; }
                    3619   ; }
                    3620   ; void SetWatchPoint(void)
                    3621   ; {
                    3622   _SetWatchPoint:
000022D2  4E56 FFF8 3623          link      A6,#-8
000022D6  48E7 3030 3624          movem.l   D2/D3/A2/A3,-(A7)
000022DA  45F9 0000 3625          lea       _printf.L,A2
000022DE  5A98      
000022E0  47F9 0B00 3626          lea       _WatchPointSetOrCleared.L,A3
000022E4  01A2      
                    3627   ; int i ;
                    3628   ; int WPNumber;
                    3629   ; int WPAddress;
                    3630   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3631   ; // see if any free break points
                    3632   ; for(i = 0; i < 8; i ++) {
000022E6  4282      3633          clr.l     D2
                    3634   SetWatchPoint_1:
000022E8  0C82 0000 3635          cmp.l     #8,D2
000022EC  0008      
000022EE  6C10      3636          bge.s     SetWatchPoint_3
                    3637   ; if( WatchPointSetOrCleared[i] == 0)
000022F0  2002      3638          move.l    D2,D0
000022F2  E588      3639          lsl.l     #2,D0
000022F4  2033 0800 3640          move.l    0(A3,D0.L),D0
000022F8  6602      3641          bne.s     SetWatchPoint_4
                    3642   ; break ;         // if spare WP found allow user to set it
000022FA  6004      3643          bra.s     SetWatchPoint_3
                    3644   SetWatchPoint_4:
000022FC  5282      3645          addq.l    #1,D2
000022FE  60E8      3646          bra       SetWatchPoint_1
                    3647   SetWatchPoint_3:
                    3648   ; }
                    3649   ; if(i == 8) {
00002300  0C82 0000 3650          cmp.l     #8,D2
00002304  0008      
00002306  660E      3651          bne.s     SetWatchPoint_6
                    3652   ; printf("\r\nNo FREE Watch Points.....") ;
00002308  4879 0000 3653          pea       @m68kde~1_91.L
0000230C  6D28      
0000230E  4E92      3654          jsr       (A2)
00002310  584F      3655          addq.w    #4,A7
                    3656   ; return ;
00002312  6000 008C 3657          bra       SetWatchPoint_11
                    3658   SetWatchPoint_6:
                    3659   ; }
                    3660   ; printf("\r\nWatch Point Address: ") ;
00002316  4879 0000 3661          pea       @m68kde~1_92.L
0000231A  6D44      
0000231C  4E92      3662          jsr       (A2)
0000231E  584F      3663          addq.w    #4,A7
                    3664   ; WPAddress = Get8HexDigits(0) ;
00002320  42A7      3665          clr.l     -(A7)
00002322  4EB8 0CA4 3666          jsr       _Get8HexDigits
00002326  584F      3667          addq.w    #4,A7
00002328  2600      3668          move.l    D0,D3
                    3669   ; // search for first free wp or existing same wp
                    3670   ; for(i = 0; i < 8; i++)  {
0000232A  4282      3671          clr.l     D2
                    3672   SetWatchPoint_9:
0000232C  0C82 0000 3673          cmp.l     #8,D2
00002330  0008      
00002332  6C00 006C 3674          bge       SetWatchPoint_11
                    3675   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002336  2002      3676          move.l    D2,D0
00002338  E588      3677          lsl.l     #2,D0
0000233A  41F9 0B00 3678          lea       _WatchPointAddress.L,A0
0000233E  0182      
00002340  B6B0 0800 3679          cmp.l     0(A0,D0.L),D3
00002344  6614      3680          bne.s     SetWatchPoint_12
00002346  4A83      3681          tst.l     D3
00002348  6710      3682          beq.s     SetWatchPoint_12
                    3683   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
0000234A  2F03      3684          move.l    D3,-(A7)
0000234C  4879 0000 3685          pea       @m68kde~1_93.L
00002350  6D5C      
00002352  4E92      3686          jsr       (A2)
00002354  504F      3687          addq.w    #8,A7
                    3688   ; return ;
00002356  6000 0048 3689          bra       SetWatchPoint_11
                    3690   SetWatchPoint_12:
                    3691   ; }
                    3692   ; if(WatchPointSetOrCleared[i] == 0) {
0000235A  2002      3693          move.l    D2,D0
0000235C  E588      3694          lsl.l     #2,D0
0000235E  2033 0800 3695          move.l    0(A3,D0.L),D0
00002362  6600 0038 3696          bne       SetWatchPoint_14
                    3697   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002366  2002      3698          move.l    D2,D0
00002368  E588      3699          lsl.l     #2,D0
0000236A  27BC 0000 3700          move.l    #1,0(A3,D0.L)
0000236E  0001 0800 
                    3701   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002372  2F03      3702          move.l    D3,-(A7)
00002374  4879 0000 3703          pea       @m68kde~1_94.L
00002378  6D92      
0000237A  4E92      3704          jsr       (A2)
0000237C  504F      3705          addq.w    #8,A7
                    3706   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
0000237E  2002      3707          move.l    D2,D0
00002380  E588      3708          lsl.l     #2,D0
00002382  41F9 0B00 3709          lea       _WatchPointAddress.L,A0
00002386  0182      
00002388  2183 0800 3710          move.l    D3,0(A0,D0.L)
                    3711   ; printf("\r\n") ;
0000238C  4879 0000 3712          pea       @m68kde~1_1.L
00002390  63AA      
00002392  4E92      3713          jsr       (A2)
00002394  584F      3714          addq.w    #4,A7
                    3715   ; WatchPointDisplay() ;       // display the break points
00002396  4EB8 1E40 3716          jsr       _WatchPointDisplay
                    3717   ; return ;
0000239A  6004      3718          bra.s     SetWatchPoint_11
                    3719   SetWatchPoint_14:
0000239C  5282      3720          addq.l    #1,D2
0000239E  608C      3721          bra       SetWatchPoint_9
                    3722   SetWatchPoint_11:
000023A0  4CDF 0C0C 3723          movem.l   (A7)+,D2/D3/A2/A3
000023A4  4E5E      3724          unlk      A6
000023A6  4E75      3725          rts
                    3726   ; }
                    3727   ; }
                    3728   ; }
                    3729   ; void HandleBreakPoint(void)
                    3730   ; {
                    3731   _HandleBreakPoint:
000023A8  4E56 FFFC 3732          link      A6,#-4
000023AC  48E7 0038 3733          movem.l   A2/A3/A4,-(A7)
000023B0  45F9 0B00 3734          lea       _i.L,A2
000023B4  00C4      
000023B6  47F9 0000 3735          lea       _printf.L,A3
000023BA  5A98      
000023BC  49F9 0B00 3736          lea       _PC.L,A4
000023C0  0120      
                    3737   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3738   ; // now we have to put the break point back to run the instruction
                    3739   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3740   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000023C2  5594      3741          subq.l    #2,(A4)
                    3742   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000023C4  4879 0000 3743          pea       @m68kde~1_95.L
000023C8  6DB8      
000023CA  4E93      3744          jsr       (A3)
000023CC  584F      3745          addq.w    #4,A7
                    3746   ; printf("\r\nSingle Step : [ON]") ;
000023CE  4879 0000 3747          pea       @m68kde~1_96.L
000023D2  6DCC      
000023D4  4E93      3748          jsr       (A3)
000023D6  584F      3749          addq.w    #4,A7
                    3750   ; printf("\r\nBreakPoints : [Enabled]") ;
000023D8  4879 0000 3751          pea       @m68kde~1_97.L
000023DC  6DE2      
000023DE  4E93      3752          jsr       (A3)
000023E0  584F      3753          addq.w    #4,A7
                    3754   ; // now clear the break point (put original instruction back)
                    3755   ; ProgramBreakPointAddress = PC ;
000023E2  2D54 FFFC 3756          move.l    (A4),-4(A6)
                    3757   ; for(i = 0; i < 8; i ++) {
000023E6  4292      3758          clr.l     (A2)
                    3759   HandleBreakPoint_1:
000023E8  2012      3760          move.l    (A2),D0
000023EA  0C80 0000 3761          cmp.l     #8,D0
000023EE  0008      
000023F0  6400 0056 3762          bhs       HandleBreakPoint_3
                    3763   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000023F4  2012      3764          move.l    (A2),D0
000023F6  E588      3765          lsl.l     #2,D0
000023F8  41F9 0B00 3766          lea       _BreakPointAddress.L,A0
000023FC  012E      
000023FE  2230 0800 3767          move.l    0(A0,D0.L),D1
00002402  B294      3768          cmp.l     (A4),D1
00002404  6600 003E 3769          bne       HandleBreakPoint_4
                    3770   ; BreakPointAddress[i] = 0 ;
00002408  2012      3771          move.l    (A2),D0
0000240A  E588      3772          lsl.l     #2,D0
0000240C  41F9 0B00 3773          lea       _BreakPointAddress.L,A0
00002410  012E      
00002412  42B0 0800 3774          clr.l     0(A0,D0.L)
                    3775   ; BreakPointSetOrCleared[i] = 0 ;
00002416  2012      3776          move.l    (A2),D0
00002418  E588      3777          lsl.l     #2,D0
0000241A  41F9 0B00 3778          lea       _BreakPointSetOrCleared.L,A0
0000241E  015E      
00002420  42B0 0800 3779          clr.l     0(A0,D0.L)
                    3780   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002424  2012      3781          move.l    (A2),D0
00002426  E388      3782          lsl.l     #1,D0
00002428  41F9 0B00 3783          lea       _BreakPointInstruction.L,A0
0000242C  014E      
0000242E  226E FFFC 3784          move.l    -4(A6),A1
00002432  32B0 0800 3785          move.w    0(A0,D0.L),(A1)
                    3786   ; BreakPointInstruction[i] = 0 ;
00002436  2012      3787          move.l    (A2),D0
00002438  E388      3788          lsl.l     #1,D0
0000243A  41F9 0B00 3789          lea       _BreakPointInstruction.L,A0
0000243E  014E      
00002440  4270 0800 3790          clr.w     0(A0,D0.L)
                    3791   HandleBreakPoint_4:
00002444  5292      3792          addq.l    #1,(A2)
00002446  60A0      3793          bra       HandleBreakPoint_1
                    3794   HandleBreakPoint_3:
                    3795   ; }
                    3796   ; }
                    3797   ; DumpRegisters() ;
00002448  4EB8 1574 3798          jsr       _DumpRegisters
                    3799   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000244C  4879 0000 3800          pea       @m68kde~1_58.L
00002450  6944      
00002452  4E93      3801          jsr       (A3)
00002454  584F      3802          addq.w    #4,A7
                    3803   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002456  4879 0000 3804          pea       @m68kde~1_98.L
0000245A  6DFC      
0000245C  4E93      3805          jsr       (A3)
0000245E  584F      3806          addq.w    #4,A7
                    3807   ; menu() ;
00002460  4EB9 0000 3808          jsr       _menu
00002464  26B6      
00002466  4CDF 1C00 3809          movem.l   (A7)+,A2/A3/A4
0000246A  4E5E      3810          unlk      A6
0000246C  4E75      3811          rts
                    3812   ; }
                    3813   ; void UnknownCommand()
                    3814   ; {
                    3815   _UnknownCommand:
                    3816   ; printf("\r\nUnknown Command.....\r\n") ;
0000246E  4879 0000 3817          pea       @m68kde~1_99.L
00002472  6E24      
00002474  4EB9 0000 3818          jsr       _printf
00002478  5A98      
0000247A  584F      3819          addq.w    #4,A7
                    3820   ; Help() ;
0000247C  4EB9 0000 3821          jsr       _Help
00002480  25D2      
00002482  4E75      3822          rts
                    3823   ; }
                    3824   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3825   ; void CallDebugMonitor(void)
                    3826   ; {
                    3827   _CallDebugMonitor:
                    3828   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002484  4879 0000 3829          pea       @m68kde~1_100.L
00002488  6E3E      
0000248A  4EB9 0000 3830          jsr       _printf
0000248E  5A98      
00002490  584F      3831          addq.w    #4,A7
                    3832   ; menu();
00002492  4EB9 0000 3833          jsr       _menu
00002496  26B6      
00002498  4E75      3834          rts
                    3835   ; }
                    3836   ; void Breakpoint(void)
                    3837   ; {
                    3838   _Breakpoint:
0000249A  2F02      3839          move.l    D2,-(A7)
                    3840   ; char c;
                    3841   ; c = toupper(_getch());
0000249C  2F00      3842          move.l    D0,-(A7)
0000249E  4EB8 0B68 3843          jsr       __getch
000024A2  2200      3844          move.l    D0,D1
000024A4  201F      3845          move.l    (A7)+,D0
000024A6  2F01      3846          move.l    D1,-(A7)
000024A8  4EB9 0000 3847          jsr       _toupper
000024AC  5A7C      
000024AE  584F      3848          addq.w    #4,A7
000024B0  1400      3849          move.b    D0,D2
                    3850   ; if( c == (char)('D'))                                      // BreakPoint Display
000024B2  0C02 0044 3851          cmp.b     #68,D2
000024B6  6608      3852          bne.s     Breakpoint_1
                    3853   ; BreakPointDisplay() ;
000024B8  4EB8 1D46 3854          jsr       _BreakPointDisplay
000024BC  6000 0054 3855          bra       Breakpoint_10
                    3856   Breakpoint_1:
                    3857   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000024C0  0C02 004B 3858          cmp.b     #75,D2
000024C4  6630      3859          bne.s     Breakpoint_3
                    3860   ; printf("\r\nKill All Break Points...(y/n)?") ;
000024C6  4879 0000 3861          pea       @m68kde~1_101.L
000024CA  6E5E      
000024CC  4EB9 0000 3862          jsr       _printf
000024D0  5A98      
000024D2  584F      3863          addq.w    #4,A7
                    3864   ; c = toupper(_getch());
000024D4  2F00      3865          move.l    D0,-(A7)
000024D6  4EB8 0B68 3866          jsr       __getch
000024DA  2200      3867          move.l    D0,D1
000024DC  201F      3868          move.l    (A7)+,D0
000024DE  2F01      3869          move.l    D1,-(A7)
000024E0  4EB9 0000 3870          jsr       _toupper
000024E4  5A7C      
000024E6  584F      3871          addq.w    #4,A7
000024E8  1400      3872          move.b    D0,D2
                    3873   ; if(c == (char)('Y'))
000024EA  0C02 0059 3874          cmp.b     #89,D2
000024EE  6604      3875          bne.s     Breakpoint_5
                    3876   ; KillAllBreakPoints() ;
000024F0  4EB8 2104 3877          jsr       _KillAllBreakPoints
                    3878   Breakpoint_5:
000024F4  601C      3879          bra.s     Breakpoint_10
                    3880   Breakpoint_3:
                    3881   ; }
                    3882   ; else if(c == (char)('S')) {
000024F6  0C02 0053 3883          cmp.b     #83,D2
000024FA  6606      3884          bne.s     Breakpoint_7
                    3885   ; SetBreakPoint() ;
000024FC  4EB8 219C 3886          jsr       _SetBreakPoint
00002500  6010      3887          bra.s     Breakpoint_10
                    3888   Breakpoint_7:
                    3889   ; }
                    3890   ; else if(c == (char)('C')) {
00002502  0C02 0043 3891          cmp.b     #67,D2
00002506  6606      3892          bne.s     Breakpoint_9
                    3893   ; BreakPointClear() ;
00002508  4EB8 1EEC 3894          jsr       _BreakPointClear
0000250C  6004      3895          bra.s     Breakpoint_10
                    3896   Breakpoint_9:
                    3897   ; }
                    3898   ; else
                    3899   ; UnknownCommand() ;
0000250E  4EB8 246E 3900          jsr       _UnknownCommand
                    3901   Breakpoint_10:
00002512  241F      3902          move.l    (A7)+,D2
00002514  4E75      3903          rts
                    3904   ; }
                    3905   ; void Watchpoint(void)
                    3906   ; {
                    3907   _Watchpoint:
00002516  2F02      3908          move.l    D2,-(A7)
                    3909   ; char c;
                    3910   ; c = toupper(_getch());
00002518  2F00      3911          move.l    D0,-(A7)
0000251A  4EB8 0B68 3912          jsr       __getch
0000251E  2200      3913          move.l    D0,D1
00002520  201F      3914          move.l    (A7)+,D0
00002522  2F01      3915          move.l    D1,-(A7)
00002524  4EB9 0000 3916          jsr       _toupper
00002528  5A7C      
0000252A  584F      3917          addq.w    #4,A7
0000252C  1400      3918          move.b    D0,D2
                    3919   ; if( c == (char)('D'))                                      // WatchPoint Display
0000252E  0C02 0044 3920          cmp.b     #68,D2
00002532  6608      3921          bne.s     Watchpoint_1
                    3922   ; WatchPointDisplay() ;
00002534  4EB8 1E40 3923          jsr       _WatchPointDisplay
00002538  6000 0054 3924          bra       Watchpoint_10
                    3925   Watchpoint_1:
                    3926   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000253C  0C02 004B 3927          cmp.b     #75,D2
00002540  6630      3928          bne.s     Watchpoint_3
                    3929   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002542  4879 0000 3930          pea       @m68kde~1_102.L
00002546  6E80      
00002548  4EB9 0000 3931          jsr       _printf
0000254C  5A98      
0000254E  584F      3932          addq.w    #4,A7
                    3933   ; c = toupper(_getch());
00002550  2F00      3934          move.l    D0,-(A7)
00002552  4EB8 0B68 3935          jsr       __getch
00002556  2200      3936          move.l    D0,D1
00002558  201F      3937          move.l    (A7)+,D0
0000255A  2F01      3938          move.l    D1,-(A7)
0000255C  4EB9 0000 3939          jsr       _toupper
00002560  5A7C      
00002562  584F      3940          addq.w    #4,A7
00002564  1400      3941          move.b    D0,D2
                    3942   ; if(c == (char)('Y'))
00002566  0C02 0059 3943          cmp.b     #89,D2
0000256A  6604      3944          bne.s     Watchpoint_5
                    3945   ; KillAllWatchPoints() ;
0000256C  4EB8 216C 3946          jsr       _KillAllWatchPoints
                    3947   Watchpoint_5:
00002570  601C      3948          bra.s     Watchpoint_10
                    3949   Watchpoint_3:
                    3950   ; }
                    3951   ; else if(c == (char)('S')) {
00002572  0C02 0053 3952          cmp.b     #83,D2
00002576  6606      3953          bne.s     Watchpoint_7
                    3954   ; SetWatchPoint() ;
00002578  4EB8 22D2 3955          jsr       _SetWatchPoint
0000257C  6010      3956          bra.s     Watchpoint_10
                    3957   Watchpoint_7:
                    3958   ; }
                    3959   ; else if(c == (char)('C')) {
0000257E  0C02 0043 3960          cmp.b     #67,D2
00002582  6606      3961          bne.s     Watchpoint_9
                    3962   ; WatchPointClear() ;
00002584  4EB8 1FC6 3963          jsr       _WatchPointClear
00002588  6004      3964          bra.s     Watchpoint_10
                    3965   Watchpoint_9:
                    3966   ; }
                    3967   ; else
                    3968   ; UnknownCommand() ;
0000258A  4EB8 246E 3969          jsr       _UnknownCommand
                    3970   Watchpoint_10:
0000258E  241F      3971          move.l    (A7)+,D2
00002590  4E75      3972          rts
                    3973   ; }
                    3974   ; void DMenu(void)
                    3975   ; {
                    3976   _DMenu:
00002592  2F02      3977          move.l    D2,-(A7)
                    3978   ; char c;
                    3979   ; c = toupper(_getch());
00002594  2F00      3980          move.l    D0,-(A7)
00002596  4EB8 0B68 3981          jsr       __getch
0000259A  2200      3982          move.l    D0,D1
0000259C  201F      3983          move.l    (A7)+,D0
0000259E  2F01      3984          move.l    D1,-(A7)
000025A0  4EB9 0000 3985          jsr       _toupper
000025A4  5A7C      
000025A6  584F      3986          addq.w    #4,A7
000025A8  1400      3987          move.b    D0,D2
                    3988   ; if( c == (char)('U'))                                     // Dump Memory
000025AA  0C02 0055 3989          cmp.b     #85,D2
000025AE  6606      3990          bne.s     DMenu_1
                    3991   ; DumpMemory() ;
000025B0  4EB8 0EE0 3992          jsr       _DumpMemory
000025B4  6018      3993          bra.s     DMenu_4
                    3994   DMenu_1:
                    3995   ; else if(c == (char)('I'))   {
000025B6  0C02 0049 3996          cmp.b     #73,D2
000025BA  660E      3997          bne.s     DMenu_3
                    3998   ; DisableBreakPoints() ;
000025BC  4EB8 2068 3999          jsr       _DisableBreakPoints
                    4000   ; DisassembleProgram() ;
000025C0  4EB8 0D00 4001          jsr       _DisassembleProgram
                    4002   ; EnableBreakPoints() ;
000025C4  4EB8 20BC 4003          jsr       _EnableBreakPoints
000025C8  6004      4004          bra.s     DMenu_4
                    4005   DMenu_3:
                    4006   ; }
                    4007   ; else
                    4008   ; UnknownCommand() ;
000025CA  4EB8 246E 4009          jsr       _UnknownCommand
                    4010   DMenu_4:
000025CE  241F      4011          move.l    (A7)+,D2
000025D0  4E75      4012          rts
                    4013   ; }
                    4014   ; void Help(void)
                    4015   ; {
                    4016   _Help:
000025D2  48E7 2020 4017          movem.l   D2/A2,-(A7)
000025D6  45F9 0000 4018          lea       _printf.L,A2
000025DA  5A98      
                    4019   ; char *banner = "\r\n----------------------------------------------------------------" ;
000025DC  41F9 0000 4020          lea       @m68kde~1_103.L,A0
000025E0  6EA2      
000025E2  2408      4021          move.l    A0,D2
                    4022   ; printf(banner) ;
000025E4  2F02      4023          move.l    D2,-(A7)
000025E6  4E92      4024          jsr       (A2)
000025E8  584F      4025          addq.w    #4,A7
                    4026   ; printf("\r\n  Debugger Command Summary") ;
000025EA  4879 0000 4027          pea       @m68kde~1_104.L
000025EE  6EE6      
000025F0  4E92      4028          jsr       (A2)
000025F2  584F      4029          addq.w    #4,A7
                    4030   ; printf(banner) ;
000025F4  2F02      4031          move.l    D2,-(A7)
000025F6  4E92      4032          jsr       (A2)
000025F8  584F      4033          addq.w    #4,A7
                    4034   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000025FA  4879 0000 4035          pea       @m68kde~1_105.L
000025FE  6F04      
00002600  4E92      4036          jsr       (A2)
00002602  584F      4037          addq.w    #4,A7
                    4038   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002604  4879 0000 4039          pea       @m68kde~1_106.L
00002608  6F48      
0000260A  4E92      4040          jsr       (A2)
0000260C  584F      4041          addq.w    #4,A7
                    4042   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
0000260E  4879 0000 4043          pea       @m68kde~1_107.L
00002612  6F80      
00002614  4E92      4044          jsr       (A2)
00002616  584F      4045          addq.w    #4,A7
                    4046   ; printf("\r\n  DI           - Disassemble Program");
00002618  4879 0000 4047          pea       @m68kde~1_108.L
0000261C  6FBA      
0000261E  4E92      4048          jsr       (A2)
00002620  584F      4049          addq.w    #4,A7
                    4050   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
00002622  4879 0000 4051          pea       @m68kde~1_109.L
00002626  6FE2      
00002628  4E92      4052          jsr       (A2)
0000262A  584F      4053          addq.w    #4,A7
                    4054   ; printf("\r\n  E            - Enter String into Memory") ;
0000262C  4879 0000 4055          pea       @m68kde~1_110.L
00002630  7014      
00002632  4E92      4056          jsr       (A2)
00002634  584F      4057          addq.w    #4,A7
                    4058   ; printf("\r\n  F            - Fill Memory with Data") ;
00002636  4879 0000 4059          pea       @m68kde~1_111.L
0000263A  7040      
0000263C  4E92      4060          jsr       (A2)
0000263E  584F      4061          addq.w    #4,A7
                    4062   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002640  2F39 0B00 4063          move.l    _PC.L,-(A7)
00002644  0120      
00002646  4879 0000 4064          pea       @m68kde~1_112.L
0000264A  706A      
0000264C  4E92      4065          jsr       (A2)
0000264E  504F      4066          addq.w    #8,A7
                    4067   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002650  4879 0000 4068          pea       @m68kde~1_113.L
00002654  70A4      
00002656  4E92      4069          jsr       (A2)
00002658  584F      4070          addq.w    #4,A7
                    4071   ; printf("\r\n  M            - Memory Examine and Change");
0000265A  4879 0000 4072          pea       @m68kde~1_114.L
0000265E  70DC      
00002660  4E92      4073          jsr       (A2)
00002662  584F      4074          addq.w    #4,A7
                    4075   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002664  4879 0000 4076          pea       @m68kde~1_115.L
00002668  710A      
0000266A  4E92      4077          jsr       (A2)
0000266C  584F      4078          addq.w    #4,A7
                    4079   ; printf("\r\n  R            - Display 68000 Registers") ;
0000266E  4879 0000 4080          pea       @m68kde~1_116.L
00002672  7144      
00002674  4E92      4081          jsr       (A2)
00002676  584F      4082          addq.w    #4,A7
                    4083   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002678  4879 0000 4084          pea       @m68kde~1_117.L
0000267C  7170      
0000267E  4E92      4085          jsr       (A2)
00002680  584F      4086          addq.w    #4,A7
                    4087   ; printf("\r\n  TM           - Test Memory") ;
00002682  4879 0000 4088          pea       @m68kde~1_118.L
00002686  71A2      
00002688  4E92      4089          jsr       (A2)
0000268A  584F      4090          addq.w    #4,A7
                    4091   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000268C  4879 0000 4092          pea       @m68kde~1_119.L
00002690  71C2      
00002692  4E92      4093          jsr       (A2)
00002694  584F      4094          addq.w    #4,A7
                    4095   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002696  4879 0000 4096          pea       @m68kde~1_120.L
0000269A  71EA      
0000269C  4E92      4097          jsr       (A2)
0000269E  584F      4098          addq.w    #4,A7
                    4099   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
000026A0  4879 0000 4100          pea       @m68kde~1_121.L
000026A4  7220      
000026A6  4E92      4101          jsr       (A2)
000026A8  584F      4102          addq.w    #4,A7
                    4103   ; printf(banner) ;
000026AA  2F02      4104          move.l    D2,-(A7)
000026AC  4E92      4105          jsr       (A2)
000026AE  584F      4106          addq.w    #4,A7
000026B0  4CDF 0404 4107          movem.l   (A7)+,D2/A2
000026B4  4E75      4108          rts
                    4109   ; }
                    4110   ; void menu(void)
                    4111   ; {
                    4112   _menu:
000026B6  48E7 303C 4113          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000026BA  45F9 0000 4114          lea       _printf.L,A2
000026BE  5A98      
000026C0  47F9 0B00 4115          lea       _Trace.L,A3
000026C4  00D8      
000026C6  49F9 0B00 4116          lea       _x.L,A4
000026CA  00C8      
000026CC  4BF9 0B00 4117          lea       _SR.L,A5
000026D0  012C      
                    4118   ; char c,c1 ;
                    4119   ; while(1)    {
                    4120   menu_1:
                    4121   ; FlushKeyboard() ;               // dump unread characters from keyboard
000026D2  4EB8 0BA6 4122          jsr       _FlushKeyboard
                    4123   ; printf("\r\n#") ;
000026D6  4879 0000 4124          pea       @m68kde~1_122.L
000026DA  7258      
000026DC  4E92      4125          jsr       (A2)
000026DE  584F      4126          addq.w    #4,A7
                    4127   ; c = toupper(_getch());
000026E0  2F00      4128          move.l    D0,-(A7)
000026E2  4EB8 0B68 4129          jsr       __getch
000026E6  2200      4130          move.l    D0,D1
000026E8  201F      4131          move.l    (A7)+,D0
000026EA  2F01      4132          move.l    D1,-(A7)
000026EC  4EB9 0000 4133          jsr       _toupper
000026F0  5A7C      
000026F2  584F      4134          addq.w    #4,A7
000026F4  1400      4135          move.b    D0,D2
                    4136   ; if( c == (char)('L'))                  // load s record file
000026F6  0C02 004C 4137          cmp.b     #76,D2
000026FA  6608      4138          bne.s     menu_4
                    4139   ; Load_SRecordFile() ;
000026FC  4EB8 104A 4140          jsr       _Load_SRecordFile
00002700  6000 021E 4141          bra       menu_46
                    4142   menu_4:
                    4143   ; else if( c == (char)('D'))             // dump memory
00002704  0C02 0044 4144          cmp.b     #68,D2
00002708  6608      4145          bne.s     menu_6
                    4146   ; DMenu() ;
0000270A  4EB8 2592 4147          jsr       _DMenu
0000270E  6000 0210 4148          bra       menu_46
                    4149   menu_6:
                    4150   ; else if( c == (char)('E'))             // Enter String into memory
00002712  0C02 0045 4151          cmp.b     #69,D2
00002716  660A      4152          bne.s     menu_8
                    4153   ; EnterString() ;
00002718  4EB9 0000 4154          jsr       _EnterString
0000271C  2A68      
0000271E  6000 0200 4155          bra       menu_46
                    4156   menu_8:
                    4157   ; else if( c == (char)('F'))             // fill memory
00002722  0C02 0046 4158          cmp.b     #70,D2
00002726  6608      4159          bne.s     menu_10
                    4160   ; FillMemory() ;
00002728  4EB8 0FD0 4161          jsr       _FillMemory
0000272C  6000 01F2 4162          bra       menu_46
                    4163   menu_10:
                    4164   ; else if( c == (char)('G'))  {           // go user program
00002730  0C02 0047 4165          cmp.b     #71,D2
00002734  6626      4166          bne.s     menu_12
                    4167   ; printf("\r\nProgram Running.....") ;
00002736  4879 0000 4168          pea       @m68kde~1_123.L
0000273A  725C      
0000273C  4E92      4169          jsr       (A2)
0000273E  584F      4170          addq.w    #4,A7
                    4171   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002740  4879 0000 4172          pea       @m68kde~1_124.L
00002744  7274      
00002746  4E92      4173          jsr       (A2)
00002748  584F      4174          addq.w    #4,A7
                    4175   ; GoFlag = 1 ;
0000274A  23FC 0000 4176          move.l    #1,_GoFlag.L
0000274E  0001 0B00 
00002752  00DC      
                    4177   ; go() ;
00002754  4EB8 08B8 4178          jsr       _go
00002758  6000 01C6 4179          bra       menu_46
                    4180   menu_12:
                    4181   ; }
                    4182   ; else if( c == (char)('M'))           // memory examine and modify
0000275C  0C02 004D 4183          cmp.b     #77,D2
00002760  6608      4184          bne.s     menu_14
                    4185   ; MemoryChange() ;
00002762  4EB8 11D8 4186          jsr       _MemoryChange
00002766  6000 01B8 4187          bra       menu_46
                    4188   menu_14:
                    4189   ; else if( c == (char)('P'))            // Program Flash Chip
0000276A  0C02 0050 4190          cmp.b     #80,D2
0000276E  6608      4191          bne.s     menu_16
                    4192   ; ProgramFlashChip() ;
00002770  4EB8 12D8 4193          jsr       _ProgramFlashChip
00002774  6000 01AA 4194          bra       menu_46
                    4195   menu_16:
                    4196   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002778  0C02 0043 4197          cmp.b     #67,D2
0000277C  6608      4198          bne.s     menu_18
                    4199   ; LoadFromFlashChip();
0000277E  4EB8 14F0 4200          jsr       _LoadFromFlashChip
00002782  6000 019C 4201          bra       menu_46
                    4202   menu_18:
                    4203   ; else if( c == (char)('R'))             // dump registers
00002786  0C02 0052 4204          cmp.b     #82,D2
0000278A  6608      4205          bne.s     menu_20
                    4206   ; DumpRegisters() ;
0000278C  4EB8 1574 4207          jsr       _DumpRegisters
00002790  6000 018E 4208          bra       menu_46
                    4209   menu_20:
                    4210   ; else if( c == (char)('.'))           // change registers
00002794  0C02 002E 4211          cmp.b     #46,D2
00002798  6608      4212          bne.s     menu_22
                    4213   ; ChangeRegisters() ;
0000279A  4EB8 1A8A 4214          jsr       _ChangeRegisters
0000279E  6000 0180 4215          bra       menu_46
                    4216   menu_22:
                    4217   ; else if( c == (char)('B'))              // breakpoint command
000027A2  0C02 0042 4218          cmp.b     #66,D2
000027A6  6608      4219          bne.s     menu_24
                    4220   ; Breakpoint() ;
000027A8  4EB8 249A 4221          jsr       _Breakpoint
000027AC  6000 0172 4222          bra       menu_46
                    4223   menu_24:
                    4224   ; else if( c == (char)('T'))  {          // Test command
000027B0  0C02 0054 4225          cmp.b     #84,D2
000027B4  6600 0046 4226          bne       menu_26
                    4227   ; c1 = toupper(_getch()) ;
000027B8  2F00      4228          move.l    D0,-(A7)
000027BA  4EB8 0B68 4229          jsr       __getch
000027BE  2200      4230          move.l    D0,D1
000027C0  201F      4231          move.l    (A7)+,D0
000027C2  2F01      4232          move.l    D1,-(A7)
000027C4  4EB9 0000 4233          jsr       _toupper
000027C8  5A7C      
000027CA  584F      4234          addq.w    #4,A7
000027CC  1600      4235          move.b    D0,D3
                    4236   ; if(c1 == (char)('M'))                    // memory test
000027CE  0C03 004D 4237          cmp.b     #77,D3
000027D2  6608      4238          bne.s     menu_28
                    4239   ; MemoryTest() ;
000027D4  4EB9 0000 4240          jsr       _MemoryTest
000027D8  2AB8      
000027DA  601C      4241          bra.s     menu_33
                    4242   menu_28:
                    4243   ; else if( c1 == (char)('S'))              // Switch Test command
000027DC  0C03 0053 4244          cmp.b     #83,D3
000027E0  6606      4245          bne.s     menu_30
                    4246   ; SwitchTest() ;
000027E2  4EB8 0AA4 4247          jsr       _SwitchTest
000027E6  6010      4248          bra.s     menu_33
                    4249   menu_30:
                    4250   ; else if( c1 == (char)('D'))              // display Test command
000027E8  0C03 0044 4251          cmp.b     #68,D3
000027EC  6606      4252          bne.s     menu_32
                    4253   ; TestLEDS() ;
000027EE  4EB8 0A50 4254          jsr       _TestLEDS
000027F2  6004      4255          bra.s     menu_33
                    4256   menu_32:
                    4257   ; else
                    4258   ; UnknownCommand() ;
000027F4  4EB8 246E 4259          jsr       _UnknownCommand
                    4260   menu_33:
000027F8  6000 0126 4261          bra       menu_46
                    4262   menu_26:
                    4263   ; }
                    4264   ; else if( c == (char)(' ')) {             // Next instruction command
000027FC  0C02 0020 4265          cmp.b     #32,D2
00002800  6636      4266          bne.s     menu_34
                    4267   ; DisableBreakPoints() ;
00002802  4EB8 2068 4268          jsr       _DisableBreakPoints
                    4269   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002806  2013      4270          move.l    (A3),D0
00002808  0C80 0000 4271          cmp.l     #1,D0
0000280C  0001      
0000280E  661A      4272          bne.s     menu_36
00002810  2039 0B00 4273          move.l    _GoFlag.L,D0
00002814  00DC      
00002816  0C80 0000 4274          cmp.l     #1,D0
0000281A  0001      
0000281C  660C      4275          bne.s     menu_36
                    4276   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
0000281E  13FC 0001 4277          move.b    #1,4194314
00002822  0040 000A 
                    4278   ; return ;
00002826  6000 00FC 4279          bra       menu_38
                    4280   menu_36:
                    4281   ; }
                    4282   ; else
                    4283   ; printf("\r\nError: Press 'G' first to start program") ;
0000282A  4879 0000 4284          pea       @m68kde~1_125.L
0000282E  72A2      
00002830  4E92      4285          jsr       (A2)
00002832  584F      4286          addq.w    #4,A7
00002834  6000 00EA 4287          bra       menu_46
                    4288   menu_34:
                    4289   ; }
                    4290   ; else if( c == (char)('S')) {             // single step
00002838  0C02 0053 4291          cmp.b     #83,D2
0000283C  6600 008C 4292          bne       menu_39
                    4293   ; if(Trace == 0) {
00002840  2013      4294          move.l    (A3),D0
00002842  6600 0050 4295          bne       menu_41
                    4296   ; DisableBreakPoints() ;
00002846  4EB8 2068 4297          jsr       _DisableBreakPoints
                    4298   ; printf("\r\nSingle Step  :[ON]") ;
0000284A  4879 0000 4299          pea       @m68kde~1_126.L
0000284E  72CC      
00002850  4E92      4300          jsr       (A2)
00002852  584F      4301          addq.w    #4,A7
                    4302   ; printf("\r\nBreak Points :[Disabled]") ;
00002854  4879 0000 4303          pea       @m68kde~1_57.L
00002858  6928      
0000285A  4E92      4304          jsr       (A2)
0000285C  584F      4305          addq.w    #4,A7
                    4306   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
0000285E  0055 8000 4307          or.w      #32768,(A5)
                    4308   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002862  2F39 0B00 4309          move.l    _PC.L,-(A7)
00002866  0120      
00002868  4879 0000 4310          pea       @m68kde~1_127.L
0000286C  72E2      
0000286E  4E92      4311          jsr       (A2)
00002870  504F      4312          addq.w    #8,A7
                    4313   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002872  4879 0000 4314          pea       @m68kde~1_128.L
00002876  7316      
00002878  4E92      4315          jsr       (A2)
0000287A  584F      4316          addq.w    #4,A7
                    4317   ; DumpRegisters() ;
0000287C  4EB8 1574 4318          jsr       _DumpRegisters
                    4319   ; Trace = 1;
00002880  26BC 0000 4320          move.l    #1,(A3)
00002884  0001      
                    4321   ; TraceException = 1;
00002886  13FC 0001 4322          move.b    #1,4194314
0000288A  0040 000A 
                    4323   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000288E  28B8 0074 4324          move.l    116,(A4)
00002892  6032      4325          bra.s     menu_42
                    4326   menu_41:
                    4327   ; }
                    4328   ; else {
                    4329   ; Trace = 0 ;
00002894  4293      4330          clr.l     (A3)
                    4331   ; TraceException = 0 ;
00002896  4239 0040 4332          clr.b     4194314
0000289A  000A      
                    4333   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000289C  28B8 0074 4334          move.l    116,(A4)
                    4335   ; EnableBreakPoints() ;
000028A0  4EB8 20BC 4336          jsr       _EnableBreakPoints
                    4337   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000028A4  0255 7FFF 4338          and.w     #32767,(A5)
                    4339   ; printf("\r\nSingle Step : [OFF]") ;
000028A8  4879 0000 4340          pea       @m68kde~1_129.L
000028AC  733A      
000028AE  4E92      4341          jsr       (A2)
000028B0  584F      4342          addq.w    #4,A7
                    4343   ; printf("\r\nBreak Points :[Enabled]") ;
000028B2  4879 0000 4344          pea       @m68kde~1_130.L
000028B6  7350      
000028B8  4E92      4345          jsr       (A2)
000028BA  584F      4346          addq.w    #4,A7
                    4347   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000028BC  4879 0000 4348          pea       @m68kde~1_131.L
000028C0  736A      
000028C2  4E92      4349          jsr       (A2)
000028C4  584F      4350          addq.w    #4,A7
                    4351   menu_42:
000028C6  6000 0058 4352          bra       menu_46
                    4353   menu_39:
                    4354   ; }
                    4355   ; }
                    4356   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000028CA  0C02 001B 4357          cmp.b     #27,D2
000028CE  6600 0040 4358          bne       menu_43
                    4359   ; Trace = 0;
000028D2  4293      4360          clr.l     (A3)
                    4361   ; TraceException = 0;
000028D4  4239 0040 4362          clr.b     4194314
000028D8  000A      
                    4363   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000028DA  28B8 0074 4364          move.l    116,(A4)
                    4365   ; EnableBreakPoints() ;
000028DE  4EB8 20BC 4366          jsr       _EnableBreakPoints
                    4367   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000028E2  0255 7FFF 4368          and.w     #32767,(A5)
                    4369   ; printf("\r\nSingle Step  :[OFF]") ;
000028E6  4879 0000 4370          pea       @m68kde~1_132.L
000028EA  7394      
000028EC  4E92      4371          jsr       (A2)
000028EE  584F      4372          addq.w    #4,A7
                    4373   ; printf("\r\nBreak Points :[Enabled]");
000028F0  4879 0000 4374          pea       @m68kde~1_130.L
000028F4  7350      
000028F6  4E92      4375          jsr       (A2)
000028F8  584F      4376          addq.w    #4,A7
                    4377   ; printf("\r\nProgram Running.....") ;
000028FA  4879 0000 4378          pea       @m68kde~1_123.L
000028FE  725C      
00002900  4E92      4379          jsr       (A2)
00002902  584F      4380          addq.w    #4,A7
                    4381   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002904  4879 0000 4382          pea       @m68kde~1_124.L
00002908  7274      
0000290A  4E92      4383          jsr       (A2)
0000290C  584F      4384          addq.w    #4,A7
                    4385   ; return ;
0000290E  6014      4386          bra.s     menu_38
                    4387   menu_43:
                    4388   ; }
                    4389   ; else if( c == (char)('W'))              // Watchpoint command
00002910  0C02 0057 4390          cmp.b     #87,D2
00002914  6606      4391          bne.s     menu_45
                    4392   ; Watchpoint() ;
00002916  4EB8 2516 4393          jsr       _Watchpoint
0000291A  6004      4394          bra.s     menu_46
                    4395   menu_45:
                    4396   ; else
                    4397   ; UnknownCommand() ;
0000291C  4EB8 246E 4398          jsr       _UnknownCommand
                    4399   menu_46:
00002920  6000 FDB0 4400          bra       menu_1
                    4401   menu_38:
00002924  4CDF 3C0C 4402          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002928  4E75      4403          rts
                    4404   ; }
                    4405   ; }
                    4406   ; void PrintErrorMessageandAbort(char *string) {
                    4407   _PrintErrorMessageandAbort:
0000292A  4E56 0000 4408          link      A6,#0
                    4409   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
0000292E  4879 0000 4410          pea       @m68kde~1_133.L
00002932  73AA      
00002934  4EB9 0000 4411          jsr       _printf
00002938  5A98      
0000293A  584F      4412          addq.w    #4,A7
                    4413   ; printf("%s\r\n", string) ;
0000293C  2F2E 0008 4414          move.l    8(A6),-(A7)
00002940  4879 0000 4415          pea       @m68kde~1_134.L
00002944  73C6      
00002946  4EB9 0000 4416          jsr       _printf
0000294A  5A98      
0000294C  504F      4417          addq.w    #8,A7
                    4418   ; menu() ;
0000294E  4EB8 26B6 4419          jsr       _menu
00002952  4E5E      4420          unlk      A6
00002954  4E75      4421          rts
                    4422   ; }
                    4423   ; void IRQMessage(int level) {
                    4424   _IRQMessage:
00002956  4E56 0000 4425          link      A6,#0
                    4426   ; printf("\r\n\r\nProgram ABORT !!!!!");
0000295A  4879 0000 4427          pea       @m68kde~1_135.L
0000295E  73CC      
00002960  4EB9 0000 4428          jsr       _printf
00002964  5A98      
00002966  584F      4429          addq.w    #4,A7
                    4430   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002968  2F2E 0008 4431          move.l    8(A6),-(A7)
0000296C  4879 0000 4432          pea       @m68kde~1_136.L
00002970  73E4      
00002972  4EB9 0000 4433          jsr       _printf
00002976  5A98      
00002978  504F      4434          addq.w    #8,A7
                    4435   ; menu() ;
0000297A  4EB8 26B6 4436          jsr       _menu
0000297E  4E5E      4437          unlk      A6
00002980  4E75      4438          rts
                    4439   ; }
                    4440   ; void UnhandledIRQ1(void) {
                    4441   _UnhandledIRQ1:
                    4442   ; IRQMessage(1);
00002982  4878 0001 4443          pea       1
00002986  4EB8 2956 4444          jsr       _IRQMessage
0000298A  584F      4445          addq.w    #4,A7
0000298C  4E75      4446          rts
                    4447   ; }
                    4448   ; void UnhandledIRQ2(void) {
                    4449   _UnhandledIRQ2:
                    4450   ; IRQMessage(2);
0000298E  4878 0002 4451          pea       2
00002992  4EB8 2956 4452          jsr       _IRQMessage
00002996  584F      4453          addq.w    #4,A7
00002998  4E75      4454          rts
                    4455   ; }
                    4456   ; void UnhandledIRQ3(void){
                    4457   _UnhandledIRQ3:
                    4458   ; IRQMessage(3);
0000299A  4878 0003 4459          pea       3
0000299E  4EB8 2956 4460          jsr       _IRQMessage
000029A2  584F      4461          addq.w    #4,A7
000029A4  4E75      4462          rts
                    4463   ; }
                    4464   ; void UnhandledIRQ4(void) {
                    4465   _UnhandledIRQ4:
                    4466   ; IRQMessage(4);
000029A6  4878 0004 4467          pea       4
000029AA  4EB8 2956 4468          jsr       _IRQMessage
000029AE  584F      4469          addq.w    #4,A7
000029B0  4E75      4470          rts
                    4471   ; }
                    4472   ; void UnhandledIRQ5(void) {
                    4473   _UnhandledIRQ5:
                    4474   ; IRQMessage(5);
000029B2  4878 0005 4475          pea       5
000029B6  4EB8 2956 4476          jsr       _IRQMessage
000029BA  584F      4477          addq.w    #4,A7
000029BC  4E75      4478          rts
                    4479   ; }
                    4480   ; void UnhandledIRQ6(void) {
                    4481   _UnhandledIRQ6:
                    4482   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000029BE  4879 0000 4483          pea       @m68kde~1_137.L
000029C2  7408      
000029C4  4EB8 292A 4484          jsr       _PrintErrorMessageandAbort
000029C8  584F      4485          addq.w    #4,A7
                    4486   ; menu() ;
000029CA  4EB8 26B6 4487          jsr       _menu
000029CE  4E75      4488          rts
                    4489   ; }
                    4490   ; void UnhandledIRQ7(void) {
                    4491   _UnhandledIRQ7:
                    4492   ; IRQMessage(7);
000029D0  4878 0007 4493          pea       7
000029D4  4EB8 2956 4494          jsr       _IRQMessage
000029D8  584F      4495          addq.w    #4,A7
000029DA  4E75      4496          rts
                    4497   ; }
                    4498   ; void UnhandledTrap(void) {
                    4499   _UnhandledTrap:
                    4500   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000029DC  4879 0000 4501          pea       @m68kde~1_138.L
000029E0  7448      
000029E2  4EB8 292A 4502          jsr       _PrintErrorMessageandAbort
000029E6  584F      4503          addq.w    #4,A7
000029E8  4E75      4504          rts
                    4505   ; }
                    4506   ; void BusError() {
                    4507   _BusError:
                    4508   ; PrintErrorMessageandAbort("BUS Error!") ;
000029EA  4879 0000 4509          pea       @m68kde~1_139.L
000029EE  745E      
000029F0  4EB8 292A 4510          jsr       _PrintErrorMessageandAbort
000029F4  584F      4511          addq.w    #4,A7
000029F6  4E75      4512          rts
                    4513   ; }
                    4514   ; void AddressError() {
                    4515   _AddressError:
                    4516   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000029F8  4879 0000 4517          pea       @m68kde~1_140.L
000029FC  746A      
000029FE  4EB8 292A 4518          jsr       _PrintErrorMessageandAbort
00002A02  584F      4519          addq.w    #4,A7
00002A04  4E75      4520          rts
                    4521   ; }
                    4522   ; void IllegalInstruction() {
                    4523   _IllegalInstruction:
                    4524   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002A06  4879 0000 4525          pea       @m68kde~1_141.L
00002A0A  747A      
00002A0C  4EB8 292A 4526          jsr       _PrintErrorMessageandAbort
00002A10  584F      4527          addq.w    #4,A7
00002A12  4E75      4528          rts
                    4529   ; }
                    4530   ; void Dividebyzero() {
                    4531   _Dividebyzero:
                    4532   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002A14  4879 0000 4533          pea       @m68kde~1_142.L
00002A18  748E      
00002A1A  4EB8 292A 4534          jsr       _PrintErrorMessageandAbort
00002A1E  584F      4535          addq.w    #4,A7
00002A20  4E75      4536          rts
                    4537   ; }
                    4538   ; void Check() {
                    4539   _Check:
                    4540   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002A22  4879 0000 4541          pea       @m68kde~1_143.L
00002A26  749E      
00002A28  4EB8 292A 4542          jsr       _PrintErrorMessageandAbort
00002A2C  584F      4543          addq.w    #4,A7
00002A2E  4E75      4544          rts
                    4545   ; }
                    4546   ; void Trapv() {
                    4547   _Trapv:
                    4548   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002A30  4879 0000 4549          pea       @m68kde~1_144.L
00002A34  74B0      
00002A36  4EB8 292A 4550          jsr       _PrintErrorMessageandAbort
00002A3A  584F      4551          addq.w    #4,A7
00002A3C  4E75      4552          rts
                    4553   ; }
                    4554   ; void PrivError() {
                    4555   _PrivError:
                    4556   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002A3E  4879 0000 4557          pea       @m68kde~1_145.L
00002A42  74C2      
00002A44  4EB8 292A 4558          jsr       _PrintErrorMessageandAbort
00002A48  584F      4559          addq.w    #4,A7
00002A4A  4E75      4560          rts
                    4561   ; }
                    4562   ; void UnitIRQ() {
                    4563   _UnitIRQ:
                    4564   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002A4C  4879 0000 4565          pea       @m68kde~1_146.L
00002A50  74D6      
00002A52  4EB8 292A 4566          jsr       _PrintErrorMessageandAbort
00002A56  584F      4567          addq.w    #4,A7
00002A58  4E75      4568          rts
                    4569   ; }
                    4570   ; void Spurious() {
                    4571   _Spurious:
                    4572   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002A5A  4879 0000 4573          pea       @m68kde~1_147.L
00002A5E  74E8      
00002A60  4EB8 292A 4574          jsr       _PrintErrorMessageandAbort
00002A64  584F      4575          addq.w    #4,A7
00002A66  4E75      4576          rts
                    4577   ; }
                    4578   ; void EnterString(void)
                    4579   ; {
                    4580   _EnterString:
00002A68  4E56 FFFC 4581          link      A6,#-4
00002A6C  2F02      4582          move.l    D2,-(A7)
                    4583   ; unsigned char *Start;
                    4584   ; unsigned char c;
                    4585   ; printf("\r\nStart Address in Memory: ") ;
00002A6E  4879 0000 4586          pea       @m68kde~1_148.L
00002A72  74F6      
00002A74  4EB9 0000 4587          jsr       _printf
00002A78  5A98      
00002A7A  584F      4588          addq.w    #4,A7
                    4589   ; Start = Get8HexDigits(0) ;
00002A7C  42A7      4590          clr.l     -(A7)
00002A7E  4EB8 0CA4 4591          jsr       _Get8HexDigits
00002A82  584F      4592          addq.w    #4,A7
00002A84  2400      4593          move.l    D0,D2
                    4594   ; printf("\r\nEnter String (ESC to end) :") ;
00002A86  4879 0000 4595          pea       @m68kde~1_149.L
00002A8A  7512      
00002A8C  4EB9 0000 4596          jsr       _printf
00002A90  5A98      
00002A92  584F      4597          addq.w    #4,A7
                    4598   ; while((c = getchar()) != 0x1b)
                    4599   EnterString_1:
00002A94  4EB9 0000 4600          jsr       _getch
00002A98  59E0      
00002A9A  1D40 FFFF 4601          move.b    D0,-1(A6)
00002A9E  0C00 001B 4602          cmp.b     #27,D0
00002AA2  670A      4603          beq.s     EnterString_3
                    4604   ; *Start++ = c ;
00002AA4  2042      4605          move.l    D2,A0
00002AA6  5282      4606          addq.l    #1,D2
00002AA8  10AE FFFF 4607          move.b    -1(A6),(A0)
00002AAC  60E6      4608          bra       EnterString_1
                    4609   EnterString_3:
                    4610   ; *Start = 0x00;  // terminate with a null
00002AAE  2042      4611          move.l    D2,A0
00002AB0  4210      4612          clr.b     (A0)
00002AB2  241F      4613          move.l    (A7)+,D2
00002AB4  4E5E      4614          unlk      A6
00002AB6  4E75      4615          rts
                    4616   ; }
                    4617   ; void MemoryTest(void)
                    4618   ; {
                    4619   _MemoryTest:
00002AB8  48E7 3830 4620          movem.l   D2/D3/D4/A2/A3,-(A7)
00002ABC  45F9 0000 4621          lea       _printf.L,A2
00002AC0  5A98      
00002AC2  47F8 09D4 4622          lea       _Oline0.L,A3
                    4623   ; unsigned int *RamPtr;
                    4624   ; unsigned int *Start, *End ;
                    4625   ; // Output to LCD
                    4626   ; Oline0("Performing Memory Test!");
00002AC6  4879 0000 4627          pea       @m68kde~1_150.L
00002ACA  7530      
00002ACC  4E93      4628          jsr       (A3)
00002ACE  584F      4629          addq.w    #4,A7
                    4630   ; Oline1("");
00002AD0  4879 0000 4631          pea       @m68kde~1_39.L
00002AD4  67AE      
00002AD6  4EB8 0A02 4632          jsr       _Oline1
00002ADA  584F      4633          addq.w    #4,A7
                    4634   ; printf("\r\nStart Address: ") ;
00002ADC  4879 0000 4635          pea       @m68kde~1_151.L
00002AE0  7548      
00002AE2  4E92      4636          jsr       (A2)
00002AE4  584F      4637          addq.w    #4,A7
                    4638   ; Start = Get8HexDigits(0) ;
00002AE6  42A7      4639          clr.l     -(A7)
00002AE8  4EB8 0CA4 4640          jsr       _Get8HexDigits
00002AEC  584F      4641          addq.w    #4,A7
00002AEE  2800      4642          move.l    D0,D4
                    4643   ; printf("\r\nEnd Address: ") ;
00002AF0  4879 0000 4644          pea       @m68kde~1_152.L
00002AF4  755A      
00002AF6  4E92      4645          jsr       (A2)
00002AF8  584F      4646          addq.w    #4,A7
                    4647   ; End = Get8HexDigits(0) ;
00002AFA  42A7      4648          clr.l     -(A7)
00002AFC  4EB8 0CA4 4649          jsr       _Get8HexDigits
00002B00  584F      4650          addq.w    #4,A7
00002B02  2600      4651          move.l    D0,D3
                    4652   ; // Write to Memory
                    4653   ; for(RamPtr=Start; RamPtr <= End; RamPtr+=0x1){
00002B04  2404      4654          move.l    D4,D2
                    4655   MemoryTest_1:
00002B06  B483      4656          cmp.l     D3,D2
00002B08  620C      4657          bhi.s     MemoryTest_3
                    4658   ; *RamPtr = 0xDEADBEEF;
00002B0A  2042      4659          move.l    D2,A0
00002B0C  20BC DEAD 4660          move.l    #-559038737,(A0)
00002B10  BEEF      
00002B12  5882      4661          addq.l    #4,D2
00002B14  60F0      4662          bra       MemoryTest_1
                    4663   MemoryTest_3:
                    4664   ; }
                    4665   ; // Read from Memory & Validate Data
                    4666   ; for(RamPtr=Start; RamPtr <= End; RamPtr+=0x1){
00002B16  2404      4667          move.l    D4,D2
                    4668   MemoryTest_4:
00002B18  B483      4669          cmp.l     D3,D2
00002B1A  6200 0054 4670          bhi       MemoryTest_6
                    4671   ; if(*RamPtr != 0xDEADBEEF){
00002B1E  2042      4672          move.l    D2,A0
00002B20  2010      4673          move.l    (A0),D0
00002B22  0C80 DEAD 4674          cmp.l     #-559038737,D0
00002B26  BEEF      
00002B28  6700 0042 4675          beq       MemoryTest_7
                    4676   ; printf("\r\nMemory Test Failed!");
00002B2C  4879 0000 4677          pea       @m68kde~1_153.L
00002B30  756A      
00002B32  4E92      4678          jsr       (A2)
00002B34  584F      4679          addq.w    #4,A7
                    4680   ; printf("\r\nAddress = %u", RamPtr) ;
00002B36  2F02      4681          move.l    D2,-(A7)
00002B38  4879 0000 4682          pea       @m68kde~1_154.L
00002B3C  7580      
00002B3E  4E92      4683          jsr       (A2)
00002B40  504F      4684          addq.w    #8,A7
                    4685   ; printf("\r\nData Written to address = %u", 0xDEADBEEF) ;
00002B42  4879 DEAD 4686          pea       -559038737
00002B46  BEEF      
00002B48  4879 0000 4687          pea       @m68kde~1_155.L
00002B4C  7590      
00002B4E  4E92      4688          jsr       (A2)
00002B50  504F      4689          addq.w    #8,A7
                    4690   ; printf("\r\nData found in address = %u", *RamPtr) ;
00002B52  2042      4691          move.l    D2,A0
00002B54  2F10      4692          move.l    (A0),-(A7)
00002B56  4879 0000 4693          pea       @m68kde~1_156.L
00002B5A  75B0      
00002B5C  4E92      4694          jsr       (A2)
00002B5E  504F      4695          addq.w    #8,A7
                    4696   ; Oline0("Memory Test Failed!");
00002B60  4879 0000 4697          pea       @m68kde~1_157.L
00002B64  75CE      
00002B66  4E93      4698          jsr       (A3)
00002B68  584F      4699          addq.w    #4,A7
                    4700   ; return;
00002B6A  6018      4701          bra.s     MemoryTest_9
                    4702   MemoryTest_7:
00002B6C  5882      4703          addq.l    #4,D2
00002B6E  60A8      4704          bra       MemoryTest_4
                    4705   MemoryTest_6:
                    4706   ; }
                    4707   ; }
                    4708   ; printf("\r\nMemory Test Successful") ;
00002B70  4879 0000 4709          pea       @m68kde~1_158.L
00002B74  75E2      
00002B76  4E92      4710          jsr       (A2)
00002B78  584F      4711          addq.w    #4,A7
                    4712   ; Oline0("Memory Test Successful!");
00002B7A  4879 0000 4713          pea       @m68kde~1_159.L
00002B7E  75FC      
00002B80  4E93      4714          jsr       (A3)
00002B82  584F      4715          addq.w    #4,A7
                    4716   ; return;
                    4717   MemoryTest_9:
00002B84  4CDF 0C1C 4718          movem.l   (A7)+,D2/D3/D4/A2/A3
00002B88  4E75      4719          rts
                    4720   ; }
                    4721   ; int TestForSPITransmitDataComplete(void)
                    4722   ; {
                    4723   _TestForSPITransmitDataComplete:
                    4724   ; /* if register SPIF bit set, return true, otherwise wait*/
                    4725   ; while ((SPI_Status & 128) >> 7 != 1);
                    4726   TestForSPITransmitDataComplete_1:
00002B8A  1039 0040 4727          move.b    4227106,D0
00002B8E  8022      
00002B90  C07C 00FF 4728          and.w     #255,D0
00002B94  C07C 0080 4729          and.w     #128,D0
00002B98  EE40      4730          asr.w     #7,D0
00002B9A  0C40 0001 4731          cmp.w     #1,D0
00002B9E  6702      4732          beq.s     TestForSPITransmitDataComplete_3
00002BA0  60E8      4733          bra       TestForSPITransmitDataComplete_1
                    4734   TestForSPITransmitDataComplete_3:
                    4735   ; return 1;
00002BA2  7001      4736          moveq     #1,D0
00002BA4  4E75      4737          rts
                    4738   ; }
                    4739   ; /************************************************************************************
                    4740   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    4741   ; ************************************************************************************/
                    4742   ; void SPI_Init(void)
                    4743   ; {
                    4744   _SPI_Init:
                    4745   ; //TODO
                    4746   ; //
                    4747   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    4748   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    4749   ; //
                    4750   ; // Here are some settings we want to create
                    4751   ; //
                    4752   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                    4753   ; SPI_Control = 0x53; // 8'b01010011
00002BA6  13FC 0053 4754          move.b    #83,4227104
00002BAA  0040 8020 
                    4755   ; // Ext Reg         - in conjunction with control reg sets speed to above and also sets interrupt flag after every completed transfer (each byte)
                    4756   ; SPI_Ext = 0;        //8'b00XXXX00
00002BAE  4239 0040 4757          clr.b     4227110
00002BB2  8026      
                    4758   ; // SPI_CS Reg      - disable all connected SPI chips via their CS signals
                    4759   ; SPI_CS = Disable_SPI_CS();
00002BB4  13FC 00FF 4760          move.b    #255,4227112
00002BB8  0040 8028 
00002BBC  13FC 00FF 4761          move.b    #255,4227112
00002BC0  0040 8028 
                    4762   ; // Status Reg      - clear any write collision and interrupt on transmit complete flag
                    4763   ; SPI_Status = 0xC0;  // 8'b11XX0000, X = don't Care (Use 0)
00002BC4  13FC 00C0 4764          move.b    #192,4227106
00002BC8  0040 8022 
00002BCC  4E75      4765          rts
                    4766   ; }
                    4767   ; /************************************************************************************
                    4768   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    4769   ; ************************************************************************************/
                    4770   ; void WaitForSPITransmitComplete(void)
                    4771   ; {
                    4772   _WaitForSPITransmitComplete:
                    4773   ; // poll the status register SPIF bit looking for completion of transmission
                    4774   ; TestForSPITransmitDataComplete();
00002BCE  4EB8 2B8A 4775          jsr       _TestForSPITransmitDataComplete
                    4776   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    4777   ; // in case they were set
                    4778   ; SPI_Status = 0xC0; //  (8'b11000000, X = don't Care (Use 0))
00002BD2  13FC 00C0 4779          move.b    #192,4227106
00002BD6  0040 8022 
00002BDA  4E75      4780          rts
                    4781   ; }
                    4782   ; /************************************************************************************
                    4783   ; ** Disable Write Protect to allow writing access to chip
                    4784   ; ************************************************************************************/
                    4785   ; void WriteEnable(void){
                    4786   _WriteEnable:
00002BDC  4E56 FFFC 4787          link      A6,#-4
                    4788   ; unsigned char x;
                    4789   ; // Enable Chip Select
                    4790   ; Enable_SPI_CS();
00002BE0  13FC 00FE 4791          move.b    #254,4227112
00002BE4  0040 8028 
                    4792   ; // Send Write Command to Chip
                    4793   ; SPI_Data = 6;
00002BE8  13FC 0006 4794          move.b    #6,4227108
00002BEC  0040 8024 
                    4795   ; WaitForSPITransmitComplete();
00002BF0  4EB8 2BCE 4796          jsr       _WaitForSPITransmitComplete
                    4797   ; x = SPI_Data;
00002BF4  1D79 0040 4798          move.b    4227108,-1(A6)
00002BF8  8024 FFFF 
                    4799   ; // Disable Chip Select
                    4800   ; Disable_SPI_CS();
00002BFC  13FC 00FF 4801          move.b    #255,4227112
00002C00  0040 8028 
00002C04  4E5E      4802          unlk      A6
00002C06  4E75      4803          rts
                    4804   ; }
                    4805   ; /************************************************************************************
                    4806   ; ** Disable Write Protect to allow writing access to chip
                    4807   ; ************************************************************************************/
                    4808   ; void DisableBlockProtect(void){
                    4809   _DisableBlockProtect:
00002C08  4E56 FFFC 4810          link      A6,#-4
                    4811   ; unsigned char x;
                    4812   ; Enable_SPI_CS();
00002C0C  13FC 00FE 4813          move.b    #254,4227112
00002C10  0040 8028 
                    4814   ; // Send Write To status Register Command to Chip
                    4815   ; SPI_Data = 1;
00002C14  13FC 0001 4816          move.b    #1,4227108
00002C18  0040 8024 
                    4817   ; WaitForSPITransmitComplete();
00002C1C  4EB8 2BCE 4818          jsr       _WaitForSPITransmitComplete
                    4819   ; x = SPI_Data;
00002C20  1D79 0040 4820          move.b    4227108,-1(A6)
00002C24  8024 FFFF 
                    4821   ; // Send Write To status Register Command to Chip
                    4822   ; SPI_Data = 2;   // 8'b00000010
00002C28  13FC 0002 4823          move.b    #2,4227108
00002C2C  0040 8024 
                    4824   ; WaitForSPITransmitComplete();
00002C30  4EB8 2BCE 4825          jsr       _WaitForSPITransmitComplete
                    4826   ; x = SPI_Data;
00002C34  1D79 0040 4827          move.b    4227108,-1(A6)
00002C38  8024 FFFF 
                    4828   ; Disable_SPI_CS();
00002C3C  13FC 00FF 4829          move.b    #255,4227112
00002C40  0040 8028 
00002C44  4E5E      4830          unlk      A6
00002C46  4E75      4831          rts
                    4832   ; }
                    4833   ; /************************************************************************************
                    4834   ; ** Wait for Write Command Completion
                    4835   ; ************************************************************************************/
                    4836   ; void WaitWriteCommandCompletion(void){
                    4837   _WaitWriteCommandCompletion:
00002C48  2F02      4838          move.l    D2,-(A7)
                    4839   ; unsigned char x;
                    4840   ; // Enable Chip Select
                    4841   ; Enable_SPI_CS();
00002C4A  13FC 00FE 4842          move.b    #254,4227112
00002C4E  0040 8028 
                    4843   ; // Send Write Command to Chip
                    4844   ; SPI_Data = 5;
00002C52  13FC 0005 4845          move.b    #5,4227108
00002C56  0040 8024 
                    4846   ; WaitForSPITransmitComplete();
00002C5A  4EB8 2BCE 4847          jsr       _WaitForSPITransmitComplete
                    4848   ; x = SPI_Data;
00002C5E  1439 0040 4849          move.b    4227108,D2
00002C62  8024      
                    4850   ; while(1){
                    4851   WaitWriteCommandCompletion_1:
                    4852   ; SPI_Data = 0xFF;
00002C64  13FC 00FF 4853          move.b    #255,4227108
00002C68  0040 8024 
                    4854   ; WaitForSPITransmitComplete();
00002C6C  4EB8 2BCE 4855          jsr       _WaitForSPITransmitComplete
                    4856   ; x = SPI_Data;
00002C70  1439 0040 4857          move.b    4227108,D2
00002C74  8024      
                    4858   ; if ((x & 1) != 1)
00002C76  1002      4859          move.b    D2,D0
00002C78  C03C 0001 4860          and.b     #1,D0
00002C7C  0C00 0001 4861          cmp.b     #1,D0
00002C80  6702      4862          beq.s     WaitWriteCommandCompletion_4
                    4863   ; break;
00002C82  6002      4864          bra.s     WaitWriteCommandCompletion_3
                    4865   WaitWriteCommandCompletion_4:
00002C84  60DE      4866          bra       WaitWriteCommandCompletion_1
                    4867   WaitWriteCommandCompletion_3:
                    4868   ; }
                    4869   ; // Disable Chip Select
                    4870   ; Disable_SPI_CS();
00002C86  13FC 00FF 4871          move.b    #255,4227112
00002C8A  0040 8028 
00002C8E  241F      4872          move.l    (A7)+,D2
00002C90  4E75      4873          rts
                    4874   ; }
                    4875   ; /************************************************************************************
                    4876   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    4877   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    4878   ; ************************************************************************************/
                    4879   ; void WriteSPIChar(unsigned char c)
                    4880   ; {
                    4881   _WriteSPIChar:
00002C92  4E56 FFFC 4882          link      A6,#-4
00002C96  48E7 2020 4883          movem.l   D2/A2,-(A7)
00002C9A  45F8 2BCE 4884          lea       _WaitForSPITransmitComplete.L,A2
                    4885   ; unsigned char x;
                    4886   ; unsigned char addr1, addr2, addr3;
                    4887   ; addr1 = addr2 = addr3 = 6;
00002C9E  1D7C 0006 4888          move.b    #6,-1(A6)
00002CA2  FFFF      
00002CA4  1D7C 0006 4889          move.b    #6,-2(A6)
00002CA8  FFFE      
00002CAA  1D7C 0006 4890          move.b    #6,-3(A6)
00002CAE  FFFD      
                    4891   ; printf("\r\nc = %u \n", c);
00002CB0  122E 000B 4892          move.b    11(A6),D1
00002CB4  C2BC 0000 4893          and.l     #255,D1
00002CB8  00FF      
00002CBA  2F01      4894          move.l    D1,-(A7)
00002CBC  4879 0000 4895          pea       @m68kde~1_160.L
00002CC0  7614      
00002CC2  4EB9 0000 4896          jsr       _printf
00002CC6  5A98      
00002CC8  504F      4897          addq.w    #8,A7
                    4898   ; DisableBlockProtect();
00002CCA  4EB8 2C08 4899          jsr       _DisableBlockProtect
                    4900   ; WriteEnable();
00002CCE  4EB8 2BDC 4901          jsr       _WriteEnable
                    4902   ; // Enable Chip Select
                    4903   ; Enable_SPI_CS();
00002CD2  13FC 00FE 4904          move.b    #254,4227112
00002CD6  0040 8028 
                    4905   ; // Send Write Command to Chip
                    4906   ; SPI_Data = 2;
00002CDA  13FC 0002 4907          move.b    #2,4227108
00002CDE  0040 8024 
                    4908   ; WaitForSPITransmitComplete();
00002CE2  4E92      4909          jsr       (A2)
                    4910   ; x = SPI_Data;
00002CE4  1439 0040 4911          move.b    4227108,D2
00002CE8  8024      
                    4912   ; // Send 24-bit Address that we stored c in
                    4913   ; SPI_Data = addr1; // 24-bit address - 1st Byte
00002CEA  13EE FFFD 4914          move.b    -3(A6),4227108
00002CEE  0040 8024 
                    4915   ; WaitForSPITransmitComplete();
00002CF2  4E92      4916          jsr       (A2)
                    4917   ; x = SPI_Data;
00002CF4  1439 0040 4918          move.b    4227108,D2
00002CF8  8024      
                    4919   ; SPI_Data = addr2; // 24-bit address - 2nd Byte
00002CFA  13EE FFFE 4920          move.b    -2(A6),4227108
00002CFE  0040 8024 
                    4921   ; WaitForSPITransmitComplete();
00002D02  4E92      4922          jsr       (A2)
                    4923   ; x = SPI_Data;
00002D04  1439 0040 4924          move.b    4227108,D2
00002D08  8024      
                    4925   ; SPI_Data = addr3; // 24-bit address - 3rd Byte
00002D0A  13EE FFFF 4926          move.b    -1(A6),4227108
00002D0E  0040 8024 
                    4927   ; WaitForSPITransmitComplete();
00002D12  4E92      4928          jsr       (A2)
                    4929   ; x = SPI_Data;
00002D14  1439 0040 4930          move.b    4227108,D2
00002D18  8024      
                    4931   ; // Payload Data
                    4932   ; SPI_Data = c;
00002D1A  13EE 000B 4933          move.b    11(A6),4227108
00002D1E  0040 8024 
                    4934   ; WaitForSPITransmitComplete();
00002D22  4E92      4935          jsr       (A2)
                    4936   ; x = SPI_Data;
00002D24  1439 0040 4937          move.b    4227108,D2
00002D28  8024      
                    4938   ; //  Disable Chip Select
                    4939   ; Disable_SPI_CS();
00002D2A  13FC 00FF 4940          move.b    #255,4227112
00002D2E  0040 8028 
                    4941   ; // Poll Chip Status register for write completion
                    4942   ; WaitWriteCommandCompletion();
00002D32  4EB8 2C48 4943          jsr       _WaitWriteCommandCompletion
00002D36  4CDF 0404 4944          movem.l   (A7)+,D2/A2
00002D3A  4E5E      4945          unlk      A6
00002D3C  4E75      4946          rts
                    4947   ; }
                    4948   ; /************************************************************************************
                    4949   ; ** Read contents of SPI flash chip from address 0
                    4950   ; ************************************************************************************/
                    4951   ; unsigned char ReadSPIChar(void){
                    4952   _ReadSPIChar:
00002D3E  4E56 FFFC 4953          link      A6,#-4
00002D42  48E7 3020 4954          movem.l   D2/D3/A2,-(A7)
00002D46  45F8 2BCE 4955          lea       _WaitForSPITransmitComplete.L,A2
                    4956   ; unsigned char x;
                    4957   ; unsigned char read_byte;
                    4958   ; unsigned char addr1, addr2, addr3;
                    4959   ; addr1 = addr2 = addr3 = 6;
00002D4A  1D7C 0006 4960          move.b    #6,-1(A6)
00002D4E  FFFF      
00002D50  1D7C 0006 4961          move.b    #6,-2(A6)
00002D54  FFFE      
00002D56  1D7C 0006 4962          move.b    #6,-3(A6)
00002D5A  FFFD      
                    4963   ; // Enable Chip Select
                    4964   ; Enable_SPI_CS();
00002D5C  13FC 00FE 4965          move.b    #254,4227112
00002D60  0040 8028 
                    4966   ; // Send Read Command to Chip
                    4967   ; SPI_Data = 3;
00002D64  13FC 0003 4968          move.b    #3,4227108
00002D68  0040 8024 
                    4969   ; WaitForSPITransmitComplete();
00002D6C  4E92      4970          jsr       (A2)
                    4971   ; x = SPI_Data;
00002D6E  1439 0040 4972          move.b    4227108,D2
00002D72  8024      
                    4973   ; // Send 24-bit Address that we stored c in
                    4974   ; // 24-bit address - 1st Byte
                    4975   ; SPI_Data = addr1;
00002D74  13EE FFFD 4976          move.b    -3(A6),4227108
00002D78  0040 8024 
                    4977   ; WaitForSPITransmitComplete();
00002D7C  4E92      4978          jsr       (A2)
                    4979   ; x = SPI_Data;
00002D7E  1439 0040 4980          move.b    4227108,D2
00002D82  8024      
                    4981   ; // 24-bit address - 2nd Byte
                    4982   ; SPI_Data = addr2;
00002D84  13EE FFFE 4983          move.b    -2(A6),4227108
00002D88  0040 8024 
                    4984   ; WaitForSPITransmitComplete();
00002D8C  4E92      4985          jsr       (A2)
                    4986   ; x = SPI_Data;
00002D8E  1439 0040 4987          move.b    4227108,D2
00002D92  8024      
                    4988   ; // 24-bit address - 3rd Byte
                    4989   ; SPI_Data = addr3;
00002D94  13EE FFFF 4990          move.b    -1(A6),4227108
00002D98  0040 8024 
                    4991   ; WaitForSPITransmitComplete();
00002D9C  4E92      4992          jsr       (A2)
                    4993   ; x = SPI_Data;
00002D9E  1439 0040 4994          move.b    4227108,D2
00002DA2  8024      
                    4995   ; // Send Dummy Data to purge c out of read FIFO
                    4996   ; SPI_Data = 0xF0;
00002DA4  13FC 00F0 4997          move.b    #240,4227108
00002DA8  0040 8024 
                    4998   ; WaitForSPITransmitComplete();
00002DAC  4E92      4999          jsr       (A2)
                    5000   ; read_byte = SPI_Data;   // store data from read FIFO into temporary variable
00002DAE  1639 0040 5001          move.b    4227108,D3
00002DB2  8024      
                    5002   ; //  Disable Chip Select
                    5003   ; Disable_SPI_CS();
00002DB4  13FC 00FF 5004          move.b    #255,4227112
00002DB8  0040 8028 
                    5005   ; printf("Read back Data (as u-char) = %u \n", read_byte);
00002DBC  C6BC 0000 5006          and.l     #255,D3
00002DC0  00FF      
00002DC2  2F03      5007          move.l    D3,-(A7)
00002DC4  4879 0000 5008          pea       @m68kde~1_161.L
00002DC8  7620      
00002DCA  4EB9 0000 5009          jsr       _printf
00002DCE  5A98      
00002DD0  504F      5010          addq.w    #8,A7
                    5011   ; return read_byte;
00002DD2  1003      5012          move.b    D3,D0
00002DD4  4CDF 040C 5013          movem.l   (A7)+,D2/D3/A2
00002DD8  4E5E      5014          unlk      A6
00002DDA  4E75      5015          rts
                    5016   ; // return the received data from Flash chip
                    5017   ; }
                    5018   ; /************************************************************************************
                    5019   ; ** Erase Chip Contents in SPI flash chip
                    5020   ; ************************************************************************************/
                    5021   ; void ChipErase(void){
                    5022   _ChipErase:
00002DDC  4E56 FFFC 5023          link      A6,#-4
                    5024   ; unsigned char x;
                    5025   ; DisableBlockProtect();
00002DE0  4EB8 2C08 5026          jsr       _DisableBlockProtect
                    5027   ; WriteEnable();
00002DE4  4EB8 2BDC 5028          jsr       _WriteEnable
                    5029   ; Enable_SPI_CS();
00002DE8  13FC 00FE 5030          move.b    #254,4227112
00002DEC  0040 8028 
                    5031   ; // Send Dummy Data to purge c out of read FIFO
                    5032   ; SPI_Data = 199;
00002DF0  13FC 00C7 5033          move.b    #199,4227108
00002DF4  0040 8024 
                    5034   ; WaitForSPITransmitComplete();
00002DF8  4EB8 2BCE 5035          jsr       _WaitForSPITransmitComplete
                    5036   ; x = SPI_Data;
00002DFC  1D79 0040 5037          move.b    4227108,-1(A6)
00002E00  8024 FFFF 
                    5038   ; Disable_SPI_CS();
00002E04  13FC 00FF 5039          move.b    #255,4227112
00002E08  0040 8028 
                    5040   ; WaitWriteCommandCompletion();
00002E0C  4EB8 2C48 5041          jsr       _WaitWriteCommandCompletion
                    5042   ; printf("\r\nChip Erased!");
00002E10  4879 0000 5043          pea       @m68kde~1_162.L
00002E14  7642      
00002E16  4EB9 0000 5044          jsr       _printf
00002E1A  5A98      
00002E1C  584F      5045          addq.w    #4,A7
00002E1E  4E5E      5046          unlk      A6
00002E20  4E75      5047          rts
                    5048   ; }
                    5049   ; void main(void)
                    5050   ; {
                    5051   _main:
00002E22  4E56 FFE8 5052          link      A6,#-24
00002E26  48E7 2030 5053          movem.l   D2/A2/A3,-(A7)
00002E2A  45F8 0A30 5054          lea       _InstallExceptionHandler.L,A2
00002E2E  47F9 0000 5055          lea       _printf.L,A3
00002E32  5A98      
                    5056   ; char c ;
                    5057   ; int i, j ;
                    5058   ; char *BugMessage = "DE1-68k Bug V1.77";
00002E34  41F9 0000 5059          lea       @m68kde~1_163.L,A0
00002E38  7652      
00002E3A  2D48 FFF0 5060          move.l    A0,-16(A6)
                    5061   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002E3E  41F9 0000 5062          lea       @m68kde~1_164.L,A0
00002E42  7664      
00002E44  2D48 FFF4 5063          move.l    A0,-12(A6)
                    5064   ; char *StudentName = "Mohamed Abouelmagd";
00002E48  41F9 0000 5065          lea       @m68kde~1_165.L,A0
00002E4C  7682      
00002E4E  2D48 FFF8 5066          move.l    A0,-8(A6)
                    5067   ; char *StudentNumber = "Std #: 38585148";
00002E52  41F9 0000 5068          lea       @m68kde~1_166.L,A0
00002E56  7696      
00002E58  2D48 FFFC 5069          move.l    A0,-4(A6)
                    5070   ; KillAllBreakPoints() ;
00002E5C  4EB8 2104 5071          jsr       _KillAllBreakPoints
                    5072   ; i = x = y = z = PortA_Count = 0;
00002E60  42B9 0B00 5073          clr.l     _PortA_Count.L
00002E64  00D4      
00002E66  42B9 0B00 5074          clr.l     _z.L
00002E6A  00D0      
00002E6C  42B9 0B00 5075          clr.l     _y.L
00002E70  00CC      
00002E72  42B9 0B00 5076          clr.l     _x.L
00002E76  00C8      
00002E78  4282      5077          clr.l     D2
                    5078   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002E7A  42B9 0B00 5079          clr.l     _GoFlag.L
00002E7E  00DC      
00002E80  42B9 0B00 5080          clr.l     _Trace.L
00002E84  00D8      
                    5081   ; Echo = 1 ;
00002E86  23FC 0000 5082          move.l    #1,_Echo.L
00002E8A  0001 0B00 
00002E8E  00E0      
                    5083   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002E90  42B9 0B00 5084          clr.l     _d7.L
00002E94  0100      
00002E96  42B9 0B00 5085          clr.l     _d6.L
00002E9A  00FC      
00002E9C  42B9 0B00 5086          clr.l     _d5.L
00002EA0  00F8      
00002EA2  42B9 0B00 5087          clr.l     _d4.L
00002EA6  00F4      
00002EA8  42B9 0B00 5088          clr.l     _d3.L
00002EAC  00F0      
00002EAE  42B9 0B00 5089          clr.l     _d2.L
00002EB2  00EC      
00002EB4  42B9 0B00 5090          clr.l     _d1.L
00002EB8  00E8      
00002EBA  42B9 0B00 5091          clr.l     _d0.L
00002EBE  00E4      
                    5092   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002EC0  42B9 0B00 5093          clr.l     _a6.L
00002EC4  011C      
00002EC6  42B9 0B00 5094          clr.l     _a5.L
00002ECA  0118      
00002ECC  42B9 0B00 5095          clr.l     _a4.L
00002ED0  0114      
00002ED2  42B9 0B00 5096          clr.l     _a3.L
00002ED6  0110      
00002ED8  42B9 0B00 5097          clr.l     _a2.L
00002EDC  010C      
00002EDE  42B9 0B00 5098          clr.l     _a1.L
00002EE2  0108      
00002EE4  42B9 0B00 5099          clr.l     _a0.L
00002EE8  0104      
                    5100   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002EEA  23FC 0800 5101          move.l    #134217728,_PC.L
00002EEE  0000 0B00 
00002EF2  0120      
00002EF4  23FC 0C00 5102          move.l    #201326592,_SSP.L
00002EF8  0000 0B00 
00002EFC  0124      
00002EFE  23FC 0C00 5103          move.l    #201326592,_USP.L
00002F02  0000 0B00 
00002F06  0128      
                    5104   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002F08  33FC 2000 5105          move.w    #8192,_SR.L
00002F0C  0B00 012C 
                    5106   ; // Initialise Breakpoint variables
                    5107   ; for(i = 0; i < 8; i++)  {
00002F10  4282      5108          clr.l     D2
                    5109   main_1:
00002F12  0C82 0000 5110          cmp.l     #8,D2
00002F16  0008      
00002F18  6C00 004C 5111          bge       main_3
                    5112   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002F1C  2002      5113          move.l    D2,D0
00002F1E  E588      5114          lsl.l     #2,D0
00002F20  41F9 0B00 5115          lea       _BreakPointAddress.L,A0
00002F24  012E      
00002F26  42B0 0800 5116          clr.l     0(A0,D0.L)
                    5117   ; WatchPointAddress[i] = 0 ;
00002F2A  2002      5118          move.l    D2,D0
00002F2C  E588      5119          lsl.l     #2,D0
00002F2E  41F9 0B00 5120          lea       _WatchPointAddress.L,A0
00002F32  0182      
00002F34  42B0 0800 5121          clr.l     0(A0,D0.L)
                    5122   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002F38  2002      5123          move.l    D2,D0
00002F3A  E388      5124          lsl.l     #1,D0
00002F3C  41F9 0B00 5125          lea       _BreakPointInstruction.L,A0
00002F40  014E      
00002F42  4270 0800 5126          clr.w     0(A0,D0.L)
                    5127   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002F46  2002      5128          move.l    D2,D0
00002F48  E588      5129          lsl.l     #2,D0
00002F4A  41F9 0B00 5130          lea       _BreakPointSetOrCleared.L,A0
00002F4E  015E      
00002F50  42B0 0800 5131          clr.l     0(A0,D0.L)
                    5132   ; WatchPointSetOrCleared[i] = 0;
00002F54  2002      5133          move.l    D2,D0
00002F56  E588      5134          lsl.l     #2,D0
00002F58  41F9 0B00 5135          lea       _WatchPointSetOrCleared.L,A0
00002F5C  01A2      
00002F5E  42B0 0800 5136          clr.l     0(A0,D0.L)
00002F62  5282      5137          addq.l    #1,D2
00002F64  60AC      5138          bra       main_1
                    5139   main_3:
                    5140   ; }
                    5141   ; Init_RS232() ;     // initialise the RS232 port
00002F66  4EB8 0B12 5142          jsr       _Init_RS232
                    5143   ; Init_LCD() ;
00002F6A  4EB8 095E 5144          jsr       _Init_LCD
                    5145   ; for( i = 32; i < 48; i++)
00002F6E  7420      5146          moveq     #32,D2
                    5147   main_4:
00002F70  0C82 0000 5148          cmp.l     #48,D2
00002F74  0030      
00002F76  6C0E      5149          bge.s     main_6
                    5150   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002F78  2F02      5151          move.l    D2,-(A7)
00002F7A  4878 29DC 5152          pea       _UnhandledTrap.L
00002F7E  4E92      5153          jsr       (A2)
00002F80  504F      5154          addq.w    #8,A7
00002F82  5282      5155          addq.l    #1,D2
00002F84  60EA      5156          bra       main_4
                    5157   main_6:
                    5158   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002F86  4878 002F 5159          pea       47
00002F8A  4878 26B6 5160          pea       _menu.L
00002F8E  4E92      5161          jsr       (A2)
00002F90  504F      5162          addq.w    #8,A7
                    5163   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002F92  4878 0019 5164          pea       25
00002F96  4878 2982 5165          pea       _UnhandledIRQ1.L
00002F9A  4E92      5166          jsr       (A2)
00002F9C  504F      5167          addq.w    #8,A7
                    5168   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002F9E  4878 001A 5169          pea       26
00002FA2  4878 298E 5170          pea       _UnhandledIRQ2.L
00002FA6  4E92      5171          jsr       (A2)
00002FA8  504F      5172          addq.w    #8,A7
                    5173   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002FAA  4878 001B 5174          pea       27
00002FAE  4878 299A 5175          pea       _UnhandledIRQ3.L
00002FB2  4E92      5176          jsr       (A2)
00002FB4  504F      5177          addq.w    #8,A7
                    5178   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002FB6  4878 001C 5179          pea       28
00002FBA  4878 29A6 5180          pea       _UnhandledIRQ4.L
00002FBE  4E92      5181          jsr       (A2)
00002FC0  504F      5182          addq.w    #8,A7
                    5183   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002FC2  4878 001D 5184          pea       29
00002FC6  4878 29B2 5185          pea       _UnhandledIRQ5.L
00002FCA  4E92      5186          jsr       (A2)
00002FCC  504F      5187          addq.w    #8,A7
                    5188   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002FCE  4878 001E 5189          pea       30
00002FD2  4878 29BE 5190          pea       _UnhandledIRQ6.L
00002FD6  4E92      5191          jsr       (A2)
00002FD8  504F      5192          addq.w    #8,A7
                    5193   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002FDA  4878 001F 5194          pea       31
00002FDE  4878 29D0 5195          pea       _UnhandledIRQ7.L
00002FE2  4E92      5196          jsr       (A2)
00002FE4  504F      5197          addq.w    #8,A7
                    5198   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002FE6  4878 002E 5199          pea       46
00002FEA  4878 23A8 5200          pea       _HandleBreakPoint.L
00002FEE  4E92      5201          jsr       (A2)
00002FF0  504F      5202          addq.w    #8,A7
                    5203   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002FF2  4878 001D 5204          pea       29
00002FF6  4878 1A4C 5205          pea       _DumpRegistersandPause.L
00002FFA  4E92      5206          jsr       (A2)
00002FFC  504F      5207          addq.w    #8,A7
                    5208   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002FFE  4878 0002 5209          pea       2
00003002  4878 29EA 5210          pea       _BusError.L
00003006  4E92      5211          jsr       (A2)
00003008  504F      5212          addq.w    #8,A7
                    5213   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
0000300A  4878 0003 5214          pea       3
0000300E  4878 29F8 5215          pea       _AddressError.L
00003012  4E92      5216          jsr       (A2)
00003014  504F      5217          addq.w    #8,A7
                    5218   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00003016  4878 0004 5219          pea       4
0000301A  4878 2A06 5220          pea       _IllegalInstruction.L
0000301E  4E92      5221          jsr       (A2)
00003020  504F      5222          addq.w    #8,A7
                    5223   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00003022  4878 0005 5224          pea       5
00003026  4878 2A14 5225          pea       _Dividebyzero.L
0000302A  4E92      5226          jsr       (A2)
0000302C  504F      5227          addq.w    #8,A7
                    5228   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
0000302E  4878 0006 5229          pea       6
00003032  4878 2A22 5230          pea       _Check.L
00003036  4E92      5231          jsr       (A2)
00003038  504F      5232          addq.w    #8,A7
                    5233   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
0000303A  4878 0007 5234          pea       7
0000303E  4878 2A30 5235          pea       _Trapv.L
00003042  4E92      5236          jsr       (A2)
00003044  504F      5237          addq.w    #8,A7
                    5238   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00003046  4878 0008 5239          pea       8
0000304A  4878 2A3E 5240          pea       _PrivError.L
0000304E  4E92      5241          jsr       (A2)
00003050  504F      5242          addq.w    #8,A7
                    5243   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00003052  4878 000F 5244          pea       15
00003056  4878 2A4C 5245          pea       _UnitIRQ.L
0000305A  4E92      5246          jsr       (A2)
0000305C  504F      5247          addq.w    #8,A7
                    5248   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
0000305E  4878 0018 5249          pea       24
00003062  4878 2A22 5250          pea       _Check.L
00003066  4E92      5251          jsr       (A2)
00003068  504F      5252          addq.w    #8,A7
                    5253   ; FlushKeyboard() ;                        // dump unread characters from keyboard
0000306A  4EB8 0BA6 5254          jsr       _FlushKeyboard
                    5255   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
0000306E  4239 0040 5256          clr.b     4194314
00003072  000A      
                    5257   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5258   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5259   main_7:
00003074  1039 0040 5260          move.b    4194306,D0
00003078  0002      
0000307A  C03C 0002 5261          and.b     #2,D0
0000307E  0C00 0002 5262          cmp.b     #2,D0
00003082  662A      5263          bne.s     main_9
                    5264   ; LoadFromFlashChip();
00003084  4EB8 14F0 5265          jsr       _LoadFromFlashChip
                    5266   ; printf("\r\nRunning.....") ;
00003088  4879 0000 5267          pea       @m68kde~1_167.L
0000308C  76A6      
0000308E  4E93      5268          jsr       (A3)
00003090  584F      5269          addq.w    #4,A7
                    5270   ; Oline1("Running.....") ;
00003092  4879 0000 5271          pea       @m68kde~1_168.L
00003096  76B6      
00003098  4EB8 0A02 5272          jsr       _Oline1
0000309C  584F      5273          addq.w    #4,A7
                    5274   ; GoFlag = 1;
0000309E  23FC 0000 5275          move.l    #1,_GoFlag.L
000030A2  0001 0B00 
000030A6  00DC      
                    5276   ; go() ;
000030A8  4EB8 08B8 5277          jsr       _go
000030AC  60C6      5278          bra       main_7
                    5279   main_9:
                    5280   ; }
                    5281   ; // otherwise start the debug monitor
                    5282   ; Oline0(StudentName) ;
000030AE  2F2E FFF8 5283          move.l    -8(A6),-(A7)
000030B2  4EB8 09D4 5284          jsr       _Oline0
000030B6  584F      5285          addq.w    #4,A7
                    5286   ; Oline1(StudentNumber) ;
000030B8  2F2E FFFC 5287          move.l    -4(A6),-(A7)
000030BC  4EB8 0A02 5288          jsr       _Oline1
000030C0  584F      5289          addq.w    #4,A7
                    5290   ; printf("\r\n%s", BugMessage) ;
000030C2  2F2E FFF0 5291          move.l    -16(A6),-(A7)
000030C6  4879 0000 5292          pea       @m68kde~1_169.L
000030CA  76C4      
000030CC  4E93      5293          jsr       (A3)
000030CE  504F      5294          addq.w    #8,A7
                    5295   ; printf("\r\n%s", CopyrightMessage) ;
000030D0  2F2E FFF4 5296          move.l    -12(A6),-(A7)
000030D4  4879 0000 5297          pea       @m68kde~1_169.L
000030D8  76C4      
000030DA  4E93      5298          jsr       (A3)
000030DC  504F      5299          addq.w    #8,A7
                    5300   ; menu();
000030DE  4EB8 26B6 5301          jsr       _menu
000030E2  4CDF 0C04 5302          movem.l   (A7)+,D2/A2/A3
000030E6  4E5E      5303          unlk      A6
000030E8  4E75      5304          rts
                    5305   ; }
                    5306   ; void FormatInstruction(void)    // for disassembly
                    5307   ; {
                    5308   _FormatInstruction:
000030EA  4E56 FEC0 5309          link      A6,#-320
000030EE  48E7 3C20 5310          movem.l   D2/D3/D4/D5/A2,-(A7)
000030F2  45EE FEC0 5311          lea       -320(A6),A2
                    5312   ; short i, ilen = 0 ;
000030F6  4245      5313          clr.w     D5
                    5314   ; char *iptr = Instruction ;
000030F8  41F9 0B00 5315          lea       _Instruction.L,A0
000030FC  04E2      
000030FE  2608      5316          move.l    A0,D3
                    5317   ; char *Formatted[80], *fptr ;
                    5318   ; fptr = Formatted ;
00003100  280A      5319          move.l    A2,D4
                    5320   ; for(i = 0; i < (short)(80); i ++)
00003102  4242      5321          clr.w     D2
                    5322   FormatInstruction_1:
00003104  0C42 0050 5323          cmp.w     #80,D2
00003108  6C0E      5324          bge.s     FormatInstruction_3
                    5325   ; Formatted[i] = (char)(0);          // set formatted string to null
0000310A  48C2      5326          ext.l     D2
0000310C  2002      5327          move.l    D2,D0
0000310E  E588      5328          lsl.l     #2,D0
00003110  42B2 0800 5329          clr.l     0(A2,D0.L)
00003114  5242      5330          addq.w    #1,D2
00003116  60EC      5331          bra       FormatInstruction_1
                    5332   FormatInstruction_3:
                    5333   ; while((*iptr != ' '))   {   // while ot a space char
                    5334   FormatInstruction_4:
00003118  2043      5335          move.l    D3,A0
0000311A  1010      5336          move.b    (A0),D0
0000311C  0C00 0020 5337          cmp.b     #32,D0
00003120  6718      5338          beq.s     FormatInstruction_6
                    5339   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00003122  2043      5340          move.l    D3,A0
00003124  5283      5341          addq.l    #1,D3
00003126  2244      5342          move.l    D4,A1
00003128  5284      5343          addq.l    #1,D4
0000312A  1290      5344          move.b    (A0),(A1)
                    5345   ; ilen ++ ;               // count length of string as we go
0000312C  5245      5346          addq.w    #1,D5
                    5347   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
0000312E  2043      5348          move.l    D3,A0
00003130  1010      5349          move.b    (A0),D0
00003132  6604      5350          bne.s     FormatInstruction_7
                    5351   ; return ;
00003134  6000 003E 5352          bra       FormatInstruction_9
                    5353   FormatInstruction_7:
00003138  60DE      5354          bra       FormatInstruction_4
                    5355   FormatInstruction_6:
                    5356   ; }
                    5357   ; // must still be more text to process otherwise we would have returned above if got to the end
                    5358   ; for(i = 0; i < ((short)(8) - ilen); i++)
0000313A  4242      5359          clr.w     D2
                    5360   FormatInstruction_10:
0000313C  7008      5361          moveq     #8,D0
0000313E  4880      5362          ext.w     D0
00003140  9045      5363          sub.w     D5,D0
00003142  B440      5364          cmp.w     D0,D2
00003144  6C0C      5365          bge.s     FormatInstruction_12
                    5366   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00003146  2044      5367          move.l    D4,A0
00003148  5284      5368          addq.l    #1,D4
0000314A  10BC 0020 5369          move.b    #32,(A0)
0000314E  5242      5370          addq.w    #1,D2
00003150  60EA      5371          bra       FormatInstruction_10
                    5372   FormatInstruction_12:
                    5373   ; // now skip over any spaces in original unformatted string before copying the rest
                    5374   ; while((*iptr == ' '))
                    5375   FormatInstruction_13:
00003152  2043      5376          move.l    D3,A0
00003154  1010      5377          move.b    (A0),D0
00003156  0C00 0020 5378          cmp.b     #32,D0
0000315A  6604      5379          bne.s     FormatInstruction_15
                    5380   ; iptr++ ;
0000315C  5283      5381          addq.l    #1,D3
0000315E  60F2      5382          bra       FormatInstruction_13
                    5383   FormatInstruction_15:
                    5384   ; strcat(fptr,iptr) ;
00003160  2F03      5385          move.l    D3,-(A7)
00003162  2F04      5386          move.l    D4,-(A7)
00003164  4EB9 0000 5387          jsr       _strcat
00003168  5A66      
0000316A  504F      5388          addq.w    #8,A7
                    5389   ; strcpyInstruction(Formatted) ;
0000316C  2F0A      5390          move.l    A2,-(A7)
0000316E  4EB8 0CE6 5391          jsr       _strcpyInstruction
00003172  584F      5392          addq.w    #4,A7
                    5393   FormatInstruction_9:
00003174  4CDF 043C 5394          movem.l   (A7)+,D2/D3/D4/D5/A2
00003178  4E5E      5395          unlk      A6
0000317A  4E75      5396          rts
                    5397   ; }
                    5398   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    5399   ; {
                    5400   _Decode2BitOperandSize:
0000317C  4E56 0000 5401          link      A6,#0
00003180  48E7 3020 5402          movem.l   D2/D3/A2,-(A7)
00003184  362E 000A 5403          move.w    10(A6),D3
00003188  C6BC 0000 5404          and.l     #65535,D3
0000318C  FFFF      
0000318E  45F8 0CCC 5405          lea       _strcatInstruction.L,A2
                    5406   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    5407   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00003192  3003      5408          move.w    D3,D0
00003194  C07C 00C0 5409          and.w     #192,D0
00003198  EC48      5410          lsr.w     #6,D0
0000319A  3600      5411          move.w    D0,D3
                    5412   ; if(OpCode == (unsigned short int)(0))   {
0000319C  4A43      5413          tst.w     D3
0000319E  660E      5414          bne.s     Decode2BitOperandSize_1
                    5415   ; strcatInstruction(".B ") ;
000031A0  4879 0000 5416          pea       @m68kde~1_170.L
000031A4  76CA      
000031A6  4E92      5417          jsr       (A2)
000031A8  584F      5418          addq.w    #4,A7
                    5419   ; DataSize = 1 ;
000031AA  7401      5420          moveq     #1,D2
000031AC  6020      5421          bra.s     Decode2BitOperandSize_4
                    5422   Decode2BitOperandSize_1:
                    5423   ; }
                    5424   ; else if(OpCode == (unsigned short int)(1)) {
000031AE  0C43 0001 5425          cmp.w     #1,D3
000031B2  660E      5426          bne.s     Decode2BitOperandSize_3
                    5427   ; strcatInstruction(".W ") ;
000031B4  4879 0000 5428          pea       @m68kde~1_171.L
000031B8  76CE      
000031BA  4E92      5429          jsr       (A2)
000031BC  584F      5430          addq.w    #4,A7
                    5431   ; DataSize = 1 ;
000031BE  7401      5432          moveq     #1,D2
000031C0  600C      5433          bra.s     Decode2BitOperandSize_4
                    5434   Decode2BitOperandSize_3:
                    5435   ; }
                    5436   ; else {
                    5437   ; strcatInstruction(".L ") ;
000031C2  4879 0000 5438          pea       @m68kde~1_172.L
000031C6  76D2      
000031C8  4E92      5439          jsr       (A2)
000031CA  584F      5440          addq.w    #4,A7
                    5441   ; DataSize = 2 ;
000031CC  7402      5442          moveq     #2,D2
                    5443   Decode2BitOperandSize_4:
                    5444   ; }
                    5445   ; return DataSize;
000031CE  3002      5446          move.w    D2,D0
000031D0  4CDF 040C 5447          movem.l   (A7)+,D2/D3/A2
000031D4  4E5E      5448          unlk      A6
000031D6  4E75      5449          rts
                    5450   ; }
                    5451   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5452   ; {
                    5453   _Decode3BitDataRegister:
000031D8  4E56 FFFC 5454          link      A6,#-4
000031DC  2F0A      5455          move.l    A2,-(A7)
000031DE  45EE FFFC 5456          lea       -4(A6),A2
                    5457   ; unsigned char RegNumber[3] ;
                    5458   ; RegNumber[0] = 'D' ;
000031E2  14BC 0044 5459          move.b    #68,(A2)
                    5460   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
000031E6  7030      5461          moveq     #48,D0
000031E8  322E 000A 5462          move.w    10(A6),D1
000031EC  C27C 0E00 5463          and.w     #3584,D1
000031F0  E049      5464          lsr.w     #8,D1
000031F2  E249      5465          lsr.w     #1,D1
000031F4  D001      5466          add.b     D1,D0
000031F6  1540 0001 5467          move.b    D0,1(A2)
                    5468   ; RegNumber[2] = 0 ;
000031FA  422A 0002 5469          clr.b     2(A2)
                    5470   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
000031FE  2F0A      5471          move.l    A2,-(A7)
00003200  4EB8 0CCC 5472          jsr       _strcatInstruction
00003204  584F      5473          addq.w    #4,A7
00003206  245F      5474          move.l    (A7)+,A2
00003208  4E5E      5475          unlk      A6
0000320A  4E75      5476          rts
                    5477   ; }
                    5478   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5479   ; {
                    5480   _Decode3BitAddressRegister:
0000320C  4E56 FFFC 5481          link      A6,#-4
00003210  2F0A      5482          move.l    A2,-(A7)
00003212  45EE FFFC 5483          lea       -4(A6),A2
                    5484   ; unsigned char RegNumber[3];
                    5485   ; RegNumber[0] = 'A' ;
00003216  14BC 0041 5486          move.b    #65,(A2)
                    5487   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
0000321A  7030      5488          moveq     #48,D0
0000321C  322E 000A 5489          move.w    10(A6),D1
00003220  D001      5490          add.b     D1,D0
00003222  1540 0001 5491          move.b    D0,1(A2)
                    5492   ; RegNumber[2] = 0 ;
00003226  422A 0002 5493          clr.b     2(A2)
                    5494   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
0000322A  2F0A      5495          move.l    A2,-(A7)
0000322C  4EB8 0CCC 5496          jsr       _strcatInstruction
00003230  584F      5497          addq.w    #4,A7
00003232  245F      5498          move.l    (A7)+,A2
00003234  4E5E      5499          unlk      A6
00003236  4E75      5500          rts
                    5501   ; }
                    5502   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5503   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5504   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5505   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5506   ; {
                    5507   _DecodeBWLDataAfterOpCodeForMove:
00003238  4E56 0000 5508          link      A6,#0
0000323C  48E7 3030 5509          movem.l   D2/D3/A2/A3,-(A7)
00003240  242E 0008 5510          move.l    8(A6),D2
00003244  45F9 0B00 5511          lea       _TempString.L,A2
00003248  0546      
0000324A  47F9 0000 5512          lea       _sprintf.L,A3
0000324E  5A34      
                    5513   ; unsigned char OperandSize ;
                    5514   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
00003250  2042      5515          move.l    D2,A0
00003252  3010      5516          move.w    (A0),D0
00003254  E048      5517          lsr.w     #8,D0
00003256  E848      5518          lsr.w     #4,D0
00003258  C07C 0003 5519          and.w     #3,D0
0000325C  1600      5520          move.b    D0,D3
                    5521   ; InstructionSize += 1;
0000325E  52B9 0B00 5522          addq.l    #1,_InstructionSize.L
00003262  017E      
                    5523   ; if(OperandSize == (char)(1))                // #byte value
00003264  0C03 0001 5524          cmp.b     #1,D3
00003268  6620      5525          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5526   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
0000326A  2042      5527          move.l    D2,A0
0000326C  3228 0002 5528          move.w    2(A0),D1
00003270  C2BC 0000 5529          and.l     #65535,D1
00003274  FFFF      
00003276  2F01      5530          move.l    D1,-(A7)
00003278  4879 0000 5531          pea       @m68kde~1_173.L
0000327C  76D6      
0000327E  2F0A      5532          move.l    A2,-(A7)
00003280  4E93      5533          jsr       (A3)
00003282  DEFC 000C 5534          add.w     #12,A7
00003286  6000 0068 5535          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5536   DecodeBWLDataAfterOpCodeForMove_1:
                    5537   ; else if(OperandSize == (char)(3))          // #word value
0000328A  0C03 0003 5538          cmp.b     #3,D3
0000328E  6620      5539          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5540   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003290  2042      5541          move.l    D2,A0
00003292  3228 0002 5542          move.w    2(A0),D1
00003296  C2BC 0000 5543          and.l     #65535,D1
0000329A  FFFF      
0000329C  2F01      5544          move.l    D1,-(A7)
0000329E  4879 0000 5545          pea       @m68kde~1_173.L
000032A2  76D6      
000032A4  2F0A      5546          move.l    A2,-(A7)
000032A6  4E93      5547          jsr       (A3)
000032A8  DEFC 000C 5548          add.w     #12,A7
000032AC  6000 0042 5549          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5550   DecodeBWLDataAfterOpCodeForMove_3:
                    5551   ; else if(OperandSize == (char)(2)) {                                       // long value
000032B0  0C03 0002 5552          cmp.b     #2,D3
000032B4  6600 003A 5553          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5554   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
000032B8  2042      5555          move.l    D2,A0
000032BA  3228 0002 5556          move.w    2(A0),D1
000032BE  C2BC 0000 5557          and.l     #65535,D1
000032C2  FFFF      
000032C4  E189      5558          lsl.l     #8,D1
000032C6  E189      5559          lsl.l     #8,D1
000032C8  2042      5560          move.l    D2,A0
000032CA  2F00      5561          move.l    D0,-(A7)
000032CC  3028 0004 5562          move.w    4(A0),D0
000032D0  C0BC 0000 5563          and.l     #65535,D0
000032D4  FFFF      
000032D6  8280      5564          or.l      D0,D1
000032D8  201F      5565          move.l    (A7)+,D0
000032DA  2F01      5566          move.l    D1,-(A7)
000032DC  4879 0000 5567          pea       @m68kde~1_173.L
000032E0  76D6      
000032E2  2F0A      5568          move.l    A2,-(A7)
000032E4  4E93      5569          jsr       (A3)
000032E6  DEFC 000C 5570          add.w     #12,A7
                    5571   ; InstructionSize += 1;
000032EA  52B9 0B00 5572          addq.l    #1,_InstructionSize.L
000032EE  017E      
                    5573   DecodeBWLDataAfterOpCodeForMove_5:
                    5574   ; }
                    5575   ; strcatInstruction(TempString) ;
000032F0  2F0A      5576          move.l    A2,-(A7)
000032F2  4EB8 0CCC 5577          jsr       _strcatInstruction
000032F6  584F      5578          addq.w    #4,A7
000032F8  4CDF 0C0C 5579          movem.l   (A7)+,D2/D3/A2/A3
000032FC  4E5E      5580          unlk      A6
000032FE  4E75      5581          rts
                    5582   ; }
                    5583   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5584   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5585   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5586   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5587   ; {
                    5588   _DecodeBWLDataAfterOpCode:
00003300  4E56 0000 5589          link      A6,#0
00003304  48E7 3038 5590          movem.l   D2/D3/A2/A3/A4,-(A7)
00003308  262E 0008 5591          move.l    8(A6),D3
0000330C  45F9 0B00 5592          lea       _TempString.L,A2
00003310  0546      
00003312  47F9 0000 5593          lea       _sprintf.L,A3
00003316  5A34      
00003318  49F9 0B00 5594          lea       _InstructionSize.L,A4
0000331C  017E      
                    5595   ; unsigned char OperandSize ;
                    5596   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
0000331E  2043      5597          move.l    D3,A0
00003320  3010      5598          move.w    (A0),D0
00003322  C07C 01C0 5599          and.w     #448,D0
00003326  EC48      5600          lsr.w     #6,D0
00003328  1400      5601          move.b    D0,D2
                    5602   ; InstructionSize += 1;
0000332A  5294      5603          addq.l    #1,(A4)
                    5604   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
0000332C  4A02      5605          tst.b     D2
0000332E  6706      5606          beq.s     DecodeBWLDataAfterOpCode_3
00003330  0C02 0004 5607          cmp.b     #4,D2
00003334  6620      5608          bne.s     DecodeBWLDataAfterOpCode_1
                    5609   DecodeBWLDataAfterOpCode_3:
                    5610   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003336  2043      5611          move.l    D3,A0
00003338  3228 0002 5612          move.w    2(A0),D1
0000333C  C2BC 0000 5613          and.l     #65535,D1
00003340  FFFF      
00003342  2F01      5614          move.l    D1,-(A7)
00003344  4879 0000 5615          pea       @m68kde~1_173.L
00003348  76D6      
0000334A  2F0A      5616          move.l    A2,-(A7)
0000334C  4E93      5617          jsr       (A3)
0000334E  DEFC 000C 5618          add.w     #12,A7
00003352  6000 007C 5619          bra       DecodeBWLDataAfterOpCode_7
                    5620   DecodeBWLDataAfterOpCode_1:
                    5621   ; // #word value 7 is used by divs.w instruction (not divu)
                    5622   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5623   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5624   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00003356  0C02 0001 5625          cmp.b     #1,D2
0000335A  670C      5626          beq.s     DecodeBWLDataAfterOpCode_6
0000335C  0C02 0005 5627          cmp.b     #5,D2
00003360  6706      5628          beq.s     DecodeBWLDataAfterOpCode_6
00003362  0C02 0003 5629          cmp.b     #3,D2
00003366  6620      5630          bne.s     DecodeBWLDataAfterOpCode_4
                    5631   DecodeBWLDataAfterOpCode_6:
                    5632   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003368  2043      5633          move.l    D3,A0
0000336A  3228 0002 5634          move.w    2(A0),D1
0000336E  C2BC 0000 5635          and.l     #65535,D1
00003372  FFFF      
00003374  2F01      5636          move.l    D1,-(A7)
00003376  4879 0000 5637          pea       @m68kde~1_173.L
0000337A  76D6      
0000337C  2F0A      5638          move.l    A2,-(A7)
0000337E  4E93      5639          jsr       (A3)
00003380  DEFC 000C 5640          add.w     #12,A7
00003384  6000 004A 5641          bra       DecodeBWLDataAfterOpCode_7
                    5642   DecodeBWLDataAfterOpCode_4:
                    5643   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00003388  0C02 0002 5644          cmp.b     #2,D2
0000338C  670E      5645          beq.s     DecodeBWLDataAfterOpCode_9
0000338E  0C02 0006 5646          cmp.b     #6,D2
00003392  6708      5647          beq.s     DecodeBWLDataAfterOpCode_9
00003394  0C02 0007 5648          cmp.b     #7,D2
00003398  6600 0036 5649          bne       DecodeBWLDataAfterOpCode_7
                    5650   DecodeBWLDataAfterOpCode_9:
                    5651   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
0000339C  2043      5652          move.l    D3,A0
0000339E  3228 0002 5653          move.w    2(A0),D1
000033A2  C2BC 0000 5654          and.l     #65535,D1
000033A6  FFFF      
000033A8  E189      5655          lsl.l     #8,D1
000033AA  E189      5656          lsl.l     #8,D1
000033AC  2043      5657          move.l    D3,A0
000033AE  2F00      5658          move.l    D0,-(A7)
000033B0  3028 0004 5659          move.w    4(A0),D0
000033B4  C0BC 0000 5660          and.l     #65535,D0
000033B8  FFFF      
000033BA  8280      5661          or.l      D0,D1
000033BC  201F      5662          move.l    (A7)+,D0
000033BE  2F01      5663          move.l    D1,-(A7)
000033C0  4879 0000 5664          pea       @m68kde~1_173.L
000033C4  76D6      
000033C6  2F0A      5665          move.l    A2,-(A7)
000033C8  4E93      5666          jsr       (A3)
000033CA  DEFC 000C 5667          add.w     #12,A7
                    5668   ; InstructionSize += 1;
000033CE  5294      5669          addq.l    #1,(A4)
                    5670   DecodeBWLDataAfterOpCode_7:
                    5671   ; }
                    5672   ; // special case for divs - bugger!!!
                    5673   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
000033D0  2043      5674          move.l    D3,A0
000033D2  3010      5675          move.w    (A0),D0
000033D4  C07C F1C0 5676          and.w     #61888,D0
000033D8  0C40 81C0 5677          cmp.w     #33216,D0
000033DC  6622      5678          bne.s     DecodeBWLDataAfterOpCode_10
                    5679   ; {
                    5680   ; InstructionSize = 2 ;
000033DE  28BC 0000 5681          move.l    #2,(A4)
000033E2  0002      
                    5682   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000033E4  2043      5683          move.l    D3,A0
000033E6  3228 0002 5684          move.w    2(A0),D1
000033EA  C2BC 0000 5685          and.l     #65535,D1
000033EE  FFFF      
000033F0  2F01      5686          move.l    D1,-(A7)
000033F2  4879 0000 5687          pea       @m68kde~1_173.L
000033F6  76D6      
000033F8  2F0A      5688          move.l    A2,-(A7)
000033FA  4E93      5689          jsr       (A3)
000033FC  DEFC 000C 5690          add.w     #12,A7
                    5691   DecodeBWLDataAfterOpCode_10:
                    5692   ; }
                    5693   ; strcatInstruction(TempString) ;
00003400  2F0A      5694          move.l    A2,-(A7)
00003402  4EB8 0CCC 5695          jsr       _strcatInstruction
00003406  584F      5696          addq.w    #4,A7
00003408  4CDF 1C0C 5697          movem.l   (A7)+,D2/D3/A2/A3/A4
0000340C  4E5E      5698          unlk      A6
0000340E  4E75      5699          rts
                    5700   ; }
                    5701   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5702   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5703   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5704   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5705   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5706   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5707   ; {
                    5708   _Decode6BitEA:
00003410  4E56 FFF4 5709          link      A6,#-12
00003414  48E7 3F3C 5710          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003418  45F8 0CCC 5711          lea       _strcatInstruction.L,A2
0000341C  47F9 0B00 5712          lea       _TempString.L,A3
00003420  0546      
00003422  282E 0008 5713          move.l    8(A6),D4
00003426  49F9 0000 5714          lea       _sprintf.L,A4
0000342A  5A34      
0000342C  4BF9 0B00 5715          lea       _InstructionSize.L,A5
00003430  017E      
00003432  3C2E 0012 5716          move.w    18(A6),D6
00003436  CCBC 0000 5717          and.l     #65535,D6
0000343A  FFFF      
                    5718   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5719   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5720   ; unsigned char RegNumber[3];
                    5721   ; signed char offset ;
                    5722   ; unsigned short int Xn, XnSize ;
                    5723   ; if(EAChoice == 0)   {   // if EA in bits 5-0
0000343C  202E 000C 5724          move.l    12(A6),D0
00003440  6620      5725          bne.s     Decode6BitEA_1
                    5726   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
00003442  2044      5727          move.l    D4,A0
00003444  3010      5728          move.w    (A0),D0
00003446  E648      5729          lsr.w     #3,D0
00003448  C07C 00FF 5730          and.w     #255,D0
0000344C  C07C 0007 5731          and.w     #7,D0
00003450  1A00      5732          move.b    D0,D5
                    5733   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
00003452  2044      5734          move.l    D4,A0
00003454  3010      5735          move.w    (A0),D0
00003456  C07C 00FF 5736          and.w     #255,D0
0000345A  C07C 0007 5737          and.w     #7,D0
0000345E  1600      5738          move.b    D0,D3
00003460  6022      5739          bra.s     Decode6BitEA_2
                    5740   Decode6BitEA_1:
                    5741   ; }
                    5742   ; else    {               // else EA in bits 11-6
                    5743   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
00003462  2044      5744          move.l    D4,A0
00003464  3010      5745          move.w    (A0),D0
00003466  EC48      5746          lsr.w     #6,D0
00003468  C07C 00FF 5747          and.w     #255,D0
0000346C  C07C 0007 5748          and.w     #7,D0
00003470  1A00      5749          move.b    D0,D5
                    5750   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00003472  2044      5751          move.l    D4,A0
00003474  3010      5752          move.w    (A0),D0
00003476  E048      5753          lsr.w     #8,D0
00003478  E248      5754          lsr.w     #1,D0
0000347A  C07C 00FF 5755          and.w     #255,D0
0000347E  C07C 0007 5756          and.w     #7,D0
00003482  1600      5757          move.b    D0,D3
                    5758   Decode6BitEA_2:
                    5759   ; }
                    5760   ; if(EAChoice == 0)    {
00003484  202E 000C 5761          move.l    12(A6),D0
00003488  6600 0034 5762          bne       Decode6BitEA_3
                    5763   ; ExWord1 = OpCode[1+DataSize] ;
0000348C  2044      5764          move.l    D4,A0
0000348E  7001      5765          moveq     #1,D0
00003490  4880      5766          ext.w     D0
00003492  48C0      5767          ext.l     D0
00003494  CCBC 0000 5768          and.l     #65535,D6
00003498  FFFF      
0000349A  D086      5769          add.l     D6,D0
0000349C  E388      5770          lsl.l     #1,D0
0000349E  3430 0800 5771          move.w    0(A0,D0.L),D2
                    5772   ; ExWord2 = OpCode[2+DataSize] ;
000034A2  2044      5773          move.l    D4,A0
000034A4  7002      5774          moveq     #2,D0
000034A6  4880      5775          ext.w     D0
000034A8  48C0      5776          ext.l     D0
000034AA  CCBC 0000 5777          and.l     #65535,D6
000034AE  FFFF      
000034B0  D086      5778          add.l     D6,D0
000034B2  E388      5779          lsl.l     #1,D0
000034B4  3D70 0800 5780          move.w    0(A0,D0.L),-8(A6)
000034B8  FFF8      
000034BA  6000 007E 5781          bra       Decode6BitEA_7
                    5782   Decode6BitEA_3:
                    5783   ; }
                    5784   ; else if(EAChoice == 1)   {
000034BE  202E 000C 5785          move.l    12(A6),D0
000034C2  0C80 0000 5786          cmp.l     #1,D0
000034C6  0001      
000034C8  6600 0034 5787          bne       Decode6BitEA_5
                    5788   ; ExWord1 = OpCode[3+DataSize] ;
000034CC  2044      5789          move.l    D4,A0
000034CE  7003      5790          moveq     #3,D0
000034D0  4880      5791          ext.w     D0
000034D2  48C0      5792          ext.l     D0
000034D4  CCBC 0000 5793          and.l     #65535,D6
000034D8  FFFF      
000034DA  D086      5794          add.l     D6,D0
000034DC  E388      5795          lsl.l     #1,D0
000034DE  3430 0800 5796          move.w    0(A0,D0.L),D2
                    5797   ; ExWord2 = OpCode[4+DataSize] ;
000034E2  2044      5798          move.l    D4,A0
000034E4  7004      5799          moveq     #4,D0
000034E6  4880      5800          ext.w     D0
000034E8  48C0      5801          ext.l     D0
000034EA  CCBC 0000 5802          and.l     #65535,D6
000034EE  FFFF      
000034F0  D086      5803          add.l     D6,D0
000034F2  E388      5804          lsl.l     #1,D0
000034F4  3D70 0800 5805          move.w    0(A0,D0.L),-8(A6)
000034F8  FFF8      
000034FA  6000 003E 5806          bra       Decode6BitEA_7
                    5807   Decode6BitEA_5:
                    5808   ; }
                    5809   ; else if(EAChoice == 2)   {  // for move instruction
000034FE  202E 000C 5810          move.l    12(A6),D0
00003502  0C80 0000 5811          cmp.l     #2,D0
00003506  0002      
00003508  6600 0030 5812          bne       Decode6BitEA_7
                    5813   ; ExWord1 = OpCode[1+DataSize] ;
0000350C  2044      5814          move.l    D4,A0
0000350E  7001      5815          moveq     #1,D0
00003510  4880      5816          ext.w     D0
00003512  48C0      5817          ext.l     D0
00003514  CCBC 0000 5818          and.l     #65535,D6
00003518  FFFF      
0000351A  D086      5819          add.l     D6,D0
0000351C  E388      5820          lsl.l     #1,D0
0000351E  3430 0800 5821          move.w    0(A0,D0.L),D2
                    5822   ; ExWord2 = OpCode[2+DataSize] ;
00003522  2044      5823          move.l    D4,A0
00003524  7002      5824          moveq     #2,D0
00003526  4880      5825          ext.w     D0
00003528  48C0      5826          ext.l     D0
0000352A  CCBC 0000 5827          and.l     #65535,D6
0000352E  FFFF      
00003530  D086      5828          add.l     D6,D0
00003532  E388      5829          lsl.l     #1,D0
00003534  3D70 0800 5830          move.w    0(A0,D0.L),-8(A6)
00003538  FFF8      
                    5831   Decode6BitEA_7:
                    5832   ; }
                    5833   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
0000353A  4A05      5834          tst.b     D5
0000353C  661E      5835          bne.s     Decode6BitEA_9
                    5836   ; RegNumber[0] = 'D' ;
0000353E  1D7C 0044 5837          move.b    #68,-6+0(A6)
00003542  FFFA      
                    5838   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
00003544  7030      5839          moveq     #48,D0
00003546  D003      5840          add.b     D3,D0
00003548  1D40 FFFB 5841          move.b    D0,-6+1(A6)
                    5842   ; RegNumber[2] = 0 ;
0000354C  422E FFFC 5843          clr.b     -6+2(A6)
                    5844   ; strcatInstruction(RegNumber) ;
00003550  486E FFFA 5845          pea       -6(A6)
00003554  4E92      5846          jsr       (A2)
00003556  584F      5847          addq.w    #4,A7
00003558  6000 02D6 5848          bra       Decode6BitEA_44
                    5849   Decode6BitEA_9:
                    5850   ; }
                    5851   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
0000355C  0C05 0001 5852          cmp.b     #1,D5
00003560  6616      5853          bne.s     Decode6BitEA_11
                    5854   ; Decode3BitAddressRegister(OperandRegister) ;
00003562  C67C 00FF 5855          and.w     #255,D3
00003566  C6BC 0000 5856          and.l     #65535,D3
0000356A  FFFF      
0000356C  2F03      5857          move.l    D3,-(A7)
0000356E  4EB8 320C 5858          jsr       _Decode3BitAddressRegister
00003572  584F      5859          addq.w    #4,A7
00003574  6000 02BA 5860          bra       Decode6BitEA_44
                    5861   Decode6BitEA_11:
                    5862   ; }
                    5863   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
00003578  0C05 0002 5864          cmp.b     #2,D5
0000357C  662A      5865          bne.s     Decode6BitEA_13
                    5866   ; strcatInstruction("(") ;
0000357E  4879 0000 5867          pea       @m68kde~1_174.L
00003582  76DC      
00003584  4E92      5868          jsr       (A2)
00003586  584F      5869          addq.w    #4,A7
                    5870   ; Decode3BitAddressRegister(OperandRegister) ;
00003588  C67C 00FF 5871          and.w     #255,D3
0000358C  C6BC 0000 5872          and.l     #65535,D3
00003590  FFFF      
00003592  2F03      5873          move.l    D3,-(A7)
00003594  4EB8 320C 5874          jsr       _Decode3BitAddressRegister
00003598  584F      5875          addq.w    #4,A7
                    5876   ; strcatInstruction(")") ;
0000359A  4879 0000 5877          pea       @m68kde~1_175.L
0000359E  76DE      
000035A0  4E92      5878          jsr       (A2)
000035A2  584F      5879          addq.w    #4,A7
000035A4  6000 028A 5880          bra       Decode6BitEA_44
                    5881   Decode6BitEA_13:
                    5882   ; }
                    5883   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
000035A8  0C05 0003 5884          cmp.b     #3,D5
000035AC  662A      5885          bne.s     Decode6BitEA_15
                    5886   ; strcatInstruction("(") ;
000035AE  4879 0000 5887          pea       @m68kde~1_174.L
000035B2  76DC      
000035B4  4E92      5888          jsr       (A2)
000035B6  584F      5889          addq.w    #4,A7
                    5890   ; Decode3BitAddressRegister(OperandRegister) ;
000035B8  C67C 00FF 5891          and.w     #255,D3
000035BC  C6BC 0000 5892          and.l     #65535,D3
000035C0  FFFF      
000035C2  2F03      5893          move.l    D3,-(A7)
000035C4  4EB8 320C 5894          jsr       _Decode3BitAddressRegister
000035C8  584F      5895          addq.w    #4,A7
                    5896   ; strcatInstruction(")+") ;
000035CA  4879 0000 5897          pea       @m68kde~1_176.L
000035CE  76E0      
000035D0  4E92      5898          jsr       (A2)
000035D2  584F      5899          addq.w    #4,A7
000035D4  6000 025A 5900          bra       Decode6BitEA_44
                    5901   Decode6BitEA_15:
                    5902   ; }
                    5903   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
000035D8  0C05 0004 5904          cmp.b     #4,D5
000035DC  662A      5905          bne.s     Decode6BitEA_17
                    5906   ; strcatInstruction("-(") ;
000035DE  4879 0000 5907          pea       @m68kde~1_177.L
000035E2  76E4      
000035E4  4E92      5908          jsr       (A2)
000035E6  584F      5909          addq.w    #4,A7
                    5910   ; Decode3BitAddressRegister(OperandRegister) ;
000035E8  C67C 00FF 5911          and.w     #255,D3
000035EC  C6BC 0000 5912          and.l     #65535,D3
000035F0  FFFF      
000035F2  2F03      5913          move.l    D3,-(A7)
000035F4  4EB8 320C 5914          jsr       _Decode3BitAddressRegister
000035F8  584F      5915          addq.w    #4,A7
                    5916   ; strcatInstruction(")") ;
000035FA  4879 0000 5917          pea       @m68kde~1_175.L
000035FE  76DE      
00003600  4E92      5918          jsr       (A2)
00003602  584F      5919          addq.w    #4,A7
00003604  6000 022A 5920          bra       Decode6BitEA_44
                    5921   Decode6BitEA_17:
                    5922   ; }
                    5923   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
00003608  0C05 0005 5924          cmp.b     #5,D5
0000360C  6626      5925          bne.s     Decode6BitEA_19
                    5926   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
0000360E  C6BC 0000 5927          and.l     #255,D3
00003612  00FF      
00003614  2F03      5928          move.l    D3,-(A7)
00003616  48C2      5929          ext.l     D2
00003618  2F02      5930          move.l    D2,-(A7)
0000361A  4879 0000 5931          pea       @m68kde~1_178.L
0000361E  76E8      
00003620  2F0B      5932          move.l    A3,-(A7)
00003622  4E94      5933          jsr       (A4)
00003624  DEFC 0010 5934          add.w     #16,A7
                    5935   ; strcatInstruction(TempString) ;
00003628  2F0B      5936          move.l    A3,-(A7)
0000362A  4E92      5937          jsr       (A2)
0000362C  584F      5938          addq.w    #4,A7
                    5939   ; InstructionSize += 1;
0000362E  5295      5940          addq.l    #1,(A5)
00003630  6000 01FE 5941          bra       Decode6BitEA_44
                    5942   Decode6BitEA_19:
                    5943   ; }
                    5944   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
00003634  0C05 0006 5945          cmp.b     #6,D5
00003638  6600 00AA 5946          bne       Decode6BitEA_21
                    5947   ; offset = ExWord1 & (short int)(0x00FF);
0000363C  3002      5948          move.w    D2,D0
0000363E  C07C 00FF 5949          and.w     #255,D0
00003642  1D40 FFFD 5950          move.b    D0,-3(A6)
                    5951   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
00003646  C6BC 0000 5952          and.l     #255,D3
0000364A  00FF      
0000364C  2F03      5953          move.l    D3,-(A7)
0000364E  122E FFFD 5954          move.b    -3(A6),D1
00003652  4881      5955          ext.w     D1
00003654  48C1      5956          ext.l     D1
00003656  2F01      5957          move.l    D1,-(A7)
00003658  4879 0000 5958          pea       @m68kde~1_179.L
0000365C  76F0      
0000365E  2F0B      5959          move.l    A3,-(A7)
00003660  4E94      5960          jsr       (A4)
00003662  DEFC 0010 5961          add.w     #16,A7
                    5962   ; strcatInstruction(TempString) ;
00003666  2F0B      5963          move.l    A3,-(A7)
00003668  4E92      5964          jsr       (A2)
0000366A  584F      5965          addq.w    #4,A7
                    5966   ; InstructionSize += 1;
0000366C  5295      5967          addq.l    #1,(A5)
                    5968   ; // decode the Xn bit
                    5969   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000366E  3002      5970          move.w    D2,D0
00003670  C07C 8000 5971          and.w     #32768,D0
00003674  660C      5972          bne.s     Decode6BitEA_23
                    5973   ; strcatInstruction("D") ;
00003676  4879 0000 5974          pea       @m68kde~1_180.L
0000367A  76F8      
0000367C  4E92      5975          jsr       (A2)
0000367E  584F      5976          addq.w    #4,A7
00003680  600A      5977          bra.s     Decode6BitEA_24
                    5978   Decode6BitEA_23:
                    5979   ; else
                    5980   ; strcatInstruction("A") ;
00003682  4879 0000 5981          pea       @m68kde~1_181.L
00003686  76FA      
00003688  4E92      5982          jsr       (A2)
0000368A  584F      5983          addq.w    #4,A7
                    5984   Decode6BitEA_24:
                    5985   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000368C  3002      5986          move.w    D2,D0
0000368E  C07C 7000 5987          and.w     #28672,D0
00003692  E048      5988          lsr.w     #8,D0
00003694  E848      5989          lsr.w     #4,D0
00003696  3D40 FFFE 5990          move.w    D0,-2(A6)
                    5991   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
0000369A  322E FFFE 5992          move.w    -2(A6),D1
0000369E  C2BC 0000 5993          and.l     #65535,D1
000036A2  FFFF      
000036A4  2F01      5994          move.l    D1,-(A7)
000036A6  4879 0000 5995          pea       @m68kde~1_182.L
000036AA  76FC      
000036AC  2F0B      5996          move.l    A3,-(A7)
000036AE  4E94      5997          jsr       (A4)
000036B0  DEFC 000C 5998          add.w     #12,A7
                    5999   ; strcatInstruction(TempString) ;
000036B4  2F0B      6000          move.l    A3,-(A7)
000036B6  4E92      6001          jsr       (A2)
000036B8  584F      6002          addq.w    #4,A7
                    6003   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000036BA  3002      6004          move.w    D2,D0
000036BC  C07C 0800 6005          and.w     #2048,D0
000036C0  E048      6006          lsr.w     #8,D0
000036C2  E648      6007          lsr.w     #3,D0
000036C4  3E00      6008          move.w    D0,D7
                    6009   ; if(XnSize == 0)
000036C6  4A47      6010          tst.w     D7
000036C8  660C      6011          bne.s     Decode6BitEA_25
                    6012   ; strcatInstruction(".W)") ;
000036CA  4879 0000 6013          pea       @m68kde~1_183.L
000036CE  7700      
000036D0  4E92      6014          jsr       (A2)
000036D2  584F      6015          addq.w    #4,A7
000036D4  600A      6016          bra.s     Decode6BitEA_26
                    6017   Decode6BitEA_25:
                    6018   ; else
                    6019   ; strcatInstruction(".L)") ;
000036D6  4879 0000 6020          pea       @m68kde~1_184.L
000036DA  7704      
000036DC  4E92      6021          jsr       (A2)
000036DE  584F      6022          addq.w    #4,A7
                    6023   Decode6BitEA_26:
000036E0  6000 014E 6024          bra       Decode6BitEA_44
                    6025   Decode6BitEA_21:
                    6026   ; }
                    6027   ; else if(OperandMode == (unsigned char)(7)) {
000036E4  0C05 0007 6028          cmp.b     #7,D5
000036E8  6600 0146 6029          bne       Decode6BitEA_44
                    6030   ; if(OperandRegister == 0) {                               // EA = (xxx).W
000036EC  4A03      6031          tst.b     D3
000036EE  661E      6032          bne.s     Decode6BitEA_29
                    6033   ; sprintf(TempString, "$%X", ExWord1) ;
000036F0  48C2      6034          ext.l     D2
000036F2  2F02      6035          move.l    D2,-(A7)
000036F4  4879 0000 6036          pea       @m68kde~1_185.L
000036F8  7708      
000036FA  2F0B      6037          move.l    A3,-(A7)
000036FC  4E94      6038          jsr       (A4)
000036FE  DEFC 000C 6039          add.w     #12,A7
                    6040   ; strcatInstruction(TempString) ;
00003702  2F0B      6041          move.l    A3,-(A7)
00003704  4E92      6042          jsr       (A2)
00003706  584F      6043          addq.w    #4,A7
                    6044   ; InstructionSize += 1;
00003708  5295      6045          addq.l    #1,(A5)
0000370A  6000 0124 6046          bra       Decode6BitEA_44
                    6047   Decode6BitEA_29:
                    6048   ; }
                    6049   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
0000370E  0C03 0001 6050          cmp.b     #1,D3
00003712  6600 0032 6051          bne       Decode6BitEA_31
                    6052   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
00003716  3202      6053          move.w    D2,D1
00003718  48C1      6054          ext.l     D1
0000371A  E189      6055          lsl.l     #8,D1
0000371C  E189      6056          lsl.l     #8,D1
0000371E  2F00      6057          move.l    D0,-(A7)
00003720  302E FFF8 6058          move.w    -8(A6),D0
00003724  48C0      6059          ext.l     D0
00003726  8280      6060          or.l      D0,D1
00003728  201F      6061          move.l    (A7)+,D0
0000372A  2F01      6062          move.l    D1,-(A7)
0000372C  4879 0000 6063          pea       @m68kde~1_185.L
00003730  7708      
00003732  2F0B      6064          move.l    A3,-(A7)
00003734  4E94      6065          jsr       (A4)
00003736  DEFC 000C 6066          add.w     #12,A7
                    6067   ; strcatInstruction(TempString) ;
0000373A  2F0B      6068          move.l    A3,-(A7)
0000373C  4E92      6069          jsr       (A2)
0000373E  584F      6070          addq.w    #4,A7
                    6071   ; InstructionSize += 2;
00003740  5495      6072          addq.l    #2,(A5)
00003742  6000 00EC 6073          bra       Decode6BitEA_44
                    6074   Decode6BitEA_31:
                    6075   ; }
                    6076   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
00003746  0C03 0004 6077          cmp.b     #4,D3
0000374A  661C      6078          bne.s     Decode6BitEA_33
                    6079   ; if(IsItMoveInstruction == 0)        //not move instruction
0000374C  302E 0016 6080          move.w    22(A6),D0
00003750  660A      6081          bne.s     Decode6BitEA_35
                    6082   ; DecodeBWLDataAfterOpCode(OpCode);
00003752  2F04      6083          move.l    D4,-(A7)
00003754  4EB8 3300 6084          jsr       _DecodeBWLDataAfterOpCode
00003758  584F      6085          addq.w    #4,A7
0000375A  6008      6086          bra.s     Decode6BitEA_36
                    6087   Decode6BitEA_35:
                    6088   ; else
                    6089   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
0000375C  2F04      6090          move.l    D4,-(A7)
0000375E  4EB8 3238 6091          jsr       _DecodeBWLDataAfterOpCodeForMove
00003762  584F      6092          addq.w    #4,A7
                    6093   Decode6BitEA_36:
00003764  6000 00CA 6094          bra       Decode6BitEA_44
                    6095   Decode6BitEA_33:
                    6096   ; }
                    6097   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
00003768  0C03 0002 6098          cmp.b     #2,D3
0000376C  661E      6099          bne.s     Decode6BitEA_37
                    6100   ; sprintf(TempString, "%d(PC)", ExWord1) ;
0000376E  48C2      6101          ext.l     D2
00003770  2F02      6102          move.l    D2,-(A7)
00003772  4879 0000 6103          pea       @m68kde~1_186.L
00003776  770C      
00003778  2F0B      6104          move.l    A3,-(A7)
0000377A  4E94      6105          jsr       (A4)
0000377C  DEFC 000C 6106          add.w     #12,A7
                    6107   ; strcatInstruction(TempString) ;
00003780  2F0B      6108          move.l    A3,-(A7)
00003782  4E92      6109          jsr       (A2)
00003784  584F      6110          addq.w    #4,A7
                    6111   ; InstructionSize += 1;
00003786  5295      6112          addq.l    #1,(A5)
00003788  6000 00A6 6113          bra       Decode6BitEA_44
                    6114   Decode6BitEA_37:
                    6115   ; }
                    6116   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
0000378C  0C03 0003 6117          cmp.b     #3,D3
00003790  6600 009E 6118          bne       Decode6BitEA_44
                    6119   ; offset = ExWord1 & (short int)(0x00FF);
00003794  3002      6120          move.w    D2,D0
00003796  C07C 00FF 6121          and.w     #255,D0
0000379A  1D40 FFFD 6122          move.b    D0,-3(A6)
                    6123   ; sprintf(TempString, "%d(PC,", offset ) ;
0000379E  122E FFFD 6124          move.b    -3(A6),D1
000037A2  4881      6125          ext.w     D1
000037A4  48C1      6126          ext.l     D1
000037A6  2F01      6127          move.l    D1,-(A7)
000037A8  4879 0000 6128          pea       @m68kde~1_187.L
000037AC  7714      
000037AE  2F0B      6129          move.l    A3,-(A7)
000037B0  4E94      6130          jsr       (A4)
000037B2  DEFC 000C 6131          add.w     #12,A7
                    6132   ; strcatInstruction(TempString) ;
000037B6  2F0B      6133          move.l    A3,-(A7)
000037B8  4E92      6134          jsr       (A2)
000037BA  584F      6135          addq.w    #4,A7
                    6136   ; InstructionSize += 1;
000037BC  5295      6137          addq.l    #1,(A5)
                    6138   ; // decode the Xn bit
                    6139   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
000037BE  3002      6140          move.w    D2,D0
000037C0  C07C 8000 6141          and.w     #32768,D0
000037C4  660C      6142          bne.s     Decode6BitEA_41
                    6143   ; strcatInstruction("D") ;
000037C6  4879 0000 6144          pea       @m68kde~1_180.L
000037CA  76F8      
000037CC  4E92      6145          jsr       (A2)
000037CE  584F      6146          addq.w    #4,A7
000037D0  600A      6147          bra.s     Decode6BitEA_42
                    6148   Decode6BitEA_41:
                    6149   ; else
                    6150   ; strcatInstruction("A") ;
000037D2  4879 0000 6151          pea       @m68kde~1_181.L
000037D6  76FA      
000037D8  4E92      6152          jsr       (A2)
000037DA  584F      6153          addq.w    #4,A7
                    6154   Decode6BitEA_42:
                    6155   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
000037DC  3002      6156          move.w    D2,D0
000037DE  C07C 7000 6157          and.w     #28672,D0
000037E2  E048      6158          lsr.w     #8,D0
000037E4  E848      6159          lsr.w     #4,D0
000037E6  3D40 FFFE 6160          move.w    D0,-2(A6)
                    6161   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000037EA  322E FFFE 6162          move.w    -2(A6),D1
000037EE  C2BC 0000 6163          and.l     #65535,D1
000037F2  FFFF      
000037F4  2F01      6164          move.l    D1,-(A7)
000037F6  4879 0000 6165          pea       @m68kde~1_182.L
000037FA  76FC      
000037FC  2F0B      6166          move.l    A3,-(A7)
000037FE  4E94      6167          jsr       (A4)
00003800  DEFC 000C 6168          add.w     #12,A7
                    6169   ; strcatInstruction(TempString) ;
00003804  2F0B      6170          move.l    A3,-(A7)
00003806  4E92      6171          jsr       (A2)
00003808  584F      6172          addq.w    #4,A7
                    6173   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
0000380A  3002      6174          move.w    D2,D0
0000380C  C07C 0800 6175          and.w     #2048,D0
00003810  E048      6176          lsr.w     #8,D0
00003812  E648      6177          lsr.w     #3,D0
00003814  3E00      6178          move.w    D0,D7
                    6179   ; if(XnSize == 0)
00003816  4A47      6180          tst.w     D7
00003818  660C      6181          bne.s     Decode6BitEA_43
                    6182   ; strcatInstruction(".W)") ;
0000381A  4879 0000 6183          pea       @m68kde~1_183.L
0000381E  7700      
00003820  4E92      6184          jsr       (A2)
00003822  584F      6185          addq.w    #4,A7
00003824  600A      6186          bra.s     Decode6BitEA_44
                    6187   Decode6BitEA_43:
                    6188   ; else
                    6189   ; strcatInstruction(".L)") ;
00003826  4879 0000 6190          pea       @m68kde~1_184.L
0000382A  7704      
0000382C  4E92      6191          jsr       (A2)
0000382E  584F      6192          addq.w    #4,A7
                    6193   Decode6BitEA_44:
00003830  4CDF 3CFC 6194          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003834  4E5E      6195          unlk      A6
00003836  4E75      6196          rts
                    6197   ; }
                    6198   ; }
                    6199   ; }
                    6200   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    6201   ; {
                    6202   _Decode3BitOperandMode:
00003838  4E56 FFFC 6203          link      A6,#-4
0000383C  2F02      6204          move.l    D2,-(A7)
0000383E  242E 0008 6205          move.l    8(A6),D2
                    6206   ; unsigned short int OperandMode;
                    6207   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
00003842  2042      6208          move.l    D2,A0
00003844  3010      6209          move.w    (A0),D0
00003846  C07C 0100 6210          and.w     #256,D0
0000384A  E048      6211          lsr.w     #8,D0
0000384C  3D40 FFFE 6212          move.w    D0,-2(A6)
                    6213   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003850  2042      6214          move.l    D2,A0
00003852  3210      6215          move.w    (A0),D1
00003854  C2BC 0000 6216          and.l     #65535,D1
00003858  FFFF      
0000385A  2F01      6217          move.l    D1,-(A7)
0000385C  4EB8 317C 6218          jsr       _Decode2BitOperandSize
00003860  584F      6219          addq.w    #4,A7
                    6220   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
00003862  302E FFFE 6221          move.w    -2(A6),D0
00003866  6600 0032 6222          bne       Decode3BitOperandMode_1
                    6223   ; Decode6BitEA(OpCode,0,0,0) ;
0000386A  42A7      6224          clr.l     -(A7)
0000386C  42A7      6225          clr.l     -(A7)
0000386E  42A7      6226          clr.l     -(A7)
00003870  2F02      6227          move.l    D2,-(A7)
00003872  4EB8 3410 6228          jsr       _Decode6BitEA
00003876  DEFC 0010 6229          add.w     #16,A7
                    6230   ; strcatInstruction(",") ;
0000387A  4879 0000 6231          pea       @m68kde~1_188.L
0000387E  771C      
00003880  4EB8 0CCC 6232          jsr       _strcatInstruction
00003884  584F      6233          addq.w    #4,A7
                    6234   ; Decode3BitDataRegister(*OpCode) ;
00003886  2042      6235          move.l    D2,A0
00003888  3210      6236          move.w    (A0),D1
0000388A  C2BC 0000 6237          and.l     #65535,D1
0000388E  FFFF      
00003890  2F01      6238          move.l    D1,-(A7)
00003892  4EB8 31D8 6239          jsr       _Decode3BitDataRegister
00003896  584F      6240          addq.w    #4,A7
00003898  602E      6241          bra.s     Decode3BitOperandMode_2
                    6242   Decode3BitOperandMode_1:
                    6243   ; }
                    6244   ; else {                                                         // Destination is in EA
                    6245   ; Decode3BitDataRegister(*OpCode) ;
0000389A  2042      6246          move.l    D2,A0
0000389C  3210      6247          move.w    (A0),D1
0000389E  C2BC 0000 6248          and.l     #65535,D1
000038A2  FFFF      
000038A4  2F01      6249          move.l    D1,-(A7)
000038A6  4EB8 31D8 6250          jsr       _Decode3BitDataRegister
000038AA  584F      6251          addq.w    #4,A7
                    6252   ; strcatInstruction(",") ;
000038AC  4879 0000 6253          pea       @m68kde~1_188.L
000038B0  771C      
000038B2  4EB8 0CCC 6254          jsr       _strcatInstruction
000038B6  584F      6255          addq.w    #4,A7
                    6256   ; Decode6BitEA(OpCode,0,0,0) ;
000038B8  42A7      6257          clr.l     -(A7)
000038BA  42A7      6258          clr.l     -(A7)
000038BC  42A7      6259          clr.l     -(A7)
000038BE  2F02      6260          move.l    D2,-(A7)
000038C0  4EB8 3410 6261          jsr       _Decode6BitEA
000038C4  DEFC 0010 6262          add.w     #16,A7
                    6263   Decode3BitOperandMode_2:
000038C8  241F      6264          move.l    (A7)+,D2
000038CA  4E5E      6265          unlk      A6
000038CC  4E75      6266          rts
                    6267   ; }
                    6268   ; }
                    6269   ; void DecodeBranchCondition(unsigned short int Condition)
                    6270   ; {
                    6271   _DecodeBranchCondition:
000038CE  4E56 0000 6272          link      A6,#0
000038D2  48E7 2020 6273          movem.l   D2/A2,-(A7)
000038D6  45F8 0CCC 6274          lea       _strcatInstruction.L,A2
000038DA  342E 000A 6275          move.w    10(A6),D2
000038DE  C4BC 0000 6276          and.l     #65535,D2
000038E2  FFFF      
                    6277   ; if(Condition == (unsigned short int)(0x04))
000038E4  0C42 0004 6278          cmp.w     #4,D2
000038E8  660E      6279          bne.s     DecodeBranchCondition_1
                    6280   ; strcatInstruction("CC") ;
000038EA  4879 0000 6281          pea       @m68kde~1_189.L
000038EE  771E      
000038F0  4E92      6282          jsr       (A2)
000038F2  584F      6283          addq.w    #4,A7
000038F4  6000 011C 6284          bra       DecodeBranchCondition_30
                    6285   DecodeBranchCondition_1:
                    6286   ; else if(Condition == (unsigned short int)(0x05))
000038F8  0C42 0005 6287          cmp.w     #5,D2
000038FC  660E      6288          bne.s     DecodeBranchCondition_3
                    6289   ; strcatInstruction("CS") ;
000038FE  4879 0000 6290          pea       @m68kde~1_190.L
00003902  7722      
00003904  4E92      6291          jsr       (A2)
00003906  584F      6292          addq.w    #4,A7
00003908  6000 0108 6293          bra       DecodeBranchCondition_30
                    6294   DecodeBranchCondition_3:
                    6295   ; else if(Condition == (unsigned short int)(0x07))
0000390C  0C42 0007 6296          cmp.w     #7,D2
00003910  660E      6297          bne.s     DecodeBranchCondition_5
                    6298   ; strcatInstruction("EQ") ;
00003912  4879 0000 6299          pea       @m68kde~1_191.L
00003916  7726      
00003918  4E92      6300          jsr       (A2)
0000391A  584F      6301          addq.w    #4,A7
0000391C  6000 00F4 6302          bra       DecodeBranchCondition_30
                    6303   DecodeBranchCondition_5:
                    6304   ; else if(Condition == (unsigned short int)(0x0C))
00003920  0C42 000C 6305          cmp.w     #12,D2
00003924  660E      6306          bne.s     DecodeBranchCondition_7
                    6307   ; strcatInstruction("GE") ;
00003926  4879 0000 6308          pea       @m68kde~1_192.L
0000392A  772A      
0000392C  4E92      6309          jsr       (A2)
0000392E  584F      6310          addq.w    #4,A7
00003930  6000 00E0 6311          bra       DecodeBranchCondition_30
                    6312   DecodeBranchCondition_7:
                    6313   ; else if(Condition == (unsigned short int)(0x0E))
00003934  0C42 000E 6314          cmp.w     #14,D2
00003938  660E      6315          bne.s     DecodeBranchCondition_9
                    6316   ; strcatInstruction("GT") ;
0000393A  4879 0000 6317          pea       @m68kde~1_193.L
0000393E  772E      
00003940  4E92      6318          jsr       (A2)
00003942  584F      6319          addq.w    #4,A7
00003944  6000 00CC 6320          bra       DecodeBranchCondition_30
                    6321   DecodeBranchCondition_9:
                    6322   ; else if(Condition == (unsigned short int)(0x02))
00003948  0C42 0002 6323          cmp.w     #2,D2
0000394C  660E      6324          bne.s     DecodeBranchCondition_11
                    6325   ; strcatInstruction("HI") ;
0000394E  4879 0000 6326          pea       @m68kde~1_194.L
00003952  7732      
00003954  4E92      6327          jsr       (A2)
00003956  584F      6328          addq.w    #4,A7
00003958  6000 00B8 6329          bra       DecodeBranchCondition_30
                    6330   DecodeBranchCondition_11:
                    6331   ; else if(Condition == (unsigned short int)(0x0F))
0000395C  0C42 000F 6332          cmp.w     #15,D2
00003960  660E      6333          bne.s     DecodeBranchCondition_13
                    6334   ; strcatInstruction("LE") ;
00003962  4879 0000 6335          pea       @m68kde~1_195.L
00003966  7736      
00003968  4E92      6336          jsr       (A2)
0000396A  584F      6337          addq.w    #4,A7
0000396C  6000 00A4 6338          bra       DecodeBranchCondition_30
                    6339   DecodeBranchCondition_13:
                    6340   ; else if(Condition == (unsigned short int)(0x03))
00003970  0C42 0003 6341          cmp.w     #3,D2
00003974  660E      6342          bne.s     DecodeBranchCondition_15
                    6343   ; strcatInstruction("LS") ;
00003976  4879 0000 6344          pea       @m68kde~1_196.L
0000397A  773A      
0000397C  4E92      6345          jsr       (A2)
0000397E  584F      6346          addq.w    #4,A7
00003980  6000 0090 6347          bra       DecodeBranchCondition_30
                    6348   DecodeBranchCondition_15:
                    6349   ; else if(Condition == (unsigned short int)(0x0D))
00003984  0C42 000D 6350          cmp.w     #13,D2
00003988  660E      6351          bne.s     DecodeBranchCondition_17
                    6352   ; strcatInstruction("LT") ;
0000398A  4879 0000 6353          pea       @m68kde~1_197.L
0000398E  773E      
00003990  4E92      6354          jsr       (A2)
00003992  584F      6355          addq.w    #4,A7
00003994  6000 007C 6356          bra       DecodeBranchCondition_30
                    6357   DecodeBranchCondition_17:
                    6358   ; else if(Condition == (unsigned short int)(0x0B))
00003998  0C42 000B 6359          cmp.w     #11,D2
0000399C  660E      6360          bne.s     DecodeBranchCondition_19
                    6361   ; strcatInstruction("MI") ;
0000399E  4879 0000 6362          pea       @m68kde~1_198.L
000039A2  7742      
000039A4  4E92      6363          jsr       (A2)
000039A6  584F      6364          addq.w    #4,A7
000039A8  6000 0068 6365          bra       DecodeBranchCondition_30
                    6366   DecodeBranchCondition_19:
                    6367   ; else if(Condition == (unsigned short int)(0x06))
000039AC  0C42 0006 6368          cmp.w     #6,D2
000039B0  660E      6369          bne.s     DecodeBranchCondition_21
                    6370   ; strcatInstruction("NE") ;
000039B2  4879 0000 6371          pea       @m68kde~1_199.L
000039B6  7746      
000039B8  4E92      6372          jsr       (A2)
000039BA  584F      6373          addq.w    #4,A7
000039BC  6000 0054 6374          bra       DecodeBranchCondition_30
                    6375   DecodeBranchCondition_21:
                    6376   ; else if(Condition == (unsigned short int)(0x0A))
000039C0  0C42 000A 6377          cmp.w     #10,D2
000039C4  660E      6378          bne.s     DecodeBranchCondition_23
                    6379   ; strcatInstruction("PL") ;
000039C6  4879 0000 6380          pea       @m68kde~1_200.L
000039CA  774A      
000039CC  4E92      6381          jsr       (A2)
000039CE  584F      6382          addq.w    #4,A7
000039D0  6000 0040 6383          bra       DecodeBranchCondition_30
                    6384   DecodeBranchCondition_23:
                    6385   ; else if(Condition == (unsigned short int)(0x09))
000039D4  0C42 0009 6386          cmp.w     #9,D2
000039D8  660C      6387          bne.s     DecodeBranchCondition_25
                    6388   ; strcatInstruction("VS") ;
000039DA  4879 0000 6389          pea       @m68kde~1_201.L
000039DE  774E      
000039E0  4E92      6390          jsr       (A2)
000039E2  584F      6391          addq.w    #4,A7
000039E4  602C      6392          bra.s     DecodeBranchCondition_30
                    6393   DecodeBranchCondition_25:
                    6394   ; else if(Condition == (unsigned short int)(0x08))
000039E6  0C42 0008 6395          cmp.w     #8,D2
000039EA  660C      6396          bne.s     DecodeBranchCondition_27
                    6397   ; strcatInstruction("VC") ;
000039EC  4879 0000 6398          pea       @m68kde~1_202.L
000039F0  7752      
000039F2  4E92      6399          jsr       (A2)
000039F4  584F      6400          addq.w    #4,A7
000039F6  601A      6401          bra.s     DecodeBranchCondition_30
                    6402   DecodeBranchCondition_27:
                    6403   ; else if(Condition == (unsigned short int)(0))
000039F8  4A42      6404          tst.w     D2
000039FA  660C      6405          bne.s     DecodeBranchCondition_29
                    6406   ; strcatInstruction("RA") ;
000039FC  4879 0000 6407          pea       @m68kde~1_203.L
00003A00  7756      
00003A02  4E92      6408          jsr       (A2)
00003A04  584F      6409          addq.w    #4,A7
00003A06  600A      6410          bra.s     DecodeBranchCondition_30
                    6411   DecodeBranchCondition_29:
                    6412   ; else
                    6413   ; strcatInstruction("SR");
00003A08  4879 0000 6414          pea       @m68kde~1_204.L
00003A0C  775A      
00003A0E  4E92      6415          jsr       (A2)
00003A10  584F      6416          addq.w    #4,A7
                    6417   DecodeBranchCondition_30:
                    6418   ; strcatInstruction(" ") ;
00003A12  4879 0000 6419          pea       @m68kde~1_36.L
00003A16  67A6      
00003A18  4E92      6420          jsr       (A2)
00003A1A  584F      6421          addq.w    #4,A7
00003A1C  4CDF 0404 6422          movem.l   (A7)+,D2/A2
00003A20  4E5E      6423          unlk      A6
00003A22  4E75      6424          rts
                    6425   ; }
                    6426   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6427   ; {
                    6428   _DisassembleInstruction:
00003A24  4E56 FFD8 6429          link      A6,#-40
00003A28  48E7 3F3C 6430          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003A2C  242E 0008 6431          move.l    8(A6),D2
00003A30  45F9 0B00 6432          lea       _InstructionSize.L,A2
00003A34  017E      
00003A36  47F8 0CE6 6433          lea       _strcpyInstruction.L,A3
00003A3A  49F9 0B00 6434          lea       _TempString.L,A4
00003A3E  0546      
00003A40  4BF9 0000 6435          lea       _sprintf.L,A5
00003A44  5A34      
                    6436   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
00003A46  2042      6437          move.l    D2,A0
00003A48  3010      6438          move.w    (A0),D0
00003A4A  E040      6439          asr.w     #8,D0
00003A4C  E840      6440          asr.w     #4,D0
00003A4E  3D40 FFDA 6441          move.w    D0,-38(A6)
                    6442   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
00003A52  2042      6443          move.l    D2,A0
00003A54  3010      6444          move.w    (A0),D0
00003A56  C07C 0FFF 6445          and.w     #4095,D0
00003A5A  3D40 FFDC 6446          move.w    D0,-36(A6)
                    6447   ; unsigned short int SourceBits, DestBits, Size ;
                    6448   ; unsigned char *Mode, Condition;
                    6449   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6450   ; unsigned short int DataRegister, AddressRegister;
                    6451   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6452   ; signed short int Displacement16Bit;
                    6453   ; short int Mask, DoneSlash;
                    6454   ; int i;
                    6455   ; strcpyInstruction("Unknown") ;
00003A5E  4879 0000 6456          pea       @m68kde~1_205.L
00003A62  775E      
00003A64  4E93      6457          jsr       (A3)
00003A66  584F      6458          addq.w    #4,A7
                    6459   ; /////////////////////////////////////////////////////////////////////////////////
                    6460   ; // if instruction is ABCD
                    6461   ; /////////////////////////////////////////////////////////////////////////////////
                    6462   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
00003A68  2042      6463          move.l    D2,A0
00003A6A  3010      6464          move.w    (A0),D0
00003A6C  C07C F1F0 6465          and.w     #61936,D0
00003A70  0C40 C100 6466          cmp.w     #49408,D0
00003A74  6600 008C 6467          bne       DisassembleInstruction_4
                    6468   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00003A78  2042      6469          move.l    D2,A0
00003A7A  3010      6470          move.w    (A0),D0
00003A7C  E040      6471          asr.w     #8,D0
00003A7E  E240      6472          asr.w     #1,D0
00003A80  C07C 0007 6473          and.w     #7,D0
00003A84  3D40 FFE0 6474          move.w    D0,-32(A6)
                    6475   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00003A88  2042      6476          move.l    D2,A0
00003A8A  3010      6477          move.w    (A0),D0
00003A8C  C07C 0007 6478          and.w     #7,D0
00003A90  3D40 FFDE 6479          move.w    D0,-34(A6)
                    6480   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00003A94  2042      6481          move.l    D2,A0
00003A96  3010      6482          move.w    (A0),D0
00003A98  E640      6483          asr.w     #3,D0
00003A9A  48C0      6484          ext.l     D0
00003A9C  C0BC 0000 6485          and.l     #1,D0
00003AA0  0001      
00003AA2  2D40 FFE4 6486          move.l    D0,-28(A6)
                    6487   ; if(Mode == 0)
00003AA6  202E FFE4 6488          move.l    -28(A6),D0
00003AAA  662C      6489          bne.s     DisassembleInstruction_3
                    6490   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
00003AAC  322E FFE0 6491          move.w    -32(A6),D1
00003AB0  C2BC 0000 6492          and.l     #65535,D1
00003AB4  FFFF      
00003AB6  2F01      6493          move.l    D1,-(A7)
00003AB8  322E FFDE 6494          move.w    -34(A6),D1
00003ABC  C2BC 0000 6495          and.l     #65535,D1
00003AC0  FFFF      
00003AC2  2F01      6496          move.l    D1,-(A7)
00003AC4  4879 0000 6497          pea       @m68kde~1_206.L
00003AC8  7766      
00003ACA  4879 0B00 6498          pea       _Instruction.L
00003ACE  04E2      
00003AD0  4E95      6499          jsr       (A5)
00003AD2  DEFC 0010 6500          add.w     #16,A7
00003AD6  602A      6501          bra.s     DisassembleInstruction_4
                    6502   DisassembleInstruction_3:
                    6503   ; else
                    6504   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00003AD8  322E FFE0 6505          move.w    -32(A6),D1
00003ADC  C2BC 0000 6506          and.l     #65535,D1
00003AE0  FFFF      
00003AE2  2F01      6507          move.l    D1,-(A7)
00003AE4  322E FFDE 6508          move.w    -34(A6),D1
00003AE8  C2BC 0000 6509          and.l     #65535,D1
00003AEC  FFFF      
00003AEE  2F01      6510          move.l    D1,-(A7)
00003AF0  4879 0000 6511          pea       @m68kde~1_207.L
00003AF4  7774      
00003AF6  4879 0B00 6512          pea       _Instruction.L
00003AFA  04E2      
00003AFC  4E95      6513          jsr       (A5)
00003AFE  DEFC 0010 6514          add.w     #16,A7
                    6515   DisassembleInstruction_4:
                    6516   ; }
                    6517   ; /////////////////////////////////////////////////////////////////////////////////
                    6518   ; // if instruction is ADD or ADDA
                    6519   ; /////////////////////////////////////////////////////////////////////////////////
                    6520   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
00003B02  2042      6521          move.l    D2,A0
00003B04  3010      6522          move.w    (A0),D0
00003B06  C07C F000 6523          and.w     #61440,D0
00003B0A  0C40 D000 6524          cmp.w     #53248,D0
00003B0E  6600 008C 6525          bne       DisassembleInstruction_8
                    6526   ; InstructionSize = 1;
00003B12  24BC 0000 6527          move.l    #1,(A2)
00003B16  0001      
                    6528   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00003B18  2042      6529          move.l    D2,A0
00003B1A  3010      6530          move.w    (A0),D0
00003B1C  EC40      6531          asr.w     #6,D0
00003B1E  C07C 0007 6532          and.w     #7,D0
00003B22  3600      6533          move.w    D0,D3
                    6534   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00003B24  0C43 0003 6535          cmp.w     #3,D3
00003B28  6708      6536          beq.s     DisassembleInstruction_9
00003B2A  0C43 0007 6537          cmp.w     #7,D3
00003B2E  6600 005A 6538          bne       DisassembleInstruction_7
                    6539   DisassembleInstruction_9:
                    6540   ; {
                    6541   ; if(OpMode == (unsigned short int)(0x0003))
00003B32  0C43 0003 6542          cmp.w     #3,D3
00003B36  660C      6543          bne.s     DisassembleInstruction_10
                    6544   ; strcpyInstruction("ADDA.W ") ;
00003B38  4879 0000 6545          pea       @m68kde~1_208.L
00003B3C  7788      
00003B3E  4E93      6546          jsr       (A3)
00003B40  584F      6547          addq.w    #4,A7
00003B42  600A      6548          bra.s     DisassembleInstruction_11
                    6549   DisassembleInstruction_10:
                    6550   ; else
                    6551   ; strcpyInstruction("ADDA.L ") ;
00003B44  4879 0000 6552          pea       @m68kde~1_209.L
00003B48  7790      
00003B4A  4E93      6553          jsr       (A3)
00003B4C  584F      6554          addq.w    #4,A7
                    6555   DisassembleInstruction_11:
                    6556   ; Decode6BitEA(OpCode,0,0,0)  ;
00003B4E  42A7      6557          clr.l     -(A7)
00003B50  42A7      6558          clr.l     -(A7)
00003B52  42A7      6559          clr.l     -(A7)
00003B54  2F02      6560          move.l    D2,-(A7)
00003B56  4EB8 3410 6561          jsr       _Decode6BitEA
00003B5A  DEFC 0010 6562          add.w     #16,A7
                    6563   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003B5E  2042      6564          move.l    D2,A0
00003B60  3210      6565          move.w    (A0),D1
00003B62  E041      6566          asr.w     #8,D1
00003B64  E241      6567          asr.w     #1,D1
00003B66  C27C 0007 6568          and.w     #7,D1
00003B6A  C2BC 0000 6569          and.l     #65535,D1
00003B6E  FFFF      
00003B70  2F01      6570          move.l    D1,-(A7)
00003B72  4879 0000 6571          pea       @m68kde~1_210.L
00003B76  7798      
00003B78  2F0C      6572          move.l    A4,-(A7)
00003B7A  4E95      6573          jsr       (A5)
00003B7C  DEFC 000C 6574          add.w     #12,A7
                    6575   ; strcatInstruction(TempString) ;
00003B80  2F0C      6576          move.l    A4,-(A7)
00003B82  4EB8 0CCC 6577          jsr       _strcatInstruction
00003B86  584F      6578          addq.w    #4,A7
00003B88  6012      6579          bra.s     DisassembleInstruction_8
                    6580   DisassembleInstruction_7:
                    6581   ; }
                    6582   ; else {
                    6583   ; strcpyInstruction("ADD") ;
00003B8A  4879 0000 6584          pea       @m68kde~1_211.L
00003B8E  779E      
00003B90  4E93      6585          jsr       (A3)
00003B92  584F      6586          addq.w    #4,A7
                    6587   ; Decode3BitOperandMode(OpCode) ;
00003B94  2F02      6588          move.l    D2,-(A7)
00003B96  4EB8 3838 6589          jsr       _Decode3BitOperandMode
00003B9A  584F      6590          addq.w    #4,A7
                    6591   DisassembleInstruction_8:
                    6592   ; }
                    6593   ; }
                    6594   ; /////////////////////////////////////////////////////////////////////////////////
                    6595   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6596   ; /////////////////////////////////////////////////////////////////////////////////
                    6597   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
00003B9C  2042      6598          move.l    D2,A0
00003B9E  3010      6599          move.w    (A0),D0
00003BA0  C07C FF00 6600          and.w     #65280,D0
00003BA4  0C40 0600 6601          cmp.w     #1536,D0
00003BA8  6604      6602          bne.s     DisassembleInstruction_14
00003BAA  7001      6603          moveq     #1,D0
00003BAC  6002      6604          bra.s     DisassembleInstruction_15
                    6605   DisassembleInstruction_14:
00003BAE  4280      6606          clr.l     D0
                    6607   DisassembleInstruction_15:
00003BB0  2042      6608          move.l    D2,A0
00003BB2  3210      6609          move.w    (A0),D1
00003BB4  C27C FF00 6610          and.w     #65280,D1
00003BB8  0C41 0200 6611          cmp.w     #512,D1
00003BBC  6604      6612          bne.s     DisassembleInstruction_16
00003BBE  7201      6613          moveq     #1,D1
00003BC0  6002      6614          bra.s     DisassembleInstruction_17
                    6615   DisassembleInstruction_16:
00003BC2  4281      6616          clr.l     D1
                    6617   DisassembleInstruction_17:
00003BC4  8041      6618          or.w      D1,D0
00003BC6  2042      6619          move.l    D2,A0
00003BC8  3210      6620          move.w    (A0),D1
00003BCA  C27C FF00 6621          and.w     #65280,D1
00003BCE  0C41 0C00 6622          cmp.w     #3072,D1
00003BD2  6604      6623          bne.s     DisassembleInstruction_18
00003BD4  7201      6624          moveq     #1,D1
00003BD6  6002      6625          bra.s     DisassembleInstruction_19
                    6626   DisassembleInstruction_18:
00003BD8  4281      6627          clr.l     D1
                    6628   DisassembleInstruction_19:
00003BDA  8041      6629          or.w      D1,D0
00003BDC  2042      6630          move.l    D2,A0
00003BDE  3210      6631          move.w    (A0),D1
00003BE0  C27C FF00 6632          and.w     #65280,D1
00003BE4  0C41 0A00 6633          cmp.w     #2560,D1
00003BE8  6604      6634          bne.s     DisassembleInstruction_20
00003BEA  7201      6635          moveq     #1,D1
00003BEC  6002      6636          bra.s     DisassembleInstruction_21
                    6637   DisassembleInstruction_20:
00003BEE  4281      6638          clr.l     D1
                    6639   DisassembleInstruction_21:
00003BF0  8041      6640          or.w      D1,D0
00003BF2  2042      6641          move.l    D2,A0
00003BF4  3210      6642          move.w    (A0),D1
00003BF6  C27C FF00 6643          and.w     #65280,D1
00003BFA  6604      6644          bne.s     DisassembleInstruction_22
00003BFC  7201      6645          moveq     #1,D1
00003BFE  6002      6646          bra.s     DisassembleInstruction_23
                    6647   DisassembleInstruction_22:
00003C00  4281      6648          clr.l     D1
                    6649   DisassembleInstruction_23:
00003C02  8041      6650          or.w      D1,D0
00003C04  2042      6651          move.l    D2,A0
00003C06  3210      6652          move.w    (A0),D1
00003C08  C27C FF00 6653          and.w     #65280,D1
00003C0C  0C41 0400 6654          cmp.w     #1024,D1
00003C10  6604      6655          bne.s     DisassembleInstruction_24
00003C12  7201      6656          moveq     #1,D1
00003C14  6002      6657          bra.s     DisassembleInstruction_25
                    6658   DisassembleInstruction_24:
00003C16  4281      6659          clr.l     D1
                    6660   DisassembleInstruction_25:
00003C18  8041      6661          or.w      D1,D0
00003C1A  6700 00E4 6662          beq       DisassembleInstruction_12
                    6663   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6664   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6665   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6666   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6667   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6668   ; {
                    6669   ; InstructionSize = 1;
00003C1E  24BC 0000 6670          move.l    #1,(A2)
00003C22  0001      
                    6671   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
00003C24  2042      6672          move.l    D2,A0
00003C26  3010      6673          move.w    (A0),D0
00003C28  C07C FF00 6674          and.w     #65280,D0
00003C2C  0C40 0600 6675          cmp.w     #1536,D0
00003C30  660E      6676          bne.s     DisassembleInstruction_26
                    6677   ; strcpyInstruction("ADDI") ;
00003C32  4879 0000 6678          pea       @m68kde~1_212.L
00003C36  77A2      
00003C38  4E93      6679          jsr       (A3)
00003C3A  584F      6680          addq.w    #4,A7
00003C3C  6000 0084 6681          bra       DisassembleInstruction_36
                    6682   DisassembleInstruction_26:
                    6683   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003C40  2042      6684          move.l    D2,A0
00003C42  3010      6685          move.w    (A0),D0
00003C44  C07C FF00 6686          and.w     #65280,D0
00003C48  0C40 0200 6687          cmp.w     #512,D0
00003C4C  660E      6688          bne.s     DisassembleInstruction_28
                    6689   ; strcpyInstruction("ANDI") ;
00003C4E  4879 0000 6690          pea       @m68kde~1_213.L
00003C52  77A8      
00003C54  4E93      6691          jsr       (A3)
00003C56  584F      6692          addq.w    #4,A7
00003C58  6000 0068 6693          bra       DisassembleInstruction_36
                    6694   DisassembleInstruction_28:
                    6695   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
00003C5C  2042      6696          move.l    D2,A0
00003C5E  3010      6697          move.w    (A0),D0
00003C60  C07C FF00 6698          and.w     #65280,D0
00003C64  0C40 0C00 6699          cmp.w     #3072,D0
00003C68  660E      6700          bne.s     DisassembleInstruction_30
                    6701   ; strcpyInstruction("CMPI") ;
00003C6A  4879 0000 6702          pea       @m68kde~1_214.L
00003C6E  77AE      
00003C70  4E93      6703          jsr       (A3)
00003C72  584F      6704          addq.w    #4,A7
00003C74  6000 004C 6705          bra       DisassembleInstruction_36
                    6706   DisassembleInstruction_30:
                    6707   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003C78  2042      6708          move.l    D2,A0
00003C7A  3010      6709          move.w    (A0),D0
00003C7C  C07C FF00 6710          and.w     #65280,D0
00003C80  0C40 0A00 6711          cmp.w     #2560,D0
00003C84  660E      6712          bne.s     DisassembleInstruction_32
                    6713   ; strcpyInstruction("EORI") ;
00003C86  4879 0000 6714          pea       @m68kde~1_215.L
00003C8A  77B4      
00003C8C  4E93      6715          jsr       (A3)
00003C8E  584F      6716          addq.w    #4,A7
00003C90  6000 0030 6717          bra       DisassembleInstruction_36
                    6718   DisassembleInstruction_32:
                    6719   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
00003C94  2042      6720          move.l    D2,A0
00003C96  3010      6721          move.w    (A0),D0
00003C98  C07C FF00 6722          and.w     #65280,D0
00003C9C  660C      6723          bne.s     DisassembleInstruction_34
                    6724   ; strcpyInstruction("ORI") ;
00003C9E  4879 0000 6725          pea       @m68kde~1_216.L
00003CA2  77BA      
00003CA4  4E93      6726          jsr       (A3)
00003CA6  584F      6727          addq.w    #4,A7
00003CA8  6018      6728          bra.s     DisassembleInstruction_36
                    6729   DisassembleInstruction_34:
                    6730   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
00003CAA  2042      6731          move.l    D2,A0
00003CAC  3010      6732          move.w    (A0),D0
00003CAE  C07C FF00 6733          and.w     #65280,D0
00003CB2  0C40 0400 6734          cmp.w     #1024,D0
00003CB6  660A      6735          bne.s     DisassembleInstruction_36
                    6736   ; strcpyInstruction("SUBI") ;
00003CB8  4879 0000 6737          pea       @m68kde~1_217.L
00003CBC  77BE      
00003CBE  4E93      6738          jsr       (A3)
00003CC0  584F      6739          addq.w    #4,A7
                    6740   DisassembleInstruction_36:
                    6741   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003CC2  2042      6742          move.l    D2,A0
00003CC4  3210      6743          move.w    (A0),D1
00003CC6  C2BC 0000 6744          and.l     #65535,D1
00003CCA  FFFF      
00003CCC  2F01      6745          move.l    D1,-(A7)
00003CCE  4EB8 317C 6746          jsr       _Decode2BitOperandSize
00003CD2  584F      6747          addq.w    #4,A7
00003CD4  3E00      6748          move.w    D0,D7
                    6749   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
00003CD6  2F02      6750          move.l    D2,-(A7)
00003CD8  4EB8 3300 6751          jsr       _DecodeBWLDataAfterOpCode
00003CDC  584F      6752          addq.w    #4,A7
                    6753   ; strcatInstruction(",") ;
00003CDE  4879 0000 6754          pea       @m68kde~1_188.L
00003CE2  771C      
00003CE4  4EB8 0CCC 6755          jsr       _strcatInstruction
00003CE8  584F      6756          addq.w    #4,A7
                    6757   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
00003CEA  42A7      6758          clr.l     -(A7)
00003CEC  CEBC 0000 6759          and.l     #65535,D7
00003CF0  FFFF      
00003CF2  2F07      6760          move.l    D7,-(A7)
00003CF4  42A7      6761          clr.l     -(A7)
00003CF6  2F02      6762          move.l    D2,-(A7)
00003CF8  4EB8 3410 6763          jsr       _Decode6BitEA
00003CFC  DEFC 0010 6764          add.w     #16,A7
                    6765   DisassembleInstruction_12:
                    6766   ; }
                    6767   ; /////////////////////////////////////////////////////////////////////////////////
                    6768   ; // if instruction is ADDI #data,SR
                    6769   ; /////////////////////////////////////////////////////////////////////////////////
                    6770   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003D00  2042      6771          move.l    D2,A0
00003D02  3010      6772          move.w    (A0),D0
00003D04  0C40 027C 6773          cmp.w     #636,D0
00003D08  6622      6774          bne.s     DisassembleInstruction_38
                    6775   ; InstructionSize = 2;
00003D0A  24BC 0000 6776          move.l    #2,(A2)
00003D0E  0002      
                    6777   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003D10  2042      6778          move.l    D2,A0
00003D12  3228 0002 6779          move.w    2(A0),D1
00003D16  48C1      6780          ext.l     D1
00003D18  2F01      6781          move.l    D1,-(A7)
00003D1A  4879 0000 6782          pea       @m68kde~1_218.L
00003D1E  77C4      
00003D20  4879 0B00 6783          pea       _Instruction.L
00003D24  04E2      
00003D26  4E95      6784          jsr       (A5)
00003D28  DEFC 000C 6785          add.w     #12,A7
                    6786   DisassembleInstruction_38:
                    6787   ; }
                    6788   ; /////////////////////////////////////////////////////////////////////////////////
                    6789   ; // if instruction is ADDQ
                    6790   ; /////////////////////////////////////////////////////////////////////////////////
                    6791   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
00003D2C  2042      6792          move.l    D2,A0
00003D2E  3010      6793          move.w    (A0),D0
00003D30  C07C F100 6794          and.w     #61696,D0
00003D34  0C40 5000 6795          cmp.w     #20480,D0
00003D38  6600 005E 6796          bne       DisassembleInstruction_40
                    6797   ; InstructionSize = 1;
00003D3C  24BC 0000 6798          move.l    #1,(A2)
00003D40  0001      
                    6799   ; strcpyInstruction("ADDQ") ;
00003D42  4879 0000 6800          pea       @m68kde~1_219.L
00003D46  77D2      
00003D48  4E93      6801          jsr       (A3)
00003D4A  584F      6802          addq.w    #4,A7
                    6803   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003D4C  2042      6804          move.l    D2,A0
00003D4E  3210      6805          move.w    (A0),D1
00003D50  C2BC 0000 6806          and.l     #65535,D1
00003D54  FFFF      
00003D56  2F01      6807          move.l    D1,-(A7)
00003D58  4EB8 317C 6808          jsr       _Decode2BitOperandSize
00003D5C  584F      6809          addq.w    #4,A7
                    6810   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003D5E  2042      6811          move.l    D2,A0
00003D60  3210      6812          move.w    (A0),D1
00003D62  E041      6813          asr.w     #8,D1
00003D64  E241      6814          asr.w     #1,D1
00003D66  C27C 0007 6815          and.w     #7,D1
00003D6A  C2BC 0000 6816          and.l     #65535,D1
00003D6E  FFFF      
00003D70  2F01      6817          move.l    D1,-(A7)
00003D72  4879 0000 6818          pea       @m68kde~1_220.L
00003D76  77D8      
00003D78  2F0C      6819          move.l    A4,-(A7)
00003D7A  4E95      6820          jsr       (A5)
00003D7C  DEFC 000C 6821          add.w     #12,A7
                    6822   ; strcatInstruction(TempString) ;
00003D80  2F0C      6823          move.l    A4,-(A7)
00003D82  4EB8 0CCC 6824          jsr       _strcatInstruction
00003D86  584F      6825          addq.w    #4,A7
                    6826   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003D88  42A7      6827          clr.l     -(A7)
00003D8A  42A7      6828          clr.l     -(A7)
00003D8C  42A7      6829          clr.l     -(A7)
00003D8E  2F02      6830          move.l    D2,-(A7)
00003D90  4EB8 3410 6831          jsr       _Decode6BitEA
00003D94  DEFC 0010 6832          add.w     #16,A7
                    6833   DisassembleInstruction_40:
                    6834   ; }
                    6835   ; /////////////////////////////////////////////////////////////////////////////////
                    6836   ; // if instruction is ADDX
                    6837   ; /////////////////////////////////////////////////////////////////////////////////
                    6838   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003D98  2042      6839          move.l    D2,A0
00003D9A  3010      6840          move.w    (A0),D0
00003D9C  C07C F130 6841          and.w     #61744,D0
00003DA0  0C40 D100 6842          cmp.w     #53504,D0
00003DA4  6600 00A4 6843          bne       DisassembleInstruction_44
                    6844   ; InstructionSize = 1;
00003DA8  24BC 0000 6845          move.l    #1,(A2)
00003DAC  0001      
                    6846   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003DAE  2042      6847          move.l    D2,A0
00003DB0  3010      6848          move.w    (A0),D0
00003DB2  EC40      6849          asr.w     #6,D0
00003DB4  C07C 0003 6850          and.w     #3,D0
00003DB8  3600      6851          move.w    D0,D3
                    6852   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003DBA  0C43 0003 6853          cmp.w     #3,D3
00003DBE  6700 008A 6854          beq       DisassembleInstruction_44
                    6855   ; {
                    6856   ; strcpyInstruction("ADDX") ;
00003DC2  4879 0000 6857          pea       @m68kde~1_221.L
00003DC6  77DE      
00003DC8  4E93      6858          jsr       (A3)
00003DCA  584F      6859          addq.w    #4,A7
                    6860   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003DCC  2042      6861          move.l    D2,A0
00003DCE  3210      6862          move.w    (A0),D1
00003DD0  C2BC 0000 6863          and.l     #65535,D1
00003DD4  FFFF      
00003DD6  2F01      6864          move.l    D1,-(A7)
00003DD8  4EB8 317C 6865          jsr       _Decode2BitOperandSize
00003DDC  584F      6866          addq.w    #4,A7
                    6867   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003DDE  2042      6868          move.l    D2,A0
00003DE0  3010      6869          move.w    (A0),D0
00003DE2  C07C 0008 6870          and.w     #8,D0
00003DE6  6600 0030 6871          bne       DisassembleInstruction_46
                    6872   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003DEA  2042      6873          move.l    D2,A0
00003DEC  3210      6874          move.w    (A0),D1
00003DEE  E041      6875          asr.w     #8,D1
00003DF0  E241      6876          asr.w     #1,D1
00003DF2  C27C 0007 6877          and.w     #7,D1
00003DF6  48C1      6878          ext.l     D1
00003DF8  2F01      6879          move.l    D1,-(A7)
00003DFA  2042      6880          move.l    D2,A0
00003DFC  3210      6881          move.w    (A0),D1
00003DFE  C27C 0007 6882          and.w     #7,D1
00003E02  48C1      6883          ext.l     D1
00003E04  2F01      6884          move.l    D1,-(A7)
00003E06  4879 0000 6885          pea       @m68kde~1_222.L
00003E0A  77E4      
00003E0C  2F0C      6886          move.l    A4,-(A7)
00003E0E  4E95      6887          jsr       (A5)
00003E10  DEFC 0010 6888          add.w     #16,A7
00003E14  6000 002C 6889          bra       DisassembleInstruction_47
                    6890   DisassembleInstruction_46:
                    6891   ; else        // -(ax),-(ay) mode used
                    6892   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003E18  2042      6893          move.l    D2,A0
00003E1A  3210      6894          move.w    (A0),D1
00003E1C  E041      6895          asr.w     #8,D1
00003E1E  E241      6896          asr.w     #1,D1
00003E20  C27C 0007 6897          and.w     #7,D1
00003E24  48C1      6898          ext.l     D1
00003E26  2F01      6899          move.l    D1,-(A7)
00003E28  2042      6900          move.l    D2,A0
00003E2A  3210      6901          move.w    (A0),D1
00003E2C  C27C 0007 6902          and.w     #7,D1
00003E30  48C1      6903          ext.l     D1
00003E32  2F01      6904          move.l    D1,-(A7)
00003E34  4879 0000 6905          pea       @m68kde~1_223.L
00003E38  77EC      
00003E3A  2F0C      6906          move.l    A4,-(A7)
00003E3C  4E95      6907          jsr       (A5)
00003E3E  DEFC 0010 6908          add.w     #16,A7
                    6909   DisassembleInstruction_47:
                    6910   ; strcatInstruction(TempString) ;
00003E42  2F0C      6911          move.l    A4,-(A7)
00003E44  4EB8 0CCC 6912          jsr       _strcatInstruction
00003E48  584F      6913          addq.w    #4,A7
                    6914   DisassembleInstruction_44:
                    6915   ; }
                    6916   ; }
                    6917   ; /////////////////////////////////////////////////////////////////////////////////
                    6918   ; // if instruction is AND
                    6919   ; /////////////////////////////////////////////////////////////////////////////////
                    6920   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003E4A  2042      6921          move.l    D2,A0
00003E4C  3010      6922          move.w    (A0),D0
00003E4E  C07C F000 6923          and.w     #61440,D0
00003E52  0C40 C000 6924          cmp.w     #49152,D0
00003E56  662A      6925          bne.s     DisassembleInstruction_50
                    6926   ; InstructionSize = 1;
00003E58  24BC 0000 6927          move.l    #1,(A2)
00003E5C  0001      
                    6928   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6929   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003E5E  2042      6930          move.l    D2,A0
00003E60  3010      6931          move.w    (A0),D0
00003E62  E840      6932          asr.w     #4,D0
00003E64  C07C 001F 6933          and.w     #31,D0
00003E68  3600      6934          move.w    D0,D3
                    6935   ; if(OpMode != (unsigned short int)(0x0010))   {
00003E6A  0C43 0010 6936          cmp.w     #16,D3
00003E6E  6712      6937          beq.s     DisassembleInstruction_50
                    6938   ; strcpyInstruction("AND") ;
00003E70  4879 0000 6939          pea       @m68kde~1_224.L
00003E74  77FA      
00003E76  4E93      6940          jsr       (A3)
00003E78  584F      6941          addq.w    #4,A7
                    6942   ; Decode3BitOperandMode(OpCode) ;
00003E7A  2F02      6943          move.l    D2,-(A7)
00003E7C  4EB8 3838 6944          jsr       _Decode3BitOperandMode
00003E80  584F      6945          addq.w    #4,A7
                    6946   DisassembleInstruction_50:
                    6947   ; }
                    6948   ; }
                    6949   ; /////////////////////////////////////////////////////////////////////////////////
                    6950   ; // if instruction is ANDI to CCR
                    6951   ; /////////////////////////////////////////////////////////////////////////////////
                    6952   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003E82  2042      6953          move.l    D2,A0
00003E84  3010      6954          move.w    (A0),D0
00003E86  0C40 023C 6955          cmp.w     #572,D0
00003E8A  662A      6956          bne.s     DisassembleInstruction_52
                    6957   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003E8C  2042      6958          move.l    D2,A0
00003E8E  3228 0002 6959          move.w    2(A0),D1
00003E92  C27C 00FF 6960          and.w     #255,D1
00003E96  C2BC 0000 6961          and.l     #65535,D1
00003E9A  FFFF      
00003E9C  2F01      6962          move.l    D1,-(A7)
00003E9E  4879 0000 6963          pea       @m68kde~1_225.L
00003EA2  77FE      
00003EA4  4879 0B00 6964          pea       _Instruction.L
00003EA8  04E2      
00003EAA  4E95      6965          jsr       (A5)
00003EAC  DEFC 000C 6966          add.w     #12,A7
                    6967   ; InstructionSize = 2;
00003EB0  24BC 0000 6968          move.l    #2,(A2)
00003EB4  0002      
                    6969   DisassembleInstruction_52:
                    6970   ; }
                    6971   ; /////////////////////////////////////////////////////////////////////////////////
                    6972   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6973   ; /////////////////////////////////////////////////////////////////////////////////
                    6974   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003EB6  2042      6975          move.l    D2,A0
00003EB8  3010      6976          move.w    (A0),D0
00003EBA  C07C F018 6977          and.w     #61464,D0
00003EBE  0C40 E000 6978          cmp.w     #57344,D0
00003EC2  6604      6979          bne.s     DisassembleInstruction_56
00003EC4  7001      6980          moveq     #1,D0
00003EC6  6002      6981          bra.s     DisassembleInstruction_57
                    6982   DisassembleInstruction_56:
00003EC8  4280      6983          clr.l     D0
                    6984   DisassembleInstruction_57:
00003ECA  2042      6985          move.l    D2,A0
00003ECC  3210      6986          move.w    (A0),D1
00003ECE  C27C FEC0 6987          and.w     #65216,D1
00003ED2  0C41 E0C0 6988          cmp.w     #57536,D1
00003ED6  6604      6989          bne.s     DisassembleInstruction_58
00003ED8  7201      6990          moveq     #1,D1
00003EDA  6002      6991          bra.s     DisassembleInstruction_59
                    6992   DisassembleInstruction_58:
00003EDC  4281      6993          clr.l     D1
                    6994   DisassembleInstruction_59:
00003EDE  8041      6995          or.w      D1,D0
00003EE0  2042      6996          move.l    D2,A0
00003EE2  3210      6997          move.w    (A0),D1
00003EE4  C27C F018 6998          and.w     #61464,D1
00003EE8  0C41 E008 6999          cmp.w     #57352,D1
00003EEC  6604      7000          bne.s     DisassembleInstruction_60
00003EEE  7201      7001          moveq     #1,D1
00003EF0  6002      7002          bra.s     DisassembleInstruction_61
                    7003   DisassembleInstruction_60:
00003EF2  4281      7004          clr.l     D1
                    7005   DisassembleInstruction_61:
00003EF4  8041      7006          or.w      D1,D0
00003EF6  2042      7007          move.l    D2,A0
00003EF8  3210      7008          move.w    (A0),D1
00003EFA  C27C FEC0 7009          and.w     #65216,D1
00003EFE  0C41 E2C0 7010          cmp.w     #58048,D1
00003F02  6604      7011          bne.s     DisassembleInstruction_62
00003F04  7201      7012          moveq     #1,D1
00003F06  6002      7013          bra.s     DisassembleInstruction_63
                    7014   DisassembleInstruction_62:
00003F08  4281      7015          clr.l     D1
                    7016   DisassembleInstruction_63:
00003F0A  8041      7017          or.w      D1,D0
00003F0C  2042      7018          move.l    D2,A0
00003F0E  3210      7019          move.w    (A0),D1
00003F10  C27C F018 7020          and.w     #61464,D1
00003F14  0C41 E018 7021          cmp.w     #57368,D1
00003F18  6604      7022          bne.s     DisassembleInstruction_64
00003F1A  7201      7023          moveq     #1,D1
00003F1C  6002      7024          bra.s     DisassembleInstruction_65
                    7025   DisassembleInstruction_64:
00003F1E  4281      7026          clr.l     D1
                    7027   DisassembleInstruction_65:
00003F20  8041      7028          or.w      D1,D0
00003F22  2042      7029          move.l    D2,A0
00003F24  3210      7030          move.w    (A0),D1
00003F26  C27C FEC0 7031          and.w     #65216,D1
00003F2A  0C41 E6C0 7032          cmp.w     #59072,D1
00003F2E  6604      7033          bne.s     DisassembleInstruction_66
00003F30  7201      7034          moveq     #1,D1
00003F32  6002      7035          bra.s     DisassembleInstruction_67
                    7036   DisassembleInstruction_66:
00003F34  4281      7037          clr.l     D1
                    7038   DisassembleInstruction_67:
00003F36  8041      7039          or.w      D1,D0
00003F38  2042      7040          move.l    D2,A0
00003F3A  3210      7041          move.w    (A0),D1
00003F3C  C27C F018 7042          and.w     #61464,D1
00003F40  0C41 E010 7043          cmp.w     #57360,D1
00003F44  6604      7044          bne.s     DisassembleInstruction_68
00003F46  7201      7045          moveq     #1,D1
00003F48  6002      7046          bra.s     DisassembleInstruction_69
                    7047   DisassembleInstruction_68:
00003F4A  4281      7048          clr.l     D1
                    7049   DisassembleInstruction_69:
00003F4C  8041      7050          or.w      D1,D0
00003F4E  2042      7051          move.l    D2,A0
00003F50  3210      7052          move.w    (A0),D1
00003F52  C27C FEC0 7053          and.w     #65216,D1
00003F56  0C41 E4C0 7054          cmp.w     #58560,D1
00003F5A  6604      7055          bne.s     DisassembleInstruction_70
00003F5C  7201      7056          moveq     #1,D1
00003F5E  6002      7057          bra.s     DisassembleInstruction_71
                    7058   DisassembleInstruction_70:
00003F60  4281      7059          clr.l     D1
                    7060   DisassembleInstruction_71:
00003F62  8041      7061          or.w      D1,D0
00003F64  6700 0252 7062          beq       DisassembleInstruction_73
                    7063   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    7064   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    7065   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    7066   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    7067   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    7068   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    7069   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    7070   ; {
                    7071   ; InstructionSize = 1;
00003F68  24BC 0000 7072          move.l    #1,(A2)
00003F6C  0001      
                    7073   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    7074   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003F6E  2042      7075          move.l    D2,A0
00003F70  3010      7076          move.w    (A0),D0
00003F72  C07C 00C0 7077          and.w     #192,D0
00003F76  0C40 00C0 7078          cmp.w     #192,D0
00003F7A  6600 00EA 7079          bne       DisassembleInstruction_72
                    7080   ; {
                    7081   ; // test direction by testing bit 8
                    7082   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003F7E  2042      7083          move.l    D2,A0
00003F80  3010      7084          move.w    (A0),D0
00003F82  C07C FEC0 7085          and.w     #65216,D0
00003F86  0C40 E0C0 7086          cmp.w     #57536,D0
00003F8A  6624      7087          bne.s     DisassembleInstruction_77
                    7088   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003F8C  2042      7089          move.l    D2,A0
00003F8E  3010      7090          move.w    (A0),D0
00003F90  C07C 0100 7091          and.w     #256,D0
00003F94  0C40 0100 7092          cmp.w     #256,D0
00003F98  660C      7093          bne.s     DisassembleInstruction_76
                    7094   ; strcpyInstruction("ASL") ;
00003F9A  4879 0000 7095          pea       @m68kde~1_226.L
00003F9E  780E      
00003FA0  4E93      7096          jsr       (A3)
00003FA2  584F      7097          addq.w    #4,A7
00003FA4  600A      7098          bra.s     DisassembleInstruction_77
                    7099   DisassembleInstruction_76:
                    7100   ; else
                    7101   ; strcpyInstruction("ASR") ;
00003FA6  4879 0000 7102          pea       @m68kde~1_227.L
00003FAA  7812      
00003FAC  4E93      7103          jsr       (A3)
00003FAE  584F      7104          addq.w    #4,A7
                    7105   DisassembleInstruction_77:
                    7106   ; // test direction by testing bit 8
                    7107   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003FB0  2042      7108          move.l    D2,A0
00003FB2  3010      7109          move.w    (A0),D0
00003FB4  C07C FEC0 7110          and.w     #65216,D0
00003FB8  0C40 E2C0 7111          cmp.w     #58048,D0
00003FBC  6624      7112          bne.s     DisassembleInstruction_81
                    7113   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003FBE  2042      7114          move.l    D2,A0
00003FC0  3010      7115          move.w    (A0),D0
00003FC2  C07C 0100 7116          and.w     #256,D0
00003FC6  0C40 0100 7117          cmp.w     #256,D0
00003FCA  660C      7118          bne.s     DisassembleInstruction_80
                    7119   ; strcpyInstruction("LSL") ;
00003FCC  4879 0000 7120          pea       @m68kde~1_228.L
00003FD0  7816      
00003FD2  4E93      7121          jsr       (A3)
00003FD4  584F      7122          addq.w    #4,A7
00003FD6  600A      7123          bra.s     DisassembleInstruction_81
                    7124   DisassembleInstruction_80:
                    7125   ; else
                    7126   ; strcpyInstruction("LSR") ;
00003FD8  4879 0000 7127          pea       @m68kde~1_229.L
00003FDC  781A      
00003FDE  4E93      7128          jsr       (A3)
00003FE0  584F      7129          addq.w    #4,A7
                    7130   DisassembleInstruction_81:
                    7131   ; // test direction by testing bit 8
                    7132   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003FE2  2042      7133          move.l    D2,A0
00003FE4  3010      7134          move.w    (A0),D0
00003FE6  C07C FEC0 7135          and.w     #65216,D0
00003FEA  0C40 E6C0 7136          cmp.w     #59072,D0
00003FEE  6624      7137          bne.s     DisassembleInstruction_85
                    7138   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003FF0  2042      7139          move.l    D2,A0
00003FF2  3010      7140          move.w    (A0),D0
00003FF4  C07C 0100 7141          and.w     #256,D0
00003FF8  0C40 0100 7142          cmp.w     #256,D0
00003FFC  660C      7143          bne.s     DisassembleInstruction_84
                    7144   ; strcpyInstruction("ROL") ;
00003FFE  4879 0000 7145          pea       @m68kde~1_230.L
00004002  781E      
00004004  4E93      7146          jsr       (A3)
00004006  584F      7147          addq.w    #4,A7
00004008  600A      7148          bra.s     DisassembleInstruction_85
                    7149   DisassembleInstruction_84:
                    7150   ; else
                    7151   ; strcpyInstruction("ROR") ;
0000400A  4879 0000 7152          pea       @m68kde~1_231.L
0000400E  7822      
00004010  4E93      7153          jsr       (A3)
00004012  584F      7154          addq.w    #4,A7
                    7155   DisassembleInstruction_85:
                    7156   ; // test direction by testing bit 8
                    7157   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00004014  2042      7158          move.l    D2,A0
00004016  3010      7159          move.w    (A0),D0
00004018  C07C FEC0 7160          and.w     #65216,D0
0000401C  0C40 E4C0 7161          cmp.w     #58560,D0
00004020  6624      7162          bne.s     DisassembleInstruction_89
                    7163   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00004022  2042      7164          move.l    D2,A0
00004024  3010      7165          move.w    (A0),D0
00004026  C07C 0100 7166          and.w     #256,D0
0000402A  0C40 0100 7167          cmp.w     #256,D0
0000402E  660C      7168          bne.s     DisassembleInstruction_88
                    7169   ; strcpyInstruction("ROXL") ;
00004030  4879 0000 7170          pea       @m68kde~1_232.L
00004034  7826      
00004036  4E93      7171          jsr       (A3)
00004038  584F      7172          addq.w    #4,A7
0000403A  600A      7173          bra.s     DisassembleInstruction_89
                    7174   DisassembleInstruction_88:
                    7175   ; else
                    7176   ; strcpyInstruction("ROXR") ;
0000403C  4879 0000 7177          pea       @m68kde~1_233.L
00004040  782C      
00004042  4E93      7178          jsr       (A3)
00004044  584F      7179          addq.w    #4,A7
                    7180   DisassembleInstruction_89:
                    7181   ; strcatInstruction("  ") ;
00004046  4879 0000 7182          pea       @m68kde~1_15.L
0000404A  6514      
0000404C  4EB8 0CCC 7183          jsr       _strcatInstruction
00004050  584F      7184          addq.w    #4,A7
                    7185   ; Decode6BitEA(OpCode,0, 0,0) ;
00004052  42A7      7186          clr.l     -(A7)
00004054  42A7      7187          clr.l     -(A7)
00004056  42A7      7188          clr.l     -(A7)
00004058  2F02      7189          move.l    D2,-(A7)
0000405A  4EB8 3410 7190          jsr       _Decode6BitEA
0000405E  DEFC 0010 7191          add.w     #16,A7
00004062  6000 0154 7192          bra       DisassembleInstruction_73
                    7193   DisassembleInstruction_72:
                    7194   ; }
                    7195   ; // first version of above instructions, bit 5 is 0
                    7196   ; else
                    7197   ; {
                    7198   ; // test instruction and direction by testing bits 4,3
                    7199   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00004066  2042      7200          move.l    D2,A0
00004068  3010      7201          move.w    (A0),D0
0000406A  C07C 0018 7202          and.w     #24,D0
0000406E  6624      7203          bne.s     DisassembleInstruction_93
                    7204   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00004070  2042      7205          move.l    D2,A0
00004072  3010      7206          move.w    (A0),D0
00004074  C07C 0100 7207          and.w     #256,D0
00004078  0C40 0100 7208          cmp.w     #256,D0
0000407C  660C      7209          bne.s     DisassembleInstruction_92
                    7210   ; strcpyInstruction("ASL") ;
0000407E  4879 0000 7211          pea       @m68kde~1_226.L
00004082  780E      
00004084  4E93      7212          jsr       (A3)
00004086  584F      7213          addq.w    #4,A7
00004088  600A      7214          bra.s     DisassembleInstruction_93
                    7215   DisassembleInstruction_92:
                    7216   ; else
                    7217   ; strcpyInstruction("ASR") ;
0000408A  4879 0000 7218          pea       @m68kde~1_227.L
0000408E  7812      
00004090  4E93      7219          jsr       (A3)
00004092  584F      7220          addq.w    #4,A7
                    7221   DisassembleInstruction_93:
                    7222   ; // test instruction and direction by testing bits 4,3
                    7223   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00004094  2042      7224          move.l    D2,A0
00004096  3010      7225          move.w    (A0),D0
00004098  C07C 0018 7226          and.w     #24,D0
0000409C  0C40 0008 7227          cmp.w     #8,D0
000040A0  6624      7228          bne.s     DisassembleInstruction_97
                    7229   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
000040A2  2042      7230          move.l    D2,A0
000040A4  3010      7231          move.w    (A0),D0
000040A6  C07C 0100 7232          and.w     #256,D0
000040AA  0C40 0100 7233          cmp.w     #256,D0
000040AE  660C      7234          bne.s     DisassembleInstruction_96
                    7235   ; strcpyInstruction("LSL") ;
000040B0  4879 0000 7236          pea       @m68kde~1_228.L
000040B4  7816      
000040B6  4E93      7237          jsr       (A3)
000040B8  584F      7238          addq.w    #4,A7
000040BA  600A      7239          bra.s     DisassembleInstruction_97
                    7240   DisassembleInstruction_96:
                    7241   ; else
                    7242   ; strcpyInstruction("LSR") ;
000040BC  4879 0000 7243          pea       @m68kde~1_229.L
000040C0  781A      
000040C2  4E93      7244          jsr       (A3)
000040C4  584F      7245          addq.w    #4,A7
                    7246   DisassembleInstruction_97:
                    7247   ; // test instruction and direction by testing bits 4,3
                    7248   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
000040C6  2042      7249          move.l    D2,A0
000040C8  3010      7250          move.w    (A0),D0
000040CA  C07C 0018 7251          and.w     #24,D0
000040CE  0C40 0018 7252          cmp.w     #24,D0
000040D2  6624      7253          bne.s     DisassembleInstruction_101
                    7254   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
000040D4  2042      7255          move.l    D2,A0
000040D6  3010      7256          move.w    (A0),D0
000040D8  C07C 0100 7257          and.w     #256,D0
000040DC  0C40 0100 7258          cmp.w     #256,D0
000040E0  660C      7259          bne.s     DisassembleInstruction_100
                    7260   ; strcpyInstruction("ROL") ;
000040E2  4879 0000 7261          pea       @m68kde~1_230.L
000040E6  781E      
000040E8  4E93      7262          jsr       (A3)
000040EA  584F      7263          addq.w    #4,A7
000040EC  600A      7264          bra.s     DisassembleInstruction_101
                    7265   DisassembleInstruction_100:
                    7266   ; else
                    7267   ; strcpyInstruction("ROR") ;
000040EE  4879 0000 7268          pea       @m68kde~1_231.L
000040F2  7822      
000040F4  4E93      7269          jsr       (A3)
000040F6  584F      7270          addq.w    #4,A7
                    7271   DisassembleInstruction_101:
                    7272   ; // test instruction and direction by testing bits 4,3
                    7273   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
000040F8  2042      7274          move.l    D2,A0
000040FA  3010      7275          move.w    (A0),D0
000040FC  C07C 0018 7276          and.w     #24,D0
00004100  0C40 0010 7277          cmp.w     #16,D0
00004104  6624      7278          bne.s     DisassembleInstruction_105
                    7279   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00004106  2042      7280          move.l    D2,A0
00004108  3010      7281          move.w    (A0),D0
0000410A  C07C 0100 7282          and.w     #256,D0
0000410E  0C40 0100 7283          cmp.w     #256,D0
00004112  660C      7284          bne.s     DisassembleInstruction_104
                    7285   ; strcpyInstruction("ROXL") ;
00004114  4879 0000 7286          pea       @m68kde~1_232.L
00004118  7826      
0000411A  4E93      7287          jsr       (A3)
0000411C  584F      7288          addq.w    #4,A7
0000411E  600A      7289          bra.s     DisassembleInstruction_105
                    7290   DisassembleInstruction_104:
                    7291   ; else
                    7292   ; strcpyInstruction("ROXR") ;
00004120  4879 0000 7293          pea       @m68kde~1_233.L
00004124  782C      
00004126  4E93      7294          jsr       (A3)
00004128  584F      7295          addq.w    #4,A7
                    7296   DisassembleInstruction_105:
                    7297   ; Decode2BitOperandSize(*OpCode) ;
0000412A  2042      7298          move.l    D2,A0
0000412C  3210      7299          move.w    (A0),D1
0000412E  C2BC 0000 7300          and.l     #65535,D1
00004132  FFFF      
00004134  2F01      7301          move.l    D1,-(A7)
00004136  4EB8 317C 7302          jsr       _Decode2BitOperandSize
0000413A  584F      7303          addq.w    #4,A7
                    7304   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
0000413C  2042      7305          move.l    D2,A0
0000413E  3010      7306          move.w    (A0),D0
00004140  C07C 0020 7307          and.w     #32,D0
00004144  6600 0038 7308          bne       DisassembleInstruction_106
                    7309   ; sprintf(TempString,"#$%X,D%X",
00004148  2042      7310          move.l    D2,A0
0000414A  3210      7311          move.w    (A0),D1
0000414C  C27C 0007 7312          and.w     #7,D1
00004150  C2BC 0000 7313          and.l     #65535,D1
00004154  FFFF      
00004156  2F01      7314          move.l    D1,-(A7)
00004158  2042      7315          move.l    D2,A0
0000415A  3210      7316          move.w    (A0),D1
0000415C  E041      7317          asr.w     #8,D1
0000415E  E241      7318          asr.w     #1,D1
00004160  C27C 0007 7319          and.w     #7,D1
00004164  C2BC 0000 7320          and.l     #65535,D1
00004168  FFFF      
0000416A  2F01      7321          move.l    D1,-(A7)
0000416C  4879 0000 7322          pea       @m68kde~1_234.L
00004170  7832      
00004172  2F0C      7323          move.l    A4,-(A7)
00004174  4E95      7324          jsr       (A5)
00004176  DEFC 0010 7325          add.w     #16,A7
0000417A  6000 0034 7326          bra       DisassembleInstruction_107
                    7327   DisassembleInstruction_106:
                    7328   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7329   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7330   ; }
                    7331   ; else {                                                                      // if shift is for example ASR D1,D2
                    7332   ; sprintf(TempString,"D%X,D%X",
0000417E  2042      7333          move.l    D2,A0
00004180  3210      7334          move.w    (A0),D1
00004182  C27C 0007 7335          and.w     #7,D1
00004186  C2BC 0000 7336          and.l     #65535,D1
0000418A  FFFF      
0000418C  2F01      7337          move.l    D1,-(A7)
0000418E  2042      7338          move.l    D2,A0
00004190  3210      7339          move.w    (A0),D1
00004192  E041      7340          asr.w     #8,D1
00004194  E241      7341          asr.w     #1,D1
00004196  C27C 0007 7342          and.w     #7,D1
0000419A  C2BC 0000 7343          and.l     #65535,D1
0000419E  FFFF      
000041A0  2F01      7344          move.l    D1,-(A7)
000041A2  4879 0000 7345          pea       @m68kde~1_222.L
000041A6  77E4      
000041A8  2F0C      7346          move.l    A4,-(A7)
000041AA  4E95      7347          jsr       (A5)
000041AC  DEFC 0010 7348          add.w     #16,A7
                    7349   DisassembleInstruction_107:
                    7350   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7351   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7352   ; }
                    7353   ; strcatInstruction(TempString) ;
000041B0  2F0C      7354          move.l    A4,-(A7)
000041B2  4EB8 0CCC 7355          jsr       _strcatInstruction
000041B6  584F      7356          addq.w    #4,A7
                    7357   DisassembleInstruction_73:
                    7358   ; }
                    7359   ; }
                    7360   ; /////////////////////////////////////////////////////////////////////////////////
                    7361   ; // if instruction is BCC and BSR and BRA
                    7362   ; /////////////////////////////////////////////////////////////////////////////////
                    7363   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
000041B8  2042      7364          move.l    D2,A0
000041BA  3010      7365          move.w    (A0),D0
000041BC  C07C F000 7366          and.w     #61440,D0
000041C0  0C40 6000 7367          cmp.w     #24576,D0
000041C4  6600 00A0 7368          bne       DisassembleInstruction_108
                    7369   ; {
                    7370   ; InstructionSize = 1;
000041C8  24BC 0000 7371          move.l    #1,(A2)
000041CC  0001      
                    7372   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
000041CE  2042      7373          move.l    D2,A0
000041D0  3010      7374          move.w    (A0),D0
000041D2  E040      7375          asr.w     #8,D0
000041D4  C07C 000F 7376          and.w     #15,D0
000041D8  1D40 FFE9 7377          move.b    D0,-23(A6)
                    7378   ; strcpyInstruction("B") ;
000041DC  4879 0000 7379          pea       @m68kde~1_235.L
000041E0  783C      
000041E2  4E93      7380          jsr       (A3)
000041E4  584F      7381          addq.w    #4,A7
                    7382   ; DecodeBranchCondition(Condition) ;
000041E6  122E FFE9 7383          move.b    -23(A6),D1
000041EA  C27C 00FF 7384          and.w     #255,D1
000041EE  C2BC 0000 7385          and.l     #65535,D1
000041F2  FFFF      
000041F4  2F01      7386          move.l    D1,-(A7)
000041F6  4EB8 38CE 7387          jsr       _DecodeBranchCondition
000041FA  584F      7388          addq.w    #4,A7
                    7389   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
000041FC  2042      7390          move.l    D2,A0
000041FE  3010      7391          move.w    (A0),D0
00004200  C07C 00FF 7392          and.w     #255,D0
00004204  1D40 FFFB 7393          move.b    D0,-5(A6)
                    7394   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00004208  102E FFFB 7395          move.b    -5(A6),D0
0000420C  4880      7396          ext.w     D0
0000420E  4A40      7397          tst.w     D0
00004210  662A      7398          bne.s     DisassembleInstruction_110
                    7399   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00004212  2202      7400          move.l    D2,D1
00004214  2042      7401          move.l    D2,A0
00004216  2F00      7402          move.l    D0,-(A7)
00004218  3028 0002 7403          move.w    2(A0),D0
0000421C  48C0      7404          ext.l     D0
0000421E  D280      7405          add.l     D0,D1
00004220  201F      7406          move.l    (A7)+,D0
00004222  5481      7407          addq.l    #2,D1
00004224  2F01      7408          move.l    D1,-(A7)
00004226  4879 0000 7409          pea       @m68kde~1_185.L
0000422A  7708      
0000422C  2F0C      7410          move.l    A4,-(A7)
0000422E  4E95      7411          jsr       (A5)
00004230  DEFC 000C 7412          add.w     #12,A7
                    7413   ; InstructionSize = 2 ;
00004234  24BC 0000 7414          move.l    #2,(A2)
00004238  0002      
0000423A  6022      7415          bra.s     DisassembleInstruction_111
                    7416   DisassembleInstruction_110:
                    7417   ; }
                    7418   ; else
                    7419   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
0000423C  2202      7420          move.l    D2,D1
0000423E  2F00      7421          move.l    D0,-(A7)
00004240  102E FFFB 7422          move.b    -5(A6),D0
00004244  4880      7423          ext.w     D0
00004246  48C0      7424          ext.l     D0
00004248  D280      7425          add.l     D0,D1
0000424A  201F      7426          move.l    (A7)+,D0
0000424C  5481      7427          addq.l    #2,D1
0000424E  2F01      7428          move.l    D1,-(A7)
00004250  4879 0000 7429          pea       @m68kde~1_185.L
00004254  7708      
00004256  2F0C      7430          move.l    A4,-(A7)
00004258  4E95      7431          jsr       (A5)
0000425A  DEFC 000C 7432          add.w     #12,A7
                    7433   DisassembleInstruction_111:
                    7434   ; strcatInstruction(TempString) ;
0000425E  2F0C      7435          move.l    A4,-(A7)
00004260  4EB8 0CCC 7436          jsr       _strcatInstruction
00004264  584F      7437          addq.w    #4,A7
                    7438   DisassembleInstruction_108:
                    7439   ; }
                    7440   ; /////////////////////////////////////////////////////////////////////////////////
                    7441   ; // if instruction is BCHG dn,<EA>
                    7442   ; /////////////////////////////////////////////////////////////////////////////////
                    7443   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00004266  2042      7444          move.l    D2,A0
00004268  3010      7445          move.w    (A0),D0
0000426A  C07C F1C0 7446          and.w     #61888,D0
0000426E  0C40 0140 7447          cmp.w     #320,D0
00004272  6600 004C 7448          bne       DisassembleInstruction_112
                    7449   ; InstructionSize = 1;
00004276  24BC 0000 7450          move.l    #1,(A2)
0000427A  0001      
                    7451   ; strcpyInstruction("BCHG ") ;
0000427C  4879 0000 7452          pea       @m68kde~1_236.L
00004280  783E      
00004282  4E93      7453          jsr       (A3)
00004284  584F      7454          addq.w    #4,A7
                    7455   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004286  2042      7456          move.l    D2,A0
00004288  3210      7457          move.w    (A0),D1
0000428A  E041      7458          asr.w     #8,D1
0000428C  E241      7459          asr.w     #1,D1
0000428E  C27C 0007 7460          and.w     #7,D1
00004292  C2BC 0000 7461          and.l     #65535,D1
00004296  FFFF      
00004298  2F01      7462          move.l    D1,-(A7)
0000429A  4879 0000 7463          pea       @m68kde~1_237.L
0000429E  7844      
000042A0  2F0C      7464          move.l    A4,-(A7)
000042A2  4E95      7465          jsr       (A5)
000042A4  DEFC 000C 7466          add.w     #12,A7
                    7467   ; strcatInstruction(TempString) ;
000042A8  2F0C      7468          move.l    A4,-(A7)
000042AA  4EB8 0CCC 7469          jsr       _strcatInstruction
000042AE  584F      7470          addq.w    #4,A7
                    7471   ; Decode6BitEA(OpCode,0,0,0) ;
000042B0  42A7      7472          clr.l     -(A7)
000042B2  42A7      7473          clr.l     -(A7)
000042B4  42A7      7474          clr.l     -(A7)
000042B6  2F02      7475          move.l    D2,-(A7)
000042B8  4EB8 3410 7476          jsr       _Decode6BitEA
000042BC  DEFC 0010 7477          add.w     #16,A7
                    7478   DisassembleInstruction_112:
                    7479   ; }
                    7480   ; /////////////////////////////////////////////////////////////////////////////////
                    7481   ; // if instruction is BCHG #data,<EA>
                    7482   ; /////////////////////////////////////////////////////////////////////////////////
                    7483   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
000042C0  2042      7484          move.l    D2,A0
000042C2  3010      7485          move.w    (A0),D0
000042C4  C07C FFC0 7486          and.w     #65472,D0
000042C8  0C40 0840 7487          cmp.w     #2112,D0
000042CC  6600 0044 7488          bne       DisassembleInstruction_114
                    7489   ; strcpyInstruction("BCHG ") ;
000042D0  4879 0000 7490          pea       @m68kde~1_236.L
000042D4  783E      
000042D6  4E93      7491          jsr       (A3)
000042D8  584F      7492          addq.w    #4,A7
                    7493   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000042DA  2042      7494          move.l    D2,A0
000042DC  3228 0002 7495          move.w    2(A0),D1
000042E0  48C1      7496          ext.l     D1
000042E2  2F01      7497          move.l    D1,-(A7)
000042E4  4879 0000 7498          pea       @m68kde~1_238.L
000042E8  784A      
000042EA  2F0C      7499          move.l    A4,-(A7)
000042EC  4E95      7500          jsr       (A5)
000042EE  DEFC 000C 7501          add.w     #12,A7
                    7502   ; InstructionSize = 2 ;
000042F2  24BC 0000 7503          move.l    #2,(A2)
000042F6  0002      
                    7504   ; strcatInstruction(TempString) ;
000042F8  2F0C      7505          move.l    A4,-(A7)
000042FA  4EB8 0CCC 7506          jsr       _strcatInstruction
000042FE  584F      7507          addq.w    #4,A7
                    7508   ; Decode6BitEA(OpCode,0,1,0) ;
00004300  42A7      7509          clr.l     -(A7)
00004302  4878 0001 7510          pea       1
00004306  42A7      7511          clr.l     -(A7)
00004308  2F02      7512          move.l    D2,-(A7)
0000430A  4EB8 3410 7513          jsr       _Decode6BitEA
0000430E  DEFC 0010 7514          add.w     #16,A7
                    7515   DisassembleInstruction_114:
                    7516   ; }
                    7517   ; /////////////////////////////////////////////////////////////////////////////////
                    7518   ; // if instruction is BCLR  dn,<EA>
                    7519   ; /////////////////////////////////////////////////////////////////////////////////
                    7520   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00004312  2042      7521          move.l    D2,A0
00004314  3010      7522          move.w    (A0),D0
00004316  C07C F1C0 7523          and.w     #61888,D0
0000431A  0C40 0180 7524          cmp.w     #384,D0
0000431E  6600 004C 7525          bne       DisassembleInstruction_116
                    7526   ; InstructionSize = 1;
00004322  24BC 0000 7527          move.l    #1,(A2)
00004326  0001      
                    7528   ; strcpyInstruction("BCLR ") ;
00004328  4879 0000 7529          pea       @m68kde~1_239.L
0000432C  7850      
0000432E  4E93      7530          jsr       (A3)
00004330  584F      7531          addq.w    #4,A7
                    7532   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004332  2042      7533          move.l    D2,A0
00004334  3210      7534          move.w    (A0),D1
00004336  E041      7535          asr.w     #8,D1
00004338  E241      7536          asr.w     #1,D1
0000433A  C27C 0007 7537          and.w     #7,D1
0000433E  C2BC 0000 7538          and.l     #65535,D1
00004342  FFFF      
00004344  2F01      7539          move.l    D1,-(A7)
00004346  4879 0000 7540          pea       @m68kde~1_237.L
0000434A  7844      
0000434C  2F0C      7541          move.l    A4,-(A7)
0000434E  4E95      7542          jsr       (A5)
00004350  DEFC 000C 7543          add.w     #12,A7
                    7544   ; strcatInstruction(TempString) ;
00004354  2F0C      7545          move.l    A4,-(A7)
00004356  4EB8 0CCC 7546          jsr       _strcatInstruction
0000435A  584F      7547          addq.w    #4,A7
                    7548   ; Decode6BitEA(OpCode,0,0,0) ;
0000435C  42A7      7549          clr.l     -(A7)
0000435E  42A7      7550          clr.l     -(A7)
00004360  42A7      7551          clr.l     -(A7)
00004362  2F02      7552          move.l    D2,-(A7)
00004364  4EB8 3410 7553          jsr       _Decode6BitEA
00004368  DEFC 0010 7554          add.w     #16,A7
                    7555   DisassembleInstruction_116:
                    7556   ; }
                    7557   ; /////////////////////////////////////////////////////////////////////////////////
                    7558   ; // if instruction is BCLR #data,<EA>
                    7559   ; /////////////////////////////////////////////////////////////////////////////////
                    7560   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
0000436C  2042      7561          move.l    D2,A0
0000436E  3010      7562          move.w    (A0),D0
00004370  C07C FFC0 7563          and.w     #65472,D0
00004374  0C40 0880 7564          cmp.w     #2176,D0
00004378  6600 0044 7565          bne       DisassembleInstruction_118
                    7566   ; strcpyInstruction("BCLR ") ;
0000437C  4879 0000 7567          pea       @m68kde~1_239.L
00004380  7850      
00004382  4E93      7568          jsr       (A3)
00004384  584F      7569          addq.w    #4,A7
                    7570   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004386  2042      7571          move.l    D2,A0
00004388  3228 0002 7572          move.w    2(A0),D1
0000438C  48C1      7573          ext.l     D1
0000438E  2F01      7574          move.l    D1,-(A7)
00004390  4879 0000 7575          pea       @m68kde~1_238.L
00004394  784A      
00004396  2F0C      7576          move.l    A4,-(A7)
00004398  4E95      7577          jsr       (A5)
0000439A  DEFC 000C 7578          add.w     #12,A7
                    7579   ; InstructionSize = 2 ;
0000439E  24BC 0000 7580          move.l    #2,(A2)
000043A2  0002      
                    7581   ; strcatInstruction(TempString) ;
000043A4  2F0C      7582          move.l    A4,-(A7)
000043A6  4EB8 0CCC 7583          jsr       _strcatInstruction
000043AA  584F      7584          addq.w    #4,A7
                    7585   ; Decode6BitEA(OpCode,0,1,0) ;
000043AC  42A7      7586          clr.l     -(A7)
000043AE  4878 0001 7587          pea       1
000043B2  42A7      7588          clr.l     -(A7)
000043B4  2F02      7589          move.l    D2,-(A7)
000043B6  4EB8 3410 7590          jsr       _Decode6BitEA
000043BA  DEFC 0010 7591          add.w     #16,A7
                    7592   DisassembleInstruction_118:
                    7593   ; }
                    7594   ; /////////////////////////////////////////////////////////////////////////////////
                    7595   ; // if instruction is BSET dn,<EA>
                    7596   ; /////////////////////////////////////////////////////////////////////////////////
                    7597   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
000043BE  2042      7598          move.l    D2,A0
000043C0  3010      7599          move.w    (A0),D0
000043C2  C07C F1C0 7600          and.w     #61888,D0
000043C6  0C40 01C0 7601          cmp.w     #448,D0
000043CA  6600 004C 7602          bne       DisassembleInstruction_120
                    7603   ; InstructionSize = 1;
000043CE  24BC 0000 7604          move.l    #1,(A2)
000043D2  0001      
                    7605   ; strcpyInstruction("BSET ") ;
000043D4  4879 0000 7606          pea       @m68kde~1_240.L
000043D8  7856      
000043DA  4E93      7607          jsr       (A3)
000043DC  584F      7608          addq.w    #4,A7
                    7609   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000043DE  2042      7610          move.l    D2,A0
000043E0  3210      7611          move.w    (A0),D1
000043E2  E041      7612          asr.w     #8,D1
000043E4  E241      7613          asr.w     #1,D1
000043E6  C27C 0007 7614          and.w     #7,D1
000043EA  C2BC 0000 7615          and.l     #65535,D1
000043EE  FFFF      
000043F0  2F01      7616          move.l    D1,-(A7)
000043F2  4879 0000 7617          pea       @m68kde~1_237.L
000043F6  7844      
000043F8  2F0C      7618          move.l    A4,-(A7)
000043FA  4E95      7619          jsr       (A5)
000043FC  DEFC 000C 7620          add.w     #12,A7
                    7621   ; strcatInstruction(TempString) ;
00004400  2F0C      7622          move.l    A4,-(A7)
00004402  4EB8 0CCC 7623          jsr       _strcatInstruction
00004406  584F      7624          addq.w    #4,A7
                    7625   ; Decode6BitEA(OpCode,0,0,0) ;
00004408  42A7      7626          clr.l     -(A7)
0000440A  42A7      7627          clr.l     -(A7)
0000440C  42A7      7628          clr.l     -(A7)
0000440E  2F02      7629          move.l    D2,-(A7)
00004410  4EB8 3410 7630          jsr       _Decode6BitEA
00004414  DEFC 0010 7631          add.w     #16,A7
                    7632   DisassembleInstruction_120:
                    7633   ; }
                    7634   ; /////////////////////////////////////////////////////////////////////////////////
                    7635   ; // if instruction is BSET #data,<EA>
                    7636   ; /////////////////////////////////////////////////////////////////////////////////
                    7637   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
00004418  2042      7638          move.l    D2,A0
0000441A  3010      7639          move.w    (A0),D0
0000441C  C07C FFC0 7640          and.w     #65472,D0
00004420  0C40 08C0 7641          cmp.w     #2240,D0
00004424  6600 0044 7642          bne       DisassembleInstruction_122
                    7643   ; strcpyInstruction("BSET ") ;
00004428  4879 0000 7644          pea       @m68kde~1_240.L
0000442C  7856      
0000442E  4E93      7645          jsr       (A3)
00004430  584F      7646          addq.w    #4,A7
                    7647   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004432  2042      7648          move.l    D2,A0
00004434  3228 0002 7649          move.w    2(A0),D1
00004438  48C1      7650          ext.l     D1
0000443A  2F01      7651          move.l    D1,-(A7)
0000443C  4879 0000 7652          pea       @m68kde~1_238.L
00004440  784A      
00004442  2F0C      7653          move.l    A4,-(A7)
00004444  4E95      7654          jsr       (A5)
00004446  DEFC 000C 7655          add.w     #12,A7
                    7656   ; InstructionSize = 2 ;
0000444A  24BC 0000 7657          move.l    #2,(A2)
0000444E  0002      
                    7658   ; strcatInstruction(TempString) ;
00004450  2F0C      7659          move.l    A4,-(A7)
00004452  4EB8 0CCC 7660          jsr       _strcatInstruction
00004456  584F      7661          addq.w    #4,A7
                    7662   ; Decode6BitEA(OpCode,0,1,0) ;
00004458  42A7      7663          clr.l     -(A7)
0000445A  4878 0001 7664          pea       1
0000445E  42A7      7665          clr.l     -(A7)
00004460  2F02      7666          move.l    D2,-(A7)
00004462  4EB8 3410 7667          jsr       _Decode6BitEA
00004466  DEFC 0010 7668          add.w     #16,A7
                    7669   DisassembleInstruction_122:
                    7670   ; }
                    7671   ; /////////////////////////////////////////////////////////////////////////////////
                    7672   ; // if instruction is BTST dn,<EA>
                    7673   ; /////////////////////////////////////////////////////////////////////////////////
                    7674   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
0000446A  2042      7675          move.l    D2,A0
0000446C  3010      7676          move.w    (A0),D0
0000446E  C07C F1C0 7677          and.w     #61888,D0
00004472  0C40 0100 7678          cmp.w     #256,D0
00004476  6600 004C 7679          bne       DisassembleInstruction_124
                    7680   ; InstructionSize = 1;
0000447A  24BC 0000 7681          move.l    #1,(A2)
0000447E  0001      
                    7682   ; strcpyInstruction("BTST ") ;
00004480  4879 0000 7683          pea       @m68kde~1_241.L
00004484  785C      
00004486  4E93      7684          jsr       (A3)
00004488  584F      7685          addq.w    #4,A7
                    7686   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000448A  2042      7687          move.l    D2,A0
0000448C  3210      7688          move.w    (A0),D1
0000448E  E041      7689          asr.w     #8,D1
00004490  E241      7690          asr.w     #1,D1
00004492  C27C 0007 7691          and.w     #7,D1
00004496  C2BC 0000 7692          and.l     #65535,D1
0000449A  FFFF      
0000449C  2F01      7693          move.l    D1,-(A7)
0000449E  4879 0000 7694          pea       @m68kde~1_237.L
000044A2  7844      
000044A4  2F0C      7695          move.l    A4,-(A7)
000044A6  4E95      7696          jsr       (A5)
000044A8  DEFC 000C 7697          add.w     #12,A7
                    7698   ; strcatInstruction(TempString) ;
000044AC  2F0C      7699          move.l    A4,-(A7)
000044AE  4EB8 0CCC 7700          jsr       _strcatInstruction
000044B2  584F      7701          addq.w    #4,A7
                    7702   ; Decode6BitEA(OpCode,0,0,0) ;
000044B4  42A7      7703          clr.l     -(A7)
000044B6  42A7      7704          clr.l     -(A7)
000044B8  42A7      7705          clr.l     -(A7)
000044BA  2F02      7706          move.l    D2,-(A7)
000044BC  4EB8 3410 7707          jsr       _Decode6BitEA
000044C0  DEFC 0010 7708          add.w     #16,A7
                    7709   DisassembleInstruction_124:
                    7710   ; }
                    7711   ; /////////////////////////////////////////////////////////////////////////////////
                    7712   ; // if instruction is BTST #data,<EA>
                    7713   ; /////////////////////////////////////////////////////////////////////////////////
                    7714   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
000044C4  2042      7715          move.l    D2,A0
000044C6  3010      7716          move.w    (A0),D0
000044C8  C07C FFC0 7717          and.w     #65472,D0
000044CC  0C40 0800 7718          cmp.w     #2048,D0
000044D0  6600 0044 7719          bne       DisassembleInstruction_126
                    7720   ; strcpyInstruction("BTST ") ;
000044D4  4879 0000 7721          pea       @m68kde~1_241.L
000044D8  785C      
000044DA  4E93      7722          jsr       (A3)
000044DC  584F      7723          addq.w    #4,A7
                    7724   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000044DE  2042      7725          move.l    D2,A0
000044E0  3228 0002 7726          move.w    2(A0),D1
000044E4  48C1      7727          ext.l     D1
000044E6  2F01      7728          move.l    D1,-(A7)
000044E8  4879 0000 7729          pea       @m68kde~1_238.L
000044EC  784A      
000044EE  2F0C      7730          move.l    A4,-(A7)
000044F0  4E95      7731          jsr       (A5)
000044F2  DEFC 000C 7732          add.w     #12,A7
                    7733   ; InstructionSize = 2 ;
000044F6  24BC 0000 7734          move.l    #2,(A2)
000044FA  0002      
                    7735   ; strcatInstruction(TempString) ;
000044FC  2F0C      7736          move.l    A4,-(A7)
000044FE  4EB8 0CCC 7737          jsr       _strcatInstruction
00004502  584F      7738          addq.w    #4,A7
                    7739   ; Decode6BitEA(OpCode,0,1,0) ;
00004504  42A7      7740          clr.l     -(A7)
00004506  4878 0001 7741          pea       1
0000450A  42A7      7742          clr.l     -(A7)
0000450C  2F02      7743          move.l    D2,-(A7)
0000450E  4EB8 3410 7744          jsr       _Decode6BitEA
00004512  DEFC 0010 7745          add.w     #16,A7
                    7746   DisassembleInstruction_126:
                    7747   ; }
                    7748   ; /////////////////////////////////////////////////////////////////////////////////
                    7749   ; // if instruction is CHK.W <EA>,DN
                    7750   ; /////////////////////////////////////////////////////////////////////////////////
                    7751   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
00004516  2042      7752          move.l    D2,A0
00004518  3010      7753          move.w    (A0),D0
0000451A  C07C F1C0 7754          and.w     #61888,D0
0000451E  0C40 4180 7755          cmp.w     #16768,D0
00004522  6600 004C 7756          bne       DisassembleInstruction_128
                    7757   ; InstructionSize = 1;
00004526  24BC 0000 7758          move.l    #1,(A2)
0000452A  0001      
                    7759   ; strcpyInstruction("CHK ") ;
0000452C  4879 0000 7760          pea       @m68kde~1_242.L
00004530  7862      
00004532  4E93      7761          jsr       (A3)
00004534  584F      7762          addq.w    #4,A7
                    7763   ; Decode6BitEA(OpCode,0,0,0) ;
00004536  42A7      7764          clr.l     -(A7)
00004538  42A7      7765          clr.l     -(A7)
0000453A  42A7      7766          clr.l     -(A7)
0000453C  2F02      7767          move.l    D2,-(A7)
0000453E  4EB8 3410 7768          jsr       _Decode6BitEA
00004542  DEFC 0010 7769          add.w     #16,A7
                    7770   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004546  2042      7771          move.l    D2,A0
00004548  3210      7772          move.w    (A0),D1
0000454A  E041      7773          asr.w     #8,D1
0000454C  E241      7774          asr.w     #1,D1
0000454E  C27C 0007 7775          and.w     #7,D1
00004552  C2BC 0000 7776          and.l     #65535,D1
00004556  FFFF      
00004558  2F01      7777          move.l    D1,-(A7)
0000455A  4879 0000 7778          pea       @m68kde~1_243.L
0000455E  7868      
00004560  2F0C      7779          move.l    A4,-(A7)
00004562  4E95      7780          jsr       (A5)
00004564  DEFC 000C 7781          add.w     #12,A7
                    7782   ; strcatInstruction(TempString) ;
00004568  2F0C      7783          move.l    A4,-(A7)
0000456A  4EB8 0CCC 7784          jsr       _strcatInstruction
0000456E  584F      7785          addq.w    #4,A7
                    7786   DisassembleInstruction_128:
                    7787   ; }
                    7788   ; /////////////////////////////////////////////////////////////////////////////////
                    7789   ; // if instruction is CLR <EA>
                    7790   ; /////////////////////////////////////////////////////////////////////////////////
                    7791   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
00004570  2042      7792          move.l    D2,A0
00004572  3010      7793          move.w    (A0),D0
00004574  C07C FF00 7794          and.w     #65280,D0
00004578  0C40 4200 7795          cmp.w     #16896,D0
0000457C  6600 0034 7796          bne       DisassembleInstruction_130
                    7797   ; InstructionSize = 1;
00004580  24BC 0000 7798          move.l    #1,(A2)
00004584  0001      
                    7799   ; strcpyInstruction("CLR") ;
00004586  4879 0000 7800          pea       @m68kde~1_244.L
0000458A  786E      
0000458C  4E93      7801          jsr       (A3)
0000458E  584F      7802          addq.w    #4,A7
                    7803   ; Decode2BitOperandSize(*OpCode) ;
00004590  2042      7804          move.l    D2,A0
00004592  3210      7805          move.w    (A0),D1
00004594  C2BC 0000 7806          and.l     #65535,D1
00004598  FFFF      
0000459A  2F01      7807          move.l    D1,-(A7)
0000459C  4EB8 317C 7808          jsr       _Decode2BitOperandSize
000045A0  584F      7809          addq.w    #4,A7
                    7810   ; Decode6BitEA(OpCode,0,0,0) ;
000045A2  42A7      7811          clr.l     -(A7)
000045A4  42A7      7812          clr.l     -(A7)
000045A6  42A7      7813          clr.l     -(A7)
000045A8  2F02      7814          move.l    D2,-(A7)
000045AA  4EB8 3410 7815          jsr       _Decode6BitEA
000045AE  DEFC 0010 7816          add.w     #16,A7
                    7817   DisassembleInstruction_130:
                    7818   ; }
                    7819   ; /////////////////////////////////////////////////////////////////////////////////
                    7820   ; // if instruction is CMP, CMPA
                    7821   ; /////////////////////////////////////////////////////////////////////////////////
                    7822   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
000045B2  2042      7823          move.l    D2,A0
000045B4  3010      7824          move.w    (A0),D0
000045B6  C07C F000 7825          and.w     #61440,D0
000045BA  0C40 B000 7826          cmp.w     #45056,D0
000045BE  6600 008C 7827          bne       DisassembleInstruction_135
                    7828   ; {
                    7829   ; InstructionSize = 1;
000045C2  24BC 0000 7830          move.l    #1,(A2)
000045C6  0001      
                    7831   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000045C8  2042      7832          move.l    D2,A0
000045CA  3010      7833          move.w    (A0),D0
000045CC  EC40      7834          asr.w     #6,D0
000045CE  C07C 0007 7835          and.w     #7,D0
000045D2  3600      7836          move.w    D0,D3
                    7837   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
000045D4  0C43 0003 7838          cmp.w     #3,D3
000045D8  6708      7839          beq.s     DisassembleInstruction_136
000045DA  0C43 0007 7840          cmp.w     #7,D3
000045DE  6600 005A 7841          bne       DisassembleInstruction_134
                    7842   DisassembleInstruction_136:
                    7843   ; if(OpMode == (unsigned short int)(0x0003))
000045E2  0C43 0003 7844          cmp.w     #3,D3
000045E6  660C      7845          bne.s     DisassembleInstruction_137
                    7846   ; strcpyInstruction("CMPA.W ") ;
000045E8  4879 0000 7847          pea       @m68kde~1_245.L
000045EC  7872      
000045EE  4E93      7848          jsr       (A3)
000045F0  584F      7849          addq.w    #4,A7
000045F2  600A      7850          bra.s     DisassembleInstruction_138
                    7851   DisassembleInstruction_137:
                    7852   ; else
                    7853   ; strcpyInstruction("CMPA.L ") ;
000045F4  4879 0000 7854          pea       @m68kde~1_246.L
000045F8  787A      
000045FA  4E93      7855          jsr       (A3)
000045FC  584F      7856          addq.w    #4,A7
                    7857   DisassembleInstruction_138:
                    7858   ; Decode6BitEA(OpCode,0,0,0) ;
000045FE  42A7      7859          clr.l     -(A7)
00004600  42A7      7860          clr.l     -(A7)
00004602  42A7      7861          clr.l     -(A7)
00004604  2F02      7862          move.l    D2,-(A7)
00004606  4EB8 3410 7863          jsr       _Decode6BitEA
0000460A  DEFC 0010 7864          add.w     #16,A7
                    7865   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
0000460E  2042      7866          move.l    D2,A0
00004610  3210      7867          move.w    (A0),D1
00004612  E041      7868          asr.w     #8,D1
00004614  E241      7869          asr.w     #1,D1
00004616  C27C 0007 7870          and.w     #7,D1
0000461A  C2BC 0000 7871          and.l     #65535,D1
0000461E  FFFF      
00004620  2F01      7872          move.l    D1,-(A7)
00004622  4879 0000 7873          pea       @m68kde~1_247.L
00004626  7882      
00004628  2F0C      7874          move.l    A4,-(A7)
0000462A  4E95      7875          jsr       (A5)
0000462C  DEFC 000C 7876          add.w     #12,A7
                    7877   ; strcatInstruction(TempString) ;
00004630  2F0C      7878          move.l    A4,-(A7)
00004632  4EB8 0CCC 7879          jsr       _strcatInstruction
00004636  584F      7880          addq.w    #4,A7
00004638  6012      7881          bra.s     DisassembleInstruction_135
                    7882   DisassembleInstruction_134:
                    7883   ; }
                    7884   ; else {
                    7885   ; strcpyInstruction("CMP") ;
0000463A  4879 0000 7886          pea       @m68kde~1_248.L
0000463E  7888      
00004640  4E93      7887          jsr       (A3)
00004642  584F      7888          addq.w    #4,A7
                    7889   ; Decode3BitOperandMode(OpCode) ;
00004644  2F02      7890          move.l    D2,-(A7)
00004646  4EB8 3838 7891          jsr       _Decode3BitOperandMode
0000464A  584F      7892          addq.w    #4,A7
                    7893   DisassembleInstruction_135:
                    7894   ; }
                    7895   ; }
                    7896   ; /////////////////////////////////////////////////////////////////////////////////
                    7897   ; // if instruction is CMPM
                    7898   ; /////////////////////////////////////////////////////////////////////////////////
                    7899   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
0000464C  2042      7900          move.l    D2,A0
0000464E  3010      7901          move.w    (A0),D0
00004650  C07C F138 7902          and.w     #61752,D0
00004654  0C40 B108 7903          cmp.w     #45320,D0
00004658  6600 007A 7904          bne       DisassembleInstruction_141
                    7905   ; {
                    7906   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000465C  2042      7907          move.l    D2,A0
0000465E  3010      7908          move.w    (A0),D0
00004660  EC40      7909          asr.w     #6,D0
00004662  C07C 0003 7910          and.w     #3,D0
00004666  3600      7911          move.w    D0,D3
                    7912   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
00004668  0C43 0000 7913          cmp.w     #0,D3
0000466C  6500 0066 7914          blo       DisassembleInstruction_141
00004670  0C43 0002 7915          cmp.w     #2,D3
00004674  6200 005E 7916          bhi       DisassembleInstruction_141
                    7917   ; {
                    7918   ; InstructionSize = 1;
00004678  24BC 0000 7919          move.l    #1,(A2)
0000467C  0001      
                    7920   ; strcpyInstruction("CMPM") ;
0000467E  4879 0000 7921          pea       @m68kde~1_249.L
00004682  788C      
00004684  4E93      7922          jsr       (A3)
00004686  584F      7923          addq.w    #4,A7
                    7924   ; Decode2BitOperandSize(*OpCode) ;
00004688  2042      7925          move.l    D2,A0
0000468A  3210      7926          move.w    (A0),D1
0000468C  C2BC 0000 7927          and.l     #65535,D1
00004690  FFFF      
00004692  2F01      7928          move.l    D1,-(A7)
00004694  4EB8 317C 7929          jsr       _Decode2BitOperandSize
00004698  584F      7930          addq.w    #4,A7
                    7931   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
0000469A  2042      7932          move.l    D2,A0
0000469C  3210      7933          move.w    (A0),D1
0000469E  E041      7934          asr.w     #8,D1
000046A0  E241      7935          asr.w     #1,D1
000046A2  C27C 0007 7936          and.w     #7,D1
000046A6  C2BC 0000 7937          and.l     #65535,D1
000046AA  FFFF      
000046AC  2F01      7938          move.l    D1,-(A7)
000046AE  2042      7939          move.l    D2,A0
000046B0  3210      7940          move.w    (A0),D1
000046B2  C27C 0007 7941          and.w     #7,D1
000046B6  C2BC 0000 7942          and.l     #65535,D1
000046BA  FFFF      
000046BC  2F01      7943          move.l    D1,-(A7)
000046BE  4879 0000 7944          pea       @m68kde~1_250.L
000046C2  7892      
000046C4  2F0C      7945          move.l    A4,-(A7)
000046C6  4E95      7946          jsr       (A5)
000046C8  DEFC 0010 7947          add.w     #16,A7
                    7948   ; strcatInstruction(TempString) ;
000046CC  2F0C      7949          move.l    A4,-(A7)
000046CE  4EB8 0CCC 7950          jsr       _strcatInstruction
000046D2  584F      7951          addq.w    #4,A7
                    7952   DisassembleInstruction_141:
                    7953   ; }
                    7954   ; }
                    7955   ; /////////////////////////////////////////////////////////////////////////////////
                    7956   ; // if instruction is DBCC
                    7957   ; /////////////////////////////////////////////////////////////////////////////////
                    7958   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
000046D4  2042      7959          move.l    D2,A0
000046D6  3010      7960          move.w    (A0),D0
000046D8  C07C F0F8 7961          and.w     #61688,D0
000046DC  0C40 50C8 7962          cmp.w     #20680,D0
000046E0  6600 0084 7963          bne       DisassembleInstruction_143
                    7964   ; {
                    7965   ; InstructionSize = 2;
000046E4  24BC 0000 7966          move.l    #2,(A2)
000046E8  0002      
                    7967   ; strcpy(Instruction,"DB") ;
000046EA  4879 0000 7968          pea       @m68kde~1_251.L
000046EE  78A0      
000046F0  4879 0B00 7969          pea       _Instruction.L
000046F4  04E2      
000046F6  4EB9 0000 7970          jsr       _strcpy
000046FA  58C6      
000046FC  504F      7971          addq.w    #8,A7
                    7972   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
000046FE  2042      7973          move.l    D2,A0
00004700  3010      7974          move.w    (A0),D0
00004702  E040      7975          asr.w     #8,D0
00004704  C07C 000F 7976          and.w     #15,D0
00004708  1D40 FFE9 7977          move.b    D0,-23(A6)
                    7978   ; DecodeBranchCondition(Condition) ;
0000470C  122E FFE9 7979          move.b    -23(A6),D1
00004710  C27C 00FF 7980          and.w     #255,D1
00004714  C2BC 0000 7981          and.l     #65535,D1
00004718  FFFF      
0000471A  2F01      7982          move.l    D1,-(A7)
0000471C  4EB8 38CE 7983          jsr       _DecodeBranchCondition
00004720  584F      7984          addq.w    #4,A7
                    7985   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00004722  2202      7986          move.l    D2,D1
00004724  2042      7987          move.l    D2,A0
00004726  2F00      7988          move.l    D0,-(A7)
00004728  3028 0002 7989          move.w    2(A0),D0
0000472C  48C0      7990          ext.l     D0
0000472E  D280      7991          add.l     D0,D1
00004730  201F      7992          move.l    (A7)+,D0
00004732  5481      7993          addq.l    #2,D1
00004734  2F01      7994          move.l    D1,-(A7)
00004736  2042      7995          move.l    D2,A0
00004738  3228 0002 7996          move.w    2(A0),D1
0000473C  48C1      7997          ext.l     D1
0000473E  2F01      7998          move.l    D1,-(A7)
00004740  2042      7999          move.l    D2,A0
00004742  3210      8000          move.w    (A0),D1
00004744  C27C 0007 8001          and.w     #7,D1
00004748  C2BC 0000 8002          and.l     #65535,D1
0000474C  FFFF      
0000474E  2F01      8003          move.l    D1,-(A7)
00004750  4879 0000 8004          pea       @m68kde~1_252.L
00004754  78A4      
00004756  2F0C      8005          move.l    A4,-(A7)
00004758  4E95      8006          jsr       (A5)
0000475A  DEFC 0014 8007          add.w     #20,A7
                    8008   ; strcatInstruction(TempString) ;
0000475E  2F0C      8009          move.l    A4,-(A7)
00004760  4EB8 0CCC 8010          jsr       _strcatInstruction
00004764  584F      8011          addq.w    #4,A7
                    8012   DisassembleInstruction_143:
                    8013   ; }
                    8014   ; /////////////////////////////////////////////////////////////////////////////////
                    8015   ; // if instruction is DIVS
                    8016   ; /////////////////////////////////////////////////////////////////////////////////
                    8017   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
00004766  2042      8018          move.l    D2,A0
00004768  3010      8019          move.w    (A0),D0
0000476A  C07C F1C0 8020          and.w     #61888,D0
0000476E  0C40 81C0 8021          cmp.w     #33216,D0
00004772  6600 004A 8022          bne       DisassembleInstruction_145
                    8023   ; {
                    8024   ; InstructionSize = 1;
00004776  24BC 0000 8025          move.l    #1,(A2)
0000477A  0001      
                    8026   ; strcpy(Instruction,"DIVS ") ;
0000477C  4879 0000 8027          pea       @m68kde~1_253.L
00004780  78BC      
00004782  4879 0B00 8028          pea       _Instruction.L
00004786  04E2      
00004788  4EB9 0000 8029          jsr       _strcpy
0000478C  58C6      
0000478E  504F      8030          addq.w    #8,A7
                    8031   ; Decode6BitEA(OpCode,0,0,0) ;
00004790  42A7      8032          clr.l     -(A7)
00004792  42A7      8033          clr.l     -(A7)
00004794  42A7      8034          clr.l     -(A7)
00004796  2F02      8035          move.l    D2,-(A7)
00004798  4EB8 3410 8036          jsr       _Decode6BitEA
0000479C  DEFC 0010 8037          add.w     #16,A7
                    8038   ; strcatInstruction(",") ;
000047A0  4879 0000 8039          pea       @m68kde~1_188.L
000047A4  771C      
000047A6  4EB8 0CCC 8040          jsr       _strcatInstruction
000047AA  584F      8041          addq.w    #4,A7
                    8042   ; Decode3BitDataRegister(*OpCode) ;
000047AC  2042      8043          move.l    D2,A0
000047AE  3210      8044          move.w    (A0),D1
000047B0  C2BC 0000 8045          and.l     #65535,D1
000047B4  FFFF      
000047B6  2F01      8046          move.l    D1,-(A7)
000047B8  4EB8 31D8 8047          jsr       _Decode3BitDataRegister
000047BC  584F      8048          addq.w    #4,A7
                    8049   DisassembleInstruction_145:
                    8050   ; }
                    8051   ; /////////////////////////////////////////////////////////////////////////////////
                    8052   ; // if instruction is DIVU
                    8053   ; /////////////////////////////////////////////////////////////////////////////////
                    8054   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
000047BE  2042      8055          move.l    D2,A0
000047C0  3010      8056          move.w    (A0),D0
000047C2  C07C F1C0 8057          and.w     #61888,D0
000047C6  0C40 80C0 8058          cmp.w     #32960,D0
000047CA  6600 004A 8059          bne       DisassembleInstruction_147
                    8060   ; {
                    8061   ; InstructionSize = 1;
000047CE  24BC 0000 8062          move.l    #1,(A2)
000047D2  0001      
                    8063   ; strcpy(Instruction,"DIVU ") ;
000047D4  4879 0000 8064          pea       @m68kde~1_254.L
000047D8  78C2      
000047DA  4879 0B00 8065          pea       _Instruction.L
000047DE  04E2      
000047E0  4EB9 0000 8066          jsr       _strcpy
000047E4  58C6      
000047E6  504F      8067          addq.w    #8,A7
                    8068   ; Decode6BitEA(OpCode,0,0,0) ;
000047E8  42A7      8069          clr.l     -(A7)
000047EA  42A7      8070          clr.l     -(A7)
000047EC  42A7      8071          clr.l     -(A7)
000047EE  2F02      8072          move.l    D2,-(A7)
000047F0  4EB8 3410 8073          jsr       _Decode6BitEA
000047F4  DEFC 0010 8074          add.w     #16,A7
                    8075   ; strcatInstruction(",") ;
000047F8  4879 0000 8076          pea       @m68kde~1_188.L
000047FC  771C      
000047FE  4EB8 0CCC 8077          jsr       _strcatInstruction
00004802  584F      8078          addq.w    #4,A7
                    8079   ; Decode3BitDataRegister(*OpCode) ;
00004804  2042      8080          move.l    D2,A0
00004806  3210      8081          move.w    (A0),D1
00004808  C2BC 0000 8082          and.l     #65535,D1
0000480C  FFFF      
0000480E  2F01      8083          move.l    D1,-(A7)
00004810  4EB8 31D8 8084          jsr       _Decode3BitDataRegister
00004814  584F      8085          addq.w    #4,A7
                    8086   DisassembleInstruction_147:
                    8087   ; }
                    8088   ; /////////////////////////////////////////////////////////////////////////////////
                    8089   ; // if instruction is EOR
                    8090   ; /////////////////////////////////////////////////////////////////////////////////
                    8091   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
00004816  2042      8092          move.l    D2,A0
00004818  3010      8093          move.w    (A0),D0
0000481A  C07C F000 8094          and.w     #61440,D0
0000481E  0C40 B000 8095          cmp.w     #45056,D0
00004822  6600 004A 8096          bne       DisassembleInstruction_151
                    8097   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004826  2042      8098          move.l    D2,A0
00004828  3010      8099          move.w    (A0),D0
0000482A  EC40      8100          asr.w     #6,D0
0000482C  C07C 0007 8101          and.w     #7,D0
00004830  3600      8102          move.w    D0,D3
                    8103   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
00004832  2042      8104          move.l    D2,A0
00004834  3010      8105          move.w    (A0),D0
00004836  E640      8106          asr.w     #3,D0
00004838  C07C 0007 8107          and.w     #7,D0
0000483C  3D40 FFEC 8108          move.w    D0,-20(A6)
                    8109   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
00004840  0C43 0004 8110          cmp.w     #4,D3
00004844  6528      8111          blo.s     DisassembleInstruction_151
00004846  0C43 0006 8112          cmp.w     #6,D3
0000484A  6222      8113          bhi.s     DisassembleInstruction_151
0000484C  302E FFEC 8114          move.w    -20(A6),D0
00004850  0C40 0001 8115          cmp.w     #1,D0
00004854  6718      8116          beq.s     DisassembleInstruction_151
                    8117   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    8118   ; (EAMode != (unsigned short int)(0x0001)))
                    8119   ; {
                    8120   ; InstructionSize = 1;
00004856  24BC 0000 8121          move.l    #1,(A2)
0000485A  0001      
                    8122   ; strcpyInstruction("EOR") ;
0000485C  4879 0000 8123          pea       @m68kde~1_255.L
00004860  78C8      
00004862  4E93      8124          jsr       (A3)
00004864  584F      8125          addq.w    #4,A7
                    8126   ; Decode3BitOperandMode(OpCode);
00004866  2F02      8127          move.l    D2,-(A7)
00004868  4EB8 3838 8128          jsr       _Decode3BitOperandMode
0000486C  584F      8129          addq.w    #4,A7
                    8130   DisassembleInstruction_151:
                    8131   ; }
                    8132   ; }
                    8133   ; /////////////////////////////////////////////////////////////////////////////////
                    8134   ; // if instruction is EOR to CCR
                    8135   ; /////////////////////////////////////////////////////////////////////////////////
                    8136   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
0000486E  2042      8137          move.l    D2,A0
00004870  3010      8138          move.w    (A0),D0
00004872  0C40 0A3C 8139          cmp.w     #2620,D0
00004876  662C      8140          bne.s     DisassembleInstruction_153
                    8141   ; InstructionSize = 1;
00004878  24BC 0000 8142          move.l    #1,(A2)
0000487C  0001      
                    8143   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
0000487E  2042      8144          move.l    D2,A0
00004880  3228 0002 8145          move.w    2(A0),D1
00004884  C27C 00FF 8146          and.w     #255,D1
00004888  C2BC 0000 8147          and.l     #65535,D1
0000488C  FFFF      
0000488E  2F01      8148          move.l    D1,-(A7)
00004890  4879 0000 8149          pea       @m68kde~1_256.L
00004894  78CC      
00004896  4879 0B00 8150          pea       _Instruction.L
0000489A  04E2      
0000489C  4E95      8151          jsr       (A5)
0000489E  DEFC 000C 8152          add.w     #12,A7
                    8153   ; InstructionSize += 1;
000048A2  5292      8154          addq.l    #1,(A2)
                    8155   DisassembleInstruction_153:
                    8156   ; }
                    8157   ; /////////////////////////////////////////////////////////////////////////////////
                    8158   ; // if instruction is EORI #data,SR
                    8159   ; /////////////////////////////////////////////////////////////////////////////////
                    8160   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
000048A4  2042      8161          move.l    D2,A0
000048A6  3010      8162          move.w    (A0),D0
000048A8  0C40 0A7C 8163          cmp.w     #2684,D0
000048AC  6622      8164          bne.s     DisassembleInstruction_155
                    8165   ; InstructionSize = 2;
000048AE  24BC 0000 8166          move.l    #2,(A2)
000048B2  0002      
                    8167   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
000048B4  2042      8168          move.l    D2,A0
000048B6  3228 0002 8169          move.w    2(A0),D1
000048BA  48C1      8170          ext.l     D1
000048BC  2F01      8171          move.l    D1,-(A7)
000048BE  4879 0000 8172          pea       @m68kde~1_257.L
000048C2  78DC      
000048C4  4879 0B00 8173          pea       _Instruction.L
000048C8  04E2      
000048CA  4E95      8174          jsr       (A5)
000048CC  DEFC 000C 8175          add.w     #12,A7
                    8176   DisassembleInstruction_155:
                    8177   ; }
                    8178   ; /////////////////////////////////////////////////////////////////////////////////
                    8179   ; // if instruction is EXG
                    8180   ; /////////////////////////////////////////////////////////////////////////////////
                    8181   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
000048D0  2042      8182          move.l    D2,A0
000048D2  3010      8183          move.w    (A0),D0
000048D4  C07C F100 8184          and.w     #61696,D0
000048D8  0C40 C100 8185          cmp.w     #49408,D0
000048DC  6600 00E0 8186          bne       DisassembleInstruction_163
                    8187   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
000048E0  2042      8188          move.l    D2,A0
000048E2  3010      8189          move.w    (A0),D0
000048E4  E040      8190          asr.w     #8,D0
000048E6  E240      8191          asr.w     #1,D0
000048E8  C07C 0007 8192          and.w     #7,D0
000048EC  3D40 FFF0 8193          move.w    D0,-16(A6)
                    8194   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
000048F0  2042      8195          move.l    D2,A0
000048F2  3010      8196          move.w    (A0),D0
000048F4  C07C 0007 8197          and.w     #7,D0
000048F8  3D40 FFF2 8198          move.w    D0,-14(A6)
                    8199   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
000048FC  2042      8200          move.l    D2,A0
000048FE  3010      8201          move.w    (A0),D0
00004900  E640      8202          asr.w     #3,D0
00004902  C07C 001F 8203          and.w     #31,D0
00004906  3D40 FFF4 8204          move.w    D0,-12(A6)
                    8205   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
0000490A  302E FFF4 8206          move.w    -12(A6),D0
0000490E  0C40 0008 8207          cmp.w     #8,D0
00004912  6634      8208          bne.s     DisassembleInstruction_159
                    8209   ; InstructionSize = 1;
00004914  24BC 0000 8210          move.l    #1,(A2)
00004918  0001      
                    8211   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
0000491A  322E FFF2 8212          move.w    -14(A6),D1
0000491E  C2BC 0000 8213          and.l     #65535,D1
00004922  FFFF      
00004924  2F01      8214          move.l    D1,-(A7)
00004926  322E FFF0 8215          move.w    -16(A6),D1
0000492A  C2BC 0000 8216          and.l     #65535,D1
0000492E  FFFF      
00004930  2F01      8217          move.l    D1,-(A7)
00004932  4879 0000 8218          pea       @m68kde~1_258.L
00004936  78EA      
00004938  4879 0B00 8219          pea       _Instruction.L
0000493C  04E2      
0000493E  4E95      8220          jsr       (A5)
00004940  DEFC 0010 8221          add.w     #16,A7
00004944  6000 0078 8222          bra       DisassembleInstruction_163
                    8223   DisassembleInstruction_159:
                    8224   ; }
                    8225   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
00004948  302E FFF4 8226          move.w    -12(A6),D0
0000494C  0C40 0009 8227          cmp.w     #9,D0
00004950  6632      8228          bne.s     DisassembleInstruction_161
                    8229   ; InstructionSize = 1;
00004952  24BC 0000 8230          move.l    #1,(A2)
00004956  0001      
                    8231   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
00004958  322E FFF2 8232          move.w    -14(A6),D1
0000495C  C2BC 0000 8233          and.l     #65535,D1
00004960  FFFF      
00004962  2F01      8234          move.l    D1,-(A7)
00004964  322E FFF0 8235          move.w    -16(A6),D1
00004968  C2BC 0000 8236          and.l     #65535,D1
0000496C  FFFF      
0000496E  2F01      8237          move.l    D1,-(A7)
00004970  4879 0000 8238          pea       @m68kde~1_259.L
00004974  78F6      
00004976  4879 0B00 8239          pea       _Instruction.L
0000497A  04E2      
0000497C  4E95      8240          jsr       (A5)
0000497E  DEFC 0010 8241          add.w     #16,A7
00004982  603A      8242          bra.s     DisassembleInstruction_163
                    8243   DisassembleInstruction_161:
                    8244   ; }
                    8245   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
00004984  302E FFF4 8246          move.w    -12(A6),D0
00004988  0C40 0011 8247          cmp.w     #17,D0
0000498C  6630      8248          bne.s     DisassembleInstruction_163
                    8249   ; InstructionSize = 1;
0000498E  24BC 0000 8250          move.l    #1,(A2)
00004992  0001      
                    8251   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
00004994  322E FFF2 8252          move.w    -14(A6),D1
00004998  C2BC 0000 8253          and.l     #65535,D1
0000499C  FFFF      
0000499E  2F01      8254          move.l    D1,-(A7)
000049A0  322E FFF0 8255          move.w    -16(A6),D1
000049A4  C2BC 0000 8256          and.l     #65535,D1
000049A8  FFFF      
000049AA  2F01      8257          move.l    D1,-(A7)
000049AC  4879 0000 8258          pea       @m68kde~1_260.L
000049B0  7902      
000049B2  4879 0B00 8259          pea       _Instruction.L
000049B6  04E2      
000049B8  4E95      8260          jsr       (A5)
000049BA  DEFC 0010 8261          add.w     #16,A7
                    8262   DisassembleInstruction_163:
                    8263   ; }
                    8264   ; }
                    8265   ; /////////////////////////////////////////////////////////////////////////////////
                    8266   ; // if instruction is EXT
                    8267   ; /////////////////////////////////////////////////////////////////////////////////
                    8268   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
000049BE  2042      8269          move.l    D2,A0
000049C0  3010      8270          move.w    (A0),D0
000049C2  C07C FE38 8271          and.w     #65080,D0
000049C6  0C40 4800 8272          cmp.w     #18432,D0
000049CA  6600 0054 8273          bne       DisassembleInstruction_165
                    8274   ; {
                    8275   ; InstructionSize = 1;
000049CE  24BC 0000 8276          move.l    #1,(A2)
000049D2  0001      
                    8277   ; strcpy(Instruction,"EXT") ;
000049D4  4879 0000 8278          pea       @m68kde~1_261.L
000049D8  790E      
000049DA  4879 0B00 8279          pea       _Instruction.L
000049DE  04E2      
000049E0  4EB9 0000 8280          jsr       _strcpy
000049E4  58C6      
000049E6  504F      8281          addq.w    #8,A7
                    8282   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
000049E8  2042      8283          move.l    D2,A0
000049EA  3010      8284          move.w    (A0),D0
000049EC  C07C 00C0 8285          and.w     #192,D0
000049F0  0C40 00C0 8286          cmp.w     #192,D0
000049F4  660E      8287          bne.s     DisassembleInstruction_167
                    8288   ; strcatInstruction(".L ") ;
000049F6  4879 0000 8289          pea       @m68kde~1_172.L
000049FA  76D2      
000049FC  4EB8 0CCC 8290          jsr       _strcatInstruction
00004A00  584F      8291          addq.w    #4,A7
00004A02  600C      8292          bra.s     DisassembleInstruction_168
                    8293   DisassembleInstruction_167:
                    8294   ; else
                    8295   ; strcatInstruction(".W ") ;
00004A04  4879 0000 8296          pea       @m68kde~1_171.L
00004A08  76CE      
00004A0A  4EB8 0CCC 8297          jsr       _strcatInstruction
00004A0E  584F      8298          addq.w    #4,A7
                    8299   DisassembleInstruction_168:
                    8300   ; Decode6BitEA(OpCode,0,0,0) ;
00004A10  42A7      8301          clr.l     -(A7)
00004A12  42A7      8302          clr.l     -(A7)
00004A14  42A7      8303          clr.l     -(A7)
00004A16  2F02      8304          move.l    D2,-(A7)
00004A18  4EB8 3410 8305          jsr       _Decode6BitEA
00004A1C  DEFC 0010 8306          add.w     #16,A7
                    8307   DisassembleInstruction_165:
                    8308   ; }
                    8309   ; /////////////////////////////////////////////////////////////////////////////////
                    8310   ; // if instruction is ILLEGAL $4afc
                    8311   ; /////////////////////////////////////////////////////////////////////////////////
                    8312   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
00004A20  2042      8313          move.l    D2,A0
00004A22  3010      8314          move.w    (A0),D0
00004A24  0C40 4AFC 8315          cmp.w     #19196,D0
00004A28  661A      8316          bne.s     DisassembleInstruction_169
                    8317   ; InstructionSize = 1;
00004A2A  24BC 0000 8318          move.l    #1,(A2)
00004A2E  0001      
                    8319   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
00004A30  4879 0000 8320          pea       @m68kde~1_262.L
00004A34  7912      
00004A36  4879 0B00 8321          pea       _Instruction.L
00004A3A  04E2      
00004A3C  4EB9 0000 8322          jsr       _strcpy
00004A40  58C6      
00004A42  504F      8323          addq.w    #8,A7
                    8324   DisassembleInstruction_169:
                    8325   ; }
                    8326   ; /////////////////////////////////////////////////////////////////////////////////
                    8327   ; // if instruction is JMP
                    8328   ; /////////////////////////////////////////////////////////////////////////////////
                    8329   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
00004A44  2042      8330          move.l    D2,A0
00004A46  3010      8331          move.w    (A0),D0
00004A48  C07C FFC0 8332          and.w     #65472,D0
00004A4C  0C40 4EC0 8333          cmp.w     #20160,D0
00004A50  662A      8334          bne.s     DisassembleInstruction_171
                    8335   ; {
                    8336   ; InstructionSize = 1;
00004A52  24BC 0000 8337          move.l    #1,(A2)
00004A56  0001      
                    8338   ; strcpy(Instruction,"JMP ") ;
00004A58  4879 0000 8339          pea       @m68kde~1_263.L
00004A5C  7922      
00004A5E  4879 0B00 8340          pea       _Instruction.L
00004A62  04E2      
00004A64  4EB9 0000 8341          jsr       _strcpy
00004A68  58C6      
00004A6A  504F      8342          addq.w    #8,A7
                    8343   ; Decode6BitEA(OpCode,0,0,0) ;
00004A6C  42A7      8344          clr.l     -(A7)
00004A6E  42A7      8345          clr.l     -(A7)
00004A70  42A7      8346          clr.l     -(A7)
00004A72  2F02      8347          move.l    D2,-(A7)
00004A74  4EB8 3410 8348          jsr       _Decode6BitEA
00004A78  DEFC 0010 8349          add.w     #16,A7
                    8350   DisassembleInstruction_171:
                    8351   ; }
                    8352   ; /////////////////////////////////////////////////////////////////////////////////
                    8353   ; // if instruction is JSR
                    8354   ; /////////////////////////////////////////////////////////////////////////////////
                    8355   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
00004A7C  2042      8356          move.l    D2,A0
00004A7E  3010      8357          move.w    (A0),D0
00004A80  C07C FFC0 8358          and.w     #65472,D0
00004A84  0C40 4E80 8359          cmp.w     #20096,D0
00004A88  662A      8360          bne.s     DisassembleInstruction_173
                    8361   ; {
                    8362   ; InstructionSize = 1;
00004A8A  24BC 0000 8363          move.l    #1,(A2)
00004A8E  0001      
                    8364   ; strcpy(Instruction,"JSR ") ;
00004A90  4879 0000 8365          pea       @m68kde~1_264.L
00004A94  7928      
00004A96  4879 0B00 8366          pea       _Instruction.L
00004A9A  04E2      
00004A9C  4EB9 0000 8367          jsr       _strcpy
00004AA0  58C6      
00004AA2  504F      8368          addq.w    #8,A7
                    8369   ; Decode6BitEA(OpCode,0,0,0) ;
00004AA4  42A7      8370          clr.l     -(A7)
00004AA6  42A7      8371          clr.l     -(A7)
00004AA8  42A7      8372          clr.l     -(A7)
00004AAA  2F02      8373          move.l    D2,-(A7)
00004AAC  4EB8 3410 8374          jsr       _Decode6BitEA
00004AB0  DEFC 0010 8375          add.w     #16,A7
                    8376   DisassembleInstruction_173:
                    8377   ; }
                    8378   ; /////////////////////////////////////////////////////////////////////////////////
                    8379   ; // if instruction is LEA
                    8380   ; /////////////////////////////////////////////////////////////////////////////////
                    8381   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
00004AB4  2042      8382          move.l    D2,A0
00004AB6  3010      8383          move.w    (A0),D0
00004AB8  C07C F1C0 8384          and.w     #61888,D0
00004ABC  0C40 41C0 8385          cmp.w     #16832,D0
00004AC0  6600 0056 8386          bne       DisassembleInstruction_175
                    8387   ; {
                    8388   ; InstructionSize = 1;
00004AC4  24BC 0000 8389          move.l    #1,(A2)
00004AC8  0001      
                    8390   ; strcpy(Instruction,"LEA ") ;
00004ACA  4879 0000 8391          pea       @m68kde~1_265.L
00004ACE  792E      
00004AD0  4879 0B00 8392          pea       _Instruction.L
00004AD4  04E2      
00004AD6  4EB9 0000 8393          jsr       _strcpy
00004ADA  58C6      
00004ADC  504F      8394          addq.w    #8,A7
                    8395   ; Decode6BitEA(OpCode,0,0,0) ;
00004ADE  42A7      8396          clr.l     -(A7)
00004AE0  42A7      8397          clr.l     -(A7)
00004AE2  42A7      8398          clr.l     -(A7)
00004AE4  2F02      8399          move.l    D2,-(A7)
00004AE6  4EB8 3410 8400          jsr       _Decode6BitEA
00004AEA  DEFC 0010 8401          add.w     #16,A7
                    8402   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
00004AEE  2042      8403          move.l    D2,A0
00004AF0  3210      8404          move.w    (A0),D1
00004AF2  E041      8405          asr.w     #8,D1
00004AF4  E241      8406          asr.w     #1,D1
00004AF6  C27C 0007 8407          and.w     #7,D1
00004AFA  C2BC 0000 8408          and.l     #65535,D1
00004AFE  FFFF      
00004B00  2F01      8409          move.l    D1,-(A7)
00004B02  4879 0000 8410          pea       @m68kde~1_247.L
00004B06  7882      
00004B08  2F0C      8411          move.l    A4,-(A7)
00004B0A  4E95      8412          jsr       (A5)
00004B0C  DEFC 000C 8413          add.w     #12,A7
                    8414   ; strcatInstruction(TempString);
00004B10  2F0C      8415          move.l    A4,-(A7)
00004B12  4EB8 0CCC 8416          jsr       _strcatInstruction
00004B16  584F      8417          addq.w    #4,A7
                    8418   DisassembleInstruction_175:
                    8419   ; }
                    8420   ; /////////////////////////////////////////////////////////////////////////////////
                    8421   ; // if instruction is LINK.W
                    8422   ; /////////////////////////////////////////////////////////////////////////////////
                    8423   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
00004B18  2042      8424          move.l    D2,A0
00004B1A  3010      8425          move.w    (A0),D0
00004B1C  C07C FFF8 8426          and.w     #65528,D0
00004B20  0C40 4E50 8427          cmp.w     #20048,D0
00004B24  6600 0052 8428          bne       DisassembleInstruction_177
                    8429   ; {
                    8430   ; InstructionSize = 1;
00004B28  24BC 0000 8431          move.l    #1,(A2)
00004B2C  0001      
                    8432   ; strcpy(Instruction,"LINK ") ;
00004B2E  4879 0000 8433          pea       @m68kde~1_266.L
00004B32  7934      
00004B34  4879 0B00 8434          pea       _Instruction.L
00004B38  04E2      
00004B3A  4EB9 0000 8435          jsr       _strcpy
00004B3E  58C6      
00004B40  504F      8436          addq.w    #8,A7
                    8437   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
00004B42  2042      8438          move.l    D2,A0
00004B44  3228 0002 8439          move.w    2(A0),D1
00004B48  48C1      8440          ext.l     D1
00004B4A  2F01      8441          move.l    D1,-(A7)
00004B4C  2042      8442          move.l    D2,A0
00004B4E  3210      8443          move.w    (A0),D1
00004B50  C27C 0007 8444          and.w     #7,D1
00004B54  C2BC 0000 8445          and.l     #65535,D1
00004B58  FFFF      
00004B5A  2F01      8446          move.l    D1,-(A7)
00004B5C  4879 0000 8447          pea       @m68kde~1_267.L
00004B60  793A      
00004B62  2F0C      8448          move.l    A4,-(A7)
00004B64  4E95      8449          jsr       (A5)
00004B66  DEFC 0010 8450          add.w     #16,A7
                    8451   ; InstructionSize = 2 ;
00004B6A  24BC 0000 8452          move.l    #2,(A2)
00004B6E  0002      
                    8453   ; strcatInstruction(TempString);
00004B70  2F0C      8454          move.l    A4,-(A7)
00004B72  4EB8 0CCC 8455          jsr       _strcatInstruction
00004B76  584F      8456          addq.w    #4,A7
                    8457   DisassembleInstruction_177:
                    8458   ; }
                    8459   ; /////////////////////////////////////////////////////////////////////////////////
                    8460   ; // if instruction is MOVE, MOVEA
                    8461   ; /////////////////////////////////////////////////////////////////////////////////
                    8462   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
00004B78  2042      8463          move.l    D2,A0
00004B7A  3010      8464          move.w    (A0),D0
00004B7C  C07C C000 8465          and.w     #49152,D0
00004B80  6600 00F0 8466          bne       DisassembleInstruction_193
                    8467   ; {
                    8468   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
00004B84  2042      8469          move.l    D2,A0
00004B86  3010      8470          move.w    (A0),D0
00004B88  C07C 3000 8471          and.w     #12288,D0
00004B8C  E048      8472          lsr.w     #8,D0
00004B8E  E848      8473          lsr.w     #4,D0
00004B90  3D40 FFE2 8474          move.w    D0,-30(A6)
                    8475   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
00004B94  2042      8476          move.l    D2,A0
00004B96  3010      8477          move.w    (A0),D0
00004B98  E640      8478          asr.w     #3,D0
00004B9A  C07C 0007 8479          and.w     #7,D0
00004B9E  3600      8480          move.w    D0,D3
                    8481   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
00004BA0  2042      8482          move.l    D2,A0
00004BA2  3010      8483          move.w    (A0),D0
00004BA4  C07C 0007 8484          and.w     #7,D0
00004BA8  3D40 FFF6 8485          move.w    D0,-10(A6)
                    8486   ; DataSize = 0 ;
00004BAC  7E00      8487          moveq     #0,D7
                    8488   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8489   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
00004BAE  0C43 0005 8490          cmp.w     #5,D3
00004BB2  6706      8491          beq.s     DisassembleInstruction_183
00004BB4  0C43 0006 8492          cmp.w     #6,D3
00004BB8  6602      8493          bne.s     DisassembleInstruction_181
                    8494   DisassembleInstruction_183:
                    8495   ; DataSize = 1;  // source operands has 1 word after EA
00004BBA  7E01      8496          moveq     #1,D7
                    8497   DisassembleInstruction_181:
                    8498   ; // if source addressing mode is a 16 or 32 bit address
                    8499   ; if((OpMode == (unsigned short int)(0x0007))) {
00004BBC  0C43 0007 8500          cmp.w     #7,D3
00004BC0  660C      8501          bne.s     DisassembleInstruction_187
                    8502   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
00004BC2  302E FFF6 8503          move.w    -10(A6),D0
00004BC6  6604      8504          bne.s     DisassembleInstruction_186
                    8505   ; DataSize = 1 ;
00004BC8  7E01      8506          moveq     #1,D7
00004BCA  6002      8507          bra.s     DisassembleInstruction_187
                    8508   DisassembleInstruction_186:
                    8509   ; else
                    8510   ; DataSize = 2 ;
00004BCC  7E02      8511          moveq     #2,D7
                    8512   DisassembleInstruction_187:
                    8513   ; }
                    8514   ; // if source addressing mode is # then figure out size
                    8515   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
00004BCE  0C43 0007 8516          cmp.w     #7,D3
00004BD2  6624      8517          bne.s     DisassembleInstruction_191
00004BD4  302E FFF6 8518          move.w    -10(A6),D0
00004BD8  0C40 0004 8519          cmp.w     #4,D0
00004BDC  661A      8520          bne.s     DisassembleInstruction_191
                    8521   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
00004BDE  302E FFE2 8522          move.w    -30(A6),D0
00004BE2  0C40 0001 8523          cmp.w     #1,D0
00004BE6  670A      8524          beq.s     DisassembleInstruction_192
00004BE8  302E FFE2 8525          move.w    -30(A6),D0
00004BEC  0C40 0003 8526          cmp.w     #3,D0
00004BF0  6604      8527          bne.s     DisassembleInstruction_190
                    8528   DisassembleInstruction_192:
                    8529   ; DataSize = 1;
00004BF2  7E01      8530          moveq     #1,D7
00004BF4  6002      8531          bra.s     DisassembleInstruction_191
                    8532   DisassembleInstruction_190:
                    8533   ; else
                    8534   ; DataSize = 2 ;
00004BF6  7E02      8535          moveq     #2,D7
                    8536   DisassembleInstruction_191:
                    8537   ; //printf("DataSize = %d",DataSize) ;
                    8538   ; }
                    8539   ; if(Size != 0)
00004BF8  302E FFE2 8540          move.w    -30(A6),D0
00004BFC  6700 0074 8541          beq       DisassembleInstruction_193
                    8542   ; {
                    8543   ; InstructionSize = 1;
00004C00  24BC 0000 8544          move.l    #1,(A2)
00004C04  0001      
                    8545   ; if(Size == 1)
00004C06  302E FFE2 8546          move.w    -30(A6),D0
00004C0A  0C40 0001 8547          cmp.w     #1,D0
00004C0E  660C      8548          bne.s     DisassembleInstruction_195
                    8549   ; strcpyInstruction("MOVE.B ") ;
00004C10  4879 0000 8550          pea       @m68kde~1_268.L
00004C14  7942      
00004C16  4E93      8551          jsr       (A3)
00004C18  584F      8552          addq.w    #4,A7
00004C1A  6020      8553          bra.s     DisassembleInstruction_198
                    8554   DisassembleInstruction_195:
                    8555   ; else if(Size == 2)
00004C1C  302E FFE2 8556          move.w    -30(A6),D0
00004C20  0C40 0002 8557          cmp.w     #2,D0
00004C24  660C      8558          bne.s     DisassembleInstruction_197
                    8559   ; strcpyInstruction("MOVE.L ") ;
00004C26  4879 0000 8560          pea       @m68kde~1_269.L
00004C2A  794A      
00004C2C  4E93      8561          jsr       (A3)
00004C2E  584F      8562          addq.w    #4,A7
00004C30  600A      8563          bra.s     DisassembleInstruction_198
                    8564   DisassembleInstruction_197:
                    8565   ; else
                    8566   ; strcpyInstruction("MOVE.W ") ;
00004C32  4879 0000 8567          pea       @m68kde~1_270.L
00004C36  7952      
00004C38  4E93      8568          jsr       (A3)
00004C3A  584F      8569          addq.w    #4,A7
                    8570   DisassembleInstruction_198:
                    8571   ; Decode6BitEA(OpCode,0,0,1) ;
00004C3C  4878 0001 8572          pea       1
00004C40  42A7      8573          clr.l     -(A7)
00004C42  42A7      8574          clr.l     -(A7)
00004C44  2F02      8575          move.l    D2,-(A7)
00004C46  4EB8 3410 8576          jsr       _Decode6BitEA
00004C4A  DEFC 0010 8577          add.w     #16,A7
                    8578   ; strcatInstruction(",") ;
00004C4E  4879 0000 8579          pea       @m68kde~1_188.L
00004C52  771C      
00004C54  4EB8 0CCC 8580          jsr       _strcatInstruction
00004C58  584F      8581          addq.w    #4,A7
                    8582   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8583   ; // but subtract 1 to make the maths correct in the called function
                    8584   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004C5A  42A7      8585          clr.l     -(A7)
00004C5C  CEBC 0000 8586          and.l     #65535,D7
00004C60  FFFF      
00004C62  2F07      8587          move.l    D7,-(A7)
00004C64  4878 0002 8588          pea       2
00004C68  2F02      8589          move.l    D2,-(A7)
00004C6A  4EB8 3410 8590          jsr       _Decode6BitEA
00004C6E  DEFC 0010 8591          add.w     #16,A7
                    8592   DisassembleInstruction_193:
                    8593   ; }
                    8594   ; }
                    8595   ; /////////////////////////////////////////////////////////////////////////////////
                    8596   ; // if instruction is MOVE <EA>,CCR
                    8597   ; /////////////////////////////////////////////////////////////////////////////////
                    8598   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004C72  2042      8599          move.l    D2,A0
00004C74  3010      8600          move.w    (A0),D0
00004C76  C07C FFC0 8601          and.w     #65472,D0
00004C7A  0C40 44C0 8602          cmp.w     #17600,D0
00004C7E  6636      8603          bne.s     DisassembleInstruction_199
                    8604   ; {
                    8605   ; InstructionSize = 1;
00004C80  24BC 0000 8606          move.l    #1,(A2)
00004C84  0001      
                    8607   ; strcpy(Instruction,"MOVE ") ;
00004C86  4879 0000 8608          pea       @m68kde~1_271.L
00004C8A  795A      
00004C8C  4879 0B00 8609          pea       _Instruction.L
00004C90  04E2      
00004C92  4EB9 0000 8610          jsr       _strcpy
00004C96  58C6      
00004C98  504F      8611          addq.w    #8,A7
                    8612   ; Decode6BitEA(OpCode,0,0,0) ;
00004C9A  42A7      8613          clr.l     -(A7)
00004C9C  42A7      8614          clr.l     -(A7)
00004C9E  42A7      8615          clr.l     -(A7)
00004CA0  2F02      8616          move.l    D2,-(A7)
00004CA2  4EB8 3410 8617          jsr       _Decode6BitEA
00004CA6  DEFC 0010 8618          add.w     #16,A7
                    8619   ; strcatInstruction(",CCR") ;
00004CAA  4879 0000 8620          pea       @m68kde~1_272.L
00004CAE  7960      
00004CB0  4EB8 0CCC 8621          jsr       _strcatInstruction
00004CB4  584F      8622          addq.w    #4,A7
                    8623   DisassembleInstruction_199:
                    8624   ; }
                    8625   ; /////////////////////////////////////////////////////////////////////////////////
                    8626   ; // if instruction is MOVE SR,<EA>
                    8627   ; /////////////////////////////////////////////////////////////////////////////////
                    8628   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
00004CB6  2042      8629          move.l    D2,A0
00004CB8  3010      8630          move.w    (A0),D0
00004CBA  C07C FFC0 8631          and.w     #65472,D0
00004CBE  0C40 40C0 8632          cmp.w     #16576,D0
00004CC2  662A      8633          bne.s     DisassembleInstruction_201
                    8634   ; {
                    8635   ; InstructionSize = 1;
00004CC4  24BC 0000 8636          move.l    #1,(A2)
00004CC8  0001      
                    8637   ; strcpy(Instruction,"MOVE SR,") ;
00004CCA  4879 0000 8638          pea       @m68kde~1_273.L
00004CCE  7966      
00004CD0  4879 0B00 8639          pea       _Instruction.L
00004CD4  04E2      
00004CD6  4EB9 0000 8640          jsr       _strcpy
00004CDA  58C6      
00004CDC  504F      8641          addq.w    #8,A7
                    8642   ; Decode6BitEA(OpCode,0,0,0) ;
00004CDE  42A7      8643          clr.l     -(A7)
00004CE0  42A7      8644          clr.l     -(A7)
00004CE2  42A7      8645          clr.l     -(A7)
00004CE4  2F02      8646          move.l    D2,-(A7)
00004CE6  4EB8 3410 8647          jsr       _Decode6BitEA
00004CEA  DEFC 0010 8648          add.w     #16,A7
                    8649   DisassembleInstruction_201:
                    8650   ; }
                    8651   ; /////////////////////////////////////////////////////////////////////////////////
                    8652   ; // if instruction is MOVE <EA>,SR
                    8653   ; /////////////////////////////////////////////////////////////////////////////////
                    8654   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
00004CEE  2042      8655          move.l    D2,A0
00004CF0  3010      8656          move.w    (A0),D0
00004CF2  C07C FFC0 8657          and.w     #65472,D0
00004CF6  0C40 46C0 8658          cmp.w     #18112,D0
00004CFA  6636      8659          bne.s     DisassembleInstruction_203
                    8660   ; {
                    8661   ; InstructionSize = 1;
00004CFC  24BC 0000 8662          move.l    #1,(A2)
00004D00  0001      
                    8663   ; strcpy(Instruction,"MOVE ") ;
00004D02  4879 0000 8664          pea       @m68kde~1_271.L
00004D06  795A      
00004D08  4879 0B00 8665          pea       _Instruction.L
00004D0C  04E2      
00004D0E  4EB9 0000 8666          jsr       _strcpy
00004D12  58C6      
00004D14  504F      8667          addq.w    #8,A7
                    8668   ; Decode6BitEA(OpCode,0,0,0) ;
00004D16  42A7      8669          clr.l     -(A7)
00004D18  42A7      8670          clr.l     -(A7)
00004D1A  42A7      8671          clr.l     -(A7)
00004D1C  2F02      8672          move.l    D2,-(A7)
00004D1E  4EB8 3410 8673          jsr       _Decode6BitEA
00004D22  DEFC 0010 8674          add.w     #16,A7
                    8675   ; strcatInstruction(",SR") ;
00004D26  4879 0000 8676          pea       @m68kde~1_274.L
00004D2A  7970      
00004D2C  4EB8 0CCC 8677          jsr       _strcatInstruction
00004D30  584F      8678          addq.w    #4,A7
                    8679   DisassembleInstruction_203:
                    8680   ; }
                    8681   ; /////////////////////////////////////////////////////////////////////////////////
                    8682   ; // if instruction is MOVE USP,An
                    8683   ; /////////////////////////////////////////////////////////////////////////////////
                    8684   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004D32  2042      8685          move.l    D2,A0
00004D34  3010      8686          move.w    (A0),D0
00004D36  C07C FFF0 8687          and.w     #65520,D0
00004D3A  0C40 4E60 8688          cmp.w     #20064,D0
00004D3E  6600 0060 8689          bne       DisassembleInstruction_208
                    8690   ; {
                    8691   ; InstructionSize = 1;
00004D42  24BC 0000 8692          move.l    #1,(A2)
00004D46  0001      
                    8693   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004D48  2042      8694          move.l    D2,A0
00004D4A  3010      8695          move.w    (A0),D0
00004D4C  C07C 0007 8696          and.w     #7,D0
00004D50  3D40 FFEA 8697          move.w    D0,-22(A6)
                    8698   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004D54  2042      8699          move.l    D2,A0
00004D56  3010      8700          move.w    (A0),D0
00004D58  C07C 0008 8701          and.w     #8,D0
00004D5C  0C40 0008 8702          cmp.w     #8,D0
00004D60  6620      8703          bne.s     DisassembleInstruction_207
                    8704   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004D62  322E FFEA 8705          move.w    -22(A6),D1
00004D66  C2BC 0000 8706          and.l     #65535,D1
00004D6A  FFFF      
00004D6C  2F01      8707          move.l    D1,-(A7)
00004D6E  4879 0000 8708          pea       @m68kde~1_275.L
00004D72  7974      
00004D74  4879 0B00 8709          pea       _Instruction.L
00004D78  04E2      
00004D7A  4E95      8710          jsr       (A5)
00004D7C  DEFC 000C 8711          add.w     #12,A7
00004D80  601E      8712          bra.s     DisassembleInstruction_208
                    8713   DisassembleInstruction_207:
                    8714   ; else
                    8715   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004D82  322E FFEA 8716          move.w    -22(A6),D1
00004D86  C2BC 0000 8717          and.l     #65535,D1
00004D8A  FFFF      
00004D8C  2F01      8718          move.l    D1,-(A7)
00004D8E  4879 0000 8719          pea       @m68kde~1_276.L
00004D92  7982      
00004D94  4879 0B00 8720          pea       _Instruction.L
00004D98  04E2      
00004D9A  4E95      8721          jsr       (A5)
00004D9C  DEFC 000C 8722          add.w     #12,A7
                    8723   DisassembleInstruction_208:
                    8724   ; }
                    8725   ; /////////////////////////////////////////////////////////////////////////////////
                    8726   ; // if instruction is MOVEM
                    8727   ; /////////////////////////////////////////////////////////////////////////////////
                    8728   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004DA0  2042      8729          move.l    D2,A0
00004DA2  3010      8730          move.w    (A0),D0
00004DA4  C07C FB80 8731          and.w     #64384,D0
00004DA8  0C40 4880 8732          cmp.w     #18560,D0
00004DAC  6600 01FC 8733          bne       DisassembleInstruction_230
                    8734   ; {
                    8735   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004DB0  2042      8736          move.l    D2,A0
00004DB2  3010      8737          move.w    (A0),D0
00004DB4  E640      8738          asr.w     #3,D0
00004DB6  C07C 0007 8739          and.w     #7,D0
00004DBA  3600      8740          move.w    D0,D3
                    8741   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004DBC  4A43      8742          tst.w     D3
00004DBE  6700 01EA 8743          beq       DisassembleInstruction_230
00004DC2  0C43 0001 8744          cmp.w     #1,D3
00004DC6  6700 01E2 8745          beq       DisassembleInstruction_230
00004DCA  4A43      8746          tst.w     D3
00004DCC  6700 01DC 8747          beq       DisassembleInstruction_230
                    8748   ; (OpMode != (unsigned short int)(0x1)) &&
                    8749   ; (OpMode != (unsigned short int)(0x0)))
                    8750   ; {
                    8751   ; InstructionSize = 1;
00004DD0  24BC 0000 8752          move.l    #1,(A2)
00004DD4  0001      
                    8753   ; strcpy(Instruction,"MOVEM") ;
00004DD6  4879 0000 8754          pea       @m68kde~1_277.L
00004DDA  7990      
00004DDC  4879 0B00 8755          pea       _Instruction.L
00004DE0  04E2      
00004DE2  4EB9 0000 8756          jsr       _strcpy
00004DE6  58C6      
00004DE8  504F      8757          addq.w    #8,A7
                    8758   ; InstructionSize ++ ;
00004DEA  5292      8759          addq.l    #1,(A2)
                    8760   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004DEC  2042      8761          move.l    D2,A0
00004DEE  3010      8762          move.w    (A0),D0
00004DF0  C07C 0040 8763          and.w     #64,D0
00004DF4  660E      8764          bne.s     DisassembleInstruction_213
                    8765   ; strcatInstruction(".W ") ;
00004DF6  4879 0000 8766          pea       @m68kde~1_171.L
00004DFA  76CE      
00004DFC  4EB8 0CCC 8767          jsr       _strcatInstruction
00004E00  584F      8768          addq.w    #4,A7
00004E02  600C      8769          bra.s     DisassembleInstruction_214
                    8770   DisassembleInstruction_213:
                    8771   ; else
                    8772   ; strcatInstruction(".L ") ;
00004E04  4879 0000 8773          pea       @m68kde~1_172.L
00004E08  76D2      
00004E0A  4EB8 0CCC 8774          jsr       _strcatInstruction
00004E0E  584F      8775          addq.w    #4,A7
                    8776   DisassembleInstruction_214:
                    8777   ; // movem  reg,-(An) if bit 10 = 0
                    8778   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004E10  2042      8779          move.l    D2,A0
00004E12  3010      8780          move.w    (A0),D0
00004E14  C07C 0400 8781          and.w     #1024,D0
00004E18  6600 00D2 8782          bne       DisassembleInstruction_215
                    8783   ; {
                    8784   ; Mask = 0x8000 ;                     // bit 15 = 1
00004E1C  3D7C 8000 8785          move.w    #32768,-2(A6)
00004E20  FFFE      
                    8786   ; DoneSlash = 0 ;
00004E22  4246      8787          clr.w     D6
                    8788   ; for(i = 0; i < 16; i ++)    {
00004E24  4284      8789          clr.l     D4
                    8790   DisassembleInstruction_217:
00004E26  0C84 0000 8791          cmp.l     #16,D4
00004E2A  0010      
00004E2C  6C00 009E 8792          bge       DisassembleInstruction_219
                    8793   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004E30  4879 0000 8794          pea       @m68kde~1_39.L
00004E34  67AE      
00004E36  4EB9 0000 8795          jsr       _printf
00004E3A  5A98      
00004E3C  584F      8796          addq.w    #4,A7
                    8797   ; if((OpCode[1] & Mask) == Mask)    {
00004E3E  2042      8798          move.l    D2,A0
00004E40  3028 0002 8799          move.w    2(A0),D0
00004E44  C06E FFFE 8800          and.w     -2(A6),D0
00004E48  B06E FFFE 8801          cmp.w     -2(A6),D0
00004E4C  6600 006E 8802          bne       DisassembleInstruction_220
                    8803   ; if(i < 8 )  {
00004E50  0C84 0000 8804          cmp.l     #8,D4
00004E54  0008      
00004E56  6C2C      8805          bge.s     DisassembleInstruction_222
                    8806   ; if(DoneSlash == 0)  {
00004E58  4A46      8807          tst.w     D6
00004E5A  6614      8808          bne.s     DisassembleInstruction_224
                    8809   ; sprintf(TempString, "D%d", i) ;
00004E5C  2F04      8810          move.l    D4,-(A7)
00004E5E  4879 0000 8811          pea       @m68kde~1_278.L
00004E62  7996      
00004E64  2F0C      8812          move.l    A4,-(A7)
00004E66  4E95      8813          jsr       (A5)
00004E68  DEFC 000C 8814          add.w     #12,A7
                    8815   ; DoneSlash = 1;
00004E6C  7C01      8816          moveq     #1,D6
00004E6E  6010      8817          bra.s     DisassembleInstruction_225
                    8818   DisassembleInstruction_224:
                    8819   ; }
                    8820   ; else
                    8821   ; sprintf(TempString, "/D%d", i) ;
00004E70  2F04      8822          move.l    D4,-(A7)
00004E72  4879 0000 8823          pea       @m68kde~1_279.L
00004E76  799A      
00004E78  2F0C      8824          move.l    A4,-(A7)
00004E7A  4E95      8825          jsr       (A5)
00004E7C  DEFC 000C 8826          add.w     #12,A7
                    8827   DisassembleInstruction_225:
00004E80  6000 0032 8828          bra       DisassembleInstruction_227
                    8829   DisassembleInstruction_222:
                    8830   ; }
                    8831   ; else   {
                    8832   ; if(DoneSlash == 0)  {
00004E84  4A46      8833          tst.w     D6
00004E86  6618      8834          bne.s     DisassembleInstruction_226
                    8835   ; sprintf(TempString, "A%d", i-8) ;
00004E88  2204      8836          move.l    D4,D1
00004E8A  5181      8837          subq.l    #8,D1
00004E8C  2F01      8838          move.l    D1,-(A7)
00004E8E  4879 0000 8839          pea       @m68kde~1_280.L
00004E92  79A0      
00004E94  2F0C      8840          move.l    A4,-(A7)
00004E96  4E95      8841          jsr       (A5)
00004E98  DEFC 000C 8842          add.w     #12,A7
                    8843   ; DoneSlash = 1;
00004E9C  7C01      8844          moveq     #1,D6
00004E9E  6014      8845          bra.s     DisassembleInstruction_227
                    8846   DisassembleInstruction_226:
                    8847   ; }
                    8848   ; else
                    8849   ; sprintf(TempString, "/A%d", i-8) ;
00004EA0  2204      8850          move.l    D4,D1
00004EA2  5181      8851          subq.l    #8,D1
00004EA4  2F01      8852          move.l    D1,-(A7)
00004EA6  4879 0000 8853          pea       @m68kde~1_281.L
00004EAA  79A4      
00004EAC  2F0C      8854          move.l    A4,-(A7)
00004EAE  4E95      8855          jsr       (A5)
00004EB0  DEFC 000C 8856          add.w     #12,A7
                    8857   DisassembleInstruction_227:
                    8858   ; }
                    8859   ; strcatInstruction(TempString) ;
00004EB4  2F0C      8860          move.l    A4,-(A7)
00004EB6  4EB8 0CCC 8861          jsr       _strcatInstruction
00004EBA  584F      8862          addq.w    #4,A7
                    8863   DisassembleInstruction_220:
                    8864   ; }
                    8865   ; Mask = Mask >> 1 ;
00004EBC  302E FFFE 8866          move.w    -2(A6),D0
00004EC0  E240      8867          asr.w     #1,D0
00004EC2  3D40 FFFE 8868          move.w    D0,-2(A6)
00004EC6  5284      8869          addq.l    #1,D4
00004EC8  6000 FF5C 8870          bra       DisassembleInstruction_217
                    8871   DisassembleInstruction_219:
                    8872   ; }
                    8873   ; strcatInstruction(",") ;
00004ECC  4879 0000 8874          pea       @m68kde~1_188.L
00004ED0  771C      
00004ED2  4EB8 0CCC 8875          jsr       _strcatInstruction
00004ED6  584F      8876          addq.w    #4,A7
                    8877   ; Decode6BitEA(OpCode,0,0,0) ;
00004ED8  42A7      8878          clr.l     -(A7)
00004EDA  42A7      8879          clr.l     -(A7)
00004EDC  42A7      8880          clr.l     -(A7)
00004EDE  2F02      8881          move.l    D2,-(A7)
00004EE0  4EB8 3410 8882          jsr       _Decode6BitEA
00004EE4  DEFC 0010 8883          add.w     #16,A7
00004EE8  6000 00C0 8884          bra       DisassembleInstruction_230
                    8885   DisassembleInstruction_215:
                    8886   ; }
                    8887   ; //movem  (An)+,reg
                    8888   ; else    {
                    8889   ; Decode6BitEA(OpCode,0,0,0) ;
00004EEC  42A7      8890          clr.l     -(A7)
00004EEE  42A7      8891          clr.l     -(A7)
00004EF0  42A7      8892          clr.l     -(A7)
00004EF2  2F02      8893          move.l    D2,-(A7)
00004EF4  4EB8 3410 8894          jsr       _Decode6BitEA
00004EF8  DEFC 0010 8895          add.w     #16,A7
                    8896   ; strcatInstruction(",") ;
00004EFC  4879 0000 8897          pea       @m68kde~1_188.L
00004F00  771C      
00004F02  4EB8 0CCC 8898          jsr       _strcatInstruction
00004F06  584F      8899          addq.w    #4,A7
                    8900   ; Mask = 0x0001 ;                     // bit 0 = 1
00004F08  3D7C 0001 8901          move.w    #1,-2(A6)
00004F0C  FFFE      
                    8902   ; DoneSlash = 0 ;
00004F0E  4246      8903          clr.w     D6
                    8904   ; for(i = 0; i < 16 ; i ++)    {
00004F10  4284      8905          clr.l     D4
                    8906   DisassembleInstruction_228:
00004F12  0C84 0000 8907          cmp.l     #16,D4
00004F16  0010      
00004F18  6C00 0090 8908          bge       DisassembleInstruction_230
                    8909   ; if((OpCode[1] & Mask) == Mask)    {
00004F1C  2042      8910          move.l    D2,A0
00004F1E  3028 0002 8911          move.w    2(A0),D0
00004F22  C06E FFFE 8912          and.w     -2(A6),D0
00004F26  B06E FFFE 8913          cmp.w     -2(A6),D0
00004F2A  6600 006E 8914          bne       DisassembleInstruction_231
                    8915   ; if(i < 8)   {       // data registers in bits 7-0
00004F2E  0C84 0000 8916          cmp.l     #8,D4
00004F32  0008      
00004F34  6C2C      8917          bge.s     DisassembleInstruction_233
                    8918   ; if(DoneSlash == 0)  {
00004F36  4A46      8919          tst.w     D6
00004F38  6614      8920          bne.s     DisassembleInstruction_235
                    8921   ; sprintf(TempString, "D%d", i) ;
00004F3A  2F04      8922          move.l    D4,-(A7)
00004F3C  4879 0000 8923          pea       @m68kde~1_278.L
00004F40  7996      
00004F42  2F0C      8924          move.l    A4,-(A7)
00004F44  4E95      8925          jsr       (A5)
00004F46  DEFC 000C 8926          add.w     #12,A7
                    8927   ; DoneSlash = 1;
00004F4A  7C01      8928          moveq     #1,D6
00004F4C  6010      8929          bra.s     DisassembleInstruction_236
                    8930   DisassembleInstruction_235:
                    8931   ; }
                    8932   ; else
                    8933   ; sprintf(TempString, "/D%d", i) ;
00004F4E  2F04      8934          move.l    D4,-(A7)
00004F50  4879 0000 8935          pea       @m68kde~1_279.L
00004F54  799A      
00004F56  2F0C      8936          move.l    A4,-(A7)
00004F58  4E95      8937          jsr       (A5)
00004F5A  DEFC 000C 8938          add.w     #12,A7
                    8939   DisassembleInstruction_236:
00004F5E  6000 0032 8940          bra       DisassembleInstruction_238
                    8941   DisassembleInstruction_233:
                    8942   ; }
                    8943   ; else    {
                    8944   ; if(DoneSlash == 0)  {
00004F62  4A46      8945          tst.w     D6
00004F64  6618      8946          bne.s     DisassembleInstruction_237
                    8947   ; sprintf(TempString, "A%d", i-8) ;
00004F66  2204      8948          move.l    D4,D1
00004F68  5181      8949          subq.l    #8,D1
00004F6A  2F01      8950          move.l    D1,-(A7)
00004F6C  4879 0000 8951          pea       @m68kde~1_280.L
00004F70  79A0      
00004F72  2F0C      8952          move.l    A4,-(A7)
00004F74  4E95      8953          jsr       (A5)
00004F76  DEFC 000C 8954          add.w     #12,A7
                    8955   ; DoneSlash = 1;
00004F7A  7C01      8956          moveq     #1,D6
00004F7C  6014      8957          bra.s     DisassembleInstruction_238
                    8958   DisassembleInstruction_237:
                    8959   ; }
                    8960   ; else
                    8961   ; sprintf(TempString, "/A%d", i-8) ;
00004F7E  2204      8962          move.l    D4,D1
00004F80  5181      8963          subq.l    #8,D1
00004F82  2F01      8964          move.l    D1,-(A7)
00004F84  4879 0000 8965          pea       @m68kde~1_281.L
00004F88  79A4      
00004F8A  2F0C      8966          move.l    A4,-(A7)
00004F8C  4E95      8967          jsr       (A5)
00004F8E  DEFC 000C 8968          add.w     #12,A7
                    8969   DisassembleInstruction_238:
                    8970   ; }
                    8971   ; strcatInstruction(TempString) ;
00004F92  2F0C      8972          move.l    A4,-(A7)
00004F94  4EB8 0CCC 8973          jsr       _strcatInstruction
00004F98  584F      8974          addq.w    #4,A7
                    8975   DisassembleInstruction_231:
                    8976   ; }
                    8977   ; Mask = Mask << 1 ;
00004F9A  302E FFFE 8978          move.w    -2(A6),D0
00004F9E  E340      8979          asl.w     #1,D0
00004FA0  3D40 FFFE 8980          move.w    D0,-2(A6)
00004FA4  5284      8981          addq.l    #1,D4
00004FA6  6000 FF6A 8982          bra       DisassembleInstruction_228
                    8983   DisassembleInstruction_230:
                    8984   ; }
                    8985   ; }
                    8986   ; }
                    8987   ; }
                    8988   ; /////////////////////////////////////////////////////////////////////////////////
                    8989   ; // if instruction is MOVEP
                    8990   ; /////////////////////////////////////////////////////////////////////////////////
                    8991   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004FAA  2042      8992          move.l    D2,A0
00004FAC  3010      8993          move.w    (A0),D0
00004FAE  C07C F038 8994          and.w     #61496,D0
00004FB2  0C40 0008 8995          cmp.w     #8,D0
00004FB6  6600 0112 8996          bne       DisassembleInstruction_247
                    8997   ; {
                    8998   ; InstructionSize = 1;
00004FBA  24BC 0000 8999          move.l    #1,(A2)
00004FBE  0001      
                    9000   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004FC0  2042      9001          move.l    D2,A0
00004FC2  3010      9002          move.w    (A0),D0
00004FC4  E040      9003          asr.w     #8,D0
00004FC6  E240      9004          asr.w     #1,D0
00004FC8  C07C 0007 9005          and.w     #7,D0
00004FCC  3A00      9006          move.w    D0,D5
                    9007   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004FCE  2042      9008          move.l    D2,A0
00004FD0  3010      9009          move.w    (A0),D0
00004FD2  C07C 0007 9010          and.w     #7,D0
00004FD6  3D40 FFF8 9011          move.w    D0,-8(A6)
                    9012   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004FDA  2042      9013          move.l    D2,A0
00004FDC  3010      9014          move.w    (A0),D0
00004FDE  EC40      9015          asr.w     #6,D0
00004FE0  C07C 0007 9016          and.w     #7,D0
00004FE4  3600      9017          move.w    D0,D3
                    9018   ; InstructionSize++ ;
00004FE6  5292      9019          addq.l    #1,(A2)
                    9020   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004FE8  0C43 0004 9021          cmp.w     #4,D3
00004FEC  6634      9022          bne.s     DisassembleInstruction_241
                    9023   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004FEE  CABC 0000 9024          and.l     #65535,D5
00004FF2  FFFF      
00004FF4  2F05      9025          move.l    D5,-(A7)
00004FF6  322E FFF8 9026          move.w    -8(A6),D1
00004FFA  C2BC 0000 9027          and.l     #65535,D1
00004FFE  FFFF      
00005000  2F01      9028          move.l    D1,-(A7)
00005002  2042      9029          move.l    D2,A0
00005004  3228 0002 9030          move.w    2(A0),D1
00005008  48C1      9031          ext.l     D1
0000500A  2F01      9032          move.l    D1,-(A7)
0000500C  4879 0000 9033          pea       @m68kde~1_282.L
00005010  79AA      
00005012  4879 0B00 9034          pea       _Instruction.L
00005016  04E2      
00005018  4E95      9035          jsr       (A5)
0000501A  DEFC 0014 9036          add.w     #20,A7
0000501E  6000 00AA 9037          bra       DisassembleInstruction_247
                    9038   DisassembleInstruction_241:
                    9039   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00005022  0C43 0005 9040          cmp.w     #5,D3
00005026  6634      9041          bne.s     DisassembleInstruction_243
                    9042   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00005028  CABC 0000 9043          and.l     #65535,D5
0000502C  FFFF      
0000502E  2F05      9044          move.l    D5,-(A7)
00005030  322E FFF8 9045          move.w    -8(A6),D1
00005034  C2BC 0000 9046          and.l     #65535,D1
00005038  FFFF      
0000503A  2F01      9047          move.l    D1,-(A7)
0000503C  2042      9048          move.l    D2,A0
0000503E  3228 0002 9049          move.w    2(A0),D1
00005042  48C1      9050          ext.l     D1
00005044  2F01      9051          move.l    D1,-(A7)
00005046  4879 0000 9052          pea       @m68kde~1_283.L
0000504A  79C0      
0000504C  4879 0B00 9053          pea       _Instruction.L
00005050  04E2      
00005052  4E95      9054          jsr       (A5)
00005054  DEFC 0014 9055          add.w     #20,A7
00005058  6000 0070 9056          bra       DisassembleInstruction_247
                    9057   DisassembleInstruction_243:
                    9058   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
0000505C  0C43 0006 9059          cmp.w     #6,D3
00005060  6632      9060          bne.s     DisassembleInstruction_245
                    9061   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00005062  322E FFF8 9062          move.w    -8(A6),D1
00005066  C2BC 0000 9063          and.l     #65535,D1
0000506A  FFFF      
0000506C  2F01      9064          move.l    D1,-(A7)
0000506E  2042      9065          move.l    D2,A0
00005070  3228 0002 9066          move.w    2(A0),D1
00005074  48C1      9067          ext.l     D1
00005076  2F01      9068          move.l    D1,-(A7)
00005078  CABC 0000 9069          and.l     #65535,D5
0000507C  FFFF      
0000507E  2F05      9070          move.l    D5,-(A7)
00005080  4879 0000 9071          pea       @m68kde~1_284.L
00005084  79D6      
00005086  4879 0B00 9072          pea       _Instruction.L
0000508A  04E2      
0000508C  4E95      9073          jsr       (A5)
0000508E  DEFC 0014 9074          add.w     #20,A7
00005092  6036      9075          bra.s     DisassembleInstruction_247
                    9076   DisassembleInstruction_245:
                    9077   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00005094  0C43 0007 9078          cmp.w     #7,D3
00005098  6630      9079          bne.s     DisassembleInstruction_247
                    9080   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
0000509A  322E FFF8 9081          move.w    -8(A6),D1
0000509E  C2BC 0000 9082          and.l     #65535,D1
000050A2  FFFF      
000050A4  2F01      9083          move.l    D1,-(A7)
000050A6  2042      9084          move.l    D2,A0
000050A8  3228 0002 9085          move.w    2(A0),D1
000050AC  48C1      9086          ext.l     D1
000050AE  2F01      9087          move.l    D1,-(A7)
000050B0  CABC 0000 9088          and.l     #65535,D5
000050B4  FFFF      
000050B6  2F05      9089          move.l    D5,-(A7)
000050B8  4879 0000 9090          pea       @m68kde~1_285.L
000050BC  79EC      
000050BE  4879 0B00 9091          pea       _Instruction.L
000050C2  04E2      
000050C4  4E95      9092          jsr       (A5)
000050C6  DEFC 0014 9093          add.w     #20,A7
                    9094   DisassembleInstruction_247:
                    9095   ; }
                    9096   ; /////////////////////////////////////////////////////////////////////////////////
                    9097   ; // if instruction is MOVEQ
                    9098   ; /////////////////////////////////////////////////////////////////////////////////
                    9099   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
000050CA  2042      9100          move.l    D2,A0
000050CC  3010      9101          move.w    (A0),D0
000050CE  C07C F100 9102          and.w     #61696,D0
000050D2  0C40 7000 9103          cmp.w     #28672,D0
000050D6  6600 0040 9104          bne       DisassembleInstruction_249
                    9105   ; {
                    9106   ; InstructionSize = 1;
000050DA  24BC 0000 9107          move.l    #1,(A2)
000050DE  0001      
                    9108   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
000050E0  2042      9109          move.l    D2,A0
000050E2  3010      9110          move.w    (A0),D0
000050E4  E040      9111          asr.w     #8,D0
000050E6  E240      9112          asr.w     #1,D0
000050E8  C07C 0007 9113          and.w     #7,D0
000050EC  3A00      9114          move.w    D0,D5
                    9115   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
000050EE  CABC 0000 9116          and.l     #65535,D5
000050F2  FFFF      
000050F4  2F05      9117          move.l    D5,-(A7)
000050F6  2042      9118          move.l    D2,A0
000050F8  3210      9119          move.w    (A0),D1
000050FA  C27C 00FF 9120          and.w     #255,D1
000050FE  C2BC 0000 9121          and.l     #65535,D1
00005102  FFFF      
00005104  2F01      9122          move.l    D1,-(A7)
00005106  4879 0000 9123          pea       @m68kde~1_286.L
0000510A  7A02      
0000510C  4879 0B00 9124          pea       _Instruction.L
00005110  04E2      
00005112  4E95      9125          jsr       (A5)
00005114  DEFC 0010 9126          add.w     #16,A7
                    9127   DisassembleInstruction_249:
                    9128   ; }
                    9129   ; /////////////////////////////////////////////////////////////////////////////////
                    9130   ; // if instruction is MULS.W
                    9131   ; /////////////////////////////////////////////////////////////////////////////////
                    9132   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00005118  2042      9133          move.l    D2,A0
0000511A  3010      9134          move.w    (A0),D0
0000511C  C07C F1C0 9135          and.w     #61888,D0
00005120  0C40 C1C0 9136          cmp.w     #49600,D0
00005124  6600 004E 9137          bne       DisassembleInstruction_251
                    9138   ; {
                    9139   ; InstructionSize = 1;
00005128  24BC 0000 9140          move.l    #1,(A2)
0000512C  0001      
                    9141   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
0000512E  2042      9142          move.l    D2,A0
00005130  3010      9143          move.w    (A0),D0
00005132  E040      9144          asr.w     #8,D0
00005134  E240      9145          asr.w     #1,D0
00005136  C07C 0007 9146          and.w     #7,D0
0000513A  3A00      9147          move.w    D0,D5
                    9148   ; strcpyInstruction("MULS ");
0000513C  4879 0000 9149          pea       @m68kde~1_287.L
00005140  7A12      
00005142  4E93      9150          jsr       (A3)
00005144  584F      9151          addq.w    #4,A7
                    9152   ; Decode6BitEA(OpCode,0,0,0) ;
00005146  42A7      9153          clr.l     -(A7)
00005148  42A7      9154          clr.l     -(A7)
0000514A  42A7      9155          clr.l     -(A7)
0000514C  2F02      9156          move.l    D2,-(A7)
0000514E  4EB8 3410 9157          jsr       _Decode6BitEA
00005152  DEFC 0010 9158          add.w     #16,A7
                    9159   ; sprintf(TempString, ",D%d", DataRegister) ;
00005156  CABC 0000 9160          and.l     #65535,D5
0000515A  FFFF      
0000515C  2F05      9161          move.l    D5,-(A7)
0000515E  4879 0000 9162          pea       @m68kde~1_243.L
00005162  7868      
00005164  2F0C      9163          move.l    A4,-(A7)
00005166  4E95      9164          jsr       (A5)
00005168  DEFC 000C 9165          add.w     #12,A7
                    9166   ; strcatInstruction(TempString);
0000516C  2F0C      9167          move.l    A4,-(A7)
0000516E  4EB8 0CCC 9168          jsr       _strcatInstruction
00005172  584F      9169          addq.w    #4,A7
                    9170   DisassembleInstruction_251:
                    9171   ; }
                    9172   ; /////////////////////////////////////////////////////////////////////////////////
                    9173   ; // if instruction is MULU.W
                    9174   ; /////////////////////////////////////////////////////////////////////////////////
                    9175   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00005174  2042      9176          move.l    D2,A0
00005176  3010      9177          move.w    (A0),D0
00005178  C07C F1C0 9178          and.w     #61888,D0
0000517C  0C40 C0C0 9179          cmp.w     #49344,D0
00005180  6600 004E 9180          bne       DisassembleInstruction_253
                    9181   ; {
                    9182   ; InstructionSize = 1;
00005184  24BC 0000 9183          move.l    #1,(A2)
00005188  0001      
                    9184   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
0000518A  2042      9185          move.l    D2,A0
0000518C  3010      9186          move.w    (A0),D0
0000518E  E040      9187          asr.w     #8,D0
00005190  E240      9188          asr.w     #1,D0
00005192  C07C 0007 9189          and.w     #7,D0
00005196  3A00      9190          move.w    D0,D5
                    9191   ; strcpyInstruction("MULU ");
00005198  4879 0000 9192          pea       @m68kde~1_288.L
0000519C  7A18      
0000519E  4E93      9193          jsr       (A3)
000051A0  584F      9194          addq.w    #4,A7
                    9195   ; Decode6BitEA(OpCode,0,0,0) ;
000051A2  42A7      9196          clr.l     -(A7)
000051A4  42A7      9197          clr.l     -(A7)
000051A6  42A7      9198          clr.l     -(A7)
000051A8  2F02      9199          move.l    D2,-(A7)
000051AA  4EB8 3410 9200          jsr       _Decode6BitEA
000051AE  DEFC 0010 9201          add.w     #16,A7
                    9202   ; sprintf(TempString, ",D%d", DataRegister) ;
000051B2  CABC 0000 9203          and.l     #65535,D5
000051B6  FFFF      
000051B8  2F05      9204          move.l    D5,-(A7)
000051BA  4879 0000 9205          pea       @m68kde~1_243.L
000051BE  7868      
000051C0  2F0C      9206          move.l    A4,-(A7)
000051C2  4E95      9207          jsr       (A5)
000051C4  DEFC 000C 9208          add.w     #12,A7
                    9209   ; strcatInstruction(TempString);
000051C8  2F0C      9210          move.l    A4,-(A7)
000051CA  4EB8 0CCC 9211          jsr       _strcatInstruction
000051CE  584F      9212          addq.w    #4,A7
                    9213   DisassembleInstruction_253:
                    9214   ; }
                    9215   ; /////////////////////////////////////////////////////////////////////////////////
                    9216   ; // if instruction is NBCD <EA>
                    9217   ; /////////////////////////////////////////////////////////////////////////////////
                    9218   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
000051D0  2042      9219          move.l    D2,A0
000051D2  3010      9220          move.w    (A0),D0
000051D4  C07C FFC0 9221          and.w     #65472,D0
000051D8  0C40 4800 9222          cmp.w     #18432,D0
000051DC  6620      9223          bne.s     DisassembleInstruction_255
                    9224   ; {
                    9225   ; InstructionSize = 1;
000051DE  24BC 0000 9226          move.l    #1,(A2)
000051E2  0001      
                    9227   ; strcpyInstruction("NBCD ");
000051E4  4879 0000 9228          pea       @m68kde~1_289.L
000051E8  7A1E      
000051EA  4E93      9229          jsr       (A3)
000051EC  584F      9230          addq.w    #4,A7
                    9231   ; Decode6BitEA(OpCode,0,0,0);
000051EE  42A7      9232          clr.l     -(A7)
000051F0  42A7      9233          clr.l     -(A7)
000051F2  42A7      9234          clr.l     -(A7)
000051F4  2F02      9235          move.l    D2,-(A7)
000051F6  4EB8 3410 9236          jsr       _Decode6BitEA
000051FA  DEFC 0010 9237          add.w     #16,A7
                    9238   DisassembleInstruction_255:
                    9239   ; }
                    9240   ; /////////////////////////////////////////////////////////////////////////////////
                    9241   ; // if instruction is NEG <EA>
                    9242   ; /////////////////////////////////////////////////////////////////////////////////
                    9243   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
000051FE  2042      9244          move.l    D2,A0
00005200  3010      9245          move.w    (A0),D0
00005202  C07C FF00 9246          and.w     #65280,D0
00005206  0C40 4400 9247          cmp.w     #17408,D0
0000520A  6600 0046 9248          bne       DisassembleInstruction_259
                    9249   ; {
                    9250   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
0000520E  2042      9251          move.l    D2,A0
00005210  3010      9252          move.w    (A0),D0
00005212  EC40      9253          asr.w     #6,D0
00005214  C07C 0003 9254          and.w     #3,D0
00005218  0C40 0003 9255          cmp.w     #3,D0
0000521C  6700 0034 9256          beq       DisassembleInstruction_259
                    9257   ; {
                    9258   ; InstructionSize = 1;
00005220  24BC 0000 9259          move.l    #1,(A2)
00005224  0001      
                    9260   ; strcpyInstruction("NEG");
00005226  4879 0000 9261          pea       @m68kde~1_290.L
0000522A  7A24      
0000522C  4E93      9262          jsr       (A3)
0000522E  584F      9263          addq.w    #4,A7
                    9264   ; Decode2BitOperandSize(*OpCode) ;
00005230  2042      9265          move.l    D2,A0
00005232  3210      9266          move.w    (A0),D1
00005234  C2BC 0000 9267          and.l     #65535,D1
00005238  FFFF      
0000523A  2F01      9268          move.l    D1,-(A7)
0000523C  4EB8 317C 9269          jsr       _Decode2BitOperandSize
00005240  584F      9270          addq.w    #4,A7
                    9271   ; Decode6BitEA(OpCode,0,0,0);
00005242  42A7      9272          clr.l     -(A7)
00005244  42A7      9273          clr.l     -(A7)
00005246  42A7      9274          clr.l     -(A7)
00005248  2F02      9275          move.l    D2,-(A7)
0000524A  4EB8 3410 9276          jsr       _Decode6BitEA
0000524E  DEFC 0010 9277          add.w     #16,A7
                    9278   DisassembleInstruction_259:
                    9279   ; }
                    9280   ; }
                    9281   ; /////////////////////////////////////////////////////////////////////////////////
                    9282   ; // if instruction is NEGX <EA>
                    9283   ; /////////////////////////////////////////////////////////////////////////////////
                    9284   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00005252  2042      9285          move.l    D2,A0
00005254  3010      9286          move.w    (A0),D0
00005256  C07C FF00 9287          and.w     #65280,D0
0000525A  0C40 4000 9288          cmp.w     #16384,D0
0000525E  6600 0046 9289          bne       DisassembleInstruction_263
                    9290   ; {
                    9291   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00005262  2042      9292          move.l    D2,A0
00005264  3010      9293          move.w    (A0),D0
00005266  EC40      9294          asr.w     #6,D0
00005268  C07C 0003 9295          and.w     #3,D0
0000526C  0C40 0003 9296          cmp.w     #3,D0
00005270  6700 0034 9297          beq       DisassembleInstruction_263
                    9298   ; {
                    9299   ; InstructionSize = 1;
00005274  24BC 0000 9300          move.l    #1,(A2)
00005278  0001      
                    9301   ; strcpyInstruction("NEGX");
0000527A  4879 0000 9302          pea       @m68kde~1_291.L
0000527E  7A28      
00005280  4E93      9303          jsr       (A3)
00005282  584F      9304          addq.w    #4,A7
                    9305   ; Decode2BitOperandSize(*OpCode) ;
00005284  2042      9306          move.l    D2,A0
00005286  3210      9307          move.w    (A0),D1
00005288  C2BC 0000 9308          and.l     #65535,D1
0000528C  FFFF      
0000528E  2F01      9309          move.l    D1,-(A7)
00005290  4EB8 317C 9310          jsr       _Decode2BitOperandSize
00005294  584F      9311          addq.w    #4,A7
                    9312   ; Decode6BitEA(OpCode,0,0,0);
00005296  42A7      9313          clr.l     -(A7)
00005298  42A7      9314          clr.l     -(A7)
0000529A  42A7      9315          clr.l     -(A7)
0000529C  2F02      9316          move.l    D2,-(A7)
0000529E  4EB8 3410 9317          jsr       _Decode6BitEA
000052A2  DEFC 0010 9318          add.w     #16,A7
                    9319   DisassembleInstruction_263:
                    9320   ; }
                    9321   ; }
                    9322   ; /////////////////////////////////////////////////////////////////////////////////
                    9323   ; // if instruction is NOP
                    9324   ; /////////////////////////////////////////////////////////////////////////////////
                    9325   ; if(*OpCode == (unsigned short int)(0x4E71))
000052A6  2042      9326          move.l    D2,A0
000052A8  3010      9327          move.w    (A0),D0
000052AA  0C40 4E71 9328          cmp.w     #20081,D0
000052AE  6610      9329          bne.s     DisassembleInstruction_265
                    9330   ; {
                    9331   ; InstructionSize = 1;
000052B0  24BC 0000 9332          move.l    #1,(A2)
000052B4  0001      
                    9333   ; strcpyInstruction("NOP");
000052B6  4879 0000 9334          pea       @m68kde~1_292.L
000052BA  7A2E      
000052BC  4E93      9335          jsr       (A3)
000052BE  584F      9336          addq.w    #4,A7
                    9337   DisassembleInstruction_265:
                    9338   ; }
                    9339   ; /////////////////////////////////////////////////////////////////////////////////
                    9340   ; // if instruction is NOT <EA>
                    9341   ; /////////////////////////////////////////////////////////////////////////////////
                    9342   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
000052C0  2042      9343          move.l    D2,A0
000052C2  3010      9344          move.w    (A0),D0
000052C4  C07C FF00 9345          and.w     #65280,D0
000052C8  0C40 4600 9346          cmp.w     #17920,D0
000052CC  6600 0046 9347          bne       DisassembleInstruction_269
                    9348   ; {
                    9349   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
000052D0  2042      9350          move.l    D2,A0
000052D2  3010      9351          move.w    (A0),D0
000052D4  EC40      9352          asr.w     #6,D0
000052D6  C07C 0003 9353          and.w     #3,D0
000052DA  0C40 0003 9354          cmp.w     #3,D0
000052DE  6700 0034 9355          beq       DisassembleInstruction_269
                    9356   ; {
                    9357   ; InstructionSize = 1;
000052E2  24BC 0000 9358          move.l    #1,(A2)
000052E6  0001      
                    9359   ; strcpyInstruction("NOT");
000052E8  4879 0000 9360          pea       @m68kde~1_293.L
000052EC  7A32      
000052EE  4E93      9361          jsr       (A3)
000052F0  584F      9362          addq.w    #4,A7
                    9363   ; Decode2BitOperandSize(*OpCode) ;
000052F2  2042      9364          move.l    D2,A0
000052F4  3210      9365          move.w    (A0),D1
000052F6  C2BC 0000 9366          and.l     #65535,D1
000052FA  FFFF      
000052FC  2F01      9367          move.l    D1,-(A7)
000052FE  4EB8 317C 9368          jsr       _Decode2BitOperandSize
00005302  584F      9369          addq.w    #4,A7
                    9370   ; Decode6BitEA(OpCode,0,0,0);
00005304  42A7      9371          clr.l     -(A7)
00005306  42A7      9372          clr.l     -(A7)
00005308  42A7      9373          clr.l     -(A7)
0000530A  2F02      9374          move.l    D2,-(A7)
0000530C  4EB8 3410 9375          jsr       _Decode6BitEA
00005310  DEFC 0010 9376          add.w     #16,A7
                    9377   DisassembleInstruction_269:
                    9378   ; }
                    9379   ; }
                    9380   ; /////////////////////////////////////////////////////////////////////////////////
                    9381   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    9382   ; /////////////////////////////////////////////////////////////////////////////////
                    9383   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00005314  2042      9384          move.l    D2,A0
00005316  3010      9385          move.w    (A0),D0
00005318  C07C F000 9386          and.w     #61440,D0
0000531C  0C40 8000 9387          cmp.w     #32768,D0
00005320  6600 0038 9388          bne       DisassembleInstruction_273
                    9389   ; {
                    9390   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00005324  2042      9391          move.l    D2,A0
00005326  3010      9392          move.w    (A0),D0
00005328  EC40      9393          asr.w     #6,D0
0000532A  C07C 0007 9394          and.w     #7,D0
0000532E  3600      9395          move.w    D0,D3
                    9396   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
00005330  0C43 0002 9397          cmp.w     #2,D3
00005334  630C      9398          bls.s     DisassembleInstruction_275
00005336  0C43 0004 9399          cmp.w     #4,D3
0000533A  651E      9400          blo.s     DisassembleInstruction_273
0000533C  0C43 0006 9401          cmp.w     #6,D3
00005340  6218      9402          bhi.s     DisassembleInstruction_273
                    9403   DisassembleInstruction_275:
                    9404   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    9405   ; {
                    9406   ; InstructionSize = 1;
00005342  24BC 0000 9407          move.l    #1,(A2)
00005346  0001      
                    9408   ; strcpyInstruction("OR") ;
00005348  4879 0000 9409          pea       @m68kde~1_294.L
0000534C  7A36      
0000534E  4E93      9410          jsr       (A3)
00005350  584F      9411          addq.w    #4,A7
                    9412   ; Decode3BitOperandMode(OpCode) ;
00005352  2F02      9413          move.l    D2,-(A7)
00005354  4EB8 3838 9414          jsr       _Decode3BitOperandMode
00005358  584F      9415          addq.w    #4,A7
                    9416   DisassembleInstruction_273:
                    9417   ; }
                    9418   ; }
                    9419   ; /////////////////////////////////////////////////////////////////////////////////
                    9420   ; // if instruction is ORI to CCR
                    9421   ; /////////////////////////////////////////////////////////////////////////////////
                    9422   ; if(*OpCode == (unsigned short int)(0x003C))   {
0000535A  2042      9423          move.l    D2,A0
0000535C  3010      9424          move.w    (A0),D0
0000535E  0C40 003C 9425          cmp.w     #60,D0
00005362  662A      9426          bne.s     DisassembleInstruction_276
                    9427   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00005364  2042      9428          move.l    D2,A0
00005366  3228 0002 9429          move.w    2(A0),D1
0000536A  C27C 00FF 9430          and.w     #255,D1
0000536E  C2BC 0000 9431          and.l     #65535,D1
00005372  FFFF      
00005374  2F01      9432          move.l    D1,-(A7)
00005376  4879 0000 9433          pea       @m68kde~1_295.L
0000537A  7A3A      
0000537C  4879 0B00 9434          pea       _Instruction.L
00005380  04E2      
00005382  4E95      9435          jsr       (A5)
00005384  DEFC 000C 9436          add.w     #12,A7
                    9437   ; InstructionSize = 2;
00005388  24BC 0000 9438          move.l    #2,(A2)
0000538C  0002      
                    9439   DisassembleInstruction_276:
                    9440   ; }
                    9441   ; /////////////////////////////////////////////////////////////////////////////////
                    9442   ; // if instruction is ORI #data,SR
                    9443   ; /////////////////////////////////////////////////////////////////////////////////
                    9444   ; if(*OpCode  == (unsigned short int)(0x007c))
0000538E  2042      9445          move.l    D2,A0
00005390  3010      9446          move.w    (A0),D0
00005392  0C40 007C 9447          cmp.w     #124,D0
00005396  6622      9448          bne.s     DisassembleInstruction_278
                    9449   ; {
                    9450   ; InstructionSize = 2;
00005398  24BC 0000 9451          move.l    #2,(A2)
0000539C  0002      
                    9452   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
0000539E  2042      9453          move.l    D2,A0
000053A0  3228 0002 9454          move.w    2(A0),D1
000053A4  48C1      9455          ext.l     D1
000053A6  2F01      9456          move.l    D1,-(A7)
000053A8  4879 0000 9457          pea       @m68kde~1_296.L
000053AC  7A48      
000053AE  4879 0B00 9458          pea       _Instruction.L
000053B2  04E2      
000053B4  4E95      9459          jsr       (A5)
000053B6  DEFC 000C 9460          add.w     #12,A7
                    9461   DisassembleInstruction_278:
                    9462   ; }
                    9463   ; /////////////////////////////////////////////////////////////////////////////////
                    9464   ; // if instruction is PEA
                    9465   ; /////////////////////////////////////////////////////////////////////////////////
                    9466   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
000053BA  2042      9467          move.l    D2,A0
000053BC  3010      9468          move.w    (A0),D0
000053BE  C07C FFC0 9469          and.w     #65472,D0
000053C2  0C40 4840 9470          cmp.w     #18496,D0
000053C6  6620      9471          bne.s     DisassembleInstruction_280
                    9472   ; {
                    9473   ; InstructionSize = 1;
000053C8  24BC 0000 9474          move.l    #1,(A2)
000053CC  0001      
                    9475   ; strcpyInstruction("PEA ");
000053CE  4879 0000 9476          pea       @m68kde~1_297.L
000053D2  7A56      
000053D4  4E93      9477          jsr       (A3)
000053D6  584F      9478          addq.w    #4,A7
                    9479   ; Decode6BitEA(OpCode,0,0,0);
000053D8  42A7      9480          clr.l     -(A7)
000053DA  42A7      9481          clr.l     -(A7)
000053DC  42A7      9482          clr.l     -(A7)
000053DE  2F02      9483          move.l    D2,-(A7)
000053E0  4EB8 3410 9484          jsr       _Decode6BitEA
000053E4  DEFC 0010 9485          add.w     #16,A7
                    9486   DisassembleInstruction_280:
                    9487   ; }
                    9488   ; /////////////////////////////////////////////////////////////////////////////////
                    9489   ; // if instruction is reset
                    9490   ; /////////////////////////////////////////////////////////////////////////////////
                    9491   ; if(*OpCode  == (unsigned short int)(0x4E70))
000053E8  2042      9492          move.l    D2,A0
000053EA  3010      9493          move.w    (A0),D0
000053EC  0C40 4E70 9494          cmp.w     #20080,D0
000053F0  6616      9495          bne.s     DisassembleInstruction_282
                    9496   ; {
                    9497   ; InstructionSize = 1;
000053F2  24BC 0000 9498          move.l    #1,(A2)
000053F6  0001      
                    9499   ; sprintf(Instruction, "RESET");
000053F8  4879 0000 9500          pea       @m68kde~1_298.L
000053FC  7A5C      
000053FE  4879 0B00 9501          pea       _Instruction.L
00005402  04E2      
00005404  4E95      9502          jsr       (A5)
00005406  504F      9503          addq.w    #8,A7
                    9504   DisassembleInstruction_282:
                    9505   ; }
                    9506   ; /////////////////////////////////////////////////////////////////////////////////
                    9507   ; // if instruction is RTE
                    9508   ; /////////////////////////////////////////////////////////////////////////////////
                    9509   ; if(*OpCode  == (unsigned short int)(0x4E73))
00005408  2042      9510          move.l    D2,A0
0000540A  3010      9511          move.w    (A0),D0
0000540C  0C40 4E73 9512          cmp.w     #20083,D0
00005410  6616      9513          bne.s     DisassembleInstruction_284
                    9514   ; {
                    9515   ; InstructionSize = 1;
00005412  24BC 0000 9516          move.l    #1,(A2)
00005416  0001      
                    9517   ; sprintf(Instruction, "RTE");
00005418  4879 0000 9518          pea       @m68kde~1_299.L
0000541C  7A62      
0000541E  4879 0B00 9519          pea       _Instruction.L
00005422  04E2      
00005424  4E95      9520          jsr       (A5)
00005426  504F      9521          addq.w    #8,A7
                    9522   DisassembleInstruction_284:
                    9523   ; }
                    9524   ; /////////////////////////////////////////////////////////////////////////////////
                    9525   ; // if instruction is RTR
                    9526   ; /////////////////////////////////////////////////////////////////////////////////
                    9527   ; if(*OpCode == (unsigned short int)(0x4E77))
00005428  2042      9528          move.l    D2,A0
0000542A  3010      9529          move.w    (A0),D0
0000542C  0C40 4E77 9530          cmp.w     #20087,D0
00005430  6610      9531          bne.s     DisassembleInstruction_286
                    9532   ; {
                    9533   ; InstructionSize = 1;
00005432  24BC 0000 9534          move.l    #1,(A2)
00005436  0001      
                    9535   ; strcpyInstruction("RTR");
00005438  4879 0000 9536          pea       @m68kde~1_300.L
0000543C  7A66      
0000543E  4E93      9537          jsr       (A3)
00005440  584F      9538          addq.w    #4,A7
                    9539   DisassembleInstruction_286:
                    9540   ; }
                    9541   ; /////////////////////////////////////////////////////////////////////////////////
                    9542   ; // if instruction is RTS
                    9543   ; /////////////////////////////////////////////////////////////////////////////////
                    9544   ; if(*OpCode == (unsigned short int)(0x4E75))
00005442  2042      9545          move.l    D2,A0
00005444  3010      9546          move.w    (A0),D0
00005446  0C40 4E75 9547          cmp.w     #20085,D0
0000544A  6610      9548          bne.s     DisassembleInstruction_288
                    9549   ; {
                    9550   ; InstructionSize = 1;
0000544C  24BC 0000 9551          move.l    #1,(A2)
00005450  0001      
                    9552   ; strcpyInstruction("RTS");
00005452  4879 0000 9553          pea       @m68kde~1_301.L
00005456  7A6A      
00005458  4E93      9554          jsr       (A3)
0000545A  584F      9555          addq.w    #4,A7
                    9556   DisassembleInstruction_288:
                    9557   ; }
                    9558   ; /////////////////////////////////////////////////////////////////////////////////
                    9559   ; // if instruction is STOP
                    9560   ; /////////////////////////////////////////////////////////////////////////////////
                    9561   ; if(*OpCode  == (unsigned short int)(0x4E72))
0000545C  2042      9562          move.l    D2,A0
0000545E  3010      9563          move.w    (A0),D0
00005460  0C40 4E72 9564          cmp.w     #20082,D0
00005464  6622      9565          bne.s     DisassembleInstruction_290
                    9566   ; {
                    9567   ; InstructionSize = 2;
00005466  24BC 0000 9568          move.l    #2,(A2)
0000546A  0002      
                    9569   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
0000546C  2042      9570          move.l    D2,A0
0000546E  3228 0002 9571          move.w    2(A0),D1
00005472  48C1      9572          ext.l     D1
00005474  2F01      9573          move.l    D1,-(A7)
00005476  4879 0000 9574          pea       @m68kde~1_302.L
0000547A  7A6E      
0000547C  4879 0B00 9575          pea       _Instruction.L
00005480  04E2      
00005482  4E95      9576          jsr       (A5)
00005484  DEFC 000C 9577          add.w     #12,A7
                    9578   DisassembleInstruction_290:
                    9579   ; }
                    9580   ; /////////////////////////////////////////////////////////////////////////////////
                    9581   ; // if instruction is SBCD
                    9582   ; /////////////////////////////////////////////////////////////////////////////////
                    9583   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
00005488  2042      9584          move.l    D2,A0
0000548A  3010      9585          move.w    (A0),D0
0000548C  C07C F1F0 9586          and.w     #61936,D0
00005490  0C40 8100 9587          cmp.w     #33024,D0
00005494  6600 0092 9588          bne       DisassembleInstruction_295
                    9589   ; {
                    9590   ; InstructionSize = 1;
00005498  24BC 0000 9591          move.l    #1,(A2)
0000549C  0001      
                    9592   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
0000549E  2042      9593          move.l    D2,A0
000054A0  3010      9594          move.w    (A0),D0
000054A2  E040      9595          asr.w     #8,D0
000054A4  E240      9596          asr.w     #1,D0
000054A6  C07C 0007 9597          and.w     #7,D0
000054AA  3D40 FFE0 9598          move.w    D0,-32(A6)
                    9599   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
000054AE  2042      9600          move.l    D2,A0
000054B0  3010      9601          move.w    (A0),D0
000054B2  C07C 0007 9602          and.w     #7,D0
000054B6  3D40 FFDE 9603          move.w    D0,-34(A6)
                    9604   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000054BA  2042      9605          move.l    D2,A0
000054BC  3010      9606          move.w    (A0),D0
000054BE  E640      9607          asr.w     #3,D0
000054C0  48C0      9608          ext.l     D0
000054C2  C0BC 0000 9609          and.l     #1,D0
000054C6  0001      
000054C8  2D40 FFE4 9610          move.l    D0,-28(A6)
                    9611   ; if(Mode == 0)
000054CC  202E FFE4 9612          move.l    -28(A6),D0
000054D0  662C      9613          bne.s     DisassembleInstruction_294
                    9614   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
000054D2  322E FFE0 9615          move.w    -32(A6),D1
000054D6  C2BC 0000 9616          and.l     #65535,D1
000054DA  FFFF      
000054DC  2F01      9617          move.l    D1,-(A7)
000054DE  322E FFDE 9618          move.w    -34(A6),D1
000054E2  C2BC 0000 9619          and.l     #65535,D1
000054E6  FFFF      
000054E8  2F01      9620          move.l    D1,-(A7)
000054EA  4879 0000 9621          pea       @m68kde~1_303.L
000054EE  7A78      
000054F0  4879 0B00 9622          pea       _Instruction.L
000054F4  04E2      
000054F6  4E95      9623          jsr       (A5)
000054F8  DEFC 0010 9624          add.w     #16,A7
000054FC  602A      9625          bra.s     DisassembleInstruction_295
                    9626   DisassembleInstruction_294:
                    9627   ; else
                    9628   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
000054FE  322E FFE0 9629          move.w    -32(A6),D1
00005502  C2BC 0000 9630          and.l     #65535,D1
00005506  FFFF      
00005508  2F01      9631          move.l    D1,-(A7)
0000550A  322E FFDE 9632          move.w    -34(A6),D1
0000550E  C2BC 0000 9633          and.l     #65535,D1
00005512  FFFF      
00005514  2F01      9634          move.l    D1,-(A7)
00005516  4879 0000 9635          pea       @m68kde~1_304.L
0000551A  7A86      
0000551C  4879 0B00 9636          pea       _Instruction.L
00005520  04E2      
00005522  4E95      9637          jsr       (A5)
00005524  DEFC 0010 9638          add.w     #16,A7
                    9639   DisassembleInstruction_295:
                    9640   ; }
                    9641   ; /////////////////////////////////////////////////////////////////////////////////
                    9642   ; // if instruction is Scc
                    9643   ; /////////////////////////////////////////////////////////////////////////////////
                    9644   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
00005528  2042      9645          move.l    D2,A0
0000552A  3010      9646          move.w    (A0),D0
0000552C  C07C F0C0 9647          and.w     #61632,D0
00005530  0C40 50C0 9648          cmp.w     #20672,D0
00005534  6600 0060 9649          bne       DisassembleInstruction_298
                    9650   ; {
                    9651   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
00005538  2042      9652          move.l    D2,A0
0000553A  3010      9653          move.w    (A0),D0
0000553C  E640      9654          asr.w     #3,D0
0000553E  C07C 0007 9655          and.w     #7,D0
00005542  3D40 FFEC 9656          move.w    D0,-20(A6)
                    9657   ; if(EAMode != (unsigned short int)(0x0001))
00005546  302E FFEC 9658          move.w    -20(A6),D0
0000554A  0C40 0001 9659          cmp.w     #1,D0
0000554E  6700 0046 9660          beq       DisassembleInstruction_298
                    9661   ; {
                    9662   ; InstructionSize = 1;
00005552  24BC 0000 9663          move.l    #1,(A2)
00005556  0001      
                    9664   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00005558  2042      9665          move.l    D2,A0
0000555A  3010      9666          move.w    (A0),D0
0000555C  E040      9667          asr.w     #8,D0
0000555E  C07C 000F 9668          and.w     #15,D0
00005562  1D40 FFE9 9669          move.b    D0,-23(A6)
                    9670   ; strcpyInstruction("S") ;
00005566  4879 0000 9671          pea       @m68kde~1_305.L
0000556A  7A9A      
0000556C  4E93      9672          jsr       (A3)
0000556E  584F      9673          addq.w    #4,A7
                    9674   ; DecodeBranchCondition(Condition) ;
00005570  122E FFE9 9675          move.b    -23(A6),D1
00005574  C27C 00FF 9676          and.w     #255,D1
00005578  C2BC 0000 9677          and.l     #65535,D1
0000557C  FFFF      
0000557E  2F01      9678          move.l    D1,-(A7)
00005580  4EB8 38CE 9679          jsr       _DecodeBranchCondition
00005584  584F      9680          addq.w    #4,A7
                    9681   ; Decode6BitEA(OpCode,0,0,0);
00005586  42A7      9682          clr.l     -(A7)
00005588  42A7      9683          clr.l     -(A7)
0000558A  42A7      9684          clr.l     -(A7)
0000558C  2F02      9685          move.l    D2,-(A7)
0000558E  4EB8 3410 9686          jsr       _Decode6BitEA
00005592  DEFC 0010 9687          add.w     #16,A7
                    9688   DisassembleInstruction_298:
                    9689   ; }
                    9690   ; }
                    9691   ; /////////////////////////////////////////////////////////////////////////////////
                    9692   ; // if instruction is SUB or SUBA
                    9693   ; /////////////////////////////////////////////////////////////////////////////////
                    9694   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
00005596  2042      9695          move.l    D2,A0
00005598  3010      9696          move.w    (A0),D0
0000559A  C07C F000 9697          and.w     #61440,D0
0000559E  0C40 9000 9698          cmp.w     #36864,D0
000055A2  6600 008C 9699          bne       DisassembleInstruction_303
                    9700   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000055A6  2042      9701          move.l    D2,A0
000055A8  3010      9702          move.w    (A0),D0
000055AA  EC40      9703          asr.w     #6,D0
000055AC  C07C 0007 9704          and.w     #7,D0
000055B0  3600      9705          move.w    D0,D3
                    9706   ; InstructionSize = 1;
000055B2  24BC 0000 9707          move.l    #1,(A2)
000055B6  0001      
                    9708   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000055B8  0C43 0003 9709          cmp.w     #3,D3
000055BC  6708      9710          beq.s     DisassembleInstruction_304
000055BE  0C43 0007 9711          cmp.w     #7,D3
000055C2  6600 005A 9712          bne       DisassembleInstruction_302
                    9713   DisassembleInstruction_304:
                    9714   ; {
                    9715   ; if(OpMode == (unsigned short int)(0x0003))
000055C6  0C43 0003 9716          cmp.w     #3,D3
000055CA  660C      9717          bne.s     DisassembleInstruction_305
                    9718   ; strcpyInstruction("SUBA.W ") ;
000055CC  4879 0000 9719          pea       @m68kde~1_306.L
000055D0  7A9C      
000055D2  4E93      9720          jsr       (A3)
000055D4  584F      9721          addq.w    #4,A7
000055D6  600A      9722          bra.s     DisassembleInstruction_306
                    9723   DisassembleInstruction_305:
                    9724   ; else
                    9725   ; strcpyInstruction("SUBA.L ") ;
000055D8  4879 0000 9726          pea       @m68kde~1_307.L
000055DC  7AA4      
000055DE  4E93      9727          jsr       (A3)
000055E0  584F      9728          addq.w    #4,A7
                    9729   DisassembleInstruction_306:
                    9730   ; Decode6BitEA(OpCode,0,0,0)  ;
000055E2  42A7      9731          clr.l     -(A7)
000055E4  42A7      9732          clr.l     -(A7)
000055E6  42A7      9733          clr.l     -(A7)
000055E8  2F02      9734          move.l    D2,-(A7)
000055EA  4EB8 3410 9735          jsr       _Decode6BitEA
000055EE  DEFC 0010 9736          add.w     #16,A7
                    9737   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000055F2  2042      9738          move.l    D2,A0
000055F4  3210      9739          move.w    (A0),D1
000055F6  E041      9740          asr.w     #8,D1
000055F8  E241      9741          asr.w     #1,D1
000055FA  C27C 0007 9742          and.w     #7,D1
000055FE  C2BC 0000 9743          and.l     #65535,D1
00005602  FFFF      
00005604  2F01      9744          move.l    D1,-(A7)
00005606  4879 0000 9745          pea       @m68kde~1_210.L
0000560A  7798      
0000560C  2F0C      9746          move.l    A4,-(A7)
0000560E  4E95      9747          jsr       (A5)
00005610  DEFC 000C 9748          add.w     #12,A7
                    9749   ; strcatInstruction(TempString) ;
00005614  2F0C      9750          move.l    A4,-(A7)
00005616  4EB8 0CCC 9751          jsr       _strcatInstruction
0000561A  584F      9752          addq.w    #4,A7
0000561C  6012      9753          bra.s     DisassembleInstruction_303
                    9754   DisassembleInstruction_302:
                    9755   ; }
                    9756   ; else {
                    9757   ; strcpyInstruction("SUB") ;
0000561E  4879 0000 9758          pea       @m68kde~1_308.L
00005622  7AAC      
00005624  4E93      9759          jsr       (A3)
00005626  584F      9760          addq.w    #4,A7
                    9761   ; Decode3BitOperandMode(OpCode) ;
00005628  2F02      9762          move.l    D2,-(A7)
0000562A  4EB8 3838 9763          jsr       _Decode3BitOperandMode
0000562E  584F      9764          addq.w    #4,A7
                    9765   DisassembleInstruction_303:
                    9766   ; }
                    9767   ; }
                    9768   ; /////////////////////////////////////////////////////////////////////////////////
                    9769   ; // if instruction is SUBQ
                    9770   ; /////////////////////////////////////////////////////////////////////////////////
                    9771   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
00005630  2042      9772          move.l    D2,A0
00005632  3010      9773          move.w    (A0),D0
00005634  C07C F100 9774          and.w     #61696,D0
00005638  0C40 5100 9775          cmp.w     #20736,D0
0000563C  6600 0072 9776          bne       DisassembleInstruction_309
                    9777   ; {
                    9778   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005640  2042      9779          move.l    D2,A0
00005642  3010      9780          move.w    (A0),D0
00005644  EC40      9781          asr.w     #6,D0
00005646  C07C 0003 9782          and.w     #3,D0
0000564A  3600      9783          move.w    D0,D3
                    9784   ; if(OpMode <= (unsigned short int)(0x0002))
0000564C  0C43 0002 9785          cmp.w     #2,D3
00005650  6200 005E 9786          bhi       DisassembleInstruction_309
                    9787   ; {
                    9788   ; InstructionSize = 1;
00005654  24BC 0000 9789          move.l    #1,(A2)
00005658  0001      
                    9790   ; strcpyInstruction("SUBQ") ;
0000565A  4879 0000 9791          pea       @m68kde~1_309.L
0000565E  7AB0      
00005660  4E93      9792          jsr       (A3)
00005662  584F      9793          addq.w    #4,A7
                    9794   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005664  2042      9795          move.l    D2,A0
00005666  3210      9796          move.w    (A0),D1
00005668  C2BC 0000 9797          and.l     #65535,D1
0000566C  FFFF      
0000566E  2F01      9798          move.l    D1,-(A7)
00005670  4EB8 317C 9799          jsr       _Decode2BitOperandSize
00005674  584F      9800          addq.w    #4,A7
                    9801   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00005676  2042      9802          move.l    D2,A0
00005678  3210      9803          move.w    (A0),D1
0000567A  E041      9804          asr.w     #8,D1
0000567C  E241      9805          asr.w     #1,D1
0000567E  C27C 0007 9806          and.w     #7,D1
00005682  C2BC 0000 9807          and.l     #65535,D1
00005686  FFFF      
00005688  2F01      9808          move.l    D1,-(A7)
0000568A  4879 0000 9809          pea       @m68kde~1_220.L
0000568E  77D8      
00005690  2F0C      9810          move.l    A4,-(A7)
00005692  4E95      9811          jsr       (A5)
00005694  DEFC 000C 9812          add.w     #12,A7
                    9813   ; strcatInstruction(TempString) ;
00005698  2F0C      9814          move.l    A4,-(A7)
0000569A  4EB8 0CCC 9815          jsr       _strcatInstruction
0000569E  584F      9816          addq.w    #4,A7
                    9817   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
000056A0  42A7      9818          clr.l     -(A7)
000056A2  42A7      9819          clr.l     -(A7)
000056A4  42A7      9820          clr.l     -(A7)
000056A6  2F02      9821          move.l    D2,-(A7)
000056A8  4EB8 3410 9822          jsr       _Decode6BitEA
000056AC  DEFC 0010 9823          add.w     #16,A7
                    9824   DisassembleInstruction_309:
                    9825   ; }
                    9826   ; }
                    9827   ; /////////////////////////////////////////////////////////////////////////////////
                    9828   ; // if instruction is SUBX
                    9829   ; /////////////////////////////////////////////////////////////////////////////////
                    9830   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
000056B0  2042      9831          move.l    D2,A0
000056B2  3010      9832          move.w    (A0),D0
000056B4  C07C F130 9833          and.w     #61744,D0
000056B8  0C40 9100 9834          cmp.w     #37120,D0
000056BC  6600 00A4 9835          bne       DisassembleInstruction_313
                    9836   ; {
                    9837   ; InstructionSize = 1;
000056C0  24BC 0000 9838          move.l    #1,(A2)
000056C4  0001      
                    9839   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
000056C6  2042      9840          move.l    D2,A0
000056C8  3010      9841          move.w    (A0),D0
000056CA  EC40      9842          asr.w     #6,D0
000056CC  C07C 0003 9843          and.w     #3,D0
000056D0  3600      9844          move.w    D0,D3
                    9845   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
000056D2  0C43 0003 9846          cmp.w     #3,D3
000056D6  6700 008A 9847          beq       DisassembleInstruction_313
                    9848   ; {
                    9849   ; strcpyInstruction("SUBX") ;
000056DA  4879 0000 9850          pea       @m68kde~1_310.L
000056DE  7AB6      
000056E0  4E93      9851          jsr       (A3)
000056E2  584F      9852          addq.w    #4,A7
                    9853   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000056E4  2042      9854          move.l    D2,A0
000056E6  3210      9855          move.w    (A0),D1
000056E8  C2BC 0000 9856          and.l     #65535,D1
000056EC  FFFF      
000056EE  2F01      9857          move.l    D1,-(A7)
000056F0  4EB8 317C 9858          jsr       _Decode2BitOperandSize
000056F4  584F      9859          addq.w    #4,A7
                    9860   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
000056F6  2042      9861          move.l    D2,A0
000056F8  3010      9862          move.w    (A0),D0
000056FA  C07C 0008 9863          and.w     #8,D0
000056FE  6600 0030 9864          bne       DisassembleInstruction_315
                    9865   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005702  2042      9866          move.l    D2,A0
00005704  3210      9867          move.w    (A0),D1
00005706  E041      9868          asr.w     #8,D1
00005708  E241      9869          asr.w     #1,D1
0000570A  C27C 0007 9870          and.w     #7,D1
0000570E  48C1      9871          ext.l     D1
00005710  2F01      9872          move.l    D1,-(A7)
00005712  2042      9873          move.l    D2,A0
00005714  3210      9874          move.w    (A0),D1
00005716  C27C 0007 9875          and.w     #7,D1
0000571A  48C1      9876          ext.l     D1
0000571C  2F01      9877          move.l    D1,-(A7)
0000571E  4879 0000 9878          pea       @m68kde~1_311.L
00005722  7ABC      
00005724  2F0C      9879          move.l    A4,-(A7)
00005726  4E95      9880          jsr       (A5)
00005728  DEFC 0010 9881          add.w     #16,A7
0000572C  6000 002C 9882          bra       DisassembleInstruction_316
                    9883   DisassembleInstruction_315:
                    9884   ; else        // -(ax),-(ay) mode used
                    9885   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005730  2042      9886          move.l    D2,A0
00005732  3210      9887          move.w    (A0),D1
00005734  E041      9888          asr.w     #8,D1
00005736  E241      9889          asr.w     #1,D1
00005738  C27C 0007 9890          and.w     #7,D1
0000573C  48C1      9891          ext.l     D1
0000573E  2F01      9892          move.l    D1,-(A7)
00005740  2042      9893          move.l    D2,A0
00005742  3210      9894          move.w    (A0),D1
00005744  C27C 0007 9895          and.w     #7,D1
00005748  48C1      9896          ext.l     D1
0000574A  2F01      9897          move.l    D1,-(A7)
0000574C  4879 0000 9898          pea       @m68kde~1_312.L
00005750  7AC6      
00005752  2F0C      9899          move.l    A4,-(A7)
00005754  4E95      9900          jsr       (A5)
00005756  DEFC 0010 9901          add.w     #16,A7
                    9902   DisassembleInstruction_316:
                    9903   ; strcatInstruction(TempString) ;
0000575A  2F0C      9904          move.l    A4,-(A7)
0000575C  4EB8 0CCC 9905          jsr       _strcatInstruction
00005760  584F      9906          addq.w    #4,A7
                    9907   DisassembleInstruction_313:
                    9908   ; }
                    9909   ; }
                    9910   ; /////////////////////////////////////////////////////////////////////////////////
                    9911   ; // if instruction is SWAP
                    9912   ; /////////////////////////////////////////////////////////////////////////////////
                    9913   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
00005762  2042      9914          move.l    D2,A0
00005764  3010      9915          move.w    (A0),D0
00005766  C07C FFF8 9916          and.w     #65528,D0
0000576A  0C40 4840 9917          cmp.w     #18496,D0
0000576E  662A      9918          bne.s     DisassembleInstruction_317
                    9919   ; {
                    9920   ; InstructionSize = 1;
00005770  24BC 0000 9921          move.l    #1,(A2)
00005774  0001      
                    9922   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
00005776  2042      9923          move.l    D2,A0
00005778  3010      9924          move.w    (A0),D0
0000577A  C07C 0007 9925          and.w     #7,D0
0000577E  3A00      9926          move.w    D0,D5
                    9927   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
00005780  CABC 0000 9928          and.l     #65535,D5
00005784  FFFF      
00005786  2F05      9929          move.l    D5,-(A7)
00005788  4879 0000 9930          pea       @m68kde~1_313.L
0000578C  7AD6      
0000578E  4879 0B00 9931          pea       _Instruction.L
00005792  04E2      
00005794  4E95      9932          jsr       (A5)
00005796  DEFC 000C 9933          add.w     #12,A7
                    9934   DisassembleInstruction_317:
                    9935   ; }
                    9936   ; /////////////////////////////////////////////////////////////////////////////////
                    9937   ; // if instruction is TAS
                    9938   ; /////////////////////////////////////////////////////////////////////////////////
                    9939   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
0000579A  2042      9940          move.l    D2,A0
0000579C  3010      9941          move.w    (A0),D0
0000579E  C07C FFC0 9942          and.w     #65472,D0
000057A2  0C40 4AC0 9943          cmp.w     #19136,D0
000057A6  662A      9944          bne.s     DisassembleInstruction_321
                    9945   ; {
                    9946   ; if(*OpCode != (unsigned short int)(0x4AFC))
000057A8  2042      9947          move.l    D2,A0
000057AA  3010      9948          move.w    (A0),D0
000057AC  0C40 4AFC 9949          cmp.w     #19196,D0
000057B0  6720      9950          beq.s     DisassembleInstruction_321
                    9951   ; {
                    9952   ; InstructionSize = 1;
000057B2  24BC 0000 9953          move.l    #1,(A2)
000057B6  0001      
                    9954   ; strcpyInstruction("TAS ") ;
000057B8  4879 0000 9955          pea       @m68kde~1_314.L
000057BC  7AE0      
000057BE  4E93      9956          jsr       (A3)
000057C0  584F      9957          addq.w    #4,A7
                    9958   ; Decode6BitEA(OpCode,0,0,0) ;
000057C2  42A7      9959          clr.l     -(A7)
000057C4  42A7      9960          clr.l     -(A7)
000057C6  42A7      9961          clr.l     -(A7)
000057C8  2F02      9962          move.l    D2,-(A7)
000057CA  4EB8 3410 9963          jsr       _Decode6BitEA
000057CE  DEFC 0010 9964          add.w     #16,A7
                    9965   DisassembleInstruction_321:
                    9966   ; }
                    9967   ; }
                    9968   ; /////////////////////////////////////////////////////////////////////////////////
                    9969   ; // if instruction is TRAP
                    9970   ; /////////////////////////////////////////////////////////////////////////////////
                    9971   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
000057D2  2042      9972          move.l    D2,A0
000057D4  3010      9973          move.w    (A0),D0
000057D6  C07C FFF0 9974          and.w     #65520,D0
000057DA  0C40 4E40 9975          cmp.w     #20032,D0
000057DE  6622      9976          bne.s     DisassembleInstruction_323
                    9977   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
000057E0  2042      9978          move.l    D2,A0
000057E2  3210      9979          move.w    (A0),D1
000057E4  C27C 000F 9980          and.w     #15,D1
000057E8  C2BC 0000 9981          and.l     #65535,D1
000057EC  FFFF      
000057EE  2F01      9982          move.l    D1,-(A7)
000057F0  4879 0000 9983          pea       @m68kde~1_315.L
000057F4  7AE6      
000057F6  4879 0B00 9984          pea       _Instruction.L
000057FA  04E2      
000057FC  4E95      9985          jsr       (A5)
000057FE  DEFC 000C 9986          add.w     #12,A7
                    9987   DisassembleInstruction_323:
                    9988   ; }
                    9989   ; /////////////////////////////////////////////////////////////////////////////////
                    9990   ; // if instruction is TRAPV
                    9991   ; /////////////////////////////////////////////////////////////////////////////////
                    9992   ; if(*OpCode == (unsigned short int)(0x4E76))
00005802  2042      9993          move.l    D2,A0
00005804  3010      9994          move.w    (A0),D0
00005806  0C40 4E76 9995          cmp.w     #20086,D0
0000580A  6610      9996          bne.s     DisassembleInstruction_325
                    9997   ; {
                    9998   ; InstructionSize = 1;
0000580C  24BC 0000 9999          move.l    #1,(A2)
00005810  0001      
                    10000   ; strcpyInstruction("TRAPV") ;
00005812  4879 0000 10001          pea       @m68kde~1_316.L
00005816  7AF0      
00005818  4E93      10002          jsr       (A3)
0000581A  584F      10003          addq.w    #4,A7
                    10004   DisassembleInstruction_325:
                    10005   ; }
                    10006   ; /////////////////////////////////////////////////////////////////////////////////
                    10007   ; // if instruction is TST
                    10008   ; /////////////////////////////////////////////////////////////////////////////////
                    10009   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
0000581C  2042      10010          move.l    D2,A0
0000581E  3010      10011          move.w    (A0),D0
00005820  C07C FF00 10012          and.w     #65280,D0
00005824  0C40 4A00 10013          cmp.w     #18944,D0
00005828  6600 005A 10014          bne       DisassembleInstruction_329
                    10015   ; {
                    10016   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000582C  2042      10017          move.l    D2,A0
0000582E  3010      10018          move.w    (A0),D0
00005830  EC40      10019          asr.w     #6,D0
00005832  C07C 0003 10020          and.w     #3,D0
00005836  3D40 FFE2 10021          move.w    D0,-30(A6)
                    10022   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
0000583A  2042      10023          move.l    D2,A0
0000583C  3010      10024          move.w    (A0),D0
0000583E  0C40 4AFC 10025          cmp.w     #19196,D0
00005842  6700 0040 10026          beq       DisassembleInstruction_329
00005846  302E FFE2 10027          move.w    -30(A6),D0
0000584A  0C40 0003 10028          cmp.w     #3,D0
0000584E  6700 0034 10029          beq       DisassembleInstruction_329
                    10030   ; InstructionSize = 1;
00005852  24BC 0000 10031          move.l    #1,(A2)
00005856  0001      
                    10032   ; strcpyInstruction("TST") ;
00005858  4879 0000 10033          pea       @m68kde~1_317.L
0000585C  7AF6      
0000585E  4E93      10034          jsr       (A3)
00005860  584F      10035          addq.w    #4,A7
                    10036   ; Decode2BitOperandSize(*OpCode) ;
00005862  2042      10037          move.l    D2,A0
00005864  3210      10038          move.w    (A0),D1
00005866  C2BC 0000 10039          and.l     #65535,D1
0000586A  FFFF      
0000586C  2F01      10040          move.l    D1,-(A7)
0000586E  4EB8 317C 10041          jsr       _Decode2BitOperandSize
00005872  584F      10042          addq.w    #4,A7
                    10043   ; Decode6BitEA(OpCode,0,0,0) ;
00005874  42A7      10044          clr.l     -(A7)
00005876  42A7      10045          clr.l     -(A7)
00005878  42A7      10046          clr.l     -(A7)
0000587A  2F02      10047          move.l    D2,-(A7)
0000587C  4EB8 3410 10048          jsr       _Decode6BitEA
00005880  DEFC 0010 10049          add.w     #16,A7
                    10050   DisassembleInstruction_329:
                    10051   ; }
                    10052   ; }
                    10053   ; /////////////////////////////////////////////////////////////////////////////////
                    10054   ; // if instruction is UNLK
                    10055   ; //////////////////////////////////////////////////////////
                    10056   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
00005884  2042      10057          move.l    D2,A0
00005886  3010      10058          move.w    (A0),D0
00005888  C07C FFF8 10059          and.w     #65528,D0
0000588C  0C40 4E58 10060          cmp.w     #20056,D0
00005890  6628      10061          bne.s     DisassembleInstruction_331
                    10062   ; {
                    10063   ; InstructionSize = 1;
00005892  24BC 0000 10064          move.l    #1,(A2)
00005896  0001      
                    10065   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
00005898  2042      10066          move.l    D2,A0
0000589A  3210      10067          move.w    (A0),D1
0000589C  C27C 0007 10068          and.w     #7,D1
000058A0  C2BC 0000 10069          and.l     #65535,D1
000058A4  FFFF      
000058A6  2F01      10070          move.l    D1,-(A7)
000058A8  4879 0000 10071          pea       @m68kde~1_318.L
000058AC  7AFA      
000058AE  4879 0B00 10072          pea       _Instruction.L
000058B2  04E2      
000058B4  4E95      10073          jsr       (A5)
000058B6  DEFC 000C 10074          add.w     #12,A7
                    10075   DisassembleInstruction_331:
                    10076   ; }
                    10077   ; FormatInstruction() ;
000058BA  4EB8 30EA 10078          jsr       _FormatInstruction
000058BE  4CDF 3CFC 10079          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000058C2  4E5E      10080          unlk      A6
000058C4  4E75      10081          rts
                    10082   ; }
                    10083   ; C:\CYGWIN64\HOME\SABAS\M68K\PROGRAMS\DEBUGMONITORCODE\DEBUG MONITOR FILES\FLASHROUTINES.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    10084   _strcpy:
000058C6  206F 0004 10085          move.l    (4,A7),A0
000058CA  226F 0008 10086          move.l    (8,A7),A1
000058CE  2008      10087          move.l    A0,D0
                    10088   strcpy_1:
000058D0  10D9      10089          move.b    (A1)+,(A0)+
000058D2  66FC      10090          bne.s     strcpy_1
000058D4  4E75      10091          rts
                    10092   ULDIV:
000058D6  4E56 0000 10093          link    A6,#0
000058DA  48E7 C000 10094          movem.l D0/D1,-(A7)
000058DE  222E 0008 10095          move.l  8(A6),D1
000058E2  202E 000C 10096          move.l  12(A6),D0
000058E6  6036      10097          bra.s   ldiv_3
                    10098   LDIV:
000058E8  4E56 0000 10099          link    A6,#0
000058EC  48E7 C000 10100          movem.l D0/D1,-(A7)
000058F0  222E 0008 10101          move.l  8(A6),D1
000058F4  202E 000C 10102          move.l  12(A6),D0
000058F8  4A80      10103          tst.l   D0
000058FA  6A0E      10104          bpl.s   ldiv_1
000058FC  4480      10105          neg.l   D0
000058FE  4A81      10106          tst.l   D1
00005900  6A14      10107          bpl.s   ldiv_2
00005902  4481      10108          neg.l   D1
00005904  612A      10109          bsr.s   dodiv
00005906  4481      10110          neg.l   D1
00005908  6016      10111          bra.s   ldiv_4
                    10112   ldiv_1:
0000590A  4A81      10113          tst.l   D1
0000590C  6A10      10114          bpl.s   ldiv_3
0000590E  4481      10115          neg.l   D1
00005910  611E      10116          bsr.s   dodiv
00005912  4480      10117          neg.l   D0
00005914  600A      10118          bra.s   ldiv_4
                    10119   ldiv_2:
00005916  6118      10120          bsr.s   dodiv
00005918  4480      10121          neg.l   D0
0000591A  4481      10122          neg.l   D1
0000591C  6002      10123          bra.s   ldiv_4
                    10124   ldiv_3:
0000591E  6110      10125          bsr.s   dodiv
                    10126   ldiv_4:
00005920  2D40 0008 10127          move.l  D0,8(A6)
00005924  2D41 000C 10128          move.l  D1,12(A6)
00005928  4CDF 0003 10129          movem.l (A7)+,D0/D1
0000592C  4E5E      10130          unlk    A6
0000592E  4E75      10131          rts
                    10132   dodiv:
00005930  0C81 0000 10133          cmpi.l  #$FFFF,D1
00005934  FFFF      
00005936  6236      10134          bhi.s   dodiv_2
00005938  0C80 0000 10135          cmpi.l  #$FFFF,D0
0000593C  FFFF      
0000593E  6210      10136          bhi.s   dodiv_1
00005940  80C1      10137          divu    D1,D0
00005942  2200      10138          move.l  D0,D1
00005944  4241      10139          clr.w   D1
00005946  4841      10140          swap    D1
00005948  0280 0000 10141          andi.l  #$FFFF,D0
0000594C  FFFF      
0000594E  4E75      10142          rts
                    10143   dodiv_1:
00005950  48A7 A000 10144          movem.w D0/D2,-(A7)
00005954  4240      10145          clr.w   D0
00005956  4840      10146          swap    D0
00005958  80C1      10147          divu    D1,D0
0000595A  3400      10148          move.w  D0,D2
0000595C  301F      10149          move.w  (A7)+,D0
0000595E  80C1      10150          divu    D1,D0
00005960  4840      10151          swap    D0
00005962  4281      10152          clr.l   D1
00005964  3200      10153          move.w  D0,D1
00005966  3002      10154          move.w  D2,D0
00005968  4840      10155          swap    D0
0000596A  341F      10156          move.w  (A7)+,D2
0000596C  4E75      10157          rts
                    10158   dodiv_2:
0000596E  48E7 3800 10159          movem.l D2/D3/D4,-(A7)
00005972  2401      10160          move.l  D1,D2
00005974  4242      10161          clr.w   D2
00005976  4842      10162          swap    D2
00005978  5282      10163          addq.l  #1,D2
0000597A  2600      10164          move.l  D0,D3
0000597C  2801      10165          move.l  D1,D4
0000597E  2202      10166          move.l  D2,D1
00005980  61CE      10167          bsr.s   dodiv_1
00005982  2204      10168          move.l  D4,D1
00005984  82C2      10169          divu    D2,D1
00005986  80C1      10170          divu    D1,D0
00005988  0280 0000 10171          andi.l  #$FFFF,D0
0000598C  FFFF      
                    10172   dodiv_3:
0000598E  2204      10173          move.l  D4,D1
00005990  2404      10174          move.l  D4,D2
00005992  4842      10175          swap    D2
00005994  C2C0      10176          mulu    D0,D1
00005996  C4C0      10177          mulu    D0,D2
00005998  4842      10178          swap    D2
0000599A  D282      10179          add.l   D2,D1
0000599C  9283      10180          sub.l   D3,D1
0000599E  620A      10181          bhi.s   dodiv_4
000059A0  4481      10182          neg.l   D1
000059A2  B881      10183          cmp.l   D1,D4
000059A4  6208      10184          bhi.s   dodiv_5
000059A6  5280      10185          addq.l  #1,D0
000059A8  60E4      10186          bra.s   dodiv_3
                    10187   dodiv_4:
000059AA  5380      10188          subq.l  #1,D0
000059AC  60E0      10189          bra.s   dodiv_3
                    10190   dodiv_5:
000059AE  4CDF 001C 10191          movem.l (A7)+,D2/D3/D4
000059B2  4E75      10192          rts
                    10193   _putch:
000059B4  4E56 0000 10194          link      A6,#0
000059B8  2F02      10195          move.l    D2,-(A7)
000059BA  242E 0008 10196          move.l    8(A6),D2
000059BE  0C82 0000 10197          cmp.l     #10,D2
000059C2  000A      
000059C4  660A      10198          bne.s     putch_1
000059C6  4878 000D 10199          pea       13
000059CA  4EB8 0B3C 10200          jsr       __putch
000059CE  584F      10201          addq.w    #4,A7
                    10202   putch_1:
000059D0  2F02      10203          move.l    D2,-(A7)
000059D2  4EB8 0B3C 10204          jsr       __putch
000059D6  584F      10205          addq.w    #4,A7
000059D8  2002      10206          move.l    D2,D0
000059DA  241F      10207          move.l    (A7)+,D2
000059DC  4E5E      10208          unlk      A6
000059DE  4E75      10209          rts
                    10210   _getch:
000059E0  2F02      10211          move.l    D2,-(A7)
000059E2  2439 0B00 10212          move.l    __ungetbuf.L,D2
000059E6  00C0      
000059E8  2039 0B00 10213          move.l    __ungetbuf.L,D0
000059EC  00C0      
000059EE  0C80 FFFF 10214          cmp.l     #-1,D0
000059F2  FFFF      
000059F4  670C      10215          beq.s     getch_1
000059F6  23FC FFFF 10216          move.l    #-1,__ungetbuf.L
000059FA  FFFF 0B00 
000059FE  00C0      
00005A00  6010      10217          bra.s     getch_3
                    10218   getch_1:
00005A02  4EB8 0B68 10219          jsr       __getch
00005A06  2400      10220          move.l    D0,D2
00005A08  0C80 0000 10221          cmp.l     #13,D0
00005A0C  000D      
00005A0E  6602      10222          bne.s     getch_3
00005A10  740A      10223          moveq     #10,D2
                    10224   getch_3:
00005A12  2002      10225          move.l    D2,D0
00005A14  241F      10226          move.l    (A7)+,D2
00005A16  4E75      10227          rts
                    10228   _tolower:
00005A18  202F 0004 10229          move.l    4(A7),D0
00005A1C  0C80 0000 10230          cmp.l     #'A',D0
00005A20  0041      
00005A22  6D0E      10231          blt.s     tolower_1
00005A24  0C80 0000 10232          cmp.l     #'Z',D0
00005A28  005A      
00005A2A  6E06      10233          bgt.s     tolower_1
00005A2C  0680 0000 10234          add.l     #$20,D0
00005A30  0020      
                    10235   tolower_1:
00005A32  4E75      10236          rts
                    10237   _sprintf:
00005A34  4E56 FFFC 10238          link      A6,#-4
00005A38  2F02      10239          move.l    D2,-(A7)
00005A3A  41EE 000C 10240          lea       12(A6),A0
00005A3E  5848      10241          addq.w    #4,A0
00005A40  2408      10242          move.l    A0,D2
00005A42  2F02      10243          move.l    D2,-(A7)
00005A44  2F2E 000C 10244          move.l    12(A6),-(A7)
00005A48  2F2E 0008 10245          move.l    8(A6),-(A7)
00005A4C  4EB9 0000 10246          jsr       _doprint
00005A50  5B6E      
00005A52  DEFC 000C 10247          add.w     #12,A7
00005A56  2D40 FFFC 10248          move.l    D0,-4(A6)
00005A5A  4282      10249          clr.l     D2
00005A5C  202E FFFC 10250          move.l    -4(A6),D0
00005A60  241F      10251          move.l    (A7)+,D2
00005A62  4E5E      10252          unlk      A6
00005A64  4E75      10253          rts
                    10254   _strcat:
00005A66  206F 0004 10255          move.l    (4,A7),A0
00005A6A  226F 0008 10256          move.l    (8,A7),A1
00005A6E  2008      10257          move.l    A0,D0
                    10258   strcat_1:
00005A70  4A18      10259          tst.b     (A0)+
00005A72  66FC      10260          bne.s     strcat_1
00005A74  5388      10261          subq.l    #1,A0
                    10262   strcat_2:
00005A76  10D9      10263          move.b    (A1)+,(A0)+
00005A78  66FC      10264          bne.s     strcat_2
00005A7A  4E75      10265          rts
                    10266   _toupper:
00005A7C  202F 0004 10267          move.l    4(A7),D0
00005A80  0C80 0000 10268          cmp.l     #'a',D0
00005A84  0061      
00005A86  6D0E      10269          blt.s     toupper_1
00005A88  0C80 0000 10270          cmp.l     #'z',D0
00005A8C  007A      
00005A8E  6E06      10271          bgt.s     toupper_1
00005A90  0480 0000 10272          sub.l     #$20,D0
00005A94  0020      
                    10273   toupper_1:
00005A96  4E75      10274          rts
                    10275   _printf:
00005A98  4E56 FFFC 10276          link      A6,#-4
00005A9C  2F02      10277          move.l    D2,-(A7)
00005A9E  41EE 0008 10278          lea       8(A6),A0
00005AA2  5848      10279          addq.w    #4,A0
00005AA4  2408      10280          move.l    A0,D2
00005AA6  2F02      10281          move.l    D2,-(A7)
00005AA8  2F2E 0008 10282          move.l    8(A6),-(A7)
00005AAC  42A7      10283          clr.l     -(A7)
00005AAE  4EB9 0000 10284          jsr       _doprint
00005AB2  5B6E      
00005AB4  DEFC 000C 10285          add.w     #12,A7
00005AB8  2D40 FFFC 10286          move.l    D0,-4(A6)
00005ABC  4282      10287          clr.l     D2
00005ABE  202E FFFC 10288          move.l    -4(A6),D0
00005AC2  241F      10289          move.l    (A7)+,D2
00005AC4  4E5E      10290          unlk      A6
00005AC6  4E75      10291          rts
                    10292   @doprint_copy:
00005AC8  4E56 0000 10293          link      A6,#0
00005ACC  206E 0008 10294          move.l    8(A6),A0
00005AD0  4A90      10295          tst.l     (A0)
00005AD2  6710      10296          beq.s     @doprint_copy_1
00005AD4  202E 000C 10297          move.l    12(A6),D0
00005AD8  206E 0008 10298          move.l    8(A6),A0
00005ADC  2250      10299          move.l    (A0),A1
00005ADE  5290      10300          addq.l    #1,(A0)
00005AE0  1280      10301          move.b    D0,(A1)
00005AE2  600A      10302          bra.s     @doprint_copy_2
                    10303   @doprint_copy_1:
00005AE4  2F2E 000C 10304          move.l    12(A6),-(A7)
00005AE8  4EB8 59B4 10305          jsr       _putch
00005AEC  584F      10306          addq.w    #4,A7
                    10307   @doprint_copy_2:
00005AEE  4E5E      10308          unlk      A6
00005AF0  4E75      10309          rts
                    10310   @doprint_getval:
00005AF2  4E56 0000 10311          link      A6,#0
00005AF6  48E7 3000 10312          movem.l   D2/D3,-(A7)
00005AFA  262E 0008 10313          move.l    8(A6),D3
00005AFE  4282      10314          clr.l     D2
00005B00  2043      10315          move.l    D3,A0
00005B02  2050      10316          move.l    (A0),A0
00005B04  1010      10317          move.b    (A0),D0
00005B06  0C00 002A 10318          cmp.b     #42,D0
00005B0A  6612      10319          bne.s     @doprint_getval_1
00005B0C  206E 000C 10320          move.l    12(A6),A0
00005B10  2250      10321          move.l    (A0),A1
00005B12  5890      10322          addq.l    #4,(A0)
00005B14  2411      10323          move.l    (A1),D2
00005B16  2043      10324          move.l    D3,A0
00005B18  5290      10325          addq.l    #1,(A0)
00005B1A  6000 0048 10326          bra       @doprint_getval_5
                    10327   @doprint_getval_1:
00005B1E  7001      10328          moveq     #1,D0
00005B20  2043      10329          move.l    D3,A0
00005B22  2050      10330          move.l    (A0),A0
00005B24  1210      10331          move.b    (A0),D1
00005B26  4881      10332          ext.w     D1
00005B28  48C1      10333          ext.l     D1
00005B2A  D081      10334          add.l     D1,D0
00005B2C  41F9 0000 10335          lea       __ctype.L,A0
00005B30  7B10      
00005B32  1030 0800 10336          move.b    0(A0,D0.L),D0
00005B36  C03C 0004 10337          and.b     #4,D0
00005B3A  6728      10338          beq.s     @doprint_getval_5
00005B3C  2F02      10339          move.l    D2,-(A7)
00005B3E  4878 000A 10340          pea       10
00005B42  4EB9 0000 10341          jsr       LMUL
00005B46  630A      
00005B48  2017      10342          move.l    (A7),D0
00005B4A  504F      10343          addq.w    #8,A7
00005B4C  2043      10344          move.l    D3,A0
00005B4E  2250      10345          move.l    (A0),A1
00005B50  5290      10346          addq.l    #1,(A0)
00005B52  1211      10347          move.b    (A1),D1
00005B54  4881      10348          ext.w     D1
00005B56  48C1      10349          ext.l     D1
00005B58  D081      10350          add.l     D1,D0
00005B5A  0480 0000 10351          sub.l     #48,D0
00005B5E  0030      
00005B60  2400      10352          move.l    D0,D2
00005B62  60BA      10353          bra       @doprint_getval_1
                    10354   @doprint_getval_5:
00005B64  2002      10355          move.l    D2,D0
00005B66  4CDF 000C 10356          movem.l   (A7)+,D2/D3
00005B6A  4E5E      10357          unlk      A6
00005B6C  4E75      10358          rts
                    10359   _doprint:
00005B6E  4E56 FFCC 10360          link      A6,#-52
00005B72  48E7 3F3C 10361          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00005B76  45EE 0008 10362          lea       8(A6),A2
00005B7A  47F8 5AC8 10363          lea       @doprint_copy.L,A3
00005B7E  49F9 0000 10364          lea       _ultoa.L,A4
00005B82  6296      
00005B84  4286      10365          clr.l     D6
                    10366   doprint_1:
00005B86  206E 000C 10367          move.l    12(A6),A0
00005B8A  4A10      10368          tst.b     (A0)
00005B8C  6700 05EA 10369          beq       doprint_3
00005B90  206E 000C 10370          move.l    12(A6),A0
00005B94  1010      10371          move.b    (A0),D0
00005B96  0C00 0025 10372          cmp.b     #37,D0
00005B9A  671C      10373          beq.s     doprint_4
00005B9C  206E 000C 10374          move.l    12(A6),A0
00005BA0  52AE 000C 10375          addq.l    #1,12(A6)
00005BA4  1210      10376          move.b    (A0),D1
00005BA6  4881      10377          ext.w     D1
00005BA8  48C1      10378          ext.l     D1
00005BAA  2F01      10379          move.l    D1,-(A7)
00005BAC  2F0A      10380          move.l    A2,-(A7)
00005BAE  4E93      10381          jsr       (A3)
00005BB0  504F      10382          addq.w    #8,A7
00005BB2  5286      10383          addq.l    #1,D6
00005BB4  6000 05BE 10384          bra       doprint_2
                    10385   doprint_4:
00005BB8  52AE 000C 10386          addq.l    #1,12(A6)
00005BBC  422E FFD3 10387          clr.b     -45(A6)
00005BC0  422E FFD2 10388          clr.b     -46(A6)
00005BC4  422E FFD0 10389          clr.b     -48(A6)
00005BC8  422E FFCF 10390          clr.b     -49(A6)
00005BCC  422E FFCE 10391          clr.b     -50(A6)
00005BD0  422E FFCD 10392          clr.b     -51(A6)
00005BD4  42AE FFFC 10393          clr.l     -4(A6)
00005BD8  7AFF      10394          moveq     #-1,D5
00005BDA  41EE FFDC 10395          lea       -36(A6),A0
00005BDE  2608      10396          move.l    A0,D3
00005BE0  2408      10397          move.l    A0,D2
                    10398   doprint_6:
00005BE2  206E 000C 10399          move.l    12(A6),A0
00005BE6  1010      10400          move.b    (A0),D0
00005BE8  4880      10401          ext.w     D0
00005BEA  48C0      10402          ext.l     D0
00005BEC  0C80 0000 10403          cmp.l     #43,D0
00005BF0  002B      
00005BF2  6730      10404          beq.s     doprint_12
00005BF4  6E18      10405          bgt.s     doprint_15
00005BF6  0C80 0000 10406          cmp.l     #35,D0
00005BFA  0023      
00005BFC  6700 003E 10407          beq       doprint_14
00005C00  6E00 0046 10408          bgt       doprint_9
00005C04  0C80 0000 10409          cmp.l     #32,D0
00005C08  0020      
00005C0A  6724      10410          beq.s     doprint_13
00005C0C  603A      10411          bra.s     doprint_9
                    10412   doprint_15:
00005C0E  0C80 0000 10413          cmp.l     #45,D0
00005C12  002D      
00005C14  6702      10414          beq.s     doprint_11
00005C16  6030      10415          bra.s     doprint_9
                    10416   doprint_11:
00005C18  1D7C 0001 10417          move.b    #1,-51(A6)
00005C1C  FFCD      
00005C1E  52AE 000C 10418          addq.l    #1,12(A6)
00005C22  6026      10419          bra.s     doprint_7
                    10420   doprint_12:
00005C24  1D7C 0001 10421          move.b    #1,-50(A6)
00005C28  FFCE      
00005C2A  52AE 000C 10422          addq.l    #1,12(A6)
00005C2E  601A      10423          bra.s     doprint_7
                    10424   doprint_13:
00005C30  1D7C 0001 10425          move.b    #1,-49(A6)
00005C34  FFCF      
00005C36  52AE 000C 10426          addq.l    #1,12(A6)
00005C3A  600E      10427          bra.s     doprint_7
                    10428   doprint_14:
00005C3C  1D7C 0001 10429          move.b    #1,-48(A6)
00005C40  FFD0      
00005C42  52AE 000C 10430          addq.l    #1,12(A6)
00005C46  6002      10431          bra.s     doprint_7
                    10432   doprint_9:
00005C48  6002      10433          bra.s     doprint_8
                    10434   doprint_7:
00005C4A  6096      10435          bra       doprint_6
                    10436   doprint_8:
00005C4C  206E 000C 10437          move.l    12(A6),A0
00005C50  1010      10438          move.b    (A0),D0
00005C52  0C00 0030 10439          cmp.b     #48,D0
00005C56  660A      10440          bne.s     doprint_16
00005C58  52AE 000C 10441          addq.l    #1,12(A6)
00005C5C  1D7C 0001 10442          move.b    #1,-46(A6)
00005C60  FFD2      
                    10443   doprint_16:
00005C62  486E 0010 10444          pea       16(A6)
00005C66  486E 000C 10445          pea       12(A6)
00005C6A  4EB8 5AF2 10446          jsr       @doprint_getval
00005C6E  504F      10447          addq.w    #8,A7
00005C70  2A40      10448          move.l    D0,A5
00005C72  206E 000C 10449          move.l    12(A6),A0
00005C76  1010      10450          move.b    (A0),D0
00005C78  0C00 002E 10451          cmp.b     #46,D0
00005C7C  6614      10452          bne.s     doprint_18
00005C7E  52AE 000C 10453          addq.l    #1,12(A6)
00005C82  486E 0010 10454          pea       16(A6)
00005C86  486E 000C 10455          pea       12(A6)
00005C8A  4EB8 5AF2 10456          jsr       @doprint_getval
00005C8E  504F      10457          addq.w    #8,A7
00005C90  2A00      10458          move.l    D0,D5
                    10459   doprint_18:
00005C92  206E 000C 10460          move.l    12(A6),A0
00005C96  1010      10461          move.b    (A0),D0
00005C98  0C00 006C 10462          cmp.b     #108,D0
00005C9C  660A      10463          bne.s     doprint_20
00005C9E  52AE 000C 10464          addq.l    #1,12(A6)
00005CA2  1D7C 0001 10465          move.b    #1,-45(A6)
00005CA6  FFD3      
                    10466   doprint_20:
00005CA8  206E 000C 10467          move.l    12(A6),A0
00005CAC  1010      10468          move.b    (A0),D0
00005CAE  4880      10469          ext.w     D0
00005CB0  48C0      10470          ext.l     D0
00005CB2  0C80 0000 10471          cmp.l     #111,D0
00005CB6  006F      
00005CB8  6700 00D8 10472          beq       doprint_27
00005CBC  6E34      10473          bgt.s     doprint_33
00005CBE  0C80 0000 10474          cmp.l     #100,D0
00005CC2  0064      
00005CC4  6700 0054 10475          beq       doprint_24
00005CC8  6E1C      10476          bgt.s     doprint_34
00005CCA  0C80 0000 10477          cmp.l     #99,D0
00005CCE  0063      
00005CD0  6700 0130 10478          beq       doprint_30
00005CD4  6E00 0174 10479          bgt       doprint_22
00005CD8  0C80 0000 10480          cmp.l     #88,D0
00005CDC  0058      
00005CDE  6700 00EA 10481          beq       doprint_28
00005CE2  6000 0166 10482          bra       doprint_22
                    10483   doprint_34:
00005CE6  0C80 0000 10484          cmp.l     #105,D0
00005CEA  0069      
00005CEC  672C      10485          beq.s     doprint_24
00005CEE  6000 015A 10486          bra       doprint_22
                    10487   doprint_33:
00005CF2  0C80 0000 10488          cmp.l     #117,D0
00005CF6  0075      
00005CF8  6700 0060 10489          beq       doprint_26
00005CFC  6E0E      10490          bgt.s     doprint_35
00005CFE  0C80 0000 10491          cmp.l     #115,D0
00005D02  0073      
00005D04  6700 0124 10492          beq       doprint_31
00005D08  6000 0140 10493          bra       doprint_22
                    10494   doprint_35:
00005D0C  0C80 0000 10495          cmp.l     #120,D0
00005D10  0078      
00005D12  6700 00B6 10496          beq       doprint_28
00005D16  6000 0132 10497          bra       doprint_22
                    10498   doprint_24:
00005D1A  4A2E FFD3 10499          tst.b     -45(A6)
00005D1E  671C      10500          beq.s     doprint_36
00005D20  4878 000A 10501          pea       10
00005D24  2F03      10502          move.l    D3,-(A7)
00005D26  206E 0010 10503          move.l    16(A6),A0
00005D2A  58AE 0010 10504          addq.l    #4,16(A6)
00005D2E  2F10      10505          move.l    (A0),-(A7)
00005D30  4EB9 0000 10506          jsr       _ltoa
00005D34  6212      
00005D36  DEFC 000C 10507          add.w     #12,A7
00005D3A  601A      10508          bra.s     doprint_37
                    10509   doprint_36:
00005D3C  4878 000A 10510          pea       10
00005D40  2F03      10511          move.l    D3,-(A7)
00005D42  206E 0010 10512          move.l    16(A6),A0
00005D46  58AE 0010 10513          addq.l    #4,16(A6)
00005D4A  2F10      10514          move.l    (A0),-(A7)
00005D4C  4EB9 0000 10515          jsr       _ltoa
00005D50  6212      
00005D52  DEFC 000C 10516          add.w     #12,A7
                    10517   doprint_37:
00005D56  6000 0100 10518          bra       doprint_23
                    10519   doprint_26:
00005D5A  4A2E FFD3 10520          tst.b     -45(A6)
00005D5E  6718      10521          beq.s     doprint_38
00005D60  4878 000A 10522          pea       10
00005D64  2F03      10523          move.l    D3,-(A7)
00005D66  206E 0010 10524          move.l    16(A6),A0
00005D6A  58AE 0010 10525          addq.l    #4,16(A6)
00005D6E  2F10      10526          move.l    (A0),-(A7)
00005D70  4E94      10527          jsr       (A4)
00005D72  DEFC 000C 10528          add.w     #12,A7
00005D76  6016      10529          bra.s     doprint_39
                    10530   doprint_38:
00005D78  4878 000A 10531          pea       10
00005D7C  2F03      10532          move.l    D3,-(A7)
00005D7E  206E 0010 10533          move.l    16(A6),A0
00005D82  58AE 0010 10534          addq.l    #4,16(A6)
00005D86  2F10      10535          move.l    (A0),-(A7)
00005D88  4E94      10536          jsr       (A4)
00005D8A  DEFC 000C 10537          add.w     #12,A7
                    10538   doprint_39:
00005D8E  6000 00C8 10539          bra       doprint_23
                    10540   doprint_27:
00005D92  4A2E FFD3 10541          tst.b     -45(A6)
00005D96  6718      10542          beq.s     doprint_40
00005D98  4878 0008 10543          pea       8
00005D9C  2F03      10544          move.l    D3,-(A7)
00005D9E  206E 0010 10545          move.l    16(A6),A0
00005DA2  58AE 0010 10546          addq.l    #4,16(A6)
00005DA6  2F10      10547          move.l    (A0),-(A7)
00005DA8  4E94      10548          jsr       (A4)
00005DAA  DEFC 000C 10549          add.w     #12,A7
00005DAE  6016      10550          bra.s     doprint_41
                    10551   doprint_40:
00005DB0  4878 0008 10552          pea       8
00005DB4  2F03      10553          move.l    D3,-(A7)
00005DB6  206E 0010 10554          move.l    16(A6),A0
00005DBA  58AE 0010 10555          addq.l    #4,16(A6)
00005DBE  2F10      10556          move.l    (A0),-(A7)
00005DC0  4E94      10557          jsr       (A4)
00005DC2  DEFC 000C 10558          add.w     #12,A7
                    10559   doprint_41:
00005DC6  6000 0090 10560          bra       doprint_23
                    10561   doprint_28:
00005DCA  4A2E FFD3 10562          tst.b     -45(A6)
00005DCE  6718      10563          beq.s     doprint_42
00005DD0  4878 0010 10564          pea       16
00005DD4  2F03      10565          move.l    D3,-(A7)
00005DD6  206E 0010 10566          move.l    16(A6),A0
00005DDA  58AE 0010 10567          addq.l    #4,16(A6)
00005DDE  2F10      10568          move.l    (A0),-(A7)
00005DE0  4E94      10569          jsr       (A4)
00005DE2  DEFC 000C 10570          add.w     #12,A7
00005DE6  6016      10571          bra.s     doprint_43
                    10572   doprint_42:
00005DE8  4878 0010 10573          pea       16
00005DEC  2F03      10574          move.l    D3,-(A7)
00005DEE  206E 0010 10575          move.l    16(A6),A0
00005DF2  58AE 0010 10576          addq.l    #4,16(A6)
00005DF6  2F10      10577          move.l    (A0),-(A7)
00005DF8  4E94      10578          jsr       (A4)
00005DFA  DEFC 000C 10579          add.w     #12,A7
                    10580   doprint_43:
00005DFE  6000 0058 10581          bra       doprint_23
                    10582   doprint_30:
00005E02  206E 0010 10583          move.l    16(A6),A0
00005E06  58AE 0010 10584          addq.l    #4,16(A6)
00005E0A  2010      10585          move.l    (A0),D0
00005E0C  2042      10586          move.l    D2,A0
00005E0E  5282      10587          addq.l    #1,D2
00005E10  1080      10588          move.b    D0,(A0)
00005E12  2042      10589          move.l    D2,A0
00005E14  4210      10590          clr.b     (A0)
00005E16  200D      10591          move.l    A5,D0
00005E18  6704      10592          beq.s     doprint_44
00005E1A  200D      10593          move.l    A5,D0
00005E1C  6006      10594          bra.s     doprint_45
                    10595   doprint_44:
00005E1E  7001      10596          moveq     #1,D0
00005E20  4880      10597          ext.w     D0
00005E22  48C0      10598          ext.l     D0
                    10599   doprint_45:
00005E24  2A00      10600          move.l    D0,D5
00005E26  6000 0030 10601          bra       doprint_23
                    10602   doprint_31:
00005E2A  206E 0010 10603          move.l    16(A6),A0
00005E2E  58AE 0010 10604          addq.l    #4,16(A6)
00005E32  2610      10605          move.l    (A0),D3
00005E34  0C85 FFFF 10606          cmp.l     #-1,D5
00005E38  FFFF      
00005E3A  660C      10607          bne.s     doprint_46
00005E3C  2F03      10608          move.l    D3,-(A7)
00005E3E  4EB9 0000 10609          jsr       _strlen
00005E42  6398      
00005E44  584F      10610          addq.w    #4,A7
00005E46  2A00      10611          move.l    D0,D5
                    10612   doprint_46:
00005E48  600E      10613          bra.s     doprint_23
                    10614   doprint_22:
00005E4A  206E 000C 10615          move.l    12(A6),A0
00005E4E  2242      10616          move.l    D2,A1
00005E50  5282      10617          addq.l    #1,D2
00005E52  1290      10618          move.b    (A0),(A1)
00005E54  2042      10619          move.l    D2,A0
00005E56  4210      10620          clr.b     (A0)
                    10621   doprint_23:
00005E58  2F03      10622          move.l    D3,-(A7)
00005E5A  4EB9 0000 10623          jsr       _strlen
00005E5E  6398      
00005E60  584F      10624          addq.w    #4,A7
00005E62  1800      10625          move.b    D0,D4
00005E64  206E 000C 10626          move.l    12(A6),A0
00005E68  1010      10627          move.b    (A0),D0
00005E6A  0C00 0073 10628          cmp.b     #115,D0
00005E6E  661C      10629          bne.s     doprint_48
00005E70  0C85 0000 10630          cmp.l     #0,D5
00005E74  0000      
00005E76  6D14      10631          blt.s     doprint_48
00005E78  4884      10632          ext.w     D4
00005E7A  48C4      10633          ext.l     D4
00005E7C  B885      10634          cmp.l     D5,D4
00005E7E  6F04      10635          ble.s     doprint_50
00005E80  2005      10636          move.l    D5,D0
00005E82  6006      10637          bra.s     doprint_51
                    10638   doprint_50:
00005E84  1004      10639          move.b    D4,D0
00005E86  4880      10640          ext.w     D0
00005E88  48C0      10641          ext.l     D0
                    10642   doprint_51:
00005E8A  1800      10643          move.b    D0,D4
                    10644   doprint_48:
00005E8C  206E 000C 10645          move.l    12(A6),A0
00005E90  1010      10646          move.b    (A0),D0
00005E92  0C00 0058 10647          cmp.b     #88,D0
00005E96  6600 0026 10648          bne       doprint_56
00005E9A  41EE FFDC 10649          lea       -36(A6),A0
00005E9E  2408      10650          move.l    A0,D2
                    10651   doprint_54:
00005EA0  2042      10652          move.l    D2,A0
00005EA2  4A10      10653          tst.b     (A0)
00005EA4  6718      10654          beq.s     doprint_56
00005EA6  2042      10655          move.l    D2,A0
00005EA8  1210      10656          move.b    (A0),D1
00005EAA  4881      10657          ext.w     D1
00005EAC  48C1      10658          ext.l     D1
00005EAE  2F01      10659          move.l    D1,-(A7)
00005EB0  4EB8 5A7C 10660          jsr       _toupper
00005EB4  584F      10661          addq.w    #4,A7
00005EB6  2042      10662          move.l    D2,A0
00005EB8  1080      10663          move.b    D0,(A0)
00005EBA  5282      10664          addq.l    #1,D2
00005EBC  60E2      10665          bra       doprint_54
                    10666   doprint_56:
00005EBE  7E00      10667          moveq     #0,D7
00005EC0  41EE FFD4 10668          lea       -44(A6),A0
00005EC4  2408      10669          move.l    A0,D2
00005EC6  206E 000C 10670          move.l    12(A6),A0
00005ECA  1010      10671          move.b    (A0),D0
00005ECC  0C00 0064 10672          cmp.b     #100,D0
00005ED0  670E      10673          beq.s     doprint_59
00005ED2  206E 000C 10674          move.l    12(A6),A0
00005ED6  1010      10675          move.b    (A0),D0
00005ED8  0C00 0069 10676          cmp.b     #105,D0
00005EDC  6600 0068 10677          bne       doprint_65
                    10678   doprint_59:
00005EE0  102E FFCE 10679          move.b    -50(A6),D0
00005EE4  4880      10680          ext.w     D0
00005EE6  48C0      10681          ext.l     D0
00005EE8  4A80      10682          tst.l     D0
00005EEA  660C      10683          bne.s     doprint_62
00005EEC  2043      10684          move.l    D3,A0
00005EEE  1010      10685          move.b    (A0),D0
00005EF0  0C00 002D 10686          cmp.b     #45,D0
00005EF4  6600 0028 10687          bne       doprint_60
                    10688   doprint_62:
00005EF8  2043      10689          move.l    D3,A0
00005EFA  1010      10690          move.b    (A0),D0
00005EFC  0C00 002D 10691          cmp.b     #45,D0
00005F00  660E      10692          bne.s     doprint_63
00005F02  2043      10693          move.l    D3,A0
00005F04  5283      10694          addq.l    #1,D3
00005F06  2242      10695          move.l    D2,A1
00005F08  5282      10696          addq.l    #1,D2
00005F0A  1290      10697          move.b    (A0),(A1)
00005F0C  5304      10698          subq.b    #1,D4
00005F0E  6008      10699          bra.s     doprint_64
                    10700   doprint_63:
00005F10  2042      10701          move.l    D2,A0
00005F12  5282      10702          addq.l    #1,D2
00005F14  10BC 002B 10703          move.b    #43,(A0)
                    10704   doprint_64:
00005F18  5287      10705          addq.l    #1,D7
00005F1A  6000 002A 10706          bra       doprint_65
                    10707   doprint_60:
00005F1E  4A2E FFCF 10708          tst.b     -49(A6)
00005F22  6722      10709          beq.s     doprint_65
00005F24  2043      10710          move.l    D3,A0
00005F26  1010      10711          move.b    (A0),D0
00005F28  0C00 002D 10712          cmp.b     #45,D0
00005F2C  660E      10713          bne.s     doprint_67
00005F2E  2043      10714          move.l    D3,A0
00005F30  5283      10715          addq.l    #1,D3
00005F32  2242      10716          move.l    D2,A1
00005F34  5282      10717          addq.l    #1,D2
00005F36  1290      10718          move.b    (A0),(A1)
00005F38  5304      10719          subq.b    #1,D4
00005F3A  6008      10720          bra.s     doprint_68
                    10721   doprint_67:
00005F3C  2042      10722          move.l    D2,A0
00005F3E  5282      10723          addq.l    #1,D2
00005F40  10BC 0020 10724          move.b    #32,(A0)
                    10725   doprint_68:
00005F44  5287      10726          addq.l    #1,D7
                    10727   doprint_65:
00005F46  4A2E FFD0 10728          tst.b     -48(A6)
00005F4A  6700 005A 10729          beq       doprint_77
00005F4E  206E 000C 10730          move.l    12(A6),A0
00005F52  1010      10731          move.b    (A0),D0
00005F54  4880      10732          ext.w     D0
00005F56  48C0      10733          ext.l     D0
00005F58  0C80 0000 10734          cmp.l     #111,D0
00005F5C  006F      
00005F5E  671A      10735          beq.s     doprint_73
00005F60  6E0C      10736          bgt.s     doprint_76
00005F62  0C80 0000 10737          cmp.l     #88,D0
00005F66  0058      
00005F68  6710      10738          beq.s     doprint_73
00005F6A  6000 003A 10739          bra       doprint_77
                    10740   doprint_76:
00005F6E  0C80 0000 10741          cmp.l     #120,D0
00005F72  0078      
00005F74  6704      10742          beq.s     doprint_73
00005F76  6000 002E 10743          bra       doprint_77
                    10744   doprint_73:
00005F7A  2042      10745          move.l    D2,A0
00005F7C  5282      10746          addq.l    #1,D2
00005F7E  10BC 0030 10747          move.b    #48,(A0)
00005F82  5287      10748          addq.l    #1,D7
00005F84  206E 000C 10749          move.l    12(A6),A0
00005F88  1010      10750          move.b    (A0),D0
00005F8A  0C00 0078 10751          cmp.b     #120,D0
00005F8E  670C      10752          beq.s     doprint_79
00005F90  206E 000C 10753          move.l    12(A6),A0
00005F94  1010      10754          move.b    (A0),D0
00005F96  0C00 0058 10755          cmp.b     #88,D0
00005F9A  660A      10756          bne.s     doprint_77
                    10757   doprint_79:
00005F9C  2042      10758          move.l    D2,A0
00005F9E  5282      10759          addq.l    #1,D2
00005FA0  10BC 0078 10760          move.b    #120,(A0)
00005FA4  5287      10761          addq.l    #1,D7
                    10762   doprint_77:
00005FA6  2042      10763          move.l    D2,A0
00005FA8  4210      10764          clr.b     (A0)
00005FAA  206E 000C 10765          move.l    12(A6),A0
00005FAE  1010      10766          move.b    (A0),D0
00005FB0  4880      10767          ext.w     D0
00005FB2  48C0      10768          ext.l     D0
00005FB4  0C80 0000 10769          cmp.l     #105,D0
00005FB8  0069      
00005FBA  6700 0076 10770          beq       doprint_82
00005FBE  6E42      10771          bgt.s     doprint_93
00005FC0  0C80 0000 10772          cmp.l     #99,D0
00005FC4  0063      
00005FC6  6700 0084 10773          beq       doprint_96
00005FCA  6E1C      10774          bgt.s     doprint_94
00005FCC  0C80 0000 10775          cmp.l     #88,D0
00005FD0  0058      
00005FD2  6700 005E 10776          beq       doprint_82
00005FD6  6E00 0184 10777          bgt       doprint_80
00005FDA  0C80 0000 10778          cmp.l     #69,D0
00005FDE  0045      
00005FE0  6700 0050 10779          beq       doprint_82
00005FE4  6000 0176 10780          bra       doprint_80
                    10781   doprint_94:
00005FE8  0C80 0000 10782          cmp.l     #101,D0
00005FEC  0065      
00005FEE  6700 0042 10783          beq       doprint_82
00005FF2  6E00 0168 10784          bgt       doprint_80
00005FF6  0C80 0000 10785          cmp.l     #100,D0
00005FFA  0064      
00005FFC  6734      10786          beq.s     doprint_82
00005FFE  6000 015C 10787          bra       doprint_80
                    10788   doprint_93:
00006002  0C80 0000 10789          cmp.l     #117,D0
00006006  0075      
00006008  6728      10790          beq.s     doprint_82
0000600A  6E1A      10791          bgt.s     doprint_95
0000600C  0C80 0000 10792          cmp.l     #115,D0
00006010  0073      
00006012  6700 0038 10793          beq       doprint_96
00006016  6E00 0144 10794          bgt       doprint_80
0000601A  0C80 0000 10795          cmp.l     #111,D0
0000601E  006F      
00006020  6710      10796          beq.s     doprint_82
00006022  6000 0138 10797          bra       doprint_80
                    10798   doprint_95:
00006026  0C80 0000 10799          cmp.l     #120,D0
0000602A  0078      
0000602C  6704      10800          beq.s     doprint_82
0000602E  6000 012C 10801          bra       doprint_80
                    10802   doprint_82:
00006032  4A2E FFD2 10803          tst.b     -46(A6)
00006036  6714      10804          beq.s     doprint_96
00006038  4A2E FFCD 10805          tst.b     -51(A6)
0000603C  660E      10806          bne.s     doprint_96
0000603E  200D      10807          move.l    A5,D0
00006040  9087      10808          sub.l     D7,D0
00006042  4884      10809          ext.w     D4
00006044  48C4      10810          ext.l     D4
00006046  9084      10811          sub.l     D4,D0
00006048  2D40 FFFC 10812          move.l    D0,-4(A6)
                    10813   doprint_96:
0000604C  202E FFFC 10814          move.l    -4(A6),D0
00006050  0C80 0000 10815          cmp.l     #0,D0
00006054  0000      
00006056  6C04      10816          bge.s     doprint_98
00006058  42AE FFFC 10817          clr.l     -4(A6)
                    10818   doprint_98:
0000605C  4A2E FFCD 10819          tst.b     -51(A6)
00006060  6600 0030 10820          bne       doprint_104
00006064  1004      10821          move.b    D4,D0
00006066  4880      10822          ext.w     D0
00006068  48C0      10823          ext.l     D0
0000606A  D0AE FFFC 10824          add.l     -4(A6),D0
0000606E  D087      10825          add.l     D7,D0
00006070  1D40 FFD1 10826          move.b    D0,-47(A6)
                    10827   doprint_102:
00006074  102E FFD1 10828          move.b    -47(A6),D0
00006078  4880      10829          ext.w     D0
0000607A  48C0      10830          ext.l     D0
0000607C  220D      10831          move.l    A5,D1
0000607E  534D      10832          subq.w    #1,A5
00006080  B081      10833          cmp.l     D1,D0
00006082  6C0E      10834          bge.s     doprint_104
00006084  4878 0020 10835          pea       32
00006088  2F0A      10836          move.l    A2,-(A7)
0000608A  4E93      10837          jsr       (A3)
0000608C  504F      10838          addq.w    #8,A7
0000608E  5286      10839          addq.l    #1,D6
00006090  60E2      10840          bra       doprint_102
                    10841   doprint_104:
00006092  41EE FFD4 10842          lea       -44(A6),A0
00006096  2408      10843          move.l    A0,D2
                    10844   doprint_105:
00006098  2042      10845          move.l    D2,A0
0000609A  4A10      10846          tst.b     (A0)
0000609C  6716      10847          beq.s     doprint_107
0000609E  2042      10848          move.l    D2,A0
000060A0  5282      10849          addq.l    #1,D2
000060A2  1210      10850          move.b    (A0),D1
000060A4  4881      10851          ext.w     D1
000060A6  48C1      10852          ext.l     D1
000060A8  2F01      10853          move.l    D1,-(A7)
000060AA  2F0A      10854          move.l    A2,-(A7)
000060AC  4E93      10855          jsr       (A3)
000060AE  504F      10856          addq.w    #8,A7
000060B0  5286      10857          addq.l    #1,D6
000060B2  60E4      10858          bra       doprint_105
                    10859   doprint_107:
000060B4  202E FFFC 10860          move.l    -4(A6),D0
000060B8  1D40 FFD1 10861          move.b    D0,-47(A6)
                    10862   doprint_108:
000060BC  102E FFD1 10863          move.b    -47(A6),D0
000060C0  532E FFD1 10864          subq.b    #1,-47(A6)
000060C4  4A00      10865          tst.b     D0
000060C6  670E      10866          beq.s     doprint_110
000060C8  4878 0030 10867          pea       48
000060CC  2F0A      10868          move.l    A2,-(A7)
000060CE  4E93      10869          jsr       (A3)
000060D0  504F      10870          addq.w    #8,A7
000060D2  5286      10871          addq.l    #1,D6
000060D4  60E6      10872          bra       doprint_108
                    10873   doprint_110:
000060D6  2043      10874          move.l    D3,A0
000060D8  4A10      10875          tst.b     (A0)
000060DA  6700 0048 10876          beq       doprint_113
000060DE  206E 000C 10877          move.l    12(A6),A0
000060E2  1010      10878          move.b    (A0),D0
000060E4  4880      10879          ext.w     D0
000060E6  48C0      10880          ext.l     D0
000060E8  0C80 0000 10881          cmp.l     #115,D0
000060EC  0073      
000060EE  670C      10882          beq.s     doprint_116
000060F0  6E18      10883          bgt.s     doprint_119
000060F2  0C80 0000 10884          cmp.l     #99,D0
000060F6  0063      
000060F8  6702      10885          beq.s     doprint_116
000060FA  600E      10886          bra.s     doprint_119
                    10887   doprint_116:
000060FC  2005      10888          move.l    D5,D0
000060FE  5385      10889          subq.l    #1,D5
00006100  0C80 0000 10890          cmp.l     #0,D0
00006104  0000      
00006106  6E02      10891          bgt.s     doprint_119
00006108  6016      10892          bra.s     doprint_115
                    10893   doprint_119:
0000610A  2043      10894          move.l    D3,A0
0000610C  5283      10895          addq.l    #1,D3
0000610E  1210      10896          move.b    (A0),D1
00006110  4881      10897          ext.w     D1
00006112  48C1      10898          ext.l     D1
00006114  2F01      10899          move.l    D1,-(A7)
00006116  2F0A      10900          move.l    A2,-(A7)
00006118  4E93      10901          jsr       (A3)
0000611A  504F      10902          addq.w    #8,A7
0000611C  5286      10903          addq.l    #1,D6
0000611E  6002      10904          bra.s     doprint_112
                    10905   doprint_115:
00006120  6002      10906          bra.s     doprint_113
                    10907   doprint_112:
00006122  60B2      10908          bra       doprint_110
                    10909   doprint_113:
00006124  4A2E FFCD 10910          tst.b     -51(A6)
00006128  6700 0030 10911          beq       doprint_125
0000612C  1004      10912          move.b    D4,D0
0000612E  4880      10913          ext.w     D0
00006130  48C0      10914          ext.l     D0
00006132  D0AE FFFC 10915          add.l     -4(A6),D0
00006136  D087      10916          add.l     D7,D0
00006138  1D40 FFD1 10917          move.b    D0,-47(A6)
                    10918   doprint_123:
0000613C  102E FFD1 10919          move.b    -47(A6),D0
00006140  4880      10920          ext.w     D0
00006142  48C0      10921          ext.l     D0
00006144  220D      10922          move.l    A5,D1
00006146  534D      10923          subq.w    #1,A5
00006148  B081      10924          cmp.l     D1,D0
0000614A  6C0E      10925          bge.s     doprint_125
0000614C  4878 0020 10926          pea       32
00006150  2F0A      10927          move.l    A2,-(A7)
00006152  4E93      10928          jsr       (A3)
00006154  504F      10929          addq.w    #8,A7
00006156  5386      10930          subq.l    #1,D6
00006158  60E2      10931          bra       doprint_123
                    10932   doprint_125:
0000615A  6014      10933          bra.s     doprint_81
                    10934   doprint_80:
0000615C  206E 000C 10935          move.l    12(A6),A0
00006160  1210      10936          move.b    (A0),D1
00006162  4881      10937          ext.w     D1
00006164  48C1      10938          ext.l     D1
00006166  2F01      10939          move.l    D1,-(A7)
00006168  2F0A      10940          move.l    A2,-(A7)
0000616A  4E93      10941          jsr       (A3)
0000616C  504F      10942          addq.w    #8,A7
0000616E  5286      10943          addq.l    #1,D6
                    10944   doprint_81:
00006170  52AE 000C 10945          addq.l    #1,12(A6)
                    10946   doprint_2:
00006174  6000 FA10 10947          bra       doprint_1
                    10948   doprint_3:
00006178  4A92      10949          tst.l     (A2)
0000617A  6710      10950          beq.s     doprint_126
0000617C  4201      10951          clr.b     D1
0000617E  C2BC 0000 10952          and.l     #255,D1
00006182  00FF      
00006184  2F01      10953          move.l    D1,-(A7)
00006186  2F0A      10954          move.l    A2,-(A7)
00006188  4E93      10955          jsr       (A3)
0000618A  504F      10956          addq.w    #8,A7
                    10957   doprint_126:
0000618C  2006      10958          move.l    D6,D0
0000618E  4CDF 3CFC 10959          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00006192  4E5E      10960          unlk      A6
00006194  4E75      10961          rts
                    10962   @itoa_convert:
00006196  4E56 0000 10963          link      A6,#0
0000619A  48E7 3C00 10964          movem.l   D2/D3/D4/D5,-(A7)
0000619E  242E 0008 10965          move.l    8(A6),D2
000061A2  262E 0010 10966          move.l    16(A6),D3
000061A6  2A2E 000C 10967          move.l    12(A6),D5
000061AA  2F05      10968          move.l    D5,-(A7)
000061AC  2F03      10969          move.l    D3,-(A7)
000061AE  4EB8 58D6 10970          jsr       ULDIV
000061B2  202F 0004 10971          move.l    4(A7),D0
000061B6  504F      10972          addq.w    #8,A7
000061B8  2800      10973          move.l    D0,D4
000061BA  BA83      10974          cmp.l     D3,D5
000061BC  651C      10975          blo.s     @itoa_convert_1
000061BE  2F03      10976          move.l    D3,-(A7)
000061C0  2F05      10977          move.l    D5,-(A7)
000061C2  2F03      10978          move.l    D3,-(A7)
000061C4  4EB8 58D6 10979          jsr       ULDIV
000061C8  2217      10980          move.l    (A7),D1
000061CA  504F      10981          addq.w    #8,A7
000061CC  2F01      10982          move.l    D1,-(A7)
000061CE  2F02      10983          move.l    D2,-(A7)
000061D0  4EB8 6196 10984          jsr       @itoa_convert
000061D4  DEFC 000C 10985          add.w     #12,A7
000061D8  2400      10986          move.l    D0,D2
                    10987   @itoa_convert_1:
000061DA  0C84 0000 10988          cmp.l     #9,D4
000061DE  0009      
000061E0  6E0E      10989          bgt.s     @itoa_convert_3
000061E2  2004      10990          move.l    D4,D0
000061E4  7230      10991          moveq     #48,D1
000061E6  C2BC 0000 10992          and.l     #255,D1
000061EA  00FF      
000061EC  D081      10993          add.l     D1,D0
000061EE  6012      10994          bra.s     @itoa_convert_4
                    10995   @itoa_convert_3:
000061F0  2004      10996          move.l    D4,D0
000061F2  7261      10997          moveq     #97,D1
000061F4  C2BC 0000 10998          and.l     #255,D1
000061F8  00FF      
000061FA  D081      10999          add.l     D1,D0
000061FC  0480 0000 11000          sub.l     #10,D0
00006200  000A      
                    11001   @itoa_convert_4:
00006202  2042      11002          move.l    D2,A0
00006204  1080      11003          move.b    D0,(A0)
00006206  2002      11004          move.l    D2,D0
00006208  5280      11005          addq.l    #1,D0
0000620A  4CDF 003C 11006          movem.l   (A7)+,D2/D3/D4/D5
0000620E  4E5E      11007          unlk      A6
00006210  4E75      11008          rts
                    11009   _ltoa:
00006212  4E56 0000 11010          link      A6,#0
00006216  48E7 3C00 11011          movem.l   D2/D3/D4/D5,-(A7)
0000621A  242E 0008 11012          move.l    8(A6),D2
0000621E  262E 000C 11013          move.l    12(A6),D3
00006222  2A2E 0010 11014          move.l    16(A6),D5
00006226  2803      11015          move.l    D3,D4
00006228  0C85 0000 11016          cmp.l     #2,D5
0000622C  0002      
0000622E  6D08      11017          blt.s     ltoa_3
00006230  0C85 0000 11018          cmp.l     #36,D5
00006234  0024      
00006236  6F06      11019          ble.s     ltoa_1
                    11020   ltoa_3:
00006238  2003      11021          move.l    D3,D0
0000623A  6000 0052 11022          bra       ltoa_4
                    11023   ltoa_1:
0000623E  0C85 0000 11024          cmp.l     #10,D5
00006242  000A      
00006244  6600 0032 11025          bne       ltoa_5
00006248  0C82 0000 11026          cmp.l     #0,D2
0000624C  0000      
0000624E  6C28      11027          bge.s     ltoa_5
00006250  2002      11028          move.l    D2,D0
00006252  4480      11029          neg.l     D0
00006254  2400      11030          move.l    D0,D2
00006256  0C82 0000 11031          cmp.l     #0,D2
0000625A  0000      
0000625C  6C12      11032          bge.s     ltoa_7
0000625E  4879 0000 11033          pea       @itoa_1.L
00006262  7B04      
00006264  2F03      11034          move.l    D3,-(A7)
00006266  4EB8 58C6 11035          jsr       _strcpy
0000626A  504F      11036          addq.w    #8,A7
0000626C  2003      11037          move.l    D3,D0
0000626E  601E      11038          bra.s     ltoa_4
                    11039   ltoa_7:
00006270  2044      11040          move.l    D4,A0
00006272  5284      11041          addq.l    #1,D4
00006274  10BC 002D 11042          move.b    #45,(A0)
                    11043   ltoa_5:
00006278  2F05      11044          move.l    D5,-(A7)
0000627A  2F02      11045          move.l    D2,-(A7)
0000627C  2F04      11046          move.l    D4,-(A7)
0000627E  4EB8 6196 11047          jsr       @itoa_convert
00006282  DEFC 000C 11048          add.w     #12,A7
00006286  2800      11049          move.l    D0,D4
00006288  2044      11050          move.l    D4,A0
0000628A  4210      11051          clr.b     (A0)
0000628C  2003      11052          move.l    D3,D0
                    11053   ltoa_4:
0000628E  4CDF 003C 11054          movem.l   (A7)+,D2/D3/D4/D5
00006292  4E5E      11055          unlk      A6
00006294  4E75      11056          rts
                    11057   _ultoa:
00006296  4E56 0000 11058          link      A6,#0
0000629A  48E7 3800 11059          movem.l   D2/D3/D4,-(A7)
0000629E  262E 0010 11060          move.l    16(A6),D3
000062A2  282E 000C 11061          move.l    12(A6),D4
000062A6  2404      11062          move.l    D4,D2
000062A8  0C83 0000 11063          cmp.l     #2,D3
000062AC  0002      
000062AE  6D08      11064          blt.s     ultoa_3
000062B0  0C83 0000 11065          cmp.l     #36,D3
000062B4  0024      
000062B6  6F04      11066          ble.s     ultoa_1
                    11067   ultoa_3:
000062B8  2004      11068          move.l    D4,D0
000062BA  6018      11069          bra.s     ultoa_4
                    11070   ultoa_1:
000062BC  2F03      11071          move.l    D3,-(A7)
000062BE  2F2E 0008 11072          move.l    8(A6),-(A7)
000062C2  2F02      11073          move.l    D2,-(A7)
000062C4  4EB8 6196 11074          jsr       @itoa_convert
000062C8  DEFC 000C 11075          add.w     #12,A7
000062CC  2400      11076          move.l    D0,D2
000062CE  2042      11077          move.l    D2,A0
000062D0  4210      11078          clr.b     (A0)
000062D2  2004      11079          move.l    D4,D0
                    11080   ultoa_4:
000062D4  4CDF 001C 11081          movem.l   (A7)+,D2/D3/D4
000062D8  4E5E      11082          unlk      A6
000062DA  4E75      11083          rts
                    11084   _itoa:
000062DC  4E56 0000 11085          link      A6,#0
000062E0  2F2E 0010 11086          move.l    16(A6),-(A7)
000062E4  2F2E 000C 11087          move.l    12(A6),-(A7)
000062E8  2F2E 0008 11088          move.l    8(A6),-(A7)
000062EC  4EB8 6212 11089          jsr       _ltoa
000062F0  DEFC 000C 11090          add.w     #12,A7
000062F4  4E5E      11091          unlk      A6
000062F6  4E75      11092          rts
                    11093   ULMUL:
000062F8  4E56 0000 11094          link    A6,#0
000062FC  48E7 C000 11095          movem.l D0/D1,-(A7)
00006300  222E 0008 11096          move.l  8(A6),D1
00006304  202E 000C 11097          move.l  12(A6),D0
00006308  602C      11098          bra.s   lmul_3
                    11099   LMUL:
0000630A  4E56 0000 11100          link    A6,#0
0000630E  48E7 C000 11101          movem.l D0/D1,-(A7)
00006312  222E 0008 11102          move.l  8(A6),D1
00006316  202E 000C 11103          move.l  12(A6),D0
0000631A  4A80      11104          tst.l   D0
0000631C  6A0A      11105          bpl.s   lmul_1
0000631E  4480      11106          neg.l   D0
00006320  4A81      11107          tst.l   D1
00006322  6A0A      11108          bpl.s   lmul_2
00006324  4481      11109          neg.l   D1
00006326  600E      11110          bra.s   lmul_3
                    11111   lmul_1:
00006328  4A81      11112          tst.l   D1
0000632A  6A0A      11113          bpl.s   lmul_3
0000632C  4481      11114          neg.l   D1
                    11115   lmul_2:
0000632E  6114      11116          bsr.s   domul
00006330  4481      11117          neg.l   D1
00006332  4080      11118          negx.l  D0
00006334  6002      11119          bra.s   lmul_4
                    11120   lmul_3:
00006336  610C      11121          bsr.s   domul
                    11122   lmul_4:
00006338  2D41 0008 11123          move.l  D1,8(A6)
0000633C  4CDF 0003 11124          movem.l (A7)+,D0/D1
00006340  4E5E      11125          unlk    A6
00006342  4E75      11126          rts
                    11127   domul:
00006344  0C81 0000 11128          cmpi.l  #$FFFF,D1
00006348  FFFF      
0000634A  620C      11129          bhi.s   domul_1
0000634C  0C80 0000 11130          cmpi.l  #$FFFF,D0
00006350  FFFF      
00006352  620E      11131          bhi.s   domul_2
00006354  C2C0      11132          mulu    D0,D1
00006356  4E75      11133          rts
                    11134   domul_1:
00006358  0C80 0000 11135          cmpi.l  #$FFFF,D0
0000635C  FFFF      
0000635E  6218      11136          bhi.s   domul_4
00006360  6002      11137          bra.s   domul_3
                    11138   domul_2
00006362  C141      11139          exg     D0,D1
                    11140   domul_3:
00006364  2F02      11141          move.l  D2,-(A7)
00006366  2401      11142          move.l  D1,D2
00006368  4842      11143          swap    D2
0000636A  C2C0      11144          mulu    D0,D1
0000636C  C4C0      11145          mulu    D0,D2
0000636E  4842      11146          swap    D2
00006370  4242      11147          clr.w   D2
00006372  D282      11148          add.l   D2,D1
00006374  241F      11149          move.l  (A7)+,D2
00006376  4E75      11150          rts
                    11151   domul_4:
00006378  48E7 3000 11152          movem.l D2/D3,-(A7)
0000637C  2401      11153          move.l  D1,D2
0000637E  2601      11154          move.l  D1,D3
00006380  C2C0      11155          mulu    D0,D1
00006382  4842      11156          swap    D2
00006384  C4C0      11157          mulu    D0,D2
00006386  4840      11158          swap    D0
00006388  C6C0      11159          mulu    D0,D3
0000638A  D483      11160          add.l   D3,D2
0000638C  4842      11161          swap    D2
0000638E  4242      11162          clr.w   D2
00006390  D282      11163          add.l   D2,D1
00006392  4CDF 000C 11164          movem.l (A7)+,D2/D3
00006396  4E75      11165          rts
                    11166   _strlen:
00006398  206F 0004 11167          move.l    (4,A7),A0
0000639C  2248      11168          move.l    A0,A1
                    11169   strlen_1:
0000639E  4A19      11170          tst.b     (A1)+
000063A0  66FC      11171          bne       strlen_1
000063A2  2009      11172          move.l    A1,D0
000063A4  9088      11173          sub.l     A0,D0
000063A6  5380      11174          subq.l    #1,D0
000063A8  4E75      11175          rts
                    11176          section   const
                    11177   
                    11178   @m68kde~1_1:
000063AA  0D0A 00   11179          dc.b      13,10,0
                    11180   @m68kde~1_2:
000063AE  0D53 7769 11181          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000063B2  7463 6865 
000063B6  7320 5357 
000063BA  5B        
000063BB  372D 305D 11182          dc.b      55,45,48,93,32,61,32,0
000063BF  203D 2000 
                    11183   @m68kde~1_3:
000063C4  3000      11184          dc.b      48,0
                    11185   @m68kde~1_4:
000063C6  3100      11186          dc.b      49,0
                    11187   @m68kde~1_5:
000063C8  0D0A 456E 11188          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000063CC  7465 7220 
000063D0  5374 6172 
000063D4  74        
000063D5  2041 6464 11189          dc.b      32,65,100,100,114,101,115,115,58,32,0
000063D9  7265 7373 
000063DD  3A20 00   
                    11190   @m68kde~1_6:
000063E0  0D0A 3C45 11191          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
000063E4  5343 3E20 
000063E8  3D20 4162 
000063EC  6F72      
000063EE  742C 2053 11192          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
000063F2  5041 4345 
000063F6  2074 6F20 
000063FA  436F      
000063FC  6E74 696E 11193          dc.b      110,116,105,110,117,101,0
00006400  7565 00   
                    11194   @m68kde~1_7:
00006404  0D0A 2530 11195          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00006408  3858 2020 
0000640C  2530 3458 
00006410  2020 20   
00006413  2020 2020 11196          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
00006417  2020 2020 
0000641B  2020 2020 
0000641F  2020 20   
00006422  2020 2020 11197          dc.b      32,32,32,32,32,32,37,115,0
00006426  2020 2573 
0000642A  00        
                    11198   @m68kde~1_8:
0000642C  0D0A 2530 11199          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006430  3858 2020 
00006434  2530 3458 
00006438  2025 30   
0000643B  3458 2020 11200          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
0000643F  2020 2020 
00006443  2020 2020 
00006447  2020 20   
0000644A  2020 2020 11201          dc.b      32,32,32,32,32,32,37,115,0
0000644E  2020 2573 
00006452  00        
                    11202   @m68kde~1_9:
00006454  0D0A 2530 11203          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006458  3858 2020 
0000645C  2530 3458 
00006460  2025 30   
00006463  3458 2025 11204          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
00006467  3034 5820 
0000646B  2020 2020 
0000646F  2020 20   
00006472  2020 2020 11205          dc.b      32,32,32,32,32,32,37,115,0
00006476  2020 2573 
0000647A  00        
                    11206   @m68kde~1_10:
0000647C  0D0A 2530 11207          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006480  3858 2020 
00006484  2530 3458 
00006488  2025 30   
0000648B  3458 2025 11208          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
0000648F  3034 5820 
00006493  2530 3458 
00006497  2020 20   
0000649A  2020 2020 11209          dc.b      32,32,32,32,32,32,37,115,0
0000649E  2020 2573 
000064A2  00        
                    11210   @m68kde~1_11:
000064A4  0D0A 2530 11211          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
000064A8  3858 2020 
000064AC  2530 3458 
000064B0  2025 30   
000064B3  3458 2025 11212          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
000064B7  3034 5820 
000064BB  2530 3458 
000064BF  2025 30   
000064C2  3458 2020 11213          dc.b      52,88,32,32,32,32,37,115,0
000064C6  2020 2573 
000064CA  00        
                    11214   @m68kde~1_12:
000064CC  0D0A 4475 11215          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000064D0  6D70 204D 
000064D4  656D 6F72 
000064D8  79        
000064D9  2042 6C6F 11216          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000064DD  636B 3A20 
000064E1  3C45 5343 
000064E5  3E20      
000064E7  746F 2041 11217          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
000064EB  626F 7274 
000064EF  2C20 3C53 
000064F3  50        
000064F4  4143 453E 11218          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000064F8  2074 6F20 
000064FC  436F 6E74 
00006500  69        
00006501  6E75 6500 11219          dc.b      110,117,101,0
                    11220   @m68kde~1_13:
00006506  0D0A 2530 11221          dc.b      13,10,37,48,56,120,32,0
0000650A  3878 2000 
                    11222   @m68kde~1_14:
0000650E  2530 3258 11223          dc.b      37,48,50,88,0
00006512  00        
                    11224   @m68kde~1_15:
00006514  2020 00   11225          dc.b      32,32,0
                    11226   @m68kde~1_16:
00006518  0D0A 4669 11227          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000651C  6C6C 204D 
00006520  656D 6F72 
00006524  79        
00006525  2042 6C6F 11228          dc.b      32,66,108,111,99,107,0
00006529  636B 00   
                    11229   @m68kde~1_17:
0000652C  0D0A 456E 11230          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00006530  7465 7220 
00006534  456E 6420 
00006538  41        
00006539  6464 7265 11231          dc.b      100,100,114,101,115,115,58,32,0
0000653D  7373 3A20 
00006541  00        
                    11232   @m68kde~1_18:
00006542  0D0A 456E 11233          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00006546  7465 7220 
0000654A  4669 6C6C 
0000654E  20        
0000654F  4461 7461 11234          dc.b      68,97,116,97,58,32,0
00006553  3A20 00   
                    11235   @m68kde~1_19:
00006556  0D0A 4669 11236          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
0000655A  6C6C 696E 
0000655E  6720 4164 
00006562  64        
00006563  7265 7373 11237          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00006567  6573 205B 
0000656B  2425 3038 
0000656F  58        
00006570  202D 2024 11238          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00006574  2530 3858 
00006578  5D20 7769 
0000657C  7468      
0000657E  2024 2530 11239          dc.b      32,36,37,48,50,88,0
00006582  3258 00   
                    11240   @m68kde~1_20:
00006586  0D0A 5573 11241          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
0000658A  6520 4879 
0000658E  7065 7254 
00006592  65        
00006593  726D 696E 11242          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00006597  616C 2074 
0000659B  6F20 5365 
0000659F  6E64 2054 11243          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000065A3  6578 7420 
000065A7  4669 6C65 
000065AB  2028 2E68 11244          dc.b      32,40,46,104,101,120,41,13,10,0
000065AF  6578 290D 
000065B3  0A00      
                    11245   @m68kde~1_21:
000065B6  0D0A 4C6F 11246          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000065BA  6164 2046 
000065BE  6169 6C65 
000065C2  64        
000065C3  2061 7420 11247          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000065C7  4164 6472 
000065CB  6573 7320 
000065CF  3D        
000065D0  205B 2425 11248          dc.b      32,91,36,37,48,56,88,93,13,10,0
000065D4  3038 585D 
000065D8  0D0A 00   
                    11249   @m68kde~1_22:
000065DC  0D0A 5375 11250          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000065E0  6363 6573 
000065E4  733A 2044 
000065E8  6F        
000065E9  776E 6C6F 11251          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000065ED  6164 6564 
000065F1  2025 6420 
000065F5  6279 7465 11252          dc.b      98,121,116,101,115,13,10,0
000065F9  730D 0A00 
                    11253   @m68kde~1_23:
000065FE  0D0A 4578 11254          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00006602  616D 696E 
00006606  6520 616E 
0000660A  64        
0000660B  2043 6861 11255          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0000660F  6E67 6520 
00006613  4D65 6D6F 
00006617  72        
00006618  7900      11256          dc.b      121,0
                    11257   @m68kde~1_24:
0000661A  0D0A 3C45 11258          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0000661E  5343 3E20 
00006622  746F 2053 
00006626  746F      
00006628  702C 203C 11259          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000662C  5350 4143 
00006630  453E 2074 
00006634  6F20      
00006636  4164 7661 11260          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000663A  6E63 652C 
0000663E  2027 2D27 
00006642  2074      
00006644  6F20 476F 11261          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00006648  2042 6163 
0000664C  6B2C 203C 
00006650  4441      
00006652  5441 3E20 11262          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00006656  746F 2063 
0000665A  6861 6E67 
0000665E  65        
0000665F  00        11263          dc.b      0
                    11264   @m68kde~1_25:
00006660  0D0A 456E 11265          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00006664  7465 7220 
00006668  4164 6472 
0000666C  65        
0000666D  7373 3A20 11266          dc.b      115,115,58,32,0
00006671  00        
                    11267   @m68kde~1_26:
00006672  0D0A 5B25 11268          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00006676  3038 785D 
0000667A  203A 2025 
0000667E  3032 78   
00006681  2020 00   11269          dc.b      32,32,0
                    11270   @m68kde~1_27:
00006684  0D0A 5761 11271          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00006688  726E 696E 
0000668C  6720 4368 
00006690  61        
00006691  6E67 6520 11272          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00006695  4661 696C 
00006699  6564 3A20 
0000669D  57        
0000669E  726F 7465 11273          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000066A2  205B 2530 
000066A6  3278 5D2C 
000066AA  20        
000066AB  5265 6164 11274          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000066AF  205B 2530 
000066B3  3278 5D00 
                    11275   @m68kde~1_28:
000066B8  0D0A 5275 11276          dc.b      13,10,82,117,110,110,105,110,103,32,80,114,111
000066BC  6E6E 696E 
000066C0  6720 5072 
000066C4  6F        
000066C5  6772 616D 11277          dc.b      103,114,97,109,70,108,97,115,104,67,104,105
000066C9  466C 6173 
000066CD  6843 6869 
000066D1  7028 2921 11278          dc.b      112,40,41,33,0
000066D5  00        
                    11279   @m68kde~1_29:
000066D6  0D0A 5072 11280          dc.b      13,10,80,114,111,103,114,97,109,70,108,97,115
000066DA  6F67 7261 
000066DE  6D46 6C61 
000066E2  73        
000066E3  6843 6869 11281          dc.b      104,67,104,105,112,40,41,32,67,111,109,112,108
000066E7  7028 2920 
000066EB  436F 6D70 
000066EF  6C        
000066F0  6574 6564 11282          dc.b      101,116,101,100,33,0
000066F4  2100      
                    11283   @m68kde~1_30:
000066F6  0D0A 5275 11284          dc.b      13,10,82,117,110,110,105,110,103,32,70,108,97
000066FA  6E6E 696E 
000066FE  6720 466C 
00006702  61        
00006703  7368 4368 11285          dc.b      115,104,67,104,105,112,77,101,109,111,114,121
00006707  6970 4D65 
0000670B  6D6F 7279 
0000670F  5465 7374 11286          dc.b      84,101,115,116,40,41,33,0
00006713  2829 2100 
                    11287   @m68kde~1_31:
00006718  0D0A 2046 11288          dc.b      13,10,32,70,108,97,115,104,32,67,104,105,112
0000671C  6C61 7368 
00006720  2043 6869 
00006724  70        
00006725  204D 656D 11289          dc.b      32,77,101,109,111,114,121,32,84,101,115,116
00006729  6F72 7920 
0000672D  5465 7374 
00006731  2046 6169 11290          dc.b      32,70,97,105,108,101,100,33,0
00006735  6C65 6421 
00006739  00        
                    11291   @m68kde~1_32:
0000673A  0D0A 2046 11292          dc.b      13,10,32,70,97,105,108,101,100,32,97,116,32
0000673E  6169 6C65 
00006742  6420 6174 
00006746  20        
00006747  2564 7468 11293          dc.b      37,100,116,104,32,66,121,116,101,33,0
0000674B  2042 7974 
0000674F  6521 00   
                    11294   @m68kde~1_33:
00006752  0D0A 2046 11295          dc.b      13,10,32,70,108,97,115,104,32,67,104,105,112
00006756  6C61 7368 
0000675A  2043 6869 
0000675E  70        
0000675F  204D 656D 11296          dc.b      32,77,101,109,111,114,121,32,84,101,115,116
00006763  6F72 7920 
00006767  5465 7374 
0000676B  2053 7563 11297          dc.b      32,83,117,99,99,101,115,115,102,117,108,33,0
0000676F  6365 7373 
00006773  6675 6C21 
00006777  00        
                    11298   @m68kde~1_34:
00006778  0D0A 4C6F 11299          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
0000677C  6164 696E 
00006780  6720 5072 
00006784  6F        
00006785  6772 616D 11300          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00006789  2046 726F 
0000678D  6D20 5350 
00006791  49        
00006792  2046 6C61 11301          dc.b      32,70,108,97,115,104,46,46,46,46,0
00006796  7368 2E2E 
0000679A  2E2E 00   
                    11302   @m68kde~1_35:
0000679E  2425 3038 11303          dc.b      36,37,48,56,88,32,32,0
000067A2  5820 2000 
                    11304   @m68kde~1_36:
000067A6  2000      11305          dc.b      32,0
                    11306   @m68kde~1_37:
000067A8  2E00      11307          dc.b      46,0
                    11308   @m68kde~1_38:
000067AA  2563 00   11309          dc.b      37,99,0
                    11310   @m68kde~1_39:
000067AE  00        11311          dc.b      0
                    11312   @m68kde~1_40:
000067B0  0D0A 0D0A 11313          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000067B4  2044 3020 
000067B8  3D20 2425 
000067BC  3038 58   
000067BF  2020 4130 11314          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000067C3  203D 2024 
000067C7  2530 3858 
000067CB  00        
                    11315   @m68kde~1_41:
000067CC  0D0A 2044 11316          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000067D0  3120 3D20 
000067D4  2425 3038 
000067D8  5820 20   
000067DB  4131 203D 11317          dc.b      65,49,32,61,32,36,37,48,56,88,0
000067DF  2024 2530 
000067E3  3858 00   
                    11318   @m68kde~1_42:
000067E6  0D0A 2044 11319          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000067EA  3220 3D20 
000067EE  2425 3038 
000067F2  5820 20   
000067F5  4132 203D 11320          dc.b      65,50,32,61,32,36,37,48,56,88,0
000067F9  2024 2530 
000067FD  3858 00   
                    11321   @m68kde~1_43:
00006800  0D0A 2044 11322          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00006804  3320 3D20 
00006808  2425 3038 
0000680C  5820 20   
0000680F  4133 203D 11323          dc.b      65,51,32,61,32,36,37,48,56,88,0
00006813  2024 2530 
00006817  3858 00   
                    11324   @m68kde~1_44:
0000681A  0D0A 2044 11325          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000681E  3420 3D20 
00006822  2425 3038 
00006826  5820 20   
00006829  4134 203D 11326          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000682D  2024 2530 
00006831  3858 00   
                    11327   @m68kde~1_45:
00006834  0D0A 2044 11328          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00006838  3520 3D20 
0000683C  2425 3038 
00006840  5820 20   
00006843  4135 203D 11329          dc.b      65,53,32,61,32,36,37,48,56,88,0
00006847  2024 2530 
0000684B  3858 00   
                    11330   @m68kde~1_46:
0000684E  0D0A 2044 11331          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00006852  3620 3D20 
00006856  2425 3038 
0000685A  5820 20   
0000685D  4136 203D 11332          dc.b      65,54,32,61,32,36,37,48,56,88,0
00006861  2024 2530 
00006865  3858 00   
                    11333   @m68kde~1_47:
00006868  0D0A 2044 11334          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
0000686C  3720 3D20 
00006870  2425 3038 
00006874  5820 20   
00006877  4137 203D 11335          dc.b      65,55,32,61,32,36,37,48,56,88,0
0000687B  2024 2530 
0000687F  3858 00   
                    11336   @m68kde~1_48:
00006882  0D0A 0D0A 11337          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00006886  5553 5020 
0000688A  3D20 2425 
0000688E  3038 58   
00006891  2020 2841 11338          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00006895  3729 2055 
00006899  7365 7220 
0000689D  5350      
0000689F  00        11339          dc.b      0
                    11340   @m68kde~1_49:
000068A0  0D0A 5353 11341          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000068A4  5020 3D20 
000068A8  2425 3038 
000068AC  5820 20   
000068AF  2841 3729 11342          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000068B3  2053 7570 
000068B7  6572 7669 
000068BB  73        
000068BC  6F72 2053 11343          dc.b      111,114,32,83,80,0
000068C0  5000      
                    11344   @m68kde~1_50:
000068C2  0D0A 2053 11345          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000068C6  5220 3D20 
000068CA  2425 3034 
000068CE  5820 20   
000068D1  2000      11346          dc.b      32,0
                    11347   @m68kde~1_51:
000068D4  2020 205B 11348          dc.b      32,32,32,91,0
000068D8  00        
                    11349   @m68kde~1_52:
000068DA  0D0A 2050 11350          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000068DE  4320 3D20 
000068E2  2425 3038 
000068E6  5820 20   
000068E9  00        11351          dc.b      0
                    11352   @m68kde~1_53:
000068EA  2573 00   11353          dc.b      37,115,0
                    11354   @m68kde~1_54:
000068EE  5B42 5245 11355          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
000068F2  414B 504F 
000068F6  494E 545D 
000068FA  00        
                    11356   @m68kde~1_55:
000068FC  0D0A 5750 11357          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00006900  2564 203D 
00006904  2025 7300 
                    11358   @m68kde~1_56:
00006908  0D0A 0D0A 11359          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000690C  0D0A 0D0A 
00006910  0D0A 0D0A 
00006914  5369 6E   
00006917  676C 6520 11360          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
0000691B  5374 6570 
0000691F  2020 3A5B 
00006923  4F        
00006924  4E5D 00   11361          dc.b      78,93,0
                    11362   @m68kde~1_57:
00006928  0D0A 4272 11363          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000692C  6561 6B20 
00006930  506F 696E 
00006934  74        
00006935  7320 3A5B 11364          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00006939  4469 7361 
0000693D  626C 6564 
00006941  5D        
00006942  00        11365          dc.b      0
                    11366   @m68kde~1_58:
00006944  0D0A 5072 11367          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00006948  6573 7320 
0000694C  3C53 5041 
00006950  4345      
00006952  3E20 746F 11368          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00006956  2045 7865 
0000695A  6375 7465 
0000695E  20        
0000695F  4E65 7874 11369          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00006963  2049 6E73 
00006967  7472 7563 
0000696B  7469 6F6E 11370          dc.b      116,105,111,110,0
0000696F  00        
                    11371   @m68kde~1_59:
00006970  0D0A 5072 11372          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006974  6573 7320 
00006978  3C45 5343 
0000697C  3E20      
0000697E  746F 2052 11373          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00006982  6573 756D 
00006986  6520 5072 
0000698A  6F67 7261 11374          dc.b      111,103,114,97,109,0
0000698E  6D00      
                    11375   @m68kde~1_60:
00006990  0D0A 496C 11376          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00006994  6C65 6761 
00006998  6C20 4461 
0000699C  74        
0000699D  6120 5265 11377          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000069A1  6769 7374 
000069A5  6572 203A 
000069A9  20        
000069AA  5573 6520 11378          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000069AE  4430 2D44 
000069B2  372E 2E2E 
000069B6  2E2E      
000069B8  0D0A 00   11379          dc.b      13,10,0
                    11380   @m68kde~1_61:
000069BC  0D0A 4425 11381          dc.b      13,10,68,37,99,32,61,32,0
000069C0  6320 3D20 
000069C4  00        
                    11382   @m68kde~1_62:
000069C6  0D0A 496C 11383          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000069CA  6C65 6761 
000069CE  6C20 4164 
000069D2  64        
000069D3  7265 7373 11384          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000069D7  2052 6567 
000069DB  6973 7465 
000069DF  7220 3A20 11385          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000069E3  5573 6520 
000069E7  4130 2D41 
000069EB  372E      
000069ED  2E2E 2E2E 11386          dc.b      46,46,46,46,13,10,0
000069F1  0D0A 00   
                    11387   @m68kde~1_63:
000069F4  0D0A 4125 11388          dc.b      13,10,65,37,99,32,61,32,0
000069F8  6320 3D20 
000069FC  00        
                    11389   @m68kde~1_64:
000069FE  0D0A 5573 11390          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00006A02  6572 2053 
00006A06  5020 3D20 
00006A0A  00        
                    11391   @m68kde~1_65:
00006A0C  0D0A 496C 11392          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00006A10  6C65 6761 
00006A14  6C20 5265 
00006A18  67        
00006A19  6973 7465 11393          dc.b      105,115,116,101,114,46,46,46,46,0
00006A1D  722E 2E2E 
00006A21  2E00      
                    11394   @m68kde~1_66:
00006A24  0D0A 5379 11395          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00006A28  7374 656D 
00006A2C  2053 5020 
00006A30  3D        
00006A31  2000      11396          dc.b      32,0
                    11397   @m68kde~1_67:
00006A34  0D0A 5043 11398          dc.b      13,10,80,67,32,61,32,0
00006A38  203D 2000 
                    11399   @m68kde~1_68:
00006A3C  0D0A 5352 11400          dc.b      13,10,83,82,32,61,32,0
00006A40  203D 2000 
                    11401   @m68kde~1_69:
00006A44  0D0A 496C 11402          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00006A48  6C65 6761 
00006A4C  6C20 5265 
00006A50  67        
00006A51  6973 7465 11403          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00006A55  723A 2055 
00006A59  7365 2041 
00006A5D  30        
00006A5E  2D41 372C 11404          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00006A62  2044 302D 
00006A66  4437 2C20 
00006A6A  5353 50   
00006A6D  2C20 5553 11405          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00006A71  502C 2050 
00006A75  4320 6F72 
00006A79  2053      
00006A7B  520D 0A00 11406          dc.b      82,13,10,0
                    11407   @m68kde~1_70:
00006A80  0D0A 0D0A 11408          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00006A84  4E75 6D20 
00006A88  2020 2020 
00006A8C  4164      
00006A8E  6472 6573 11409          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00006A92  7320 2020 
00006A96  2020 2049 
00006A9A  6E        
00006A9B  7374 7275 11410          dc.b      115,116,114,117,99,116,105,111,110,0
00006A9F  6374 696F 
00006AA3  6E00      
                    11411   @m68kde~1_71:
00006AA6  0D0A 2D2D 11412          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00006AAA  2D20 2020 
00006AAE  2020 2D2D 
00006AB2  2D2D 2D   
00006AB5  2D2D 2D2D 11413          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00006AB9  2020 2020 
00006ABD  2D2D 2D2D 
00006AC1  2D2D 2D   
00006AC4  2D2D 2D2D 11414          dc.b      45,45,45,45,0
00006AC8  00        
                    11415   @m68kde~1_72:
00006ACA  0D0A 4E6F 11416          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00006ACE  2042 7265 
00006AD2  616B 506F 
00006AD6  69        
00006AD7  6E74 7320 11417          dc.b      110,116,115,32,83,101,116,0
00006ADB  5365 7400 
                    11418   @m68kde~1_73:
00006AE0  0D0A 2533 11419          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00006AE4  6420 2020 
00006AE8  2020 2425 
00006AEC  3038 78   
00006AEF  00        11420          dc.b      0
                    11421   @m68kde~1_74:
00006AF0  2020 2020 11422          dc.b      32,32,32,32,37,115,0
00006AF4  2573 00   
                    11423   @m68kde~1_75:
00006AF8  0D0A 4E75 11424          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00006AFC  6D20 2020 
00006B00  2020 4164 
00006B04  6472      
00006B06  6573 7300 11425          dc.b      101,115,115,0
                    11426   @m68kde~1_76:
00006B0A  0D0A 2D2D 11427          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00006B0E  2D20 2020 
00006B12  2020 2D2D 
00006B16  2D2D 2D   
00006B19  2D2D 2D2D 11428          dc.b      45,45,45,45,0
00006B1D  00        
                    11429   @m68kde~1_77:
00006B1E  0D0A 4E6F 11430          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00006B22  2057 6174 
00006B26  6368 506F 
00006B2A  69        
00006B2B  6E74 7320 11431          dc.b      110,116,115,32,83,101,116,0
00006B2F  5365 7400 
                    11432   @m68kde~1_78:
00006B34  0D0A 456E 11433          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00006B38  7465 7220 
00006B3C  4272 6561 
00006B40  6B        
00006B41  2050 6F69 11434          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006B45  6E74 204E 
00006B49  756D 6265 
00006B4D  72        
00006B4E  3A20 00   11435          dc.b      58,32,0
                    11436   @m68kde~1_79:
00006B52  0D0A 496C 11437          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00006B56  6C65 6761 
00006B5A  6C20 5261 
00006B5E  6E        
00006B5F  6765 203A 11438          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00006B63  2055 7365 
00006B67  2030 202D 
00006B6B  2037      
00006B6D  00        11439          dc.b      0
                    11440   @m68kde~1_80:
00006B6E  0D0A 4272 11441          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006B72  6561 6B20 
00006B76  506F 696E 
00006B7A  74        
00006B7B  2043 6C65 11442          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006B7F  6172 6564 
00006B83  2E2E 2E2E 
00006B87  2E        
00006B88  0D0A 00   11443          dc.b      13,10,0
                    11444   @m68kde~1_81:
00006B8C  0D0A 4272 11445          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006B90  6561 6B20 
00006B94  506F 696E 
00006B98  74        
00006B99  2077 6173 11446          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00006B9D  6E27 7420 
00006BA1  5365 742E 
00006BA5  2E        
00006BA6  2E2E 2E00 11447          dc.b      46,46,46,0
                    11448   @m68kde~1_82:
00006BAA  0D0A 456E 11449          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00006BAE  7465 7220 
00006BB2  5761 7463 
00006BB6  68        
00006BB7  2050 6F69 11450          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006BBB  6E74 204E 
00006BBF  756D 6265 
00006BC3  72        
00006BC4  3A20 00   11451          dc.b      58,32,0
                    11452   @m68kde~1_83:
00006BC8  0D0A 5761 11453          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006BCC  7463 6820 
00006BD0  506F 696E 
00006BD4  74        
00006BD5  2043 6C65 11454          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006BD9  6172 6564 
00006BDD  2E2E 2E2E 
00006BE1  2E        
00006BE2  0D0A 00   11455          dc.b      13,10,0
                    11456   @m68kde~1_84:
00006BE6  0D0A 5761 11457          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006BEA  7463 6820 
00006BEE  506F 696E 
00006BF2  74        
00006BF3  2057 6173 11458          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00006BF7  206E 6F74 
00006BFB  2053 6574 
00006BFF  2E        
00006C00  2E2E 2E2E 11459          dc.b      46,46,46,46,0
00006C04  00        
                    11460   @m68kde~1_85:
00006C06  0D0A 4E6F 11461          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00006C0A  2046 5245 
00006C0E  4520 4272 
00006C12  6561      
00006C14  6B20 506F 11462          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00006C18  696E 7473 
00006C1C  2E2E 2E2E 
00006C20  2E        
00006C21  00        11463          dc.b      0
                    11464   @m68kde~1_86:
00006C22  0D0A 4272 11465          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006C26  6561 6B20 
00006C2A  506F 696E 
00006C2E  74        
00006C2F  2041 6464 11466          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006C33  7265 7373 
00006C37  3A20 00   
                    11467   @m68kde~1_87:
00006C3A  0D0A 4572 11468          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006C3E  726F 7220 
00006C42  3A20 4272 
00006C46  65        
00006C47  616B 2050 11469          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006C4B  6F69 6E74 
00006C4F  7320 4341 
00006C53  4E        
00006C54  4E4F 5420 11470          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00006C58  6265 2073 
00006C5C  6574 2061 
00006C60  74        
00006C61  204F 4444 11471          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00006C65  2061 6464 
00006C69  7265 7373 
00006C6D  65        
00006C6E  7300      11472          dc.b      115,0
                    11473   @m68kde~1_88:
00006C70  0D0A 4572 11474          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006C74  726F 7220 
00006C78  3A20 4272 
00006C7C  65        
00006C7D  616B 2050 11475          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006C81  6F69 6E74 
00006C85  7320 4341 
00006C89  4E        
00006C8A  4E4F 5420 11476          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00006C8E  6265 2073 
00006C92  6574 2066 
00006C96  6F        
00006C97  7220 524F 11477          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00006C9B  4D20 696E 
00006C9F  2052 616E 
00006CA3  67        
00006CA4  6520 3A20 11478          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00006CA8  5B24 302D 
00006CAC  2430 3030 
00006CB0  3037 46   
00006CB3  4646 5D00 11479          dc.b      70,70,93,0
                    11480   @m68kde~1_89:
00006CB8  0D0A 4572 11481          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00006CBC  726F 723A 
00006CC0  2042 7265 
00006CC4  61        
00006CC5  6B20 506F 11482          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00006CC9  696E 7420 
00006CCD  416C 7265 
00006CD1  6164 7920 11483          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00006CD5  4578 6973 
00006CD9  7473 2061 
00006CDD  74        
00006CDE  2041 6464 11484          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00006CE2  7265 7373 
00006CE6  203A 2025 
00006CEA  30        
00006CEB  3878 0D0A 11485          dc.b      56,120,13,10,0
00006CEF  00        
                    11486   @m68kde~1_90:
00006CF0  0D0A 4272 11487          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006CF4  6561 6B20 
00006CF8  506F 696E 
00006CFC  74        
00006CFD  2053 6574 11488          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006D01  2061 7420 
00006D05  4164 6472 
00006D09  65        
00006D0A  7373 3A20 11489          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
00006D0E  5B24 2530 
00006D12  3878 5D2C 
00006D16  2049      
00006D18  6E73 7472 11490          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
00006D1C  7563 7469 
00006D20  6F6E 203D 
00006D24  2025 7300 11491          dc.b      32,37,115,0
                    11492   @m68kde~1_91:
00006D28  0D0A 4E6F 11493          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00006D2C  2046 5245 
00006D30  4520 5761 
00006D34  7463      
00006D36  6820 506F 11494          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00006D3A  696E 7473 
00006D3E  2E2E 2E2E 
00006D42  2E        
00006D43  00        11495          dc.b      0
                    11496   @m68kde~1_92:
00006D44  0D0A 5761 11497          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006D48  7463 6820 
00006D4C  506F 696E 
00006D50  74        
00006D51  2041 6464 11498          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006D55  7265 7373 
00006D59  3A20 00   
                    11499   @m68kde~1_93:
00006D5C  0D0A 4572 11500          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00006D60  726F 723A 
00006D64  2057 6174 
00006D68  63        
00006D69  6820 506F 11501          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00006D6D  696E 7420 
00006D71  416C 7265 
00006D75  6164 7920 11502          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00006D79  5365 7420 
00006D7D  6174 2041 
00006D81  64        
00006D82  6472 6573 11503          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00006D86  7320 3A20 
00006D8A  2530 3878 
00006D8E  0D        
00006D8F  0A00      11504          dc.b      10,0
                    11505   @m68kde~1_94:
00006D92  0D0A 5761 11506          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006D96  7463 6820 
00006D9A  506F 696E 
00006D9E  74        
00006D9F  2053 6574 11507          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006DA3  2061 7420 
00006DA7  4164 6472 
00006DAB  65        
00006DAC  7373 3A20 11508          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00006DB0  5B24 2530 
00006DB4  3878 5D00 
                    11509   @m68kde~1_95:
00006DB8  0D0A 0D0A 11510          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00006DBC  0D0A 0D0A 
00006DC0  4042 5245 
00006DC4  414B 50   
00006DC7  4F49 4E54 11511          dc.b      79,73,78,84,0
00006DCB  00        
                    11512   @m68kde~1_96:
00006DCC  0D0A 5369 11513          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006DD0  6E67 6C65 
00006DD4  2053 7465 
00006DD8  70        
00006DD9  203A 205B 11514          dc.b      32,58,32,91,79,78,93,0
00006DDD  4F4E 5D00 
                    11515   @m68kde~1_97:
00006DE2  0D0A 4272 11516          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00006DE6  6561 6B50 
00006DEA  6F69 6E74 
00006DEE  73        
00006DEF  203A 205B 11517          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00006DF3  456E 6162 
00006DF7  6C65 645D 
00006DFB  00        
                    11518   @m68kde~1_98:
00006DFC  0D0A 5072 11519          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006E00  6573 7320 
00006E04  3C45 5343 
00006E08  3E20      
00006E0A  746F 2052 11520          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006E0E  6573 756D 
00006E12  6520 5573 
00006E16  6572 2050 11521          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00006E1A  726F 6772 
00006E1E  616D 0D0A 
00006E22  00        
                    11522   @m68kde~1_99:
00006E24  0D0A 556E 11523          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00006E28  6B6E 6F77 
00006E2C  6E20 436F 
00006E30  6D        
00006E31  6D61 6E64 11524          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00006E35  2E2E 2E2E 
00006E39  2E0D 0A00 
                    11525   @m68kde~1_100:
00006E3E  0D0A 5072 11526          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00006E42  6F67 7261 
00006E46  6D20 456E 
00006E4A  64        
00006E4B  6564 2028 11527          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00006E4F  5452 4150 
00006E53  2023 3135 
00006E57  292E      
00006E59  2E2E 2E00 11528          dc.b      46,46,46,0
                    11529   @m68kde~1_101:
00006E5E  0D0A 4B69 11530          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00006E62  6C6C 2041 
00006E66  6C6C 2042 
00006E6A  72        
00006E6B  6561 6B20 11531          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00006E6F  506F 696E 
00006E73  7473 2E2E 
00006E77  2E        
00006E78  2879 2F6E 11532          dc.b      40,121,47,110,41,63,0
00006E7C  293F 00   
                    11533   @m68kde~1_102:
00006E80  0D0A 4B69 11534          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00006E84  6C6C 2041 
00006E88  6C6C 2057 
00006E8C  61        
00006E8D  7463 6820 11535          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00006E91  506F 696E 
00006E95  7473 2E2E 
00006E99  2E        
00006E9A  2879 2F6E 11536          dc.b      40,121,47,110,41,63,0
00006E9E  293F 00   
                    11537   @m68kde~1_103:
00006EA2  0D0A 2D2D 11538          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00006EA6  2D2D 2D2D 
00006EAA  2D2D 2D2D 
00006EAE  2D2D 2D   
00006EB1  2D2D 2D2D 11539          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006EB5  2D2D 2D2D 
00006EB9  2D2D 2D2D 
00006EBD  2D2D 2D   
00006EC0  2D2D 2D2D 11540          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006EC4  2D2D 2D2D 
00006EC8  2D2D 2D2D 
00006ECC  2D2D 2D   
00006ECF  2D2D 2D2D 11541          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006ED3  2D2D 2D2D 
00006ED7  2D2D 2D2D 
00006EDB  2D2D 2D   
00006EDE  2D2D 2D2D 11542          dc.b      45,45,45,45,45,45,0
00006EE2  2D2D 00   
                    11543   @m68kde~1_104:
00006EE6  0D0A 2020 11544          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00006EEA  4465 6275 
00006EEE  6767 6572 
00006EF2  20        
00006EF3  436F 6D6D 11545          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00006EF7  616E 6420 
00006EFB  5375 6D6D 
00006EFF  6172 7900 11546          dc.b      97,114,121,0
                    11547   @m68kde~1_105:
00006F04  0D0A 2020 11548          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00006F08  2E28 7265 
00006F0C  6729 2020 
00006F10  2020      
00006F12  2020 202D 11549          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00006F16  2043 6861 
00006F1A  6E67 6520 
00006F1E  5265      
00006F20  6769 7374 11550          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00006F24  6572 733A 
00006F28  2065 2E67 
00006F2C  2041 302D 11551          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00006F30  4137 2C44 
00006F34  302D 4437 
00006F38  2C50 43   
00006F3B  2C53 5350 11552          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00006F3F  2C55 5350 
00006F43  2C53 5200 
                    11553   @m68kde~1_106:
00006F48  0D0A 2020 11554          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00006F4C  4244 2F42 
00006F50  532F 4243 
00006F54  2F42 4B   
00006F57  2020 2D20 11555          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00006F5B  4272 6561 
00006F5F  6B20 506F 
00006F63  69        
00006F64  6E74 3A20 11556          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00006F68  4469 7370 
00006F6C  6C61 792F 
00006F70  53        
00006F71  6574 2F43 11557          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00006F75  6C65 6172 
00006F79  2F4B 696C 
00006F7D  6C        
00006F7E  00        11558          dc.b      0
                    11559   @m68kde~1_107:
00006F80  0D0A 2020 11560          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00006F84  4320 2020 
00006F88  2020 2020 
00006F8C  2020 20   
00006F8F  2020 2D20 11561          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00006F93  436F 7079 
00006F97  2050 726F 
00006F9B  67        
00006F9C  7261 6D20 11562          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00006FA0  6672 6F6D 
00006FA4  2046 6C61 
00006FA8  73        
00006FA9  6820 746F 11563          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00006FAD  204D 6169 
00006FB1  6E20 4D65 
00006FB5  6D        
00006FB6  6F72 7900 11564          dc.b      111,114,121,0
                    11565   @m68kde~1_108:
00006FBA  0D0A 2020 11566          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
00006FBE  4449 2020 
00006FC2  2020 2020 
00006FC6  2020 20   
00006FC9  2020 2D20 11567          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00006FCD  4469 7361 
00006FD1  7373 656D 
00006FD5  62        
00006FD6  6C65 2050 11568          dc.b      108,101,32,80,114,111,103,114,97,109,0
00006FDA  726F 6772 
00006FDE  616D 00   
                    11569   @m68kde~1_109:
00006FE2  0D0A 2020 11570          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00006FE6  4455 2020 
00006FEA  2020 2020 
00006FEE  2020 20   
00006FF1  2020 2D20 11571          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00006FF5  4475 6D70 
00006FF9  204D 656D 
00006FFD  6F        
00006FFE  7279 2043 11572          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00007002  6F6E 7465 
00007006  6E74 7320 
0000700A  746F 2053 11573          dc.b      116,111,32,83,99,114,101,101,110,0
0000700E  6372 6565 
00007012  6E00      
                    11574   @m68kde~1_110:
00007014  0D0A 2020 11575          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00007018  4520 2020 
0000701C  2020 2020 
00007020  2020 20   
00007023  2020 2D20 11576          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00007027  456E 7465 
0000702B  7220 5374 
0000702F  72        
00007030  696E 6720 11577          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00007034  696E 746F 
00007038  204D 656D 
0000703C  6F72 7900 11578          dc.b      111,114,121,0
                    11579   @m68kde~1_111:
00007040  0D0A 2020 11580          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00007044  4620 2020 
00007048  2020 2020 
0000704C  2020 20   
0000704F  2020 2D20 11581          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00007053  4669 6C6C 
00007057  204D 656D 
0000705B  6F        
0000705C  7279 2077 11582          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00007060  6974 6820 
00007064  4461 7461 
00007068  00        
                    11583   @m68kde~1_112:
0000706A  0D0A 2020 11584          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
0000706E  4720 2020 
00007072  2020 2020 
00007076  2020 20   
00007079  2020 2D20 11585          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
0000707D  476F 2050 
00007081  726F 6772 
00007085  61        
00007086  6D20 5374 11586          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
0000708A  6172 7469 
0000708E  6E67 2061 
00007092  74        
00007093  2041 6464 11587          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00007097  7265 7373 
0000709B  3A20 2425 
0000709F  30        
000070A0  3858 00   11588          dc.b      56,88,0
                    11589   @m68kde~1_113:
000070A4  0D0A 2020 11590          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000070A8  4C20 2020 
000070AC  2020 2020 
000070B0  2020 20   
000070B3  2020 2D20 11591          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000070B7  4C6F 6164 
000070BB  2050 726F 
000070BF  67        
000070C0  7261 6D20 11592          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000070C4  282E 4845 
000070C8  5820 6669 
000070CC  6C        
000070CD  6529 2066 11593          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
000070D1  726F 6D20 
000070D5  4C61 7074 
000070D9  6F        
000070DA  7000      11594          dc.b      112,0
                    11595   @m68kde~1_114:
000070DC  0D0A 2020 11596          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
000070E0  4D20 2020 
000070E4  2020 2020 
000070E8  2020 20   
000070EB  2020 2D20 11597          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
000070EF  4D65 6D6F 
000070F3  7279 2045 
000070F7  78        
000070F8  616D 696E 11598          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
000070FC  6520 616E 
00007100  6420 4368 
00007104  61        
00007105  6E67 6500 11599          dc.b      110,103,101,0
                    11600   @m68kde~1_115:
0000710A  0D0A 2020 11601          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000710E  5020 2020 
00007112  2020 2020 
00007116  2020 20   
00007119  2020 2D20 11602          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
0000711D  5072 6F67 
00007121  7261 6D20 
00007125  46        
00007126  6C61 7368 11603          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
0000712A  204D 656D 
0000712E  6F72 7920 
00007132  7769 7468 11604          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00007136  2055 7365 
0000713A  7220 5072 
0000713E  6F67 7261 11605          dc.b      111,103,114,97,109,0
00007142  6D00      
                    11606   @m68kde~1_116:
00007144  0D0A 2020 11607          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00007148  5220 2020 
0000714C  2020 2020 
00007150  2020 20   
00007153  2020 2D20 11608          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00007157  4469 7370 
0000715B  6C61 7920 
0000715F  36        
00007160  3830 3030 11609          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00007164  2052 6567 
00007168  6973 7465 
0000716C  72        
0000716D  7300      11610          dc.b      115,0
                    11611   @m68kde~1_117:
00007170  0D0A 2020 11612          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00007174  5320 2020 
00007178  2020 2020 
0000717C  2020 20   
0000717F  2020 2D20 11613          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00007183  546F 6767 
00007187  6C65 204F 
0000718B  4E        
0000718C  2F4F 4646 11614          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00007190  2053 696E 
00007194  676C 6520 
00007198  53        
00007199  7465 7020 11615          dc.b      116,101,112,32,77,111,100,101,0
0000719D  4D6F 6465 
000071A1  00        
                    11616   @m68kde~1_118:
000071A2  0D0A 2020 11617          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000071A6  544D 2020 
000071AA  2020 2020 
000071AE  2020 20   
000071B1  2020 2D20 11618          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000071B5  5465 7374 
000071B9  204D 656D 
000071BD  6F        
000071BE  7279 00   11619          dc.b      114,121,0
                    11620   @m68kde~1_119:
000071C2  0D0A 2020 11621          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000071C6  5453 2020 
000071CA  2020 2020 
000071CE  2020 20   
000071D1  2020 2D20 11622          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
000071D5  5465 7374 
000071D9  2053 7769 
000071DD  74        
000071DE  6368 6573 11623          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
000071E2  3A20 5357 
000071E6  372D 3000 
                    11624   @m68kde~1_120:
000071EA  0D0A 2020 11625          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
000071EE  5444 2020 
000071F2  2020 2020 
000071F6  2020 20   
000071F9  2020 2D20 11626          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
000071FD  5465 7374 
00007201  2044 6973 
00007205  70        
00007206  6C61 7973 11627          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
0000720A  3A20 4C45 
0000720E  4473 2061 
00007212  6E        
00007213  6420 372D 11628          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00007217  5365 676D 
0000721B  656E 7400 
                    11629   @m68kde~1_121:
00007220  0D0A 2020 11630          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00007224  5744 2F57 
00007228  532F 5743 
0000722C  2F57 4B   
0000722F  2020 2D20 11631          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00007233  5761 7463 
00007237  6820 506F 
0000723B  696E      
0000723D  743A 2044 11632          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00007241  6973 706C 
00007245  6179 2F53 
00007249  65        
0000724A  742F 436C 11633          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
0000724E  6561 722F 
00007252  4B69 6C6C 
00007256  00        
                    11634   @m68kde~1_122:
00007258  0D0A 2300 11635          dc.b      13,10,35,0
                    11636   @m68kde~1_123:
0000725C  0D0A 5072 11637          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00007260  6F67 7261 
00007264  6D20 5275 
00007268  6E        
00007269  6E69 6E67 11638          dc.b      110,105,110,103,46,46,46,46,46,0
0000726D  2E2E 2E2E 
00007271  2E00      
                    11639   @m68kde~1_124:
00007274  0D0A 5072 11640          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00007278  6573 7320 
0000727C  3C52 4553 
00007280  4554      
00007282  3E20 6275 11641          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00007286  7474 6F6E 
0000728A  203C 4B65 
0000728E  79        
0000728F  303E 206F 11642          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00007293  6E20 4445 
00007297  3120 746F 
0000729B  2073      
0000729D  746F 7000 11643          dc.b      116,111,112,0
                    11644   @m68kde~1_125:
000072A2  0D0A 4572 11645          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000072A6  726F 723A 
000072AA  2050 7265 
000072AE  73        
000072AF  7320 2747 11646          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000072B3  2720 6669 
000072B7  7273 7420 
000072BB  74        
000072BC  6F20 7374 11647          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000072C0  6172 7420 
000072C4  7072 6F67 
000072C8  7261 6D00 11648          dc.b      114,97,109,0
                    11649   @m68kde~1_126:
000072CC  0D0A 5369 11650          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000072D0  6E67 6C65 
000072D4  2053 7465 
000072D8  70        
000072D9  2020 3A5B 11651          dc.b      32,32,58,91,79,78,93,0
000072DD  4F4E 5D00 
                    11652   @m68kde~1_127:
000072E2  0D0A 5072 11653          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
000072E6  6573 7320 
000072EA  2747 2720 
000072EE  74        
000072EF  6F20 5472 11654          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
000072F3  6163 6520 
000072F7  5072 6F67 
000072FB  72        
000072FC  616D 2066 11655          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00007300  726F 6D20 
00007304  6164 6472 
00007308  6573 7320 11656          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
0000730C  2425 582E 
00007310  2E2E 2E2E 
00007314  00        
                    11657   @m68kde~1_128:
00007316  0D0A 5075 11658          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
0000731A  7368 203C 
0000731E  5245 5345 
00007322  5420      
00007324  4275 7474 11659          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00007328  6F6E 3E20 
0000732C  746F 2053 
00007330  74        
00007331  6F70 2E2E 11660          dc.b      111,112,46,46,46,46,46,0
00007335  2E2E 2E00 
                    11661   @m68kde~1_129:
0000733A  0D0A 5369 11662          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000733E  6E67 6C65 
00007342  2053 7465 
00007346  70        
00007347  203A 205B 11663          dc.b      32,58,32,91,79,70,70,93,0
0000734B  4F46 465D 
0000734F  00        
                    11664   @m68kde~1_130:
00007350  0D0A 4272 11665          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007354  6561 6B20 
00007358  506F 696E 
0000735C  74        
0000735D  7320 3A5B 11666          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00007361  456E 6162 
00007365  6C65 645D 
00007369  00        
                    11667   @m68kde~1_131:
0000736A  0D0A 5072 11668          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000736E  6573 7320 
00007372  3C45 5343 
00007376  3E20      
00007378  746F 2052 11669          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000737C  6573 756D 
00007380  6520 5573 
00007384  6572 2050 11670          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00007388  726F 6772 
0000738C  616D 2E2E 
00007390  2E        
00007391  2E2E 00   11671          dc.b      46,46,0
                    11672   @m68kde~1_132:
00007394  0D0A 5369 11673          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007398  6E67 6C65 
0000739C  2053 7465 
000073A0  70        
000073A1  2020 3A5B 11674          dc.b      32,32,58,91,79,70,70,93,0
000073A5  4F46 465D 
000073A9  00        
                    11675   @m68kde~1_133:
000073AA  0D0A 0D0A 11676          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000073AE  5072 6F67 
000073B2  7261 6D20 
000073B6  41        
000073B7  424F 5254 11677          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000073BB  2021 2121 
000073BF  2121 210D 
000073C3  0A00      
                    11678   @m68kde~1_134:
000073C6  2573 0D0A 11679          dc.b      37,115,13,10,0
000073CA  00        
                    11680   @m68kde~1_135:
000073CC  0D0A 0D0A 11681          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000073D0  5072 6F67 
000073D4  7261 6D20 
000073D8  41        
000073D9  424F 5254 11682          dc.b      66,79,82,84,32,33,33,33,33,33,0
000073DD  2021 2121 
000073E1  2121 00   
                    11683   @m68kde~1_136:
000073E4  0D0A 556E 11684          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
000073E8  6861 6E64 
000073EC  6C65 6420 
000073F0  49        
000073F1  6E74 6572 11685          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000073F5  7275 7074 
000073F9  3A20 4952 
000073FD  5125 6420 11686          dc.b      81,37,100,32,33,33,33,33,33,0
00007401  2121 2121 
00007405  2100      
                    11687   @m68kde~1_137:
00007408  4144 4452 11688          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
0000740C  4553 5320 
00007410  4552 524F 
00007414  523A 20   
00007417  3136 206F 11689          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
0000741B  7220 3332 
0000741F  2042 6974 
00007423  2054      
00007425  7261 6E73 11690          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00007429  6665 7220 
0000742D  746F 2F66 
00007431  726F 6D20 11691          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00007435  616E 204F 
00007439  4444 2041 
0000743D  64        
0000743E  6472 6573 11692          dc.b      100,114,101,115,115,46,46,46,46,0
00007442  732E 2E2E 
00007446  2E00      
                    11693   @m68kde~1_138:
00007448  556E 6861 11694          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
0000744C  6E64 6C65 
00007450  6420 5472 
00007454  6170 2021 11695          dc.b      97,112,32,33,33,33,33,33,0
00007458  2121 2121 
0000745C  00        
                    11696   @m68kde~1_139:
0000745E  4255 5320 11697          dc.b      66,85,83,32,69,114,114,111,114,33,0
00007462  4572 726F 
00007466  7221 00   
                    11698   @m68kde~1_140:
0000746A  4144 4452 11699          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000746E  4553 5320 
00007472  4572 726F 
00007476  7221      
00007478  00        11700          dc.b      0
                    11701   @m68kde~1_141:
0000747A  494C 4C45 11702          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000747E  4741 4C20 
00007482  494E 5354 
00007486  5255 43   
00007489  5449 4F4E 11703          dc.b      84,73,79,78,0
0000748D  00        
                    11704   @m68kde~1_142:
0000748E  4449 5649 11705          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00007492  4445 2042 
00007496  5920 5A45 
0000749A  524F 00   
                    11706   @m68kde~1_143:
0000749E  2743 484B 11707          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000074A2  2720 494E 
000074A6  5354 5255 
000074AA  4354 49   
000074AD  4F4E 00   11708          dc.b      79,78,0
                    11709   @m68kde~1_144:
000074B0  5452 4150 11710          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000074B4  5620 494E 
000074B8  5354 5255 
000074BC  4354 49   
000074BF  4F4E 00   11711          dc.b      79,78,0
                    11712   @m68kde~1_145:
000074C2  5052 4956 11713          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000074C6  494C 4547 
000074CA  4520 5649 
000074CE  4F4C 41   
000074D1  5449 4F4E 11714          dc.b      84,73,79,78,0
000074D5  00        
                    11715   @m68kde~1_146:
000074D6  554E 494E 11716          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000074DA  4954 4941 
000074DE  4C49 5345 
000074E2  4420 49   
000074E5  5251 00   11717          dc.b      82,81,0
                    11718   @m68kde~1_147:
000074E8  5350 5552 11719          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
000074EC  494F 5553 
000074F0  2049 5251 
000074F4  00        
                    11720   @m68kde~1_148:
000074F6  0D0A 5374 11721          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000074FA  6172 7420 
000074FE  4164 6472 
00007502  65        
00007503  7373 2069 11722          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00007507  6E20 4D65 
0000750B  6D6F 7279 
0000750F  3A20 00   11723          dc.b      58,32,0
                    11724   @m68kde~1_149:
00007512  0D0A 456E 11725          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00007516  7465 7220 
0000751A  5374 7269 
0000751E  6E        
0000751F  6720 2845 11726          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00007523  5343 2074 
00007527  6F20 656E 
0000752B  64        
0000752C  2920 3A00 11727          dc.b      41,32,58,0
                    11728   @m68kde~1_150:
00007530  5065 7266 11729          dc.b      80,101,114,102,111,114,109,105,110,103,32,77
00007534  6F72 6D69 
00007538  6E67 204D 
0000753C  656D 6F72 11730          dc.b      101,109,111,114,121,32,84,101,115,116,33,0
00007540  7920 5465 
00007544  7374 2100 
                    11731   @m68kde~1_151:
00007548  0D0A 5374 11732          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
0000754C  6172 7420 
00007550  4164 6472 
00007554  65        
00007555  7373 3A20 11733          dc.b      115,115,58,32,0
00007559  00        
                    11734   @m68kde~1_152:
0000755A  0D0A 456E 11735          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
0000755E  6420 4164 
00007562  6472 6573 
00007566  73        
00007567  3A20 00   11736          dc.b      58,32,0
                    11737   @m68kde~1_153:
0000756A  0D0A 4D65 11738          dc.b      13,10,77,101,109,111,114,121,32,84,101,115,116
0000756E  6D6F 7279 
00007572  2054 6573 
00007576  74        
00007577  2046 6169 11739          dc.b      32,70,97,105,108,101,100,33,0
0000757B  6C65 6421 
0000757F  00        
                    11740   @m68kde~1_154:
00007580  0D0A 4164 11741          dc.b      13,10,65,100,100,114,101,115,115,32,61,32,37
00007584  6472 6573 
00007588  7320 3D20 
0000758C  25        
0000758D  7500      11742          dc.b      117,0
                    11743   @m68kde~1_155:
00007590  0D0A 4461 11744          dc.b      13,10,68,97,116,97,32,87,114,105,116,116,101
00007594  7461 2057 
00007598  7269 7474 
0000759C  65        
0000759D  6E20 746F 11745          dc.b      110,32,116,111,32,97,100,100,114,101,115,115
000075A1  2061 6464 
000075A5  7265 7373 
000075A9  203D 2025 11746          dc.b      32,61,32,37,117,0
000075AD  7500      
                    11747   @m68kde~1_156:
000075B0  0D0A 4461 11748          dc.b      13,10,68,97,116,97,32,102,111,117,110,100,32
000075B4  7461 2066 
000075B8  6F75 6E64 
000075BC  20        
000075BD  696E 2061 11749          dc.b      105,110,32,97,100,100,114,101,115,115,32,61
000075C1  6464 7265 
000075C5  7373 203D 
000075C9  2025 7500 11750          dc.b      32,37,117,0
                    11751   @m68kde~1_157:
000075CE  4D65 6D6F 11752          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
000075D2  7279 2054 
000075D6  6573 7420 
000075DA  4661 696C 11753          dc.b      70,97,105,108,101,100,33,0
000075DE  6564 2100 
                    11754   @m68kde~1_158:
000075E2  0D0A 4D65 11755          dc.b      13,10,77,101,109,111,114,121,32,84,101,115,116
000075E6  6D6F 7279 
000075EA  2054 6573 
000075EE  74        
000075EF  2053 7563 11756          dc.b      32,83,117,99,99,101,115,115,102,117,108,0
000075F3  6365 7373 
000075F7  6675 6C00 
                    11757   @m68kde~1_159:
000075FC  4D65 6D6F 11758          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
00007600  7279 2054 
00007604  6573 7420 
00007608  5375 6363 11759          dc.b      83,117,99,99,101,115,115,102,117,108,33,0
0000760C  6573 7366 
00007610  756C 2100 
                    11760   @m68kde~1_160:
00007614  0D0A 6320 11761          dc.b      13,10,99,32,61,32,37,117,32,10,0
00007618  3D20 2575 
0000761C  200A 00   
                    11762   @m68kde~1_161:
00007620  5265 6164 11763          dc.b      82,101,97,100,32,98,97,99,107,32,68,97,116,97
00007624  2062 6163 
00007628  6B20 4461 
0000762C  7461      
0000762E  2028 6173 11764          dc.b      32,40,97,115,32,117,45,99,104,97,114,41,32,61
00007632  2075 2D63 
00007636  6861 7229 
0000763A  203D      
0000763C  2025 7520 11765          dc.b      32,37,117,32,10,0
00007640  0A00      
                    11766   @m68kde~1_162:
00007642  0D0A 4368 11767          dc.b      13,10,67,104,105,112,32,69,114,97,115,101,100
00007646  6970 2045 
0000764A  7261 7365 
0000764E  64        
0000764F  2100      11768          dc.b      33,0
                    11769   @m68kde~1_163:
00007652  4445 312D 11770          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00007656  3638 6B20 
0000765A  4275 6720 
0000765E  5631      
00007660  2E37 3700 11771          dc.b      46,55,55,0
                    11772   @m68kde~1_164:
00007664  436F 7079 11773          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00007668  7269 6768 
0000766C  7420 2843 
00007670  2920 504A 11774          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00007674  2044 6176 
00007678  6965 7320 
0000767C  3230      
0000767E  3136 00   11775          dc.b      49,54,0
                    11776   @m68kde~1_165:
00007682  4D6F 6861 11777          dc.b      77,111,104,97,109,101,100,32,65,98,111,117,101
00007686  6D65 6420 
0000768A  4162 6F75 
0000768E  65        
0000768F  6C6D 6167 11778          dc.b      108,109,97,103,100,0
00007693  6400      
                    11779   @m68kde~1_166:
00007696  5374 6420 11780          dc.b      83,116,100,32,35,58,32,51,56,53,56,53,49,52
0000769A  233A 2033 
0000769E  3835 3835 
000076A2  3134      
000076A4  3800      11781          dc.b      56,0
                    11782   @m68kde~1_167:
000076A6  0D0A 5275 11783          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000076AA  6E6E 696E 
000076AE  672E 2E2E 
000076B2  2E        
000076B3  2E00      11784          dc.b      46,0
                    11785   @m68kde~1_168:
000076B6  5275 6E6E 11786          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000076BA  696E 672E 
000076BE  2E2E 2E2E 
000076C2  00        
                    11787   @m68kde~1_169:
000076C4  0D0A 2573 11788          dc.b      13,10,37,115,0
000076C8  00        
                    11789   @m68kde~1_170:
000076CA  2E42 2000 11790          dc.b      46,66,32,0
                    11791   @m68kde~1_171:
000076CE  2E57 2000 11792          dc.b      46,87,32,0
                    11793   @m68kde~1_172:
000076D2  2E4C 2000 11794          dc.b      46,76,32,0
                    11795   @m68kde~1_173:
000076D6  2324 2558 11796          dc.b      35,36,37,88,0
000076DA  00        
                    11797   @m68kde~1_174:
000076DC  2800      11798          dc.b      40,0
                    11799   @m68kde~1_175:
000076DE  2900      11800          dc.b      41,0
                    11801   @m68kde~1_176:
000076E0  292B 00   11802          dc.b      41,43,0
                    11803   @m68kde~1_177:
000076E4  2D28 00   11804          dc.b      45,40,0
                    11805   @m68kde~1_178:
000076E8  2564 2841 11806          dc.b      37,100,40,65,37,100,41,0
000076EC  2564 2900 
                    11807   @m68kde~1_179:
000076F0  2564 2841 11808          dc.b      37,100,40,65,37,100,44,0
000076F4  2564 2C00 
                    11809   @m68kde~1_180:
000076F8  4400      11810          dc.b      68,0
                    11811   @m68kde~1_181:
000076FA  4100      11812          dc.b      65,0
                    11813   @m68kde~1_182:
000076FC  2564 00   11814          dc.b      37,100,0
                    11815   @m68kde~1_183:
00007700  2E57 2900 11816          dc.b      46,87,41,0
                    11817   @m68kde~1_184:
00007704  2E4C 2900 11818          dc.b      46,76,41,0
                    11819   @m68kde~1_185:
00007708  2425 5800 11820          dc.b      36,37,88,0
                    11821   @m68kde~1_186:
0000770C  2564 2850 11822          dc.b      37,100,40,80,67,41,0
00007710  4329 00   
                    11823   @m68kde~1_187:
00007714  2564 2850 11824          dc.b      37,100,40,80,67,44,0
00007718  432C 00   
                    11825   @m68kde~1_188:
0000771C  2C00      11826          dc.b      44,0
                    11827   @m68kde~1_189:
0000771E  4343 00   11828          dc.b      67,67,0
                    11829   @m68kde~1_190:
00007722  4353 00   11830          dc.b      67,83,0
                    11831   @m68kde~1_191:
00007726  4551 00   11832          dc.b      69,81,0
                    11833   @m68kde~1_192:
0000772A  4745 00   11834          dc.b      71,69,0
                    11835   @m68kde~1_193:
0000772E  4754 00   11836          dc.b      71,84,0
                    11837   @m68kde~1_194:
00007732  4849 00   11838          dc.b      72,73,0
                    11839   @m68kde~1_195:
00007736  4C45 00   11840          dc.b      76,69,0
                    11841   @m68kde~1_196:
0000773A  4C53 00   11842          dc.b      76,83,0
                    11843   @m68kde~1_197:
0000773E  4C54 00   11844          dc.b      76,84,0
                    11845   @m68kde~1_198:
00007742  4D49 00   11846          dc.b      77,73,0
                    11847   @m68kde~1_199:
00007746  4E45 00   11848          dc.b      78,69,0
                    11849   @m68kde~1_200:
0000774A  504C 00   11850          dc.b      80,76,0
                    11851   @m68kde~1_201:
0000774E  5653 00   11852          dc.b      86,83,0
                    11853   @m68kde~1_202:
00007752  5643 00   11854          dc.b      86,67,0
                    11855   @m68kde~1_203:
00007756  5241 00   11856          dc.b      82,65,0
                    11857   @m68kde~1_204:
0000775A  5352 00   11858          dc.b      83,82,0
                    11859   @m68kde~1_205:
0000775E  556E 6B6E 11860          dc.b      85,110,107,110,111,119,110,0
00007762  6F77 6E00 
                    11861   @m68kde~1_206:
00007766  4142 4344 11862          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
0000776A  2044 2564 
0000776E  2C44 2564 
00007772  00        
                    11863   @m68kde~1_207:
00007774  4142 4344 11864          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007778  202D 2841 
0000777C  2564 292C 
00007780  2D28 41   
00007783  2564 2900 11865          dc.b      37,100,41,0
                    11866   @m68kde~1_208:
00007788  4144 4441 11867          dc.b      65,68,68,65,46,87,32,0
0000778C  2E57 2000 
                    11868   @m68kde~1_209:
00007790  4144 4441 11869          dc.b      65,68,68,65,46,76,32,0
00007794  2E4C 2000 
                    11870   @m68kde~1_210:
00007798  2C41 2558 11871          dc.b      44,65,37,88,0
0000779C  00        
                    11872   @m68kde~1_211:
0000779E  4144 4400 11873          dc.b      65,68,68,0
                    11874   @m68kde~1_212:
000077A2  4144 4449 11875          dc.b      65,68,68,73,0
000077A6  00        
                    11876   @m68kde~1_213:
000077A8  414E 4449 11877          dc.b      65,78,68,73,0
000077AC  00        
                    11878   @m68kde~1_214:
000077AE  434D 5049 11879          dc.b      67,77,80,73,0
000077B2  00        
                    11880   @m68kde~1_215:
000077B4  454F 5249 11881          dc.b      69,79,82,73,0
000077B8  00        
                    11882   @m68kde~1_216:
000077BA  4F52 4900 11883          dc.b      79,82,73,0
                    11884   @m68kde~1_217:
000077BE  5355 4249 11885          dc.b      83,85,66,73,0
000077C2  00        
                    11886   @m68kde~1_218:
000077C4  414E 4449 11887          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
000077C8  2023 2425 
000077CC  582C 5352 
000077D0  00        
                    11888   @m68kde~1_219:
000077D2  4144 4451 11889          dc.b      65,68,68,81,0
000077D6  00        
                    11890   @m68kde~1_220:
000077D8  2325 3158 11891          dc.b      35,37,49,88,44,0
000077DC  2C00      
                    11892   @m68kde~1_221:
000077DE  4144 4458 11893          dc.b      65,68,68,88,0
000077E2  00        
                    11894   @m68kde~1_222:
000077E4  4425 582C 11895          dc.b      68,37,88,44,68,37,88,0
000077E8  4425 5800 
                    11896   @m68kde~1_223:
000077EC  2D28 4125 11897          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
000077F0  5829 2C2D 
000077F4  2841 2558 
000077F8  2900      
                    11898   @m68kde~1_224:
000077FA  414E 4400 11899          dc.b      65,78,68,0
                    11900   @m68kde~1_225:
000077FE  414E 4449 11901          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
00007802  2023 2425 
00007806  3258 2C43 
0000780A  4352 00   
                    11902   @m68kde~1_226:
0000780E  4153 4C00 11903          dc.b      65,83,76,0
                    11904   @m68kde~1_227:
00007812  4153 5200 11905          dc.b      65,83,82,0
                    11906   @m68kde~1_228:
00007816  4C53 4C00 11907          dc.b      76,83,76,0
                    11908   @m68kde~1_229:
0000781A  4C53 5200 11909          dc.b      76,83,82,0
                    11910   @m68kde~1_230:
0000781E  524F 4C00 11911          dc.b      82,79,76,0
                    11912   @m68kde~1_231:
00007822  524F 5200 11913          dc.b      82,79,82,0
                    11914   @m68kde~1_232:
00007826  524F 584C 11915          dc.b      82,79,88,76,0
0000782A  00        
                    11916   @m68kde~1_233:
0000782C  524F 5852 11917          dc.b      82,79,88,82,0
00007830  00        
                    11918   @m68kde~1_234:
00007832  2324 2558 11919          dc.b      35,36,37,88,44,68,37,88,0
00007836  2C44 2558 
0000783A  00        
                    11920   @m68kde~1_235:
0000783C  4200      11921          dc.b      66,0
                    11922   @m68kde~1_236:
0000783E  4243 4847 11923          dc.b      66,67,72,71,32,0
00007842  2000      
                    11924   @m68kde~1_237:
00007844  4425 642C 11925          dc.b      68,37,100,44,0
00007848  00        
                    11926   @m68kde~1_238:
0000784A  2324 2558 11927          dc.b      35,36,37,88,44,0
0000784E  2C00      
                    11928   @m68kde~1_239:
00007850  4243 4C52 11929          dc.b      66,67,76,82,32,0
00007854  2000      
                    11930   @m68kde~1_240:
00007856  4253 4554 11931          dc.b      66,83,69,84,32,0
0000785A  2000      
                    11932   @m68kde~1_241:
0000785C  4254 5354 11933          dc.b      66,84,83,84,32,0
00007860  2000      
                    11934   @m68kde~1_242:
00007862  4348 4B20 11935          dc.b      67,72,75,32,0
00007866  00        
                    11936   @m68kde~1_243:
00007868  2C44 2564 11937          dc.b      44,68,37,100,0
0000786C  00        
                    11938   @m68kde~1_244:
0000786E  434C 5200 11939          dc.b      67,76,82,0
                    11940   @m68kde~1_245:
00007872  434D 5041 11941          dc.b      67,77,80,65,46,87,32,0
00007876  2E57 2000 
                    11942   @m68kde~1_246:
0000787A  434D 5041 11943          dc.b      67,77,80,65,46,76,32,0
0000787E  2E4C 2000 
                    11944   @m68kde~1_247:
00007882  2C41 2564 11945          dc.b      44,65,37,100,0
00007886  00        
                    11946   @m68kde~1_248:
00007888  434D 5000 11947          dc.b      67,77,80,0
                    11948   @m68kde~1_249:
0000788C  434D 504D 11949          dc.b      67,77,80,77,0
00007890  00        
                    11950   @m68kde~1_250:
00007892  2841 2564 11951          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
00007896  292B 2C28 
0000789A  4125 6429 
0000789E  2B00      
                    11952   @m68kde~1_251:
000078A0  4442 00   11953          dc.b      68,66,0
                    11954   @m68kde~1_252:
000078A4  4425 642C 11955          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
000078A8  252B 6428 
000078AC  5043 2920 
000078B0  746F      
000078B2  2041 6464 11956          dc.b      32,65,100,100,114,58,36,37,88,0
000078B6  723A 2425 
000078BA  5800      
                    11957   @m68kde~1_253:
000078BC  4449 5653 11958          dc.b      68,73,86,83,32,0
000078C0  2000      
                    11959   @m68kde~1_254:
000078C2  4449 5655 11960          dc.b      68,73,86,85,32,0
000078C6  2000      
                    11961   @m68kde~1_255:
000078C8  454F 5200 11962          dc.b      69,79,82,0
                    11963   @m68kde~1_256:
000078CC  454F 5249 11964          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
000078D0  2023 2425 
000078D4  3258 2C43 
000078D8  4352 00   
                    11965   @m68kde~1_257:
000078DC  454F 5249 11966          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
000078E0  2023 2425 
000078E4  582C 5352 
000078E8  00        
                    11967   @m68kde~1_258:
000078EA  4558 4720 11968          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
000078EE  4425 642C 
000078F2  4425 6400 
                    11969   @m68kde~1_259:
000078F6  4558 4720 11970          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
000078FA  4125 642C 
000078FE  4125 6400 
                    11971   @m68kde~1_260:
00007902  4558 4720 11972          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
00007906  4425 642C 
0000790A  4125 6400 
                    11973   @m68kde~1_261:
0000790E  4558 5400 11974          dc.b      69,88,84,0
                    11975   @m68kde~1_262:
00007912  494C 4C45 11976          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
00007916  4741 4C20 
0000791A  2824 3441 
0000791E  4643 29   
00007921  00        11977          dc.b      0
                    11978   @m68kde~1_263:
00007922  4A4D 5020 11979          dc.b      74,77,80,32,0
00007926  00        
                    11980   @m68kde~1_264:
00007928  4A53 5220 11981          dc.b      74,83,82,32,0
0000792C  00        
                    11982   @m68kde~1_265:
0000792E  4C45 4120 11983          dc.b      76,69,65,32,0
00007932  00        
                    11984   @m68kde~1_266:
00007934  4C49 4E4B 11985          dc.b      76,73,78,75,32,0
00007938  2000      
                    11986   @m68kde~1_267:
0000793A  4125 642C 11987          dc.b      65,37,100,44,35,37,100,0
0000793E  2325 6400 
                    11988   @m68kde~1_268:
00007942  4D4F 5645 11989          dc.b      77,79,86,69,46,66,32,0
00007946  2E42 2000 
                    11990   @m68kde~1_269:
0000794A  4D4F 5645 11991          dc.b      77,79,86,69,46,76,32,0
0000794E  2E4C 2000 
                    11992   @m68kde~1_270:
00007952  4D4F 5645 11993          dc.b      77,79,86,69,46,87,32,0
00007956  2E57 2000 
                    11994   @m68kde~1_271:
0000795A  4D4F 5645 11995          dc.b      77,79,86,69,32,0
0000795E  2000      
                    11996   @m68kde~1_272:
00007960  2C43 4352 11997          dc.b      44,67,67,82,0
00007964  00        
                    11998   @m68kde~1_273:
00007966  4D4F 5645 11999          dc.b      77,79,86,69,32,83,82,44,0
0000796A  2053 522C 
0000796E  00        
                    12000   @m68kde~1_274:
00007970  2C53 5200 12001          dc.b      44,83,82,0
                    12002   @m68kde~1_275:
00007974  4D4F 5645 12003          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
00007978  2055 5350 
0000797C  2C41 2564 
00007980  00        
                    12004   @m68kde~1_276:
00007982  4D4F 5645 12005          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
00007986  2041 2564 
0000798A  2C55 5350 
0000798E  00        
                    12006   @m68kde~1_277:
00007990  4D4F 5645 12007          dc.b      77,79,86,69,77,0
00007994  4D00      
                    12008   @m68kde~1_278:
00007996  4425 6400 12009          dc.b      68,37,100,0
                    12010   @m68kde~1_279:
0000799A  2F44 2564 12011          dc.b      47,68,37,100,0
0000799E  00        
                    12012   @m68kde~1_280:
000079A0  4125 6400 12013          dc.b      65,37,100,0
                    12014   @m68kde~1_281:
000079A4  2F41 2564 12015          dc.b      47,65,37,100,0
000079A8  00        
                    12016   @m68kde~1_282:
000079AA  4D4F 5645 12017          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
000079AE  502E 5720 
000079B2  2425 5828 
000079B6  4125 64   
000079B9  292C 4425 12018          dc.b      41,44,68,37,100,0
000079BD  6400      
                    12019   @m68kde~1_283:
000079C0  4D4F 5645 12020          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
000079C4  502E 4C20 
000079C8  2425 5828 
000079CC  4125 64   
000079CF  292C 4425 12021          dc.b      41,44,68,37,100,0
000079D3  6400      
                    12022   @m68kde~1_284:
000079D6  4D4F 5645 12023          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
000079DA  502E 5720 
000079DE  4425 642C 
000079E2  2425 58   
000079E5  2841 2564 12024          dc.b      40,65,37,100,41,0
000079E9  2900      
                    12025   @m68kde~1_285:
000079EC  4D4F 5645 12026          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
000079F0  502E 4C20 
000079F4  4425 642C 
000079F8  2425 58   
000079FB  2841 2564 12027          dc.b      40,65,37,100,41,0
000079FF  2900      
                    12028   @m68kde~1_286:
00007A02  4D4F 5645 12029          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
00007A06  5120 2324 
00007A0A  2558 2C44 
00007A0E  2564 00   
                    12030   @m68kde~1_287:
00007A12  4D55 4C53 12031          dc.b      77,85,76,83,32,0
00007A16  2000      
                    12032   @m68kde~1_288:
00007A18  4D55 4C55 12033          dc.b      77,85,76,85,32,0
00007A1C  2000      
                    12034   @m68kde~1_289:
00007A1E  4E42 4344 12035          dc.b      78,66,67,68,32,0
00007A22  2000      
                    12036   @m68kde~1_290:
00007A24  4E45 4700 12037          dc.b      78,69,71,0
                    12038   @m68kde~1_291:
00007A28  4E45 4758 12039          dc.b      78,69,71,88,0
00007A2C  00        
                    12040   @m68kde~1_292:
00007A2E  4E4F 5000 12041          dc.b      78,79,80,0
                    12042   @m68kde~1_293:
00007A32  4E4F 5400 12043          dc.b      78,79,84,0
                    12044   @m68kde~1_294:
00007A36  4F52 00   12045          dc.b      79,82,0
                    12046   @m68kde~1_295:
00007A3A  4F52 4920 12047          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
00007A3E  2324 2532 
00007A42  582C 4343 
00007A46  5200      
                    12048   @m68kde~1_296:
00007A48  4F52 4920 12049          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
00007A4C  2023 2425 
00007A50  582C 5352 
00007A54  00        
                    12050   @m68kde~1_297:
00007A56  5045 4120 12051          dc.b      80,69,65,32,0
00007A5A  00        
                    12052   @m68kde~1_298:
00007A5C  5245 5345 12053          dc.b      82,69,83,69,84,0
00007A60  5400      
                    12054   @m68kde~1_299:
00007A62  5254 4500 12055          dc.b      82,84,69,0
                    12056   @m68kde~1_300:
00007A66  5254 5200 12057          dc.b      82,84,82,0
                    12058   @m68kde~1_301:
00007A6A  5254 5300 12059          dc.b      82,84,83,0
                    12060   @m68kde~1_302:
00007A6E  5354 4F50 12061          dc.b      83,84,79,80,32,35,36,37,88,0
00007A72  2023 2425 
00007A76  5800      
                    12062   @m68kde~1_303:
00007A78  5342 4344 12063          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
00007A7C  2044 2564 
00007A80  2C44 2564 
00007A84  00        
                    12064   @m68kde~1_304:
00007A86  5342 4344 12065          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007A8A  202D 2841 
00007A8E  2564 292C 
00007A92  2D28 41   
00007A95  2564 2900 12066          dc.b      37,100,41,0
                    12067   @m68kde~1_305:
00007A9A  5300      12068          dc.b      83,0
                    12069   @m68kde~1_306:
00007A9C  5355 4241 12070          dc.b      83,85,66,65,46,87,32,0
00007AA0  2E57 2000 
                    12071   @m68kde~1_307:
00007AA4  5355 4241 12072          dc.b      83,85,66,65,46,76,32,0
00007AA8  2E4C 2000 
                    12073   @m68kde~1_308:
00007AAC  5355 4200 12074          dc.b      83,85,66,0
                    12075   @m68kde~1_309:
00007AB0  5355 4251 12076          dc.b      83,85,66,81,0
00007AB4  00        
                    12077   @m68kde~1_310:
00007AB6  5355 4258 12078          dc.b      83,85,66,88,0
00007ABA  00        
                    12079   @m68kde~1_311:
00007ABC  4425 3158 12080          dc.b      68,37,49,88,44,68,37,49,88,0
00007AC0  2C44 2531 
00007AC4  5800      
                    12081   @m68kde~1_312:
00007AC6  2D28 4125 12082          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
00007ACA  3158 292C 
00007ACE  2D28 4125 
00007AD2  3158 29   
00007AD5  00        12083          dc.b      0
                    12084   @m68kde~1_313:
00007AD6  5357 4150 12085          dc.b      83,87,65,80,32,68,37,100,0
00007ADA  2044 2564 
00007ADE  00        
                    12086   @m68kde~1_314:
00007AE0  5441 5320 12087          dc.b      84,65,83,32,0
00007AE4  00        
                    12088   @m68kde~1_315:
00007AE6  5452 4150 12089          dc.b      84,82,65,80,32,35,37,100,0
00007AEA  2023 2564 
00007AEE  00        
                    12090   @m68kde~1_316:
00007AF0  5452 4150 12091          dc.b      84,82,65,80,86,0
00007AF4  5600      
                    12092   @m68kde~1_317:
00007AF6  5453 5400 12093          dc.b      84,83,84,0
                    12094   @m68kde~1_318:
00007AFA  554E 4C4B 12095          dc.b      85,78,76,75,32,65,37,100,0
00007AFE  2041 2564 
00007B02  00        
                    12096   @itoa_1:
00007B04  2D32 3134 12097          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00007B08  3734 3833 
00007B0C  3634 3800 
                    12098   __ctype:
00007B10  0040 4040 12099          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00007B14  4040 4040 
00007B18  4040 5050 
00007B1C  5050 50   
00007B1F  4040 4040 12100          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00007B23  4040 4040 
00007B27  4040 4040 
00007B2B  4040 40   
00007B2E  4040 40D0 12101          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00007B32  A0A0 A0A0 
00007B36  A0A0 A0A0 
00007B3A  A0A0 A0A0 12102          dc.b      160,160,160,160,160,160,160,140,140,140,140
00007B3E  A0A0 A08C 
00007B42  8C8C 8C   
00007B45  8C8C 8C8C 12103          dc.b      140,140,140,140,140,140,160,160,160,160,160
00007B49  8C8C A0A0 
00007B4D  A0A0 A0   
00007B50  A0A0 8A8A 12104          dc.b      160,160,138,138,138,138,138,138,130,130,130
00007B54  8A8A 8A8A 
00007B58  8282 82   
00007B5B  8282 8282 12105          dc.b      130,130,130,130,130,130,130,130,130,130,130
00007B5F  8282 8282 
00007B63  8282 82   
00007B66  8282 8282 12106          dc.b      130,130,130,130,130,130,160,160,160,160,160
00007B6A  8282 A0A0 
00007B6E  A0A0 A0   
00007B71  A089 8989 12107          dc.b      160,137,137,137,137,137,137,129,129,129,129
00007B75  8989 8981 
00007B79  8181 81   
00007B7C  8181 8181 12108          dc.b      129,129,129,129,129,129,129,129,129,129,129
00007B80  8181 8181 
00007B84  8181 81   
00007B87  8181 8181 12109          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00007B8B  81A0 A0A0 
00007B8F  A040 0000 
00007B93  00        
00007B94  0000 0000 12110          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007B98  0000 0000 
00007B9C  0000 0000 
00007BA0  0000 0000 
00007BA4  0000 0000 
00007BA8  0000      
00007BAA  0000 0000 12111          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007BAE  0000 0000 
00007BB2  0000 0000 
00007BB6  0000 0000 
00007BBA  0000 0000 
00007BBE  0000      
00007BC0  0000 0000 12112          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007BC4  0000 0000 
00007BC8  0000 0000 
00007BCC  0000 0000 
00007BD0  0000 0000 
00007BD4  0000      
00007BD6  0000 0000 12113          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007BDA  0000 0000 
00007BDE  0000 0000 
00007BE2  0000 0000 
00007BE6  0000 0000 
00007BEA  0000      
00007BEC  0000 0000 12114          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007BF0  0000 0000 
00007BF4  0000 0000 
00007BF8  0000 0000 
00007BFC  0000 0000 
00007C00  0000      
00007C02  0000 0000 12115          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007C06  0000 0000 
00007C0A  0000 0000 
00007C0E  0000 00   
                    12116          section   data
00007C12            12117                   align
          0000 7C12 12118   DataStart       equ       *
                    12119   
                    12120   *********************************************************************************************************
                    12121   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    12122   * to ram as part of the CStart routine in this file
                    12123   *********************************************************************************************************
                    12124   
                    12125          section   bss
00007C12            12126                   align
          0000 7C12 12127   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    12128   
                    12129   *********************************************************************************************************
                    12130   * Section for Uninitialised Data held in ROM as constants
                    12131   *********************************************************************************************************
                    12132   
0B000000            12133                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0000 12134   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    12135   
                    12136   
0B000000            12137   bss             org       bss
                    12138   
                    12139   *********************************************************************************************************
                    12140   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    12141   * install the exception handler using the C function InstallExceptionHandler()
                    12142   *********************************************************************************************************
                    12143   
                    12144   
                    12145   
0B000000            12146   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            12147   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            12148   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            12149   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            12150   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            12151   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            12152   VCheck           ds.l    1      ditto
0B00001C            12153   VTrapV           ds.l    1      ditto
0B000020            12154   VPrivilege       ds.l    1      ditto
0B000024            12155   VTrace           ds.l    1
0B000028            12156   VLine1010emul    ds.l    1
0B00002C            12157   VLine1111emul    ds.l    1
0B000030            12158   VUnassigned1     ds.l    1
0B000034            12159   VUnassigned2     ds.l    1
0B000038            12160   VUnassigned3     ds.l    1
0B00003C            12161   VUninit_IRQ      ds.l    1
0B000040            12162   VUnassigned4     ds.l    1
0B000044            12163   VUnassigned5     ds.l    1
0B000048            12164   VUnassigned6     ds.l    1
0B00004C            12165   VUnassigned7     ds.l    1
0B000050            12166   VUnassigned8     ds.l    1
0B000054            12167   VUnassigned9     ds.l    1
0B000058            12168   VUnassigned10    ds.l    1
0B00005C            12169   VUnassigned11    ds.l    1
0B000060            12170   VSpuriousIRQ     ds.l    1
                    12171   
                    12172   * Interrupt handlers Vector 25-31
0B000064            12173   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            12174   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            12175   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            12176   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            12177   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            12178   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            12179   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    12180   
                    12181   * Trap Handler vectors 32-47
0B000080            12182   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            12183   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            12184   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            12185   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            12186   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            12187   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            12188   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            12189   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            12190   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            12191   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            12192   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            12193   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            12194   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            12195   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            12196   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            12197   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    12198   
                    12199   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    12200   
                    12201   ***********************************************************************************************************
                    12202   * Other Variables
                    12203   ***********************************************************************************************************
                    12204   *__DebugA5       ds.l    1
                    12205   *__UserA5        ds.l    1
                    12206   
                    12207   ***********************************************************************************************************
0B0000C0            12208   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            12209   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            12210   __heap:         ds.l    0       ; pointers for malloc functions
                    12211   
                    12212   *__himem:       ds.l    himem            ; highest memory location + 1
                    12213   *__stklen:      ds.l    stklen           ; default stack size
                    12214   
                    12215   *********************************************************************************************************
                    12216   * Section for Heap
                    12217   *********************************************************************************************************
                    12218   
                    12219   _i:
0B0000C4            12220          ds.b      4
                    12221   _x:
0B0000C8            12222          ds.b      4
                    12223   _y:
0B0000CC            12224          ds.b      4
                    12225   _z:
0B0000D0            12226          ds.b      4
                    12227   _PortA_Count:
0B0000D4            12228          ds.b      4
                    12229   _Trace:
0B0000D8            12230          ds.b      4
                    12231   _GoFlag:
0B0000DC            12232          ds.b      4
                    12233   _Echo:
0B0000E0            12234          ds.b      4
                    12235   _d0:
0B0000E4            12236          ds.b      4
                    12237   _d1:
0B0000E8            12238          ds.b      4
                    12239   _d2:
0B0000EC            12240          ds.b      4
                    12241   _d3:
0B0000F0            12242          ds.b      4
                    12243   _d4:
0B0000F4            12244          ds.b      4
                    12245   _d5:
0B0000F8            12246          ds.b      4
                    12247   _d6:
0B0000FC            12248          ds.b      4
                    12249   _d7:
0B000100            12250          ds.b      4
                    12251   _a0:
0B000104            12252          ds.b      4
                    12253   _a1:
0B000108            12254          ds.b      4
                    12255   _a2:
0B00010C            12256          ds.b      4
                    12257   _a3:
0B000110            12258          ds.b      4
                    12259   _a4:
0B000114            12260          ds.b      4
                    12261   _a5:
0B000118            12262          ds.b      4
                    12263   _a6:
0B00011C            12264          ds.b      4
                    12265   _PC:
0B000120            12266          ds.b      4
                    12267   _SSP:
0B000124            12268          ds.b      4
                    12269   _USP:
0B000128            12270          ds.b      4
                    12271   _SR:
0B00012C            12272          ds.b      2
                    12273   _BreakPointAddress:
0B00012E            12274          ds.b      32
                    12275   _BreakPointInstruction:
0B00014E            12276          ds.b      16
                    12277   _BreakPointSetOrCleared:
0B00015E            12278          ds.b      32
                    12279   _InstructionSize:
0B00017E            12280          ds.b      4
                    12281   _WatchPointAddress:
0B000182            12282          ds.b      32
                    12283   _WatchPointSetOrCleared:
0B0001A2            12284          ds.b      32
                    12285   _WatchPointString:
0B0001C2            12286          ds.b      800
                    12287   _Instruction:
0B0004E2            12288          ds.b      100
                    12289   _TempString:
0B000546            12290          ds.b      100
                    12291          section   heap
0B0005AA            12292                   align
          0B00 05AA 12293   bssEnd          equ *                   end of storage space for unitialised variables
                    12294   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 05AA 12295   heap   equ       *
0B0005AA            12296                    align
          0000 0000

Assembly errors: 0
